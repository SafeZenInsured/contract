{"id":"e95777a3bfdfed56126d7e71f940bfcb","_format":"hh-sol-build-info-1","solcVersion":"0.8.16","solcLongVersion":"0.8.16+commit.07a7930e","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20Upgradeable.sol\";\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"contracts/BaseUpgradeablePausable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"./Constants.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nerror BaseUpgradeablePausable__ZeroAddressError();\n\ncontract BaseUpgradeablePausable is \n    Initializable, \n    PausableUpgradeable, \n    AccessControlUpgradeable,\n    ReentrancyGuardUpgradeable \n{\n\n    modifier onlyAdmin() {\n        require(isAdmin(), \"Must have admin role to perform this action.\");\n        _;\n    }\n\n    function __BaseUpgradeablePausable_init(address owner) public onlyInitializing() {\n        if(owner == address(0)) {\n            revert BaseUpgradeablePausable__ZeroAddressError();\n        }\n        __Pausable_init();\n        __AccessControl_init();\n        __ReentrancyGuard_init();\n\n        _grantRole(Constants.getAdminRole(), owner);\n        _grantRole(Constants.getPauserRole(), owner);\n\n        _setRoleAdmin(Constants.getPauserRole(), Constants.getAdminRole());\n        _setRoleAdmin(Constants.getAdminRole(), Constants.getAdminRole());\n    }\n\n    function isAdmin() public view returns (bool) {\n        return hasRole(Constants.getAdminRole(), _msgSender());\n    }\n\n  \n}"},"contracts/Constants.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.16;\n\nlibrary Constants {\n\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    function getAdminRole() internal pure returns (bytes32) {\n        return ADMIN_ROLE;\n    }\n\n    function getPauserRole() internal pure returns (bytes32) {\n        return PAUSER_ROLE;\n    }\n}"},"contracts/core/buySell/BuyGENZ.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.16;\n\n/// @title Buy GENZ Contract\n/// @author Anshik Bansal <anshik@safezen.finance>\n\n/*\n\n100M GENZ tokens will be minted in supply, fixed capped.\nInitial round tokens will be raised at $10M valuation for a sale of /\n/ 2M token to raise 200k.\nToken sale will be made live on multiple EVM chains including Ethereum, Polygon, Avalanche,\nArbitrum and Optimism.\nToken sale for now will not be made on BNB chain.\n400k tokens will be offered for sale on each of the EVM chain to raise 40k on each of the chain.\n\nGENZ Token Utilities:\n    1. Similar to traditional markets, earn dividend just by holding GENZ token every second.\n    2. Similar to traditional markets, there is no need to stake GENZ tokens to ripe the dividend rewards.\n    3. It will derive its value from the project's operation and profit generation.\n    4. It will be used to reward the bug bounty hunters.\n    5. It will also be awarded during the claim governance, so as users participating in the /\n       / claim settlement process will earn free GENZ tokens as participation rewards.\n    6. At the same time, GSZT tokens will be awarded to participants to close insured user's  /\n       / pay-as-you-go insurance streams after the insurance period gets over.\n\n100M GENZ token supply will be as:\n    - 20M on each of the following chain: Ethereum, Polygon, Avalanche, Arbitrum and Optimism.\n    - In the later stages, when we'll integrate more chains, then GENZ tokens will be burned /\n      accordingly to ensure capped 100M GENZ token supply. \n\n*/\n\n// Importing interfaces\nimport \"./../../interfaces/IBuyGENZ.sol\";\nimport \"./../../interfaces/IERC20Extended.sol\";\nimport \"./../../interfaces/IGlobalPauseOperation.sol\";\n\n/// Importing required libraries\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\n// Importing contracts\nimport \"./../../BaseUpgradeablePausable.sol\";\n\n/// Report any bug or issues at:\n/// @custom:security-contact anshik@safezen.finance\ncontract BuyGENZ is IBuyGENZ, BaseUpgradeablePausable {\n\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using SafeERC20Upgradeable for IERC20PermitUpgradeable;\n\n    /// _tokenCounter: GENZ ERC20 tokens in circulation\n    /// _currVersion: \n    uint256 private _tokenCounter;\n    uint256 private _minWithdrawalPeriod;\n    uint256 private constant WITHDRAWAL_PERIOD_MULTIPLIER = 8 hours;\n    uint256 private _commonRatio;\n    uint256 private _baseSalePrice;\n    uint256 private _basePriceWithDec;\n\n    /// _tokenDAI: DAI ERC20 token\n    /// _tokenUSDC: USDC ERC20 token\n    /// _globalPauseOperation: Global Pause Operations Contract\n    IERC20Upgradeable private immutable _tokenDAI;\n    IERC20Upgradeable private immutable _tokenGENZ;\n    IGlobalPauseOperation private _globalPauseOperation;\n    IERC20PermitUpgradeable private immutable _tokenPermitDAI;\n\n    struct StakeInformation {\n        bool hasStaked;\n        uint256 amount;\n        uint256 minWithdrawTime;\n    }\n\n    mapping(address => StakeInformation) private stakingInformation;\n    \n    modifier ifNotPaused() {\n        require(\n            (paused() != true) && \n            (_globalPauseOperation.isPaused() != true));\n        _;\n    }\n\n    /// @dev initializing _tokenDAI\n    /// @param tokenDAI: address of the DAI token\n    /// @custom:oz-upgrades-unsafe-allow-constructor\n    constructor(uint256 value, uint256 decimals, address tokenDAI, address tokenGENZ) {\n        _tokenDAI = IERC20Upgradeable(tokenDAI); \n        _tokenGENZ = IERC20Upgradeable(tokenGENZ); \n        _tokenPermitDAI = IERC20PermitUpgradeable(tokenDAI);\n        _commonRatio = (value * 10e17) / (10 ** decimals); // Immutable\n    }\n\n    /// @dev one time function to initialize the contract\n    /// @param pauseOperationAddress: address of the Global Pause Operation contract\n    function initialize(\n        address pauseOperationAddress\n    ) external initializer {\n        _baseSalePrice = 1;\n        _basePriceWithDec = 1e18;\n        _globalPauseOperation = IGlobalPauseOperation(pauseOperationAddress);\n        __BaseUpgradeablePausable_init(_msgSender());\n    }\n\n    function updateBaseSalePrice(uint256 tokenPrice) external onlyAdmin {\n        _baseSalePrice = tokenPrice;\n        _basePriceWithDec = tokenPrice * 1e18;\n    }\n\n    function updateMinimumWithdrawalPeriod(uint256 valueInDays) external onlyAdmin {\n        _minWithdrawalPeriod = valueInDays * 1 days;\n    }\n\n    function pause() external onlyAdmin {\n        _pause();\n    }\n\n    function unpause() external onlyAdmin {\n        _unpause();\n    }\n\n    /// @dev \n    /// @param value: amount of SZT tokens user wishes to purchase\n    function buyGENZToken(\n        uint256 value,\n        uint deadline, \n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external nonReentrant ifNotPaused returns(bool) {\n        if (value < 1e18) {\n            revert BuySellGENZ__LowAmountError();\n        }\n        _minWithdrawalPeriod += WITHDRAWAL_PERIOD_MULTIPLIER;\n        (/* uint256 amountPerToken */, uint256 amountToBePaid) = calculatePriceGENZ(\n            _tokenCounter, _tokenCounter + value);\n        if (amountToBePaid > _tokenDAI.balanceOf(_msgSender())) {\n            revert BuySellGENZ__InsufficientBalanceError();\n        }\n        StakeInformation storage userStakeInformation = stakingInformation[_msgSender()];\n        userStakeInformation.amount += value;\n        userStakeInformation.hasStaked = true;\n        userStakeInformation.minWithdrawTime = block.timestamp + _minWithdrawalPeriod;\n        _tokenPermitDAI.safePermit(_msgSender(), address(this), amountToBePaid, deadline, v, r, s);\n        _tokenDAI.safeTransferFrom(_msgSender(), address(this), amountToBePaid);\n        return true;\n    }\n\n    function calculatePriceGENZ(\n        uint256 issuedTokensGENZ, \n        uint256 requiredTokens\n    ) public view returns(uint256, uint256) {\n        uint256 commonRatioGENZ = _commonRatio * _baseSalePrice;\n        uint256 tokenDifference = (issuedTokensGENZ + (requiredTokens - 1e18));\n        uint256 averageDiff = ((commonRatioGENZ * tokenDifference) / 2) / 1e18;\n        uint256 amountPerToken = _basePriceWithDec + averageDiff;\n        uint256 amountToBePaid = (amountPerToken * (requiredTokens - issuedTokensGENZ))/1e18;\n        return (amountPerToken, amountToBePaid);\n    }\n\n    error BuyGENZ__TransactionFailedError();\n    function withdrawStakedToken() external {\n        if (!stakingInformation[_msgSender()].hasStaked) {\n            revert BuyGENZ__TransactionFailedError();\n        }\n        if (stakingInformation[_msgSender()].minWithdrawTime > block.timestamp ) {\n            revert BuyGENZ__TransactionFailedError();\n        }\n        uint256 amountStaked = stakingInformation[_msgSender()].amount;\n        stakingInformation[_msgSender()].hasStaked = false;\n        stakingInformation[_msgSender()].amount = 0;\n        _tokenGENZ.safeTransfer(_msgSender(), amountStaked);\n    }\n\n    function getCurrentTokenPrice() public view returns(uint256) {\n        (uint256 amountPerToken, /*uint256 amountToBePaid*/) = calculatePriceGENZ(\n            _tokenCounter, _tokenCounter + 1e18);\n        return amountPerToken;\n    }\n\n    /// @dev returns the token in circulation\n    function getGENZTokenCount() public view returns(uint256) {\n        return _tokenCounter;\n    }\n}"},"contracts/core/payAsYouGo/ConstantFlowAgreement.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.16;\n\n/// @title Constant Flow Agreement Contract\n/// @author Anshik Bansal <anshik@safezen.finance>\n\n/// Importing required interfaces\nimport \"./../../interfaces/ICFA.sol\";\nimport \"./../../interfaces/IERC20Extended.sol\";\nimport \"./../../interfaces/IInsuranceRegistry.sol\";\n\n/// Importing required libraries\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\n/// Importing required contracts\nimport \"./../../BaseUpgradeablePausable.sol\";\n\n/// Report any bug or issues at:\n/// @custom:security-contact anshik@safezen.finance\n\ncontract ConstantFlowAgreement is ICFA, BaseUpgradeablePausable {\n    /// _initVersion: counter to initialize the init one-time function, max value can be 1.\n    /// _categoriesCount: counter to keep track of the available insurance categories.\n    /// _maxInsuredDays: the maximum insurance period [in days], 90 days will be kept as default.\n    /// _startWaitingTime: insurance activation waiting period, 4-8 hours will be kept as default.\n    /// _minimumInsurancePeriod: the minimum insurance period, 120 minutes will be kept as default.\n    uint256 private _categoriesCount;\n    uint256 private _maxInsuredDays;\n    uint256 private _startWaitingTime;\n    uint256 private _minimumInsurancePeriod;\n\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using SafeERC20Upgradeable for IERC20PermitUpgradeable;\n\n    /// _tokenDAI: DAI ERC20 token\n    /// _sztDAI: sztDAI ERC20 token\n    /// _insuranceRegistry: Insurance Registry Contract\n    IERC20Upgradeable private _tokenDAI;\n    IERC20PermitUpgradeable private _tokenPermitDAI;\n    IERC20Extended private _sztDAI;\n    IInsuranceRegistry private _insuranceRegistry;\n\n    /// @dev collects user information for particular insurance\n    /// @param startTime: insurance activation time\n    /// @param validTill: insurance validation till\n    /// @param insuredAmount: maximum insurance amount covered\n    /// @param insuranceFlowRate: amount to be charged per second [insurance flow rate * amount to be insured]\n    /// @param insuranceCost: expected insurance premium cost for the registered duration\n    /// @param registrationTime: insurance registration time\n    /// @param isValid: checks whether user is an active insurance holder or not\n    struct UserInsuranceInfo {\n        uint256 startTime;\n        uint256 validTill;\n        uint256 insuredAmount;\n        uint256 registrationTime;\n        uint256 insuranceFlowRate;\n        uint256 insuranceCost;\n        bool isValid;\n    }\n\n    /// @dev collects user global insurance information\n    /// @param validTill: expected insurance valid period\n    /// @param insuranceStreamRate: global insurance flow rate per second\n    /// @param globalInsuranceCost: expected global insurance premium cost for the registered duration\n    struct UserGlobalInsuranceInfo {\n        uint256 validTill;\n        uint256 insuranceStreamRate;\n        uint256 globalInsuranceCost;\n    }\n\n    /// @dev mapping to store UserGlobalInsuranceInfo\n    /// maps: userAddress => UserGlobalInsuranceInfo\n    mapping(address => UserGlobalInsuranceInfo) private usersGlobalInsuranceInfo;\n\n    /// @dev mapping to store UserInsurance Info\n    /// maps: userAddress => categoryID => subCategoryID => UserInsuranceInfo\n    mapping(address => mapping(uint256 => mapping(uint256 => UserInsuranceInfo))) private usersInsuranceInfo;\n\n    /// @dev one-time function aims to initialize the contract\n    /// @dev MUST revert if called more than once.\n    /// @param tokenDAIaddress: address of the DAI ERC20 token\n    /// @param sztDAIAddress address of the sztDAI ERC20 token\n    /// @param insuranceRegistryCA: address of the Protocol Registry contract\n    /// @param minimumInsurancePeriod: minimum insurance period\n    /// @return bool: true if the function executues successfully else false.\n    /// [PRODUCTION TODO: _startWaitingTime =  startWaitingTime * 1 hours;]\n    /// [PRODUCTION TODO: _maxInsuredDays = maxInsuredDays * 1 days;]\n    function initialize(\n        address tokenDAIaddress,\n        address sztDAIAddress,\n        address insuranceRegistryCA,\n        uint256 minimumInsurancePeriod,\n        uint256 startWaitingTime,\n        uint256 maxInsuredDays\n    ) external initializer returns(bool) {\n        _categoriesCount = 0;\n        _maxInsuredDays = maxInsuredDays * 1 minutes;\n        _startWaitingTime = startWaitingTime * 1 minutes; \n        _minimumInsurancePeriod = minimumInsurancePeriod * 1 minutes;\n        _tokenDAI = IERC20Upgradeable(tokenDAIaddress);\n        _tokenPermitDAI = IERC20PermitUpgradeable(tokenDAIaddress);\n        _sztDAI = IERC20Extended(sztDAIAddress);\n        _insuranceRegistry = IInsuranceRegistry(insuranceRegistryCA);\n        __BaseUpgradeablePausable_init(_msgSender());\n        return true;\n    }\n\n    function pause() external onlyAdmin {\n        _pause();\n    }\n\n    function unpause() external onlyAdmin {\n        _unpause();\n    }\n\n    /// @dev this function aims to updates minimum insurance period\n    /// @param timeInMinutes: 120 minutes will be kept as default.\n    function updateMinimumInsurancePeriod(uint256 timeInMinutes) external onlyAdmin {\n        _minimumInsurancePeriod = timeInMinutes * 1 minutes;\n        emit UpdatedMinimumInsurancePeriod();\n    }\n\n    /// @dev this function aims to update the insurance activation waiting period\n    /// @param timeInHours: 4-8 hours will be kept as default. \n    function updateStartWaitingTime(uint256 timeInHours) external onlyAdmin {\n        _startWaitingTime = timeInHours * 1 hours;\n        emit UpdatedStartWaitingTime();\n    }\n\n    /// @dev this function aims to update the maximum insurance period\n    /// @param timeInDays: 90 days will be kept as default.\n    function updateMaxInsuredDays(uint256 timeInDays) external onlyAdmin {\n        _maxInsuredDays = timeInDays * 1 days;\n        emit UpdatedMaxInsuredDays();\n    }\n\n    /// @dev this function aims to create or top-up user insurance coverage amount.\n    /// @param insuredAmount: maximum user coverage amount\n    /// @param categoryID: insurance category, e.g., stablecoin depeg insurance.\n    /// @param subCategoryID: insurance sub-category, e.g., USDC depeg coverage, DAI depeg coverage.\n    /// @return bool: true if the function executues successfully else false.\n    function addInsuranceAmount(\n        uint256 insuredAmount, \n        uint256 categoryID, \n        uint256 subCategoryID, \n        uint8 v, \n        bytes32 r, \n        bytes32 s\n    ) external override nonReentrant returns(bool) {\n        bool success = _addInsuranceAmount(insuredAmount, categoryID, subCategoryID, v, r, s);\n        return success;\n    }\n    \n    \n    function _addInsuranceAmount(\n        uint256 insuredAmount, \n        uint256 categoryID, \n        uint256 subCategoryID,\n        uint8 v, \n        bytes32 r, \n        bytes32 s\n    ) private returns(bool) {\n        uint256 newInsuredAmount = usersInsuranceInfo[_msgSender()][categoryID][subCategoryID].insuredAmount + insuredAmount;\n        if (usersInsuranceInfo[_msgSender()][categoryID][subCategoryID].isValid) {\n            bool closeStreamSuccess = deactivateInsurance(_msgSender(), categoryID, subCategoryID);\n            if (!closeStreamSuccess) {\n                revert CFA__TransactionFailedError();\n            }\n        }   \n        uint256 deadline = block.timestamp + _maxInsuredDays + 30 days;  \n        (bool activateSuccess, uint256 insuranceCost) = activateInsurance(newInsuredAmount, categoryID, subCategoryID);\n        if (!activateSuccess) {\n            revert CFA__TransactionFailedError();\n        }\n        _tokenPermitDAI.safePermit(_msgSender(), address(this), insuranceCost, deadline, v, r, s);  \n        return true;\n    }\n\n    /// @dev this function aims to close or reduce user insurance coverage amount.\n    /// @param insuredAmount: maximum user coverage amount\n    /// @param categoryID: insurance category, e.g., stablecoin depeg insurance.\n    /// @param subCategoryID: insurance sub-category, e.g., USDC depeg coverage, DAI depeg coverage.\n    /// @param closeStream: checks whether user initiate to deactivate its insurance or not.\n    /// @return bool: true if the function executues successfully else false.\n    function minusInsuranceAmount(\n        uint256 insuredAmount, \n        uint256 categoryID, \n        uint256 subCategoryID,\n        uint8 v, \n        bytes32 r, \n        bytes32 s,\n        bool closeStream\n    ) external override nonReentrant returns(bool) {\n        bool success = _minusInsuranceAmount(insuredAmount, categoryID, subCategoryID, v, r, s, closeStream);\n        return success;\n    }\n    \n    \n    function _minusInsuranceAmount(\n        uint256 insuredAmount, \n        uint256 categoryID, \n        uint256 subCategoryID,\n        uint8 v, \n        bytes32 r, \n        bytes32 s,\n        bool closeStream\n    ) private returns(bool) {\n        if (!usersInsuranceInfo[_msgSender()][categoryID][subCategoryID].isValid) {\n            revert CFA__InactiveInsuranceError();\n        }\n        bool closeStreamSuccess = deactivateInsurance(_msgSender(), categoryID, subCategoryID);\n        if (!closeStreamSuccess) {\n            revert CFA__TransactionFailedError();\n        }\n        if (!closeStream) {\n            uint256 newInsuredAmount = usersInsuranceInfo[_msgSender()][categoryID][subCategoryID].insuredAmount - insuredAmount;\n            uint256 deadline = block.timestamp + _maxInsuredDays + 30 days;\n            (bool activateSuccess, uint256 insuranceCost) = activateInsurance(newInsuredAmount, categoryID, subCategoryID);\n            if (!activateSuccess) {\n                revert CFA__TransactionFailedError();\n            }\n            _tokenPermitDAI.safePermit(_msgSender(), address(this), insuranceCost, deadline, v, r, s);  \n\n        }\n        return true;\n    }\n\n    function claimPremium(\n        address userAddress,\n        uint256 categoryID,\n        uint256 subCategoryID\n    ) external returns(bool) {\n        if (\n            getUserInsuranceValidTillInfo(userAddress, categoryID, subCategoryID) > \n            block.timestamp\n        ) {\n            revert CFA__ActiveInsuranceExistError();\n        }\n        bool success = deactivateInsurance(userAddress, categoryID, subCategoryID);\n        if (!success) {\n            revert CFA__TransactionFailedError();\n        }\n        return true;\n    }\n\n    function claimPremium(\n        address userAddress,\n        uint256 categoryID\n    ) external returns(bool) {\n\n    }\n\n    /// @param insuredAmount: insured amount\n    /// @param categoryID: like Smart Contract Insurance\n    function activateInsurance(\n        uint256 insuredAmount,\n        uint256 categoryID,\n        uint256 subCategoryID\n    ) private returns(bool, uint256) {\n        if (insuredAmount < 1e18) {\n            revert CFA__InsuranceCoverNotAvailableError();\n        }\n        if (\n            (!_insuranceRegistry.ifEnoughLiquidity(categoryID, insuredAmount, subCategoryID))    \n        ) {\n            revert CFA__SubCategoryNotActiveError();\n        }\n        if (usersInsuranceInfo[_msgSender()][categoryID][subCategoryID].isValid) {\n            revert CFA__ActiveInsuranceExistError();\n        }\n        \n        UserInsuranceInfo storage userInsuranceInfo = usersInsuranceInfo[_msgSender()][categoryID][subCategoryID];\n        UserGlobalInsuranceInfo storage userGlobalInsuranceInfo = usersGlobalInsuranceInfo[_msgSender()];\n        \n        uint256 userEstimatedBalance = _sztDAI.balanceOf(_msgSender()) - userGlobalInsuranceInfo.globalInsuranceCost;\n        uint256 incomingAmountPerSec = (\n            _insuranceRegistry.getStreamFlowRate(categoryID, subCategoryID) * insuredAmount) / 1e18;\n        uint256 globalIncomingAmountPerSec = userGlobalInsuranceInfo.insuranceStreamRate + incomingAmountPerSec;\n        // user balance should be enough to run the insurance for atleast minimum insurance time duration\n        if ((globalIncomingAmountPerSec * _minimumInsurancePeriod) > userEstimatedBalance) {\n            revert CFA__NotEvenMinimumInsurancePeriodAmount();\n        }\n\n        uint256 validTill = (userEstimatedBalance / incomingAmountPerSec);\n        userGlobalInsuranceInfo.insuranceStreamRate += incomingAmountPerSec;\n        userInsuranceInfo.insuredAmount = insuredAmount;\n        userInsuranceInfo.insuranceFlowRate = incomingAmountPerSec;\n        userInsuranceInfo.registrationTime = block.timestamp;\n        userInsuranceInfo.startTime = block.timestamp + _startWaitingTime;\n        userInsuranceInfo.validTill = (\n            validTill < _maxInsuredDays ? \n            userInsuranceInfo.startTime + validTill : userInsuranceInfo.startTime + _maxInsuredDays\n        );\n        userInsuranceInfo.insuranceCost = validTill * incomingAmountPerSec;\n        userInsuranceInfo.isValid = true;\n        \n        userGlobalInsuranceInfo.globalInsuranceCost += userInsuranceInfo.insuranceCost;\n        userGlobalInsuranceInfo.validTill = (\n            userInsuranceInfo.validTill < userGlobalInsuranceInfo.validTill ? \n            userGlobalInsuranceInfo.validTill : userInsuranceInfo.validTill\n        );\n        bool success = _insuranceRegistry.addCoverageOffered(categoryID, subCategoryID, insuredAmount, incomingAmountPerSec);\n        return (success, userInsuranceInfo.insuranceCost);\n    }\n\n    /// NOTE: few if and else to consider for globalinsuranceinfo like endtime and start time \n    function deactivateInsurance(\n        address userAddress, \n        uint256 categoryID, \n        uint256 subCategoryID\n    ) private returns(bool) {\n        UserInsuranceInfo storage userInsuranceInfo = usersInsuranceInfo[userAddress][categoryID][subCategoryID];\n        if (!userInsuranceInfo.isValid) {\n            revert CFA__InactiveInsuranceError();\n        }\n        userInsuranceInfo.isValid = false;\n        uint256 duration = (\n            (block.timestamp > userInsuranceInfo.startTime) ? (\n                (block.timestamp > userInsuranceInfo.validTill) ? \n                userInsuranceInfo.validTill : (block.timestamp - userInsuranceInfo.startTime)\n            ) : 0);\n        uint256 amountToBeBurned = (duration * userInsuranceInfo.insuranceFlowRate);\n        if (amountToBeBurned == 0) {\n            return true;\n        } \n        usersGlobalInsuranceInfo[userAddress].insuranceStreamRate -= userInsuranceInfo.insuranceFlowRate;\n        usersGlobalInsuranceInfo[userAddress].globalInsuranceCost -= userInsuranceInfo.insuranceCost;\n        uint256 flowRate = userInsuranceInfo.insuranceFlowRate;\n        uint256 insuredAmount = userInsuranceInfo.insuredAmount;\n        bool success = _insuranceRegistry.removeCoverageOffered(categoryID, subCategoryID, insuredAmount, flowRate);\n        bool burnSuccess = _sztDAI.burnFrom(userAddress, amountToBeBurned);\n        if ((!success) || (!burnSuccess)) {\n            revert CFA__TransactionFailedError();\n        }\n        return true;\n    }\n\n    /// @dev this function aims to deactivate user's all activated insurance in a single-call.\n    /// @param userAddress: user wallet address\n    /// @param categoryID: insurance category, e.g., stablecoin depeg insurance.\n    function deactivateCategoryInsurance(\n        address userAddress, \n        uint256 categoryID\n    ) private returns(bool) {\n        uint256[] memory activeID = findActivePremiumCost(userAddress, categoryID, _insuranceRegistry.getLatestSubCategoryID(categoryID));\n        uint256 expectedAmountToBePaid = _calculateTotalFlowMade(userAddress, categoryID, activeID);\n        for(uint256 i=0; i < activeID.length;) {\n            usersInsuranceInfo[userAddress][categoryID][activeID[i]].isValid = false;\n            uint256 flowRate = usersInsuranceInfo[userAddress][categoryID][activeID[i]].insuranceFlowRate;\n            uint256 insuredAmount = usersInsuranceInfo[userAddress][categoryID][activeID[i]].insuredAmount;\n            bool coverageRemoveSuccess = _insuranceRegistry.removeCoverageOffered(categoryID, activeID[i], insuredAmount, flowRate);\n            if (!coverageRemoveSuccess) {\n                revert CFA__TransactionFailedError();\n            }\n            ++i;\n        }\n        uint256 userBalance = _sztDAI.balanceOf(userAddress); \n        uint256 amountToBeBurned = expectedAmountToBePaid > userBalance ? userBalance : expectedAmountToBePaid;\n        usersGlobalInsuranceInfo[userAddress].insuranceStreamRate = 0;\n        bool success = _sztDAI.burnFrom(userAddress, amountToBeBurned);\n        if (!success) {\n            revert CFA__TransactionFailedError();\n        }\n        return true;\n    }\n\n    /// VIEW FUNCTIONS\n\n    function findActivePremiumCost(\n        address userAddress, \n        uint256 categoryID, \n        uint256 subCategoryCount\n    ) public view override returns(uint256[] memory) {\n        uint256 activeProtocolCount = 0;\n        for(uint i = 0; i < subCategoryCount;) {\n            UserInsuranceInfo memory userInsuranceInfo = usersInsuranceInfo[userAddress][categoryID][i];\n            if (userInsuranceInfo.isValid) {\n                ++activeProtocolCount;\n            }\n            ++i;\n        }\n        uint256[] memory activeID = new uint256[](activeProtocolCount);\n        uint256 counter = 0;\n        for(uint i = 0; i < subCategoryCount;) {\n            UserInsuranceInfo storage userInsuranceInfo = usersInsuranceInfo[userAddress][categoryID][i];\n            if (userInsuranceInfo.isValid) {\n                activeID[counter] = i;\n                ++counter;\n            }\n            ++i;\n        }\n      return activeID;\n    }\n\n    /// DURATION\n    function calculateTotalFlowMade(\n        address userAddress\n    ) external view returns(uint256) {\n        uint256 globalBalanceToBePaid = 0;\n        for(uint256 i=0; i < _categoriesCount;) {\n            uint256 balanceToBePaid = 0;\n            uint256[] memory activeID = findActivePremiumCost(userAddress, i, _insuranceRegistry.getLatestSubCategoryID(i));\n            for(uint256 j=0; j < activeID.length;) {\n                UserInsuranceInfo storage userActiveInsuranceInfo = usersInsuranceInfo[userAddress][i][activeID[j]];\n                uint256 duration = (\n                    (block.timestamp > userActiveInsuranceInfo.startTime) ? (\n                        (block.timestamp > userActiveInsuranceInfo.validTill) ? \n                        userActiveInsuranceInfo.validTill : (block.timestamp - userActiveInsuranceInfo.startTime)\n                    ) : 0);\n                balanceToBePaid += (userActiveInsuranceInfo.insuranceFlowRate * duration);\n                ++j;\n            }\n            globalBalanceToBePaid += balanceToBePaid;\n            ++i;\n        }\n        return globalBalanceToBePaid;\n    }\n\n    function _calculateTotalFlowMade(\n        address userAddress, \n        uint256 categoryID,\n        uint256[] memory activeID\n    ) internal view returns(uint256) {\n        uint256 balanceToBePaid = 0;\n        for(uint256 i=0; i< activeID.length;){\n            UserInsuranceInfo storage userActiveInsuranceInfo = usersInsuranceInfo[userAddress][categoryID][activeID[i]];\n            uint256 duration = (\n                (block.timestamp > userActiveInsuranceInfo.startTime) ? (\n                    (block.timestamp > userActiveInsuranceInfo.validTill) ? \n                    userActiveInsuranceInfo.validTill : (block.timestamp - userActiveInsuranceInfo.startTime)\n                ) : 0);\n            balanceToBePaid += (userActiveInsuranceInfo.insuranceFlowRate * duration);\n            ++i;\n        }\n        return balanceToBePaid;\n    }\n\n    /// DURATION\n    function calculateTotalFlowMade(\n        address userAddress, \n        uint256 categoryID\n    ) external view override returns(uint256) {\n        uint256 balanceToBePaid = 0;\n        uint256[] memory activeID = findActivePremiumCost(userAddress, categoryID, _insuranceRegistry.getLatestSubCategoryID(categoryID));\n        for(uint256 i=0; i< activeID.length;){\n            UserInsuranceInfo storage userActiveInsuranceInfo = usersInsuranceInfo[userAddress][categoryID][activeID[i]];\n            uint256 duration = (\n                (block.timestamp > userActiveInsuranceInfo.startTime) ? (\n                    (block.timestamp > userActiveInsuranceInfo.validTill) ? \n                    userActiveInsuranceInfo.validTill : (block.timestamp - userActiveInsuranceInfo.startTime)\n                ) : 0);\n            balanceToBePaid += (userActiveInsuranceInfo.insuranceFlowRate * duration);\n            ++i;\n        }\n        return balanceToBePaid;\n    } \n\n    function getUserInsuranceValidTillInfo(\n        address userAddress, \n        uint256 categoryID, \n        uint256 subCategoryID\n    ) public view override returns(uint256) {\n        return usersInsuranceInfo[userAddress][categoryID][subCategoryID].validTill;\n    }\n\n    function getUserInsuranceStatus(\n        address userAddress, \n        uint256 categoryID, \n        uint256 subCategoryID\n    ) external view override returns(bool) {\n        return usersInsuranceInfo[userAddress][categoryID][subCategoryID].isValid;\n    }\n\n    function getUserInsuranceInfo(\n        address userAddress, \n        uint256 categoryID, \n        uint256 subCategoryID\n    ) external view override returns(uint256, uint256, uint256, uint256, uint256, bool) {\n        UserInsuranceInfo memory userInsuranceInfo = usersInsuranceInfo[userAddress][categoryID][subCategoryID];\n        return (\n            userInsuranceInfo.insuredAmount, \n            userInsuranceInfo.insuranceFlowRate,\n            userInsuranceInfo.registrationTime,\n            userInsuranceInfo.startTime,\n            userInsuranceInfo.validTill,\n            userInsuranceInfo.isValid\n            );\n    }\n\n    function getGlobalUserInsuranceInfo(\n        address _userAddress\n    ) external view override returns (uint256, uint256) {\n        UserGlobalInsuranceInfo memory userGlobalInsuranceInfo = usersGlobalInsuranceInfo[_userAddress];\n        return (userGlobalInsuranceInfo.insuranceStreamRate, userGlobalInsuranceInfo.validTill);\n    }\n\n    function getGlobalUserInsurancePremiumCost(\n        address userAddress\n    ) external view override returns(uint256) {\n       UserGlobalInsuranceInfo memory userGlobalInsuranceInfo = usersGlobalInsuranceInfo[userAddress];\n        return userGlobalInsuranceInfo.globalInsuranceCost; \n    }\n\n    function getUserInsuredAmount(\n        address userAddress, \n        uint256 categoryID, \n        uint256 subCategoryID\n    ) external view returns(uint256) {\n        return usersInsuranceInfo[userAddress][categoryID][subCategoryID].insuredAmount;\n    }\n}"},"contracts/core/staking/GENZStaking.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.16;\n\n/// @title GENZ Staking Contract\n/// @author Anshik Bansal <anshik@safezen.finance>\n\n/// Importing required interfaces\nimport \"./../../interfaces/IBuyGENZ.sol\";\nimport \"./../../interfaces/IGENZStaking.sol\";\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\";\n\n/// Importing required libraries\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\n/// Importing required contracts\nimport \"./../../BaseUpgradeablePausable.sol\";\n\nerror GENZStaking__TransactionFailedError();\nerror GENZStaking__NotAMinimumStakeAmountError();\n\n/// NOTE: Staking tokens would be used for activities like flash loans \n/// to generate rewards for the staked users\ncontract GENZStaking is IGENZStaking, BaseUpgradeablePausable {\n    uint256 private _currVersion;\n    uint256 private _minStakeValue;\n    uint256 private _withdrawTimer;\n    uint256 public override totalTokensStaked;\n    IERC20Upgradeable private immutable _tokenGENZ;\n\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    /// TODO: Versionable Info data to be included in functions\n    struct VersionableInfo {\n        uint256 startTime;\n        uint256 endTime;\n        uint256 distributedAmount;\n        uint256 tokenDistributed;\n    }\n\n    struct UserInfo {\n        bool hasStaked;\n        uint256 stakedTokens;\n        uint256 startVersionBlock; \n        uint256 claimedRewards;\n    }\n\n    struct UserBalanceInfo {\n        uint256 stakedTokens;\n        uint256 withdrawnTokens;\n    }\n\n    struct WithdrawWaitPeriod{\n        bool ifTimerStarted;\n        uint256 GENZTokenCount;\n        uint256 canWithdrawTime;\n    }\n\n    mapping (address => WithdrawWaitPeriod) private checkWaitTime;\n\n    mapping(address => UserInfo) private usersInfo;\n\n    /// versionID => VersionableInfo\n    mapping(uint256 => VersionableInfo) private versionableInfos;\n\n    /// userAddress => versionID => UserBalanceInfo\n    mapping(address => mapping(uint256 => UserBalanceInfo)) private usersBalanceInfo;\n\n    /// [PRODUCTION TODO: _withdrawTimer = timeInDays * 1 days;]\n    constructor(\n        address tokenAddressGENZ, \n        uint256 timeInDays\n    ) {\n        _minStakeValue = 1e18;\n        _withdrawTimer = timeInDays * 1 minutes;\n        _tokenGENZ = IERC20Upgradeable(tokenAddressGENZ);\n        \n    }\n\n    function pause() external onlyAdmin {\n        _pause();\n    }\n\n    function unpause() external onlyAdmin {\n        _unpause();\n    }\n\n    function updateMinimumStakeAmount(uint256 value) external onlyAdmin {\n        _minStakeValue = value;\n        emit UpdatedMinStakingAmount(value);\n    }\n\n    /// [PRODUCTION TODO: _withdrawTimer = timeInHours * 1 hours;]\n    function setWithdrawTime(uint256 timeInMinutes) external onlyAdmin {\n        _withdrawTimer = timeInMinutes * 1 minutes;\n        emit UpdatedWithdrawTimer(timeInMinutes);\n    }\n\n    function stakeGENZ(uint256 value) public override nonReentrant returns(bool) {\n        if (value < _minStakeValue) {\n            revert GENZStaking__NotAMinimumStakeAmountError();\n        }\n        ++_currVersion;\n        UserInfo storage userInfo = usersInfo[_msgSender()];\n        if(!userInfo.hasStaked) {\n            userInfo.hasStaked = true;\n            userInfo.startVersionBlock = _currVersion;\n        }\n        userInfo.stakedTokens += value;\n        usersBalanceInfo[_msgSender()][_currVersion].stakedTokens = value;        \n        totalTokensStaked += value;\n        _tokenGENZ.safeTransferFrom(_msgSender(), address(this), value);\n        emit StakedGENZ(_msgSender(), value);\n        return true;\n    }\n    \n    // 2 hours withdrawal period\n    function activateWithdrawalTimer(uint256 value) external override returns(bool) {\n        if (\n            (!(checkWaitTime[_msgSender()].ifTimerStarted)) || \n            (checkWaitTime[_msgSender()].GENZTokenCount < value)\n        ) {\n            WithdrawWaitPeriod storage waitingTimeCountdown = checkWaitTime[_msgSender()];\n            waitingTimeCountdown.ifTimerStarted = true;\n            waitingTimeCountdown.GENZTokenCount = value;\n            waitingTimeCountdown.canWithdrawTime = _withdrawTimer + block.timestamp;\n            return true;\n        }\n        return false;\n    }\n    \n    function withdrawGENZ(uint256 value) external override nonReentrant returns(bool) {\n        UserInfo storage userInfo = usersInfo[_msgSender()];\n        if (\n            (userInfo.stakedTokens < value) || \n            (block.timestamp < checkWaitTime[_msgSender()].canWithdrawTime) || \n            (value > checkWaitTime[_msgSender()].GENZTokenCount)\n        ) {\n            revert GENZStaking__TransactionFailedError();\n        }\n        ++_currVersion;\n        totalTokensStaked -= value;\n        userInfo.stakedTokens -= value;\n        usersBalanceInfo[_msgSender()][_currVersion].withdrawnTokens = value;\n        if (checkWaitTime[_msgSender()].GENZTokenCount == value) {\n            checkWaitTime[_msgSender()].ifTimerStarted = false;\n        }\n        checkWaitTime[_msgSender()].GENZTokenCount -= value;\n        _tokenGENZ.safeTransfer(_msgSender(), value);\n        emit UnstakedGENZ(_msgSender(), value);\n        return true;\n    }\n\n    function getVersionID() public view returns(uint256) {\n        return _currVersion;\n    }\n\n    function getActiveVersionID() internal view returns(uint256[] memory) {\n        uint256 activeCount = 0;\n        uint256 userStartVersion = usersInfo[_msgSender()].startVersionBlock;\n        uint256 currVersion =  getVersionID();\n        for(uint256 i = userStartVersion; i <= currVersion;) {\n            if (usersBalanceInfo[_msgSender()][i].stakedTokens > 0) {\n                ++activeCount;\n            }\n            if (usersBalanceInfo[_msgSender()][i].withdrawnTokens > 0) {\n                ++activeCount;\n            }\n            ++i;\n        }\n        uint256[] memory activeVersionID = new uint256[](activeCount);\n        uint256 counter = 0;\n        for(uint i = userStartVersion; i <= currVersion;) {\n            UserBalanceInfo memory userBalance = usersBalanceInfo[_msgSender()][i];\n            if(userBalance.stakedTokens > 0) {\n                activeVersionID[counter] = i;\n            }\n            if(userBalance.withdrawnTokens > 0) {\n                activeVersionID[counter] = i;\n            }\n            ++counter;\n            ++i;\n        }\n        return activeVersionID;\n    }\n\n    function calculateRewards() external view returns(uint256) {\n        uint256 userBalance = 0;\n        uint256[] memory activeVersionID = getActiveVersionID();\n        uint256 startVersionID = activeVersionID[0];\n        uint256 userPremiumEarned = 0;\n        uint256 counter = 0;\n        for(uint256 i = startVersionID; i <= _currVersion;) {\n            UserBalanceInfo memory userVersionBalance = usersBalanceInfo[_msgSender()][i];\n            if(activeVersionID[counter] == i) {\n                if (userVersionBalance.stakedTokens > 0) {\n                    userBalance += userVersionBalance.stakedTokens;\n                }\n                else {\n                    userBalance -= userVersionBalance.withdrawnTokens;\n                }\n                ++counter;\n            }\n            VersionableInfo storage versionInfo = versionableInfos[i];           \n            uint256 duration = versionInfo.endTime - versionInfo.startTime;\n            userPremiumEarned += ((duration * userBalance * versionInfo.distributedAmount)/ (versionInfo.tokenDistributed));\n            ++i;\n        }\n        return userPremiumEarned;\n    }\n\n    function getUserStakedGENZBalance() external view override returns(uint256) {\n        return (usersInfo[_msgSender()].stakedTokens > 0 ? usersInfo[_msgSender()].stakedTokens : 0);\n    }\n\n    function getStakerClaimedRewardInfo() external view returns(uint256) {\n        return usersInfo[_msgSender()].claimedRewards;\n    }\n}"},"contracts/interfaces/IBuyGENZ.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\ninterface IBuyGENZ {\n    \n    /// Custom Error Codes\n    error BuySellGENZ__PausedError();\n    error BuySellGENZ__LowAmountError();\n    error BuySellGENZ__LowSZTBalanceError();\n    error BuySellGENZ__GENZBurnFailedError();\n    error BuySellGENZ__GENZMintFailedError();\n    error BuySellGENZ__ImmutableChangesError();\n    error BuySellGENZ__TransactionFailedError();\n    error BuySellGENZ__InsufficientBalanceError();\n    error BuySellGENZ__ZeroAddressTransactionError();\n\n}"},"contracts/interfaces/ICFA.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.16;\n\n\ninterface ICFA {\n    // CFA Events\n    event UpdatedMaxInsuredDays();\n    event UpdatedStartWaitingTime();\n    event UpdatedMinimumInsurancePeriod();\n\n    // CFA Custom Error Code\n    error CFA__ImmutableChangesError();\n    error CFA__TransactionFailedError();\n    error CFA__InactiveInsuranceError();\n    error CFA__SubCategoryNotActiveError();\n    error CFA__ActiveInsuranceExistError();\n    error CFA__InsuranceCoverNotAvailableError();\n    error CFA__NotEvenMinimumInsurancePeriodAmount();\n\n    function addInsuranceAmount(\n        uint256 insuredAmount, \n        uint256 categoryID, \n        uint256 subCategoryID,\n        uint8 v, \n        bytes32 r, \n        bytes32 s\n    ) external returns(bool);\n\n    function minusInsuranceAmount(\n        uint256 insuredAmount, \n        uint256 categoryID, \n        uint256 subCategoryID,\n        uint8 v, \n        bytes32 r, \n        bytes32 s,\n        bool closeStream\n    ) external returns(bool);\n\n    function findActivePremiumCost(\n        address userAddress, \n        uint256 categoryID, \n        uint256 insuranceCount\n    ) external view returns(uint256[] memory);\n\n    function calculateTotalFlowMade(\n        address userAddress, \n        uint256 categoryID\n    ) external view returns(uint256);  \n\n    function calculateTotalFlowMade(\n        address userAddress\n    ) external view returns(uint256); \n\n    function getUserInsuranceValidTillInfo(\n        address userAddress, \n        uint256 categoryID, \n        uint256 subCategoryID\n    ) external view returns(uint256);\n\n    function getUserInsuranceStatus(\n        address userAddress, \n        uint256 categoryID, \n        uint256 subCategoryID\n    ) external view returns(bool);\n\n    function getUserInsuranceInfo(\n        address userAddress, \n        uint256 categoryID, \n        uint256 subCategoryID\n    ) external view returns(uint256, uint256, uint256, uint256, uint256, bool);\n    \n    function getGlobalUserInsuranceInfo(\n        address _userAddress\n    ) external view returns (uint256, uint256);\n\n    function getGlobalUserInsurancePremiumCost(\n        address userAddress\n    ) external view returns(uint256);\n}"},"contracts/interfaces/IERC20Extended.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional mint and burnFrom functions from the ERC20 standard.\n */\ninterface IERC20Extended is IERC20Upgradeable {\n    \n    function mint(address to, uint256 amount) external returns(bool);\n\n    function burnFrom(address account, uint256 amount) external returns(bool);\n    \n}"},"contracts/interfaces/IGENZStaking.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.16;\n\ninterface IGENZStaking {\n\n    event UpdatedWithdrawTimer(uint256 indexed timeInMinutes);\n\n    event UpdatedMinStakingAmount(uint256 indexed value);\n\n    event StakedGENZ(address indexed userAddress, uint256 value);\n\n    event UnstakedGENZ(address indexed userAddress, uint256 value);\n\n    function stakeGENZ(uint256 _value) external returns(bool);\n\n    function activateWithdrawalTimer(uint256 _value) external returns(bool);\n\n    function withdrawGENZ(uint256 _value) external returns(bool);\n\n    function totalTokensStaked() external view returns(uint256);\n\n    function getUserStakedGENZBalance() external view returns(uint256);\n\n}"},"contracts/interfaces/IGlobalPauseOperation.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\ninterface IGlobalPauseOperation {\n\n    error GlobalPauseOps__ZeroAddressInputError();\n\n    error GlobalPauseOperation__ImmutableChangesError();\n\n    event PausedOperation(address account);\n\n    event UnpausedOperation(address account);\n\n    function pauseOperation() external returns(bool);\n\n    function unpauseOperation() external returns(bool);\n    \n    function isPaused() external view returns(bool);\n}"},"contracts/interfaces/IInsuranceRegistry.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.16;\n\n/// Report any bug or issues at:\n/// @custom:security-contact anshik@safezen.finance\ninterface IInsuranceRegistry {\n\n    error InsuranceRegistry__ImmutableChangesError();\n    error InsuranceRegistry__TransactionFailedError();\n    error InsuranceRegistry__NotEnoughLiquidityError();\n\n    event UpdatedClaimStakedValue();\n\n    function addInsuranceLiquidity(\n        uint256 categoryID,\n        uint256 subCategoryID_,\n        uint256 liquiditySupplied\n    ) external returns(bool);\n\n    function removeInsuranceLiquidity(\n        uint256 categoryID,\n        uint256 subCategoryID_, \n        uint256 liquiditySupplied\n    ) external returns(bool);\n\n    function addCoverageOffered(\n        uint256 categoryID,\n        uint256 subCategoryID_, \n        uint256 coverageAmount,\n        uint256 incomingFlowRate\n    ) external returns(bool);\n\n    function removeCoverageOffered(\n        uint256 categoryID,\n        uint256 subCategoryID_, \n        uint256 coverageAmount, \n        uint256 incomingFlowRate\n    ) external returns(bool);\n\n    function claimAdded(\n        uint256 stakedTokenID, \n        uint256 categoryID, \n        uint256 subCategoryID_\n    ) external returns(bool);\n\n    function getVersionID(uint256 categoryID) external view returns(uint256);\n\n    function calculateUnderwriterBalance(\n        uint256 categoryID,\n        uint256 subCategoryID_\n    ) external view returns(uint256);\n\n    function getLatestCategoryID() external view returns(uint256);\n\n    function getLatestSubCategoryID(uint256 categoryID) external view returns(uint256);\n\n    function ifEnoughLiquidity(uint256 categoryID, uint256 insuredAmount, uint256 subCategoryID_) external view returns(bool);\n\n    function getStreamFlowRate(uint256 categoryID, uint256 subCategoryID_) external view returns(uint256);\n}"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","exportedSymbols":{"AccessControlUpgradeable":[335],"AddressUpgradeable":[1459],"ContextUpgradeable":[1501],"ERC165Upgradeable":[1720],"IAccessControlUpgradeable":[408],"IERC165Upgradeable":[1732],"Initializable":[580],"MathUpgradeable":[2597],"StringsUpgradeable":[1676]},"id":336,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol","file":"./IAccessControlUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":409,"src":"133:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":1502,"src":"175:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"../utils/StringsUpgradeable.sol","id":4,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":1677,"src":"217:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","file":"../utils/introspection/ERC165Upgradeable.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":1721,"src":"259:54:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":6,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":581,"src":"314:42:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":8,"name":"Initializable","nameLocations":["1939:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":580,"src":"1939:13:0"},"id":9,"nodeType":"InheritanceSpecifier","src":"1939:13:0"},{"baseName":{"id":10,"name":"ContextUpgradeable","nameLocations":["1954:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":1501,"src":"1954:18:0"},"id":11,"nodeType":"InheritanceSpecifier","src":"1954:18:0"},{"baseName":{"id":12,"name":"IAccessControlUpgradeable","nameLocations":["1974:25:0"],"nodeType":"IdentifierPath","referencedDeclaration":408,"src":"1974:25:0"},"id":13,"nodeType":"InheritanceSpecifier","src":"1974:25:0"},{"baseName":{"id":14,"name":"ERC165Upgradeable","nameLocations":["2001:17:0"],"nodeType":"IdentifierPath","referencedDeclaration":1720,"src":"2001:17:0"},"id":15,"nodeType":"InheritanceSpecifier","src":"2001:17:0"}],"canonicalName":"AccessControlUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":7,"nodeType":"StructuredDocumentation","src":"358:1534:0","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it."},"fullyImplemented":true,"id":335,"linearizedBaseContracts":[335,1720,1732,408,1501,580],"name":"AccessControlUpgradeable","nameLocation":"1911:24:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":20,"nodeType":"Block","src":"2083:7:0","statements":[]},"id":21,"implemented":true,"kind":"function","modifiers":[{"id":18,"kind":"modifierInvocation","modifierName":{"id":17,"name":"onlyInitializing","nameLocations":["2066:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"2066:16:0"},"nodeType":"ModifierInvocation","src":"2066:16:0"}],"name":"__AccessControl_init","nameLocation":"2034:20:0","nodeType":"FunctionDefinition","parameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"2054:2:0"},"returnParameters":{"id":19,"nodeType":"ParameterList","parameters":[],"src":"2083:0:0"},"scope":335,"src":"2025:65:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":26,"nodeType":"Block","src":"2164:7:0","statements":[]},"id":27,"implemented":true,"kind":"function","modifiers":[{"id":24,"kind":"modifierInvocation","modifierName":{"id":23,"name":"onlyInitializing","nameLocations":["2147:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"2147:16:0"},"nodeType":"ModifierInvocation","src":"2147:16:0"}],"name":"__AccessControl_init_unchained","nameLocation":"2105:30:0","nodeType":"FunctionDefinition","parameters":{"id":22,"nodeType":"ParameterList","parameters":[],"src":"2135:2:0"},"returnParameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"2164:0:0"},"scope":335,"src":"2096:75:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"canonicalName":"AccessControlUpgradeable.RoleData","id":34,"members":[{"constant":false,"id":31,"mutability":"mutable","name":"members","nameLocation":"2227:7:0","nodeType":"VariableDeclaration","scope":34,"src":"2202:32:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":30,"keyType":{"id":28,"name":"address","nodeType":"ElementaryTypeName","src":"2210:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2202:24:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":29,"name":"bool","nodeType":"ElementaryTypeName","src":"2221:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":33,"mutability":"mutable","name":"adminRole","nameLocation":"2252:9:0","nodeType":"VariableDeclaration","scope":34,"src":"2244:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":32,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2244:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"2183:8:0","nodeType":"StructDefinition","scope":335,"src":"2176:92:0","visibility":"public"},{"constant":false,"id":39,"mutability":"mutable","name":"_roles","nameLocation":"2311:6:0","nodeType":"VariableDeclaration","scope":335,"src":"2274:43:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"typeName":{"id":38,"keyType":{"id":35,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2282:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2274:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"valueType":{"id":37,"nodeType":"UserDefinedTypeName","pathNode":{"id":36,"name":"RoleData","nameLocations":["2293:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":34,"src":"2293:8:0"},"referencedDeclaration":34,"src":"2293:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage_ptr","typeString":"struct AccessControlUpgradeable.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":42,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2348:18:0","nodeType":"VariableDeclaration","scope":335,"src":"2324:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":40,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":41,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2369:4:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":52,"nodeType":"Block","src":"2792:44:0","statements":[{"expression":{"arguments":[{"id":48,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"2813:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":47,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[107,146],"referencedDeclaration":107,"src":"2802:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2802:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":50,"nodeType":"ExpressionStatement","src":"2802:16:0"},{"id":51,"nodeType":"PlaceholderStatement","src":"2828:1:0"}]},"documentation":{"id":43,"nodeType":"StructuredDocumentation","src":"2380:375:0","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"},"id":53,"name":"onlyRole","nameLocation":"2769:8:0","nodeType":"ModifierDefinition","parameters":{"id":46,"nodeType":"ParameterList","parameters":[{"constant":false,"id":45,"mutability":"mutable","name":"role","nameLocation":"2786:4:0","nodeType":"VariableDeclaration","scope":53,"src":"2778:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":44,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2778:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2777:14:0"},"src":"2760:76:0","virtual":false,"visibility":"internal"},{"baseFunctions":[1714],"body":{"id":74,"nodeType":"Block","src":"2994:122:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":67,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":62,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"3011:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":64,"name":"IAccessControlUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"3031:25:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControlUpgradeable_$408_$","typeString":"type(contract IAccessControlUpgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControlUpgradeable_$408_$","typeString":"type(contract IAccessControlUpgradeable)"}],"id":63,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3026:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":65,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3026:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControlUpgradeable_$408","typeString":"type(contract IAccessControlUpgradeable)"}},"id":66,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3058:11:0","memberName":"interfaceId","nodeType":"MemberAccess","src":"3026:43:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"3011:58:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":70,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"3097:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":68,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"3073:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlUpgradeable_$335_$","typeString":"type(contract super AccessControlUpgradeable)"}},"id":69,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3079:17:0","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1714,"src":"3073:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":71,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3073:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3011:98:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":61,"id":73,"nodeType":"Return","src":"3004:105:0"}]},"documentation":{"id":54,"nodeType":"StructuredDocumentation","src":"2842:56:0","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":75,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2912:17:0","nodeType":"FunctionDefinition","overrides":{"id":58,"nodeType":"OverrideSpecifier","overrides":[],"src":"2970:8:0"},"parameters":{"id":57,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56,"mutability":"mutable","name":"interfaceId","nameLocation":"2937:11:0","nodeType":"VariableDeclaration","scope":75,"src":"2930:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":55,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2930:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2929:20:0"},"returnParameters":{"id":61,"nodeType":"ParameterList","parameters":[{"constant":false,"id":60,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":75,"src":"2988:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":59,"name":"bool","nodeType":"ElementaryTypeName","src":"2988:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2987:6:0"},"scope":335,"src":"2903:213:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[375],"body":{"id":93,"nodeType":"Block","src":"3295:53:0","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":86,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"3312:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":88,"indexExpression":{"id":87,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":78,"src":"3319:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3312:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":89,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3325:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":31,"src":"3312:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":91,"indexExpression":{"id":90,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"3333:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3312:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":85,"id":92,"nodeType":"Return","src":"3305:36:0"}]},"documentation":{"id":76,"nodeType":"StructuredDocumentation","src":"3122:76:0","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":94,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"3212:7:0","nodeType":"FunctionDefinition","overrides":{"id":82,"nodeType":"OverrideSpecifier","overrides":[],"src":"3271:8:0"},"parameters":{"id":81,"nodeType":"ParameterList","parameters":[{"constant":false,"id":78,"mutability":"mutable","name":"role","nameLocation":"3228:4:0","nodeType":"VariableDeclaration","scope":94,"src":"3220:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":77,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3220:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":80,"mutability":"mutable","name":"account","nameLocation":"3242:7:0","nodeType":"VariableDeclaration","scope":94,"src":"3234:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":79,"name":"address","nodeType":"ElementaryTypeName","src":"3234:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3219:31:0"},"returnParameters":{"id":85,"nodeType":"ParameterList","parameters":[{"constant":false,"id":84,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":94,"src":"3289:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":83,"name":"bool","nodeType":"ElementaryTypeName","src":"3289:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3288:6:0"},"scope":335,"src":"3203:145:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":106,"nodeType":"Block","src":"3698:47:0","statements":[{"expression":{"arguments":[{"id":101,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"3719:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":102,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"3725:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3725:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":100,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[107,146],"referencedDeclaration":146,"src":"3708:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3708:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":105,"nodeType":"ExpressionStatement","src":"3708:30:0"}]},"documentation":{"id":95,"nodeType":"StructuredDocumentation","src":"3354:283:0","text":" @dev Revert with a standard message if `_msgSender()` is missing `role`.\n Overriding this function changes the behavior of the {onlyRole} modifier.\n Format of the revert message is described in {_checkRole}.\n _Available since v4.6._"},"id":107,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3651:10:0","nodeType":"FunctionDefinition","parameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"role","nameLocation":"3670:4:0","nodeType":"VariableDeclaration","scope":107,"src":"3662:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":96,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3662:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3661:14:0"},"returnParameters":{"id":99,"nodeType":"ParameterList","parameters":[],"src":"3698:0:0"},"scope":335,"src":"3642:103:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":145,"nodeType":"Block","src":"4099:428:0","statements":[{"condition":{"id":119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4113:23:0","subExpression":{"arguments":[{"id":116,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"4122:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":117,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"4128:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":115,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"4114:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4114:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":144,"nodeType":"IfStatement","src":"4109:412:0","trueBody":{"id":143,"nodeType":"Block","src":"4138:383:0","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","id":125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4246:25:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},"value":"AccessControl: account "},{"arguments":[{"id":128,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"4328:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":126,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1676,"src":"4297:18:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$1676_$","typeString":"type(library StringsUpgradeable)"}},"id":127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4316:11:0","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":1675,"src":"4297:30:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4297:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"206973206d697373696e6720726f6c6520","id":130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4362:19:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},"value":" is missing role "},{"arguments":[{"arguments":[{"id":135,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"4446:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":134,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4438:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":133,"name":"uint256","nodeType":"ElementaryTypeName","src":"4438:7:0","typeDescriptions":{}}},"id":136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4438:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"3332","id":137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4453:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"id":131,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1676,"src":"4407:18:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$1676_$","typeString":"type(library StringsUpgradeable)"}},"id":132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4426:11:0","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":1655,"src":"4407:30:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4407:49:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":123,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4204:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4208:12:0","memberName":"encodePacked","nodeType":"MemberAccess","src":"4204:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4204:274:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4176:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":121,"name":"string","nodeType":"ElementaryTypeName","src":"4176:6:0","typeDescriptions":{}}},"id":140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4176:320:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":120,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"4152:6:0","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4152:358:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":142,"nodeType":"ExpressionStatement","src":"4152:358:0"}]}}]},"documentation":{"id":108,"nodeType":"StructuredDocumentation","src":"3751:270:0","text":" @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"},"id":146,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"4035:10:0","nodeType":"FunctionDefinition","parameters":{"id":113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":110,"mutability":"mutable","name":"role","nameLocation":"4054:4:0","nodeType":"VariableDeclaration","scope":146,"src":"4046:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":109,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4046:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":112,"mutability":"mutable","name":"account","nameLocation":"4068:7:0","nodeType":"VariableDeclaration","scope":146,"src":"4060:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"4060:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4045:31:0"},"returnParameters":{"id":114,"nodeType":"ParameterList","parameters":[],"src":"4099:0:0"},"scope":335,"src":"4026:501:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[383],"body":{"id":160,"nodeType":"Block","src":"4791:46:0","statements":[{"expression":{"expression":{"baseExpression":{"id":155,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"4808:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":157,"indexExpression":{"id":156,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"4815:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4808:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":158,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4821:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":33,"src":"4808:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":154,"id":159,"nodeType":"Return","src":"4801:29:0"}]},"documentation":{"id":147,"nodeType":"StructuredDocumentation","src":"4533:170:0","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":161,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"4717:12:0","nodeType":"FunctionDefinition","overrides":{"id":151,"nodeType":"OverrideSpecifier","overrides":[],"src":"4764:8:0"},"parameters":{"id":150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":149,"mutability":"mutable","name":"role","nameLocation":"4738:4:0","nodeType":"VariableDeclaration","scope":161,"src":"4730:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":148,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4730:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4729:14:0"},"returnParameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":161,"src":"4782:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":152,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4782:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4781:9:0"},"scope":335,"src":"4708:129:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[391],"body":{"id":180,"nodeType":"Block","src":"5236:42:0","statements":[{"expression":{"arguments":[{"id":176,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"5257:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":177,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"5263:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":175,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"5246:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5246:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":179,"nodeType":"ExpressionStatement","src":"5246:25:0"}]},"documentation":{"id":162,"nodeType":"StructuredDocumentation","src":"4843:285:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":181,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":171,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"5229:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":170,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"5216:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5216:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":173,"kind":"modifierInvocation","modifierName":{"id":169,"name":"onlyRole","nameLocations":["5207:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":53,"src":"5207:8:0"},"nodeType":"ModifierInvocation","src":"5207:28:0"}],"name":"grantRole","nameLocation":"5142:9:0","nodeType":"FunctionDefinition","overrides":{"id":168,"nodeType":"OverrideSpecifier","overrides":[],"src":"5198:8:0"},"parameters":{"id":167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":164,"mutability":"mutable","name":"role","nameLocation":"5160:4:0","nodeType":"VariableDeclaration","scope":181,"src":"5152:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":163,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5152:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":166,"mutability":"mutable","name":"account","nameLocation":"5174:7:0","nodeType":"VariableDeclaration","scope":181,"src":"5166:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":165,"name":"address","nodeType":"ElementaryTypeName","src":"5166:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5151:31:0"},"returnParameters":{"id":174,"nodeType":"ParameterList","parameters":[],"src":"5236:0:0"},"scope":335,"src":"5133:145:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[399],"body":{"id":200,"nodeType":"Block","src":"5662:43:0","statements":[{"expression":{"arguments":[{"id":196,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"5684:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":197,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"5690:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":195,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"5672:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5672:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":199,"nodeType":"ExpressionStatement","src":"5672:26:0"}]},"documentation":{"id":182,"nodeType":"StructuredDocumentation","src":"5284:269:0","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":201,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":191,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"5655:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":190,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"5642:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5642:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":193,"kind":"modifierInvocation","modifierName":{"id":189,"name":"onlyRole","nameLocations":["5633:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":53,"src":"5633:8:0"},"nodeType":"ModifierInvocation","src":"5633:28:0"}],"name":"revokeRole","nameLocation":"5567:10:0","nodeType":"FunctionDefinition","overrides":{"id":188,"nodeType":"OverrideSpecifier","overrides":[],"src":"5624:8:0"},"parameters":{"id":187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":184,"mutability":"mutable","name":"role","nameLocation":"5586:4:0","nodeType":"VariableDeclaration","scope":201,"src":"5578:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":183,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5578:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":186,"mutability":"mutable","name":"account","nameLocation":"5600:7:0","nodeType":"VariableDeclaration","scope":201,"src":"5592:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":185,"name":"address","nodeType":"ElementaryTypeName","src":"5592:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5577:31:0"},"returnParameters":{"id":194,"nodeType":"ParameterList","parameters":[],"src":"5662:0:0"},"scope":335,"src":"5558:147:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[407],"body":{"id":223,"nodeType":"Block","src":"6319:137:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":211,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"6337:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":212,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"6348:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6348:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6337:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66","id":215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6362:49:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""},"value":"AccessControl: can only renounce roles for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""}],"id":210,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6329:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6329:83:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":217,"nodeType":"ExpressionStatement","src":"6329:83:0"},{"expression":{"arguments":[{"id":219,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"6435:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":220,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"6441:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":218,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"6423:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6423:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":222,"nodeType":"ExpressionStatement","src":"6423:26:0"}]},"documentation":{"id":202,"nodeType":"StructuredDocumentation","src":"5711:526:0","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":224,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"6251:12:0","nodeType":"FunctionDefinition","overrides":{"id":208,"nodeType":"OverrideSpecifier","overrides":[],"src":"6310:8:0"},"parameters":{"id":207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"role","nameLocation":"6272:4:0","nodeType":"VariableDeclaration","scope":224,"src":"6264:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":203,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6264:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":206,"mutability":"mutable","name":"account","nameLocation":"6286:7:0","nodeType":"VariableDeclaration","scope":224,"src":"6278:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":205,"name":"address","nodeType":"ElementaryTypeName","src":"6278:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6263:31:0"},"returnParameters":{"id":209,"nodeType":"ParameterList","parameters":[],"src":"6319:0:0"},"scope":335,"src":"6242:214:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":237,"nodeType":"Block","src":"7209:42:0","statements":[{"expression":{"arguments":[{"id":233,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"7230:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":234,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"7236:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":232,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"7219:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7219:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":236,"nodeType":"ExpressionStatement","src":"7219:25:0"}]},"documentation":{"id":225,"nodeType":"StructuredDocumentation","src":"6462:674:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n May emit a {RoleGranted} event.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."},"id":238,"implemented":true,"kind":"function","modifiers":[],"name":"_setupRole","nameLocation":"7150:10:0","nodeType":"FunctionDefinition","parameters":{"id":230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":227,"mutability":"mutable","name":"role","nameLocation":"7169:4:0","nodeType":"VariableDeclaration","scope":238,"src":"7161:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":226,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7161:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":229,"mutability":"mutable","name":"account","nameLocation":"7183:7:0","nodeType":"VariableDeclaration","scope":238,"src":"7175:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":228,"name":"address","nodeType":"ElementaryTypeName","src":"7175:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7160:31:0"},"returnParameters":{"id":231,"nodeType":"ParameterList","parameters":[],"src":"7209:0:0"},"scope":335,"src":"7141:110:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":265,"nodeType":"Block","src":"7449:174:0","statements":[{"assignments":[247],"declarations":[{"constant":false,"id":247,"mutability":"mutable","name":"previousAdminRole","nameLocation":"7467:17:0","nodeType":"VariableDeclaration","scope":265,"src":"7459:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":246,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7459:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":251,"initialValue":{"arguments":[{"id":249,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"7500:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":248,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"7487:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7487:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7459:46:0"},{"expression":{"id":257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":252,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"7515:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":254,"indexExpression":{"id":253,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"7522:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7515:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":255,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7528:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":33,"src":"7515:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":256,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"7540:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7515:34:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":258,"nodeType":"ExpressionStatement","src":"7515:34:0"},{"eventCall":{"arguments":[{"id":260,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"7581:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":261,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"7587:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":262,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"7606:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":259,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"7564:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7564:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":264,"nodeType":"EmitStatement","src":"7559:57:0"}]},"documentation":{"id":239,"nodeType":"StructuredDocumentation","src":"7257:114:0","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":266,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"7385:13:0","nodeType":"FunctionDefinition","parameters":{"id":244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":241,"mutability":"mutable","name":"role","nameLocation":"7407:4:0","nodeType":"VariableDeclaration","scope":266,"src":"7399:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":240,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7399:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":243,"mutability":"mutable","name":"adminRole","nameLocation":"7421:9:0","nodeType":"VariableDeclaration","scope":266,"src":"7413:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":242,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7413:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7398:33:0"},"returnParameters":{"id":245,"nodeType":"ParameterList","parameters":[],"src":"7449:0:0"},"scope":335,"src":"7376:247:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":297,"nodeType":"Block","src":"7859:165:0","statements":[{"condition":{"id":278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7873:23:0","subExpression":{"arguments":[{"id":275,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"7882:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":276,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"7888:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":274,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"7874:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7874:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":296,"nodeType":"IfStatement","src":"7869:149:0","trueBody":{"id":295,"nodeType":"Block","src":"7898:120:0","statements":[{"expression":{"id":286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":279,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"7912:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":281,"indexExpression":{"id":280,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"7919:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7912:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":282,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7925:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":31,"src":"7912:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":284,"indexExpression":{"id":283,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"7933:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7912:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7944:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7912:36:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":287,"nodeType":"ExpressionStatement","src":"7912:36:0"},{"eventCall":{"arguments":[{"id":289,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"7979:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":290,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"7985:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":291,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"7994:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7994:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":288,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"7967:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7967:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":294,"nodeType":"EmitStatement","src":"7962:45:0"}]}}]},"documentation":{"id":267,"nodeType":"StructuredDocumentation","src":"7629:157:0","text":" @dev Grants `role` to `account`.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":298,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"7800:10:0","nodeType":"FunctionDefinition","parameters":{"id":272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":269,"mutability":"mutable","name":"role","nameLocation":"7819:4:0","nodeType":"VariableDeclaration","scope":298,"src":"7811:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":268,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7811:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":271,"mutability":"mutable","name":"account","nameLocation":"7833:7:0","nodeType":"VariableDeclaration","scope":298,"src":"7825:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":270,"name":"address","nodeType":"ElementaryTypeName","src":"7825:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7810:31:0"},"returnParameters":{"id":273,"nodeType":"ParameterList","parameters":[],"src":"7859:0:0"},"scope":335,"src":"7791:233:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":328,"nodeType":"Block","src":"8264:165:0","statements":[{"condition":{"arguments":[{"id":307,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"8286:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":308,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"8292:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":306,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"8278:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8278:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":327,"nodeType":"IfStatement","src":"8274:149:0","trueBody":{"id":326,"nodeType":"Block","src":"8302:121:0","statements":[{"expression":{"id":317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":310,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"8316:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":312,"indexExpression":{"id":311,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"8323:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8316:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":313,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8329:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":31,"src":"8316:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":315,"indexExpression":{"id":314,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"8337:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8316:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8348:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"8316:37:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":318,"nodeType":"ExpressionStatement","src":"8316:37:0"},{"eventCall":{"arguments":[{"id":320,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"8384:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":321,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"8390:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":322,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"8399:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8399:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":319,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":365,"src":"8372:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8372:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":325,"nodeType":"EmitStatement","src":"8367:45:0"}]}}]},"documentation":{"id":299,"nodeType":"StructuredDocumentation","src":"8030:160:0","text":" @dev Revokes `role` from `account`.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":329,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"8204:11:0","nodeType":"FunctionDefinition","parameters":{"id":304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":301,"mutability":"mutable","name":"role","nameLocation":"8224:4:0","nodeType":"VariableDeclaration","scope":329,"src":"8216:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":300,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8216:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":303,"mutability":"mutable","name":"account","nameLocation":"8238:7:0","nodeType":"VariableDeclaration","scope":329,"src":"8230:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":302,"name":"address","nodeType":"ElementaryTypeName","src":"8230:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8215:31:0"},"returnParameters":{"id":305,"nodeType":"ParameterList","parameters":[],"src":"8264:0:0"},"scope":335,"src":"8195:234:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":330,"nodeType":"StructuredDocumentation","src":"8435:254:0","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":334,"mutability":"mutable","name":"__gap","nameLocation":"8714:5:0","nodeType":"VariableDeclaration","scope":335,"src":"8694:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":331,"name":"uint256","nodeType":"ElementaryTypeName","src":"8694:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":333,"length":{"hexValue":"3439","id":332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8702:2:0","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"8694:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":336,"src":"1893:6829:0","usedErrors":[]}],"src":"108:8615:0"},"id":0},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol","exportedSymbols":{"IAccessControlUpgradeable":[408]},"id":409,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":337,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"94:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControlUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":338,"nodeType":"StructuredDocumentation","src":"119:89:1","text":" @dev External interface of AccessControl declared to support ERC165 detection."},"fullyImplemented":false,"id":408,"linearizedBaseContracts":[408],"name":"IAccessControlUpgradeable","nameLocation":"219:25:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":339,"nodeType":"StructuredDocumentation","src":"251:292:1","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"},"eventSelector":"bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff","id":347,"name":"RoleAdminChanged","nameLocation":"554:16:1","nodeType":"EventDefinition","parameters":{"id":346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":341,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"587:4:1","nodeType":"VariableDeclaration","scope":347,"src":"571:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":340,"name":"bytes32","nodeType":"ElementaryTypeName","src":"571:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":343,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"609:17:1","nodeType":"VariableDeclaration","scope":347,"src":"593:33:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":342,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":345,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"644:12:1","nodeType":"VariableDeclaration","scope":347,"src":"628:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":344,"name":"bytes32","nodeType":"ElementaryTypeName","src":"628:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"570:87:1"},"src":"548:110:1"},{"anonymous":false,"documentation":{"id":348,"nodeType":"StructuredDocumentation","src":"664:212:1","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":356,"name":"RoleGranted","nameLocation":"887:11:1","nodeType":"EventDefinition","parameters":{"id":355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":350,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"915:4:1","nodeType":"VariableDeclaration","scope":356,"src":"899:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":349,"name":"bytes32","nodeType":"ElementaryTypeName","src":"899:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":352,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"937:7:1","nodeType":"VariableDeclaration","scope":356,"src":"921:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":351,"name":"address","nodeType":"ElementaryTypeName","src":"921:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":354,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"962:6:1","nodeType":"VariableDeclaration","scope":356,"src":"946:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":353,"name":"address","nodeType":"ElementaryTypeName","src":"946:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"898:71:1"},"src":"881:89:1"},{"anonymous":false,"documentation":{"id":357,"nodeType":"StructuredDocumentation","src":"976:275:1","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":365,"name":"RoleRevoked","nameLocation":"1262:11:1","nodeType":"EventDefinition","parameters":{"id":364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":359,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1290:4:1","nodeType":"VariableDeclaration","scope":365,"src":"1274:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":358,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1274:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":361,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1312:7:1","nodeType":"VariableDeclaration","scope":365,"src":"1296:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":360,"name":"address","nodeType":"ElementaryTypeName","src":"1296:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":363,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1337:6:1","nodeType":"VariableDeclaration","scope":365,"src":"1321:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":362,"name":"address","nodeType":"ElementaryTypeName","src":"1321:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1273:71:1"},"src":"1256:89:1"},{"documentation":{"id":366,"nodeType":"StructuredDocumentation","src":"1351:76:1","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":375,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1441:7:1","nodeType":"FunctionDefinition","parameters":{"id":371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":368,"mutability":"mutable","name":"role","nameLocation":"1457:4:1","nodeType":"VariableDeclaration","scope":375,"src":"1449:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":367,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1449:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":370,"mutability":"mutable","name":"account","nameLocation":"1471:7:1","nodeType":"VariableDeclaration","scope":375,"src":"1463:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":369,"name":"address","nodeType":"ElementaryTypeName","src":"1463:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1448:31:1"},"returnParameters":{"id":374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":373,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":375,"src":"1503:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":372,"name":"bool","nodeType":"ElementaryTypeName","src":"1503:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1502:6:1"},"scope":408,"src":"1432:77:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":376,"nodeType":"StructuredDocumentation","src":"1515:184:1","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":383,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"1713:12:1","nodeType":"FunctionDefinition","parameters":{"id":379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":378,"mutability":"mutable","name":"role","nameLocation":"1734:4:1","nodeType":"VariableDeclaration","scope":383,"src":"1726:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1726:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1725:14:1"},"returnParameters":{"id":382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":381,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":383,"src":"1763:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":380,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1763:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1762:9:1"},"scope":408,"src":"1704:68:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":384,"nodeType":"StructuredDocumentation","src":"1778:239:1","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":391,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2031:9:1","nodeType":"FunctionDefinition","parameters":{"id":389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":386,"mutability":"mutable","name":"role","nameLocation":"2049:4:1","nodeType":"VariableDeclaration","scope":391,"src":"2041:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":385,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2041:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":388,"mutability":"mutable","name":"account","nameLocation":"2063:7:1","nodeType":"VariableDeclaration","scope":391,"src":"2055:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":387,"name":"address","nodeType":"ElementaryTypeName","src":"2055:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2040:31:1"},"returnParameters":{"id":390,"nodeType":"ParameterList","parameters":[],"src":"2080:0:1"},"scope":408,"src":"2022:59:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":392,"nodeType":"StructuredDocumentation","src":"2087:223:1","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":399,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2324:10:1","nodeType":"FunctionDefinition","parameters":{"id":397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":394,"mutability":"mutable","name":"role","nameLocation":"2343:4:1","nodeType":"VariableDeclaration","scope":399,"src":"2335:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":393,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2335:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":396,"mutability":"mutable","name":"account","nameLocation":"2357:7:1","nodeType":"VariableDeclaration","scope":399,"src":"2349:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":395,"name":"address","nodeType":"ElementaryTypeName","src":"2349:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2334:31:1"},"returnParameters":{"id":398,"nodeType":"ParameterList","parameters":[],"src":"2374:0:1"},"scope":408,"src":"2315:60:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":400,"nodeType":"StructuredDocumentation","src":"2381:480:1","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."},"functionSelector":"36568abe","id":407,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2875:12:1","nodeType":"FunctionDefinition","parameters":{"id":405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":402,"mutability":"mutable","name":"role","nameLocation":"2896:4:1","nodeType":"VariableDeclaration","scope":407,"src":"2888:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":401,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2888:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":404,"mutability":"mutable","name":"account","nameLocation":"2910:7:1","nodeType":"VariableDeclaration","scope":407,"src":"2902:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":403,"name":"address","nodeType":"ElementaryTypeName","src":"2902:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2887:31:1"},"returnParameters":{"id":406,"nodeType":"ParameterList","parameters":[],"src":"2927:0:1"},"scope":408,"src":"2866:62:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":409,"src":"209:2721:1","usedErrors":[]}],"src":"94:2837:1"},"id":1},"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol","exportedSymbols":{"IERC20Upgradeable":[858]},"id":412,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":410,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"90:23:2"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"../token/ERC20/IERC20Upgradeable.sol","id":411,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":412,"sourceUnit":859,"src":"115:46:2","symbolAliases":[],"unitAlias":""}],"src":"90:72:2"},"id":2},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[1459],"Initializable":[580]},"id":581,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":413,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:3"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":414,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":581,"sourceUnit":1460,"src":"138:44:3","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":415,"nodeType":"StructuredDocumentation","src":"184:2198:3","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":580,"linearizedBaseContracts":[580],"name":"Initializable","nameLocation":"2401:13:3","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":416,"nodeType":"StructuredDocumentation","src":"2421:109:3","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":418,"mutability":"mutable","name":"_initialized","nameLocation":"2549:12:3","nodeType":"VariableDeclaration","scope":580,"src":"2535:26:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":417,"name":"uint8","nodeType":"ElementaryTypeName","src":"2535:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":419,"nodeType":"StructuredDocumentation","src":"2568:91:3","text":" @dev Indicates that the contract is in the process of being initialized."},"id":421,"mutability":"mutable","name":"_initializing","nameLocation":"2677:13:3","nodeType":"VariableDeclaration","scope":580,"src":"2664:26:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":420,"name":"bool","nodeType":"ElementaryTypeName","src":"2664:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":422,"nodeType":"StructuredDocumentation","src":"2697:90:3","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":426,"name":"Initialized","nameLocation":"2798:11:3","nodeType":"EventDefinition","parameters":{"id":425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":424,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2816:7:3","nodeType":"VariableDeclaration","scope":426,"src":"2810:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":423,"name":"uint8","nodeType":"ElementaryTypeName","src":"2810:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2809:15:3"},"src":"2792:33:3"},{"body":{"id":481,"nodeType":"Block","src":"3258:483:3","statements":[{"assignments":[430],"declarations":[{"constant":false,"id":430,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3273:14:3","nodeType":"VariableDeclaration","scope":481,"src":"3268:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":429,"name":"bool","nodeType":"ElementaryTypeName","src":"3268:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":433,"initialValue":{"id":432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3290:14:3","subExpression":{"id":431,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"3291:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3268:36:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":435,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"3336:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":436,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"3354:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3369:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3354:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3336:34:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":440,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3335:36:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3376:45:3","subExpression":{"arguments":[{"arguments":[{"id":445,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3415:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$580","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$580","typeString":"contract Initializable"}],"id":444,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3407:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":443,"name":"address","nodeType":"ElementaryTypeName","src":"3407:7:3","typeDescriptions":{}}},"id":446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3407:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":441,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1459,"src":"3377:18:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1459_$","typeString":"type(library AddressUpgradeable)"}},"id":442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3396:10:3","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1193,"src":"3377:29:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3377:44:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":449,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"3425:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3441:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3425:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3376:66:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":453,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3375:68:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3335:108:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3457:48:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":434,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3314:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3314:201:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":457,"nodeType":"ExpressionStatement","src":"3314:201:3"},{"expression":{"id":460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":458,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"3525:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3540:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3525:16:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":461,"nodeType":"ExpressionStatement","src":"3525:16:3"},{"condition":{"id":462,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"3555:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":468,"nodeType":"IfStatement","src":"3551:65:3","trueBody":{"id":467,"nodeType":"Block","src":"3571:45:3","statements":[{"expression":{"id":465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":463,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"3585:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3601:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3585:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":466,"nodeType":"ExpressionStatement","src":"3585:20:3"}]}},{"id":469,"nodeType":"PlaceholderStatement","src":"3625:1:3"},{"condition":{"id":470,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"3640:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":480,"nodeType":"IfStatement","src":"3636:99:3","trueBody":{"id":479,"nodeType":"Block","src":"3656:79:3","statements":[{"expression":{"id":473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":471,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"3670:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3686:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3670:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":474,"nodeType":"ExpressionStatement","src":"3670:21:3"},{"eventCall":{"arguments":[{"hexValue":"31","id":476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3722:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":475,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"3710:11:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3710:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":478,"nodeType":"EmitStatement","src":"3705:19:3"}]}}]},"documentation":{"id":427,"nodeType":"StructuredDocumentation","src":"2831:399:3","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":482,"name":"initializer","nameLocation":"3244:11:3","nodeType":"ModifierDefinition","parameters":{"id":428,"nodeType":"ParameterList","parameters":[],"src":"3255:2:3"},"src":"3235:506:3","virtual":false,"visibility":"internal"},{"body":{"id":514,"nodeType":"Block","src":"4852:255:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4870:14:3","subExpression":{"id":488,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"4871:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":490,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"4888:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":491,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"4903:7:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4888:22:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4870:40:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4912:48:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":487,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4862:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4862:99:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":496,"nodeType":"ExpressionStatement","src":"4862:99:3"},{"expression":{"id":499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":497,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"4971:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":498,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"4986:7:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4971:22:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":500,"nodeType":"ExpressionStatement","src":"4971:22:3"},{"expression":{"id":503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":501,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"5003:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5019:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5003:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":504,"nodeType":"ExpressionStatement","src":"5003:20:3"},{"id":505,"nodeType":"PlaceholderStatement","src":"5033:1:3"},{"expression":{"id":508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":506,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"5044:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5060:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5044:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":509,"nodeType":"ExpressionStatement","src":"5044:21:3"},{"eventCall":{"arguments":[{"id":511,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"5092:7:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":510,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"5080:11:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5080:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":513,"nodeType":"EmitStatement","src":"5075:25:3"}]},"documentation":{"id":483,"nodeType":"StructuredDocumentation","src":"3747:1062:3","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":515,"name":"reinitializer","nameLocation":"4823:13:3","nodeType":"ModifierDefinition","parameters":{"id":486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":485,"mutability":"mutable","name":"version","nameLocation":"4843:7:3","nodeType":"VariableDeclaration","scope":515,"src":"4837:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":484,"name":"uint8","nodeType":"ElementaryTypeName","src":"4837:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4836:15:3"},"src":"4814:293:3","virtual":false,"visibility":"internal"},{"body":{"id":524,"nodeType":"Block","src":"5345:97:3","statements":[{"expression":{"arguments":[{"id":519,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"5363:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5378:45:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":518,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5355:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5355:69:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":522,"nodeType":"ExpressionStatement","src":"5355:69:3"},{"id":523,"nodeType":"PlaceholderStatement","src":"5434:1:3"}]},"documentation":{"id":516,"nodeType":"StructuredDocumentation","src":"5113:199:3","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":525,"name":"onlyInitializing","nameLocation":"5326:16:3","nodeType":"ModifierDefinition","parameters":{"id":517,"nodeType":"ParameterList","parameters":[],"src":"5342:2:3"},"src":"5317:125:3","virtual":false,"visibility":"internal"},{"body":{"id":560,"nodeType":"Block","src":"5977:230:3","statements":[{"expression":{"arguments":[{"id":531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5995:14:3","subExpression":{"id":530,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"5996:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6011:41:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":529,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5987:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5987:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":534,"nodeType":"ExpressionStatement","src":"5987:66:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":535,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"6067:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"arguments":[{"id":538,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6087:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":537,"name":"uint8","nodeType":"ElementaryTypeName","src":"6087:5:3","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":536,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6082:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6082:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":540,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6094:3:3","memberName":"max","nodeType":"MemberAccess","src":"6082:15:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6067:30:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":559,"nodeType":"IfStatement","src":"6063:138:3","trueBody":{"id":558,"nodeType":"Block","src":"6099:102:3","statements":[{"expression":{"id":548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":542,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"6113:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6133:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":544,"name":"uint8","nodeType":"ElementaryTypeName","src":"6133:5:3","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":543,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6128:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6128:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":547,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6140:3:3","memberName":"max","nodeType":"MemberAccess","src":"6128:15:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6113:30:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":549,"nodeType":"ExpressionStatement","src":"6113:30:3"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":553,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6179:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":552,"name":"uint8","nodeType":"ElementaryTypeName","src":"6179:5:3","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":551,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6174:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":555,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6186:3:3","memberName":"max","nodeType":"MemberAccess","src":"6174:15:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":550,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"6162:11:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6162:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":557,"nodeType":"EmitStatement","src":"6157:33:3"}]}}]},"documentation":{"id":526,"nodeType":"StructuredDocumentation","src":"5448:475:3","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":561,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5937:20:3","nodeType":"FunctionDefinition","parameters":{"id":527,"nodeType":"ParameterList","parameters":[],"src":"5957:2:3"},"returnParameters":{"id":528,"nodeType":"ParameterList","parameters":[],"src":"5977:0:3"},"scope":580,"src":"5928:279:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":569,"nodeType":"Block","src":"6381:36:3","statements":[{"expression":{"id":567,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"6398:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":566,"id":568,"nodeType":"Return","src":"6391:19:3"}]},"documentation":{"id":562,"nodeType":"StructuredDocumentation","src":"6213:99:3","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":570,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6326:22:3","nodeType":"FunctionDefinition","parameters":{"id":563,"nodeType":"ParameterList","parameters":[],"src":"6348:2:3"},"returnParameters":{"id":566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":565,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":570,"src":"6374:5:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":564,"name":"uint8","nodeType":"ElementaryTypeName","src":"6374:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6373:7:3"},"scope":580,"src":"6317:100:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":578,"nodeType":"Block","src":"6589:37:3","statements":[{"expression":{"id":576,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"6606:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":575,"id":577,"nodeType":"Return","src":"6599:20:3"}]},"documentation":{"id":571,"nodeType":"StructuredDocumentation","src":"6423:105:3","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":579,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6542:15:3","nodeType":"FunctionDefinition","parameters":{"id":572,"nodeType":"ParameterList","parameters":[],"src":"6557:2:3"},"returnParameters":{"id":575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":574,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":579,"src":"6583:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":573,"name":"bool","nodeType":"ElementaryTypeName","src":"6583:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6582:6:3"},"scope":580,"src":"6533:93:3","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":581,"src":"2383:4245:3","usedErrors":[]}],"src":"113:6516:3"},"id":3},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1459],"ContextUpgradeable":[1501],"Initializable":[580],"PausableUpgradeable":[707]},"id":708,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":582,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:4"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":583,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":708,"sourceUnit":1502,"src":"130:41:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":584,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":708,"sourceUnit":581,"src":"172:42:4","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":586,"name":"Initializable","nameLocations":["697:13:4"],"nodeType":"IdentifierPath","referencedDeclaration":580,"src":"697:13:4"},"id":587,"nodeType":"InheritanceSpecifier","src":"697:13:4"},{"baseName":{"id":588,"name":"ContextUpgradeable","nameLocations":["712:18:4"],"nodeType":"IdentifierPath","referencedDeclaration":1501,"src":"712:18:4"},"id":589,"nodeType":"InheritanceSpecifier","src":"712:18:4"}],"canonicalName":"PausableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":585,"nodeType":"StructuredDocumentation","src":"216:439:4","text":" @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."},"fullyImplemented":true,"id":707,"linearizedBaseContracts":[707,1501,580],"name":"PausableUpgradeable","nameLocation":"674:19:4","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":590,"nodeType":"StructuredDocumentation","src":"737:73:4","text":" @dev Emitted when the pause is triggered by `account`."},"eventSelector":"62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258","id":594,"name":"Paused","nameLocation":"821:6:4","nodeType":"EventDefinition","parameters":{"id":593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":592,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"836:7:4","nodeType":"VariableDeclaration","scope":594,"src":"828:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":591,"name":"address","nodeType":"ElementaryTypeName","src":"828:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"827:17:4"},"src":"815:30:4"},{"anonymous":false,"documentation":{"id":595,"nodeType":"StructuredDocumentation","src":"851:70:4","text":" @dev Emitted when the pause is lifted by `account`."},"eventSelector":"5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa","id":599,"name":"Unpaused","nameLocation":"932:8:4","nodeType":"EventDefinition","parameters":{"id":598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":597,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"949:7:4","nodeType":"VariableDeclaration","scope":599,"src":"941:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":596,"name":"address","nodeType":"ElementaryTypeName","src":"941:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"940:17:4"},"src":"926:32:4"},{"constant":false,"id":601,"mutability":"mutable","name":"_paused","nameLocation":"977:7:4","nodeType":"VariableDeclaration","scope":707,"src":"964:20:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":600,"name":"bool","nodeType":"ElementaryTypeName","src":"964:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"body":{"id":610,"nodeType":"Block","src":"1116:44:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":607,"name":"__Pausable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"1126:25:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1126:27:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":609,"nodeType":"ExpressionStatement","src":"1126:27:4"}]},"documentation":{"id":602,"nodeType":"StructuredDocumentation","src":"991:67:4","text":" @dev Initializes the contract in unpaused state."},"id":611,"implemented":true,"kind":"function","modifiers":[{"id":605,"kind":"modifierInvocation","modifierName":{"id":604,"name":"onlyInitializing","nameLocations":["1099:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"1099:16:4"},"nodeType":"ModifierInvocation","src":"1099:16:4"}],"name":"__Pausable_init","nameLocation":"1072:15:4","nodeType":"FunctionDefinition","parameters":{"id":603,"nodeType":"ParameterList","parameters":[],"src":"1087:2:4"},"returnParameters":{"id":606,"nodeType":"ParameterList","parameters":[],"src":"1116:0:4"},"scope":707,"src":"1063:97:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":620,"nodeType":"Block","src":"1229:32:4","statements":[{"expression":{"id":618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":616,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"1239:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1249:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1239:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":619,"nodeType":"ExpressionStatement","src":"1239:15:4"}]},"id":621,"implemented":true,"kind":"function","modifiers":[{"id":614,"kind":"modifierInvocation","modifierName":{"id":613,"name":"onlyInitializing","nameLocations":["1212:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"1212:16:4"},"nodeType":"ModifierInvocation","src":"1212:16:4"}],"name":"__Pausable_init_unchained","nameLocation":"1175:25:4","nodeType":"FunctionDefinition","parameters":{"id":612,"nodeType":"ParameterList","parameters":[],"src":"1200:2:4"},"returnParameters":{"id":615,"nodeType":"ParameterList","parameters":[],"src":"1229:0:4"},"scope":707,"src":"1166:95:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":628,"nodeType":"Block","src":"1472:47:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":624,"name":"_requireNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":658,"src":"1482:17:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1482:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":626,"nodeType":"ExpressionStatement","src":"1482:19:4"},{"id":627,"nodeType":"PlaceholderStatement","src":"1511:1:4"}]},"documentation":{"id":622,"nodeType":"StructuredDocumentation","src":"1267:175:4","text":" @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."},"id":629,"name":"whenNotPaused","nameLocation":"1456:13:4","nodeType":"ModifierDefinition","parameters":{"id":623,"nodeType":"ParameterList","parameters":[],"src":"1469:2:4"},"src":"1447:72:4","virtual":false,"visibility":"internal"},{"body":{"id":636,"nodeType":"Block","src":"1719:44:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":632,"name":"_requirePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"1729:14:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1729:16:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":634,"nodeType":"ExpressionStatement","src":"1729:16:4"},{"id":635,"nodeType":"PlaceholderStatement","src":"1755:1:4"}]},"documentation":{"id":630,"nodeType":"StructuredDocumentation","src":"1525:167:4","text":" @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."},"id":637,"name":"whenPaused","nameLocation":"1706:10:4","nodeType":"ModifierDefinition","parameters":{"id":631,"nodeType":"ParameterList","parameters":[],"src":"1716:2:4"},"src":"1697:66:4","virtual":false,"visibility":"internal"},{"body":{"id":645,"nodeType":"Block","src":"1911:31:4","statements":[{"expression":{"id":643,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"1928:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":642,"id":644,"nodeType":"Return","src":"1921:14:4"}]},"documentation":{"id":638,"nodeType":"StructuredDocumentation","src":"1769:84:4","text":" @dev Returns true if the contract is paused, and false otherwise."},"functionSelector":"5c975abb","id":646,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1867:6:4","nodeType":"FunctionDefinition","parameters":{"id":639,"nodeType":"ParameterList","parameters":[],"src":"1873:2:4"},"returnParameters":{"id":642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":641,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":646,"src":"1905:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":640,"name":"bool","nodeType":"ElementaryTypeName","src":"1905:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1904:6:4"},"scope":707,"src":"1858:84:4","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":657,"nodeType":"Block","src":"2061:55:4","statements":[{"expression":{"arguments":[{"id":653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2079:9:4","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":651,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"2080:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2080:8:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a20706175736564","id":654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2090:18:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""},"value":"Pausable: paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""}],"id":650,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2071:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2071:38:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":656,"nodeType":"ExpressionStatement","src":"2071:38:4"}]},"documentation":{"id":647,"nodeType":"StructuredDocumentation","src":"1948:57:4","text":" @dev Throws if the contract is paused."},"id":658,"implemented":true,"kind":"function","modifiers":[],"name":"_requireNotPaused","nameLocation":"2019:17:4","nodeType":"FunctionDefinition","parameters":{"id":648,"nodeType":"ParameterList","parameters":[],"src":"2036:2:4"},"returnParameters":{"id":649,"nodeType":"ParameterList","parameters":[],"src":"2061:0:4"},"scope":707,"src":"2010:106:4","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":668,"nodeType":"Block","src":"2236:58:4","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":663,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"2254:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2254:8:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a206e6f7420706175736564","id":665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2264:22:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""},"value":"Pausable: not paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""}],"id":662,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2246:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2246:41:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":667,"nodeType":"ExpressionStatement","src":"2246:41:4"}]},"documentation":{"id":659,"nodeType":"StructuredDocumentation","src":"2122:61:4","text":" @dev Throws if the contract is not paused."},"id":669,"implemented":true,"kind":"function","modifiers":[],"name":"_requirePaused","nameLocation":"2197:14:4","nodeType":"FunctionDefinition","parameters":{"id":660,"nodeType":"ParameterList","parameters":[],"src":"2211:2:4"},"returnParameters":{"id":661,"nodeType":"ParameterList","parameters":[],"src":"2236:0:4"},"scope":707,"src":"2188:106:4","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":684,"nodeType":"Block","src":"2478:66:4","statements":[{"expression":{"id":677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":675,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"2488:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2498:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2488:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":678,"nodeType":"ExpressionStatement","src":"2488:14:4"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":680,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"2524:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2524:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":679,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"2517:6:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:20:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":683,"nodeType":"EmitStatement","src":"2512:25:4"}]},"documentation":{"id":670,"nodeType":"StructuredDocumentation","src":"2300:124:4","text":" @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."},"id":685,"implemented":true,"kind":"function","modifiers":[{"id":673,"kind":"modifierInvocation","modifierName":{"id":672,"name":"whenNotPaused","nameLocations":["2464:13:4"],"nodeType":"IdentifierPath","referencedDeclaration":629,"src":"2464:13:4"},"nodeType":"ModifierInvocation","src":"2464:13:4"}],"name":"_pause","nameLocation":"2438:6:4","nodeType":"FunctionDefinition","parameters":{"id":671,"nodeType":"ParameterList","parameters":[],"src":"2444:2:4"},"returnParameters":{"id":674,"nodeType":"ParameterList","parameters":[],"src":"2478:0:4"},"scope":707,"src":"2429:115:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":700,"nodeType":"Block","src":"2724:69:4","statements":[{"expression":{"id":693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":691,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"2734:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2744:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2734:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":694,"nodeType":"ExpressionStatement","src":"2734:15:4"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":696,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"2773:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2773:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":695,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":599,"src":"2764:8:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2764:22:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":699,"nodeType":"EmitStatement","src":"2759:27:4"}]},"documentation":{"id":686,"nodeType":"StructuredDocumentation","src":"2550:121:4","text":" @dev Returns to normal state.\n Requirements:\n - The contract must be paused."},"id":701,"implemented":true,"kind":"function","modifiers":[{"id":689,"kind":"modifierInvocation","modifierName":{"id":688,"name":"whenPaused","nameLocations":["2713:10:4"],"nodeType":"IdentifierPath","referencedDeclaration":637,"src":"2713:10:4"},"nodeType":"ModifierInvocation","src":"2713:10:4"}],"name":"_unpause","nameLocation":"2685:8:4","nodeType":"FunctionDefinition","parameters":{"id":687,"nodeType":"ParameterList","parameters":[],"src":"2693:2:4"},"returnParameters":{"id":690,"nodeType":"ParameterList","parameters":[],"src":"2724:0:4"},"scope":707,"src":"2676:117:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":702,"nodeType":"StructuredDocumentation","src":"2799:254:4","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":706,"mutability":"mutable","name":"__gap","nameLocation":"3078:5:4","nodeType":"VariableDeclaration","scope":707,"src":"3058:25:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":703,"name":"uint256","nodeType":"ElementaryTypeName","src":"3058:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":705,"length":{"hexValue":"3439","id":704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3066:2:4","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3058:11:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":708,"src":"656:2430:4","usedErrors":[]}],"src":"105:2982:4"},"id":4},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1459],"Initializable":[580],"ReentrancyGuardUpgradeable":[780]},"id":781,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":709,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:5"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":710,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":781,"sourceUnit":581,"src":"136:42:5","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":712,"name":"Initializable","nameLocations":["979:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":580,"src":"979:13:5"},"id":713,"nodeType":"InheritanceSpecifier","src":"979:13:5"}],"canonicalName":"ReentrancyGuardUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":711,"nodeType":"StructuredDocumentation","src":"180:750:5","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":780,"linearizedBaseContracts":[780,580],"name":"ReentrancyGuardUpgradeable","nameLocation":"949:26:5","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":716,"mutability":"constant","name":"_NOT_ENTERED","nameLocation":"1772:12:5","nodeType":"VariableDeclaration","scope":780,"src":"1747:41:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":714,"name":"uint256","nodeType":"ElementaryTypeName","src":"1747:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1787:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":719,"mutability":"constant","name":"_ENTERED","nameLocation":"1819:8:5","nodeType":"VariableDeclaration","scope":780,"src":"1794:37:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":717,"name":"uint256","nodeType":"ElementaryTypeName","src":"1794:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1830:1:5","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":721,"mutability":"mutable","name":"_status","nameLocation":"1854:7:5","nodeType":"VariableDeclaration","scope":780,"src":"1838:23:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":720,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":729,"nodeType":"Block","src":"1928:51:5","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":726,"name":"__ReentrancyGuard_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"1938:32:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1938:34:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":728,"nodeType":"ExpressionStatement","src":"1938:34:5"}]},"id":730,"implemented":true,"kind":"function","modifiers":[{"id":724,"kind":"modifierInvocation","modifierName":{"id":723,"name":"onlyInitializing","nameLocations":["1911:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"1911:16:5"},"nodeType":"ModifierInvocation","src":"1911:16:5"}],"name":"__ReentrancyGuard_init","nameLocation":"1877:22:5","nodeType":"FunctionDefinition","parameters":{"id":722,"nodeType":"ParameterList","parameters":[],"src":"1899:2:5"},"returnParameters":{"id":725,"nodeType":"ParameterList","parameters":[],"src":"1928:0:5"},"scope":780,"src":"1868:111:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":739,"nodeType":"Block","src":"2055:39:5","statements":[{"expression":{"id":737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":735,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"2065:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":736,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"2075:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2065:22:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":738,"nodeType":"ExpressionStatement","src":"2065:22:5"}]},"id":740,"implemented":true,"kind":"function","modifiers":[{"id":733,"kind":"modifierInvocation","modifierName":{"id":732,"name":"onlyInitializing","nameLocations":["2038:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"2038:16:5"},"nodeType":"ModifierInvocation","src":"2038:16:5"}],"name":"__ReentrancyGuard_init_unchained","nameLocation":"1994:32:5","nodeType":"FunctionDefinition","parameters":{"id":731,"nodeType":"ParameterList","parameters":[],"src":"2026:2:5"},"returnParameters":{"id":734,"nodeType":"ParameterList","parameters":[],"src":"2055:0:5"},"scope":780,"src":"1985:109:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":750,"nodeType":"Block","src":"2495:79:5","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":743,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"2505:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2505:21:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":745,"nodeType":"ExpressionStatement","src":"2505:21:5"},{"id":746,"nodeType":"PlaceholderStatement","src":"2536:1:5"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":747,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"2547:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2547:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":749,"nodeType":"ExpressionStatement","src":"2547:20:5"}]},"documentation":{"id":741,"nodeType":"StructuredDocumentation","src":"2100:366:5","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":751,"name":"nonReentrant","nameLocation":"2480:12:5","nodeType":"ModifierDefinition","parameters":{"id":742,"nodeType":"ParameterList","parameters":[],"src":"2492:2:5"},"src":"2471:103:5","virtual":false,"visibility":"internal"},{"body":{"id":765,"nodeType":"Block","src":"2619:248:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":755,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"2712:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":756,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":719,"src":"2723:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2712:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2733:33:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":754,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2704:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2704:63:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":760,"nodeType":"ExpressionStatement","src":"2704:63:5"},{"expression":{"id":763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":761,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"2842:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":762,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":719,"src":"2852:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2842:18:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":764,"nodeType":"ExpressionStatement","src":"2842:18:5"}]},"id":766,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2589:19:5","nodeType":"FunctionDefinition","parameters":{"id":752,"nodeType":"ParameterList","parameters":[],"src":"2608:2:5"},"returnParameters":{"id":753,"nodeType":"ParameterList","parameters":[],"src":"2619:0:5"},"scope":780,"src":"2580:287:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":773,"nodeType":"Block","src":"2911:171:5","statements":[{"expression":{"id":771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":769,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"3053:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":770,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"3063:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3053:22:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":772,"nodeType":"ExpressionStatement","src":"3053:22:5"}]},"id":774,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2882:18:5","nodeType":"FunctionDefinition","parameters":{"id":767,"nodeType":"ParameterList","parameters":[],"src":"2900:2:5"},"returnParameters":{"id":768,"nodeType":"ParameterList","parameters":[],"src":"2911:0:5"},"scope":780,"src":"2873:209:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"constant":false,"documentation":{"id":775,"nodeType":"StructuredDocumentation","src":"3088:254:5","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":779,"mutability":"mutable","name":"__gap","nameLocation":"3367:5:5","nodeType":"VariableDeclaration","scope":780,"src":"3347:25:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":776,"name":"uint256","nodeType":"ElementaryTypeName","src":"3347:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":778,"length":{"hexValue":"3439","id":777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3355:2:5","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3347:11:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":781,"src":"931:2444:5","usedErrors":[]}],"src":"112:3264:5"},"id":5},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","exportedSymbols":{"IERC20Upgradeable":[858]},"id":859,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":782,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":783,"nodeType":"StructuredDocumentation","src":"131:70:6","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":858,"linearizedBaseContracts":[858],"name":"IERC20Upgradeable","nameLocation":"212:17:6","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":784,"nodeType":"StructuredDocumentation","src":"236:158:6","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":792,"name":"Transfer","nameLocation":"405:8:6","nodeType":"EventDefinition","parameters":{"id":791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":786,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"430:4:6","nodeType":"VariableDeclaration","scope":792,"src":"414:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":785,"name":"address","nodeType":"ElementaryTypeName","src":"414:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":788,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"452:2:6","nodeType":"VariableDeclaration","scope":792,"src":"436:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":787,"name":"address","nodeType":"ElementaryTypeName","src":"436:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":790,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"464:5:6","nodeType":"VariableDeclaration","scope":792,"src":"456:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":789,"name":"uint256","nodeType":"ElementaryTypeName","src":"456:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"413:57:6"},"src":"399:72:6"},{"anonymous":false,"documentation":{"id":793,"nodeType":"StructuredDocumentation","src":"477:148:6","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":801,"name":"Approval","nameLocation":"636:8:6","nodeType":"EventDefinition","parameters":{"id":800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":795,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"661:5:6","nodeType":"VariableDeclaration","scope":801,"src":"645:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":794,"name":"address","nodeType":"ElementaryTypeName","src":"645:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":797,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"684:7:6","nodeType":"VariableDeclaration","scope":801,"src":"668:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":796,"name":"address","nodeType":"ElementaryTypeName","src":"668:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":799,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"701:5:6","nodeType":"VariableDeclaration","scope":801,"src":"693:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":798,"name":"uint256","nodeType":"ElementaryTypeName","src":"693:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"644:63:6"},"src":"630:78:6"},{"documentation":{"id":802,"nodeType":"StructuredDocumentation","src":"714:66:6","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":807,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"794:11:6","nodeType":"FunctionDefinition","parameters":{"id":803,"nodeType":"ParameterList","parameters":[],"src":"805:2:6"},"returnParameters":{"id":806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":805,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":807,"src":"831:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":804,"name":"uint256","nodeType":"ElementaryTypeName","src":"831:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"830:9:6"},"scope":858,"src":"785:55:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":808,"nodeType":"StructuredDocumentation","src":"846:72:6","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":815,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"932:9:6","nodeType":"FunctionDefinition","parameters":{"id":811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":810,"mutability":"mutable","name":"account","nameLocation":"950:7:6","nodeType":"VariableDeclaration","scope":815,"src":"942:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":809,"name":"address","nodeType":"ElementaryTypeName","src":"942:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"941:17:6"},"returnParameters":{"id":814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":813,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":815,"src":"982:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":812,"name":"uint256","nodeType":"ElementaryTypeName","src":"982:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"981:9:6"},"scope":858,"src":"923:68:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":816,"nodeType":"StructuredDocumentation","src":"997:202:6","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":825,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1213:8:6","nodeType":"FunctionDefinition","parameters":{"id":821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":818,"mutability":"mutable","name":"to","nameLocation":"1230:2:6","nodeType":"VariableDeclaration","scope":825,"src":"1222:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":817,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":820,"mutability":"mutable","name":"amount","nameLocation":"1242:6:6","nodeType":"VariableDeclaration","scope":825,"src":"1234:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":819,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1221:28:6"},"returnParameters":{"id":824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":823,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":825,"src":"1268:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":822,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1267:6:6"},"scope":858,"src":"1204:70:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":826,"nodeType":"StructuredDocumentation","src":"1280:264:6","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":835,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1558:9:6","nodeType":"FunctionDefinition","parameters":{"id":831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":828,"mutability":"mutable","name":"owner","nameLocation":"1576:5:6","nodeType":"VariableDeclaration","scope":835,"src":"1568:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":827,"name":"address","nodeType":"ElementaryTypeName","src":"1568:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":830,"mutability":"mutable","name":"spender","nameLocation":"1591:7:6","nodeType":"VariableDeclaration","scope":835,"src":"1583:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":829,"name":"address","nodeType":"ElementaryTypeName","src":"1583:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1567:32:6"},"returnParameters":{"id":834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":833,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":835,"src":"1623:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":832,"name":"uint256","nodeType":"ElementaryTypeName","src":"1623:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1622:9:6"},"scope":858,"src":"1549:83:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":836,"nodeType":"StructuredDocumentation","src":"1638:642:6","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":845,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2294:7:6","nodeType":"FunctionDefinition","parameters":{"id":841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":838,"mutability":"mutable","name":"spender","nameLocation":"2310:7:6","nodeType":"VariableDeclaration","scope":845,"src":"2302:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":837,"name":"address","nodeType":"ElementaryTypeName","src":"2302:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":840,"mutability":"mutable","name":"amount","nameLocation":"2327:6:6","nodeType":"VariableDeclaration","scope":845,"src":"2319:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":839,"name":"uint256","nodeType":"ElementaryTypeName","src":"2319:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2301:33:6"},"returnParameters":{"id":844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":843,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":845,"src":"2353:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":842,"name":"bool","nodeType":"ElementaryTypeName","src":"2353:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2352:6:6"},"scope":858,"src":"2285:74:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":846,"nodeType":"StructuredDocumentation","src":"2365:287:6","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":857,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2666:12:6","nodeType":"FunctionDefinition","parameters":{"id":853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":848,"mutability":"mutable","name":"from","nameLocation":"2696:4:6","nodeType":"VariableDeclaration","scope":857,"src":"2688:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":847,"name":"address","nodeType":"ElementaryTypeName","src":"2688:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":850,"mutability":"mutable","name":"to","nameLocation":"2718:2:6","nodeType":"VariableDeclaration","scope":857,"src":"2710:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":849,"name":"address","nodeType":"ElementaryTypeName","src":"2710:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":852,"mutability":"mutable","name":"amount","nameLocation":"2738:6:6","nodeType":"VariableDeclaration","scope":857,"src":"2730:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":851,"name":"uint256","nodeType":"ElementaryTypeName","src":"2730:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2678:72:6"},"returnParameters":{"id":856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":855,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":857,"src":"2769:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":854,"name":"bool","nodeType":"ElementaryTypeName","src":"2769:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2768:6:6"},"scope":858,"src":"2657:118:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":859,"src":"202:2575:6","usedErrors":[]}],"src":"106:2672:6"},"id":6},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol","exportedSymbols":{"IERC20PermitUpgradeable":[894]},"id":895,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":860,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"114:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20PermitUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":861,"nodeType":"StructuredDocumentation","src":"139:480:7","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":894,"linearizedBaseContracts":[894],"name":"IERC20PermitUpgradeable","nameLocation":"630:23:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":862,"nodeType":"StructuredDocumentation","src":"660:792:7","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":879,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1466:6:7","nodeType":"FunctionDefinition","parameters":{"id":877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":864,"mutability":"mutable","name":"owner","nameLocation":"1490:5:7","nodeType":"VariableDeclaration","scope":879,"src":"1482:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":863,"name":"address","nodeType":"ElementaryTypeName","src":"1482:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":866,"mutability":"mutable","name":"spender","nameLocation":"1513:7:7","nodeType":"VariableDeclaration","scope":879,"src":"1505:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":865,"name":"address","nodeType":"ElementaryTypeName","src":"1505:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":868,"mutability":"mutable","name":"value","nameLocation":"1538:5:7","nodeType":"VariableDeclaration","scope":879,"src":"1530:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":867,"name":"uint256","nodeType":"ElementaryTypeName","src":"1530:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":870,"mutability":"mutable","name":"deadline","nameLocation":"1561:8:7","nodeType":"VariableDeclaration","scope":879,"src":"1553:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":869,"name":"uint256","nodeType":"ElementaryTypeName","src":"1553:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":872,"mutability":"mutable","name":"v","nameLocation":"1585:1:7","nodeType":"VariableDeclaration","scope":879,"src":"1579:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":871,"name":"uint8","nodeType":"ElementaryTypeName","src":"1579:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":874,"mutability":"mutable","name":"r","nameLocation":"1604:1:7","nodeType":"VariableDeclaration","scope":879,"src":"1596:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":873,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1596:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":876,"mutability":"mutable","name":"s","nameLocation":"1623:1:7","nodeType":"VariableDeclaration","scope":879,"src":"1615:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":875,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1615:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1472:158:7"},"returnParameters":{"id":878,"nodeType":"ParameterList","parameters":[],"src":"1639:0:7"},"scope":894,"src":"1457:183:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":880,"nodeType":"StructuredDocumentation","src":"1646:294:7","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":887,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1954:6:7","nodeType":"FunctionDefinition","parameters":{"id":883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":882,"mutability":"mutable","name":"owner","nameLocation":"1969:5:7","nodeType":"VariableDeclaration","scope":887,"src":"1961:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":881,"name":"address","nodeType":"ElementaryTypeName","src":"1961:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1960:15:7"},"returnParameters":{"id":886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":885,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":887,"src":"1999:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":884,"name":"uint256","nodeType":"ElementaryTypeName","src":"1999:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1998:9:7"},"scope":894,"src":"1945:63:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":888,"nodeType":"StructuredDocumentation","src":"2014:128:7","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":893,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2209:16:7","nodeType":"FunctionDefinition","parameters":{"id":889,"nodeType":"ParameterList","parameters":[],"src":"2225:2:7"},"returnParameters":{"id":892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":891,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":893,"src":"2251:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":890,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2251:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2250:9:7"},"scope":894,"src":"2200:60:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":895,"src":"620:1642:7","usedErrors":[]}],"src":"114:2149:7"},"id":7},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1459],"IERC20PermitUpgradeable":[894],"IERC20Upgradeable":[858],"SafeERC20Upgradeable":[1175]},"id":1176,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":896,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:8"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"../IERC20Upgradeable.sol","id":897,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1176,"sourceUnit":859,"src":"140:34:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol","file":"../extensions/draft-IERC20PermitUpgradeable.sol","id":898,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1176,"sourceUnit":895,"src":"175:57:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../../utils/AddressUpgradeable.sol","id":899,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1176,"sourceUnit":1460,"src":"233:47:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20Upgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":900,"nodeType":"StructuredDocumentation","src":"282:457:8","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":1175,"linearizedBaseContracts":[1175],"name":"SafeERC20Upgradeable","nameLocation":"748:20:8","nodeType":"ContractDefinition","nodes":[{"global":false,"id":903,"libraryName":{"id":901,"name":"AddressUpgradeable","nameLocations":["781:18:8"],"nodeType":"IdentifierPath","referencedDeclaration":1459,"src":"781:18:8"},"nodeType":"UsingForDirective","src":"775:37:8","typeName":{"id":902,"name":"address","nodeType":"ElementaryTypeName","src":"804:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":925,"nodeType":"Block","src":"931:103:8","statements":[{"expression":{"arguments":[{"id":914,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":906,"src":"961:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":917,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":906,"src":"991:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"997:8:8","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":825,"src":"991:14:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1006:8:8","memberName":"selector","nodeType":"MemberAccess","src":"991:23:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":920,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":908,"src":"1016:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":921,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"1020:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":915,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"968:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":916,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"972:18:8","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"968:22:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"968:58:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":913,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"941:19:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$858_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"941:86:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":924,"nodeType":"ExpressionStatement","src":"941:86:8"}]},"id":926,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"827:12:8","nodeType":"FunctionDefinition","parameters":{"id":911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":906,"mutability":"mutable","name":"token","nameLocation":"867:5:8","nodeType":"VariableDeclaration","scope":926,"src":"849:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},"typeName":{"id":905,"nodeType":"UserDefinedTypeName","pathNode":{"id":904,"name":"IERC20Upgradeable","nameLocations":["849:17:8"],"nodeType":"IdentifierPath","referencedDeclaration":858,"src":"849:17:8"},"referencedDeclaration":858,"src":"849:17:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":908,"mutability":"mutable","name":"to","nameLocation":"890:2:8","nodeType":"VariableDeclaration","scope":926,"src":"882:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":907,"name":"address","nodeType":"ElementaryTypeName","src":"882:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":910,"mutability":"mutable","name":"value","nameLocation":"910:5:8","nodeType":"VariableDeclaration","scope":926,"src":"902:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":909,"name":"uint256","nodeType":"ElementaryTypeName","src":"902:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"839:82:8"},"returnParameters":{"id":912,"nodeType":"ParameterList","parameters":[],"src":"931:0:8"},"scope":1175,"src":"818:216:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":951,"nodeType":"Block","src":"1179:113:8","statements":[{"expression":{"arguments":[{"id":939,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"1209:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":942,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"1239:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1245:12:8","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":857,"src":"1239:18:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1258:8:8","memberName":"selector","nodeType":"MemberAccess","src":"1239:27:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":945,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"1268:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":946,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"1274:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":947,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"1278:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":940,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1216:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":941,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1220:18:8","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1216:22:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1216:68:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":938,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"1189:19:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$858_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1189:96:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":950,"nodeType":"ExpressionStatement","src":"1189:96:8"}]},"id":952,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1049:16:8","nodeType":"FunctionDefinition","parameters":{"id":936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":929,"mutability":"mutable","name":"token","nameLocation":"1093:5:8","nodeType":"VariableDeclaration","scope":952,"src":"1075:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},"typeName":{"id":928,"nodeType":"UserDefinedTypeName","pathNode":{"id":927,"name":"IERC20Upgradeable","nameLocations":["1075:17:8"],"nodeType":"IdentifierPath","referencedDeclaration":858,"src":"1075:17:8"},"referencedDeclaration":858,"src":"1075:17:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":931,"mutability":"mutable","name":"from","nameLocation":"1116:4:8","nodeType":"VariableDeclaration","scope":952,"src":"1108:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":930,"name":"address","nodeType":"ElementaryTypeName","src":"1108:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":933,"mutability":"mutable","name":"to","nameLocation":"1138:2:8","nodeType":"VariableDeclaration","scope":952,"src":"1130:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":932,"name":"address","nodeType":"ElementaryTypeName","src":"1130:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":935,"mutability":"mutable","name":"value","nameLocation":"1158:5:8","nodeType":"VariableDeclaration","scope":952,"src":"1150:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":934,"name":"uint256","nodeType":"ElementaryTypeName","src":"1150:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1065:104:8"},"returnParameters":{"id":937,"nodeType":"ParameterList","parameters":[],"src":"1179:0:8"},"scope":1175,"src":"1040:252:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":995,"nodeType":"Block","src":"1669:497:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":964,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"1918:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1927:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1918:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":967,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1917:12:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":972,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1958:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$1175","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$1175","typeString":"library SafeERC20Upgradeable"}],"id":971,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1950:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":970,"name":"address","nodeType":"ElementaryTypeName","src":"1950:7:8","typeDescriptions":{}}},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1950:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":974,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"1965:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":968,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":956,"src":"1934:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1940:9:8","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":835,"src":"1934:15:8","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1934:39:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1977:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1934:44:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":978,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1933:46:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1917:62:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1993:56:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":963,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1896:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1896:163:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":982,"nodeType":"ExpressionStatement","src":"1896:163:8"},{"expression":{"arguments":[{"id":984,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":956,"src":"2089:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":987,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":956,"src":"2119:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2125:7:8","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":845,"src":"2119:13:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2133:8:8","memberName":"selector","nodeType":"MemberAccess","src":"2119:22:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":990,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"2143:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":991,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"2152:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":985,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2096:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":986,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2100:18:8","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2096:22:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2096:62:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":983,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"2069:19:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$858_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2069:90:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":994,"nodeType":"ExpressionStatement","src":"2069:90:8"}]},"documentation":{"id":953,"nodeType":"StructuredDocumentation","src":"1298:249:8","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":996,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1561:11:8","nodeType":"FunctionDefinition","parameters":{"id":961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":956,"mutability":"mutable","name":"token","nameLocation":"1600:5:8","nodeType":"VariableDeclaration","scope":996,"src":"1582:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},"typeName":{"id":955,"nodeType":"UserDefinedTypeName","pathNode":{"id":954,"name":"IERC20Upgradeable","nameLocations":["1582:17:8"],"nodeType":"IdentifierPath","referencedDeclaration":858,"src":"1582:17:8"},"referencedDeclaration":858,"src":"1582:17:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":958,"mutability":"mutable","name":"spender","nameLocation":"1623:7:8","nodeType":"VariableDeclaration","scope":996,"src":"1615:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":957,"name":"address","nodeType":"ElementaryTypeName","src":"1615:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":960,"mutability":"mutable","name":"value","nameLocation":"1648:5:8","nodeType":"VariableDeclaration","scope":996,"src":"1640:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":959,"name":"uint256","nodeType":"ElementaryTypeName","src":"1640:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1572:87:8"},"returnParameters":{"id":962,"nodeType":"ParameterList","parameters":[],"src":"1669:0:8"},"scope":1175,"src":"1552:614:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1031,"nodeType":"Block","src":"2299:194:8","statements":[{"assignments":[1007],"declarations":[{"constant":false,"id":1007,"mutability":"mutable","name":"newAllowance","nameLocation":"2317:12:8","nodeType":"VariableDeclaration","scope":1031,"src":"2309:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1006,"name":"uint256","nodeType":"ElementaryTypeName","src":"2309:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1018,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1012,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2356:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$1175","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$1175","typeString":"library SafeERC20Upgradeable"}],"id":1011,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2348:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1010,"name":"address","nodeType":"ElementaryTypeName","src":"2348:7:8","typeDescriptions":{}}},"id":1013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2348:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1014,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"2363:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1008,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"2332:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2338:9:8","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":835,"src":"2332:15:8","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2332:39:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1016,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"2374:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2332:47:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2309:70:8"},{"expression":{"arguments":[{"id":1020,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"2409:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":1023,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"2439:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":1024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2445:7:8","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":845,"src":"2439:13:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2453:8:8","memberName":"selector","nodeType":"MemberAccess","src":"2439:22:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1026,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"2463:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1027,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"2472:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1021,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2416:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1022,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2420:18:8","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2416:22:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2416:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1019,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"2389:19:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$858_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2389:97:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1030,"nodeType":"ExpressionStatement","src":"2389:97:8"}]},"id":1032,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2181:21:8","nodeType":"FunctionDefinition","parameters":{"id":1004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":999,"mutability":"mutable","name":"token","nameLocation":"2230:5:8","nodeType":"VariableDeclaration","scope":1032,"src":"2212:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},"typeName":{"id":998,"nodeType":"UserDefinedTypeName","pathNode":{"id":997,"name":"IERC20Upgradeable","nameLocations":["2212:17:8"],"nodeType":"IdentifierPath","referencedDeclaration":858,"src":"2212:17:8"},"referencedDeclaration":858,"src":"2212:17:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":1001,"mutability":"mutable","name":"spender","nameLocation":"2253:7:8","nodeType":"VariableDeclaration","scope":1032,"src":"2245:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1000,"name":"address","nodeType":"ElementaryTypeName","src":"2245:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1003,"mutability":"mutable","name":"value","nameLocation":"2278:5:8","nodeType":"VariableDeclaration","scope":1032,"src":"2270:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1002,"name":"uint256","nodeType":"ElementaryTypeName","src":"2270:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2202:87:8"},"returnParameters":{"id":1005,"nodeType":"ParameterList","parameters":[],"src":"2299:0:8"},"scope":1175,"src":"2172:321:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1079,"nodeType":"Block","src":"2626:370:8","statements":[{"id":1078,"nodeType":"UncheckedBlock","src":"2636:354:8","statements":[{"assignments":[1043],"declarations":[{"constant":false,"id":1043,"mutability":"mutable","name":"oldAllowance","nameLocation":"2668:12:8","nodeType":"VariableDeclaration","scope":1078,"src":"2660:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1042,"name":"uint256","nodeType":"ElementaryTypeName","src":"2660:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1052,"initialValue":{"arguments":[{"arguments":[{"id":1048,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2707:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$1175","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$1175","typeString":"library SafeERC20Upgradeable"}],"id":1047,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2699:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1046,"name":"address","nodeType":"ElementaryTypeName","src":"2699:7:8","typeDescriptions":{}}},"id":1049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2699:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1050,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"2714:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1044,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"2683:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":1045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2689:9:8","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":835,"src":"2683:15:8","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2683:39:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2660:62:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1054,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"2744:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1055,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"2760:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2744:21:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":1057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2767:43:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":1053,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2736:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:75:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1059,"nodeType":"ExpressionStatement","src":"2736:75:8"},{"assignments":[1061],"declarations":[{"constant":false,"id":1061,"mutability":"mutable","name":"newAllowance","nameLocation":"2833:12:8","nodeType":"VariableDeclaration","scope":1078,"src":"2825:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1060,"name":"uint256","nodeType":"ElementaryTypeName","src":"2825:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1065,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1062,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"2848:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1063,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"2863:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2848:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2825:43:8"},{"expression":{"arguments":[{"id":1067,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"2902:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":1070,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"2932:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2938:7:8","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":845,"src":"2932:13:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2946:8:8","memberName":"selector","nodeType":"MemberAccess","src":"2932:22:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1073,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"2956:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1074,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"2965:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1068,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2909:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1069,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2913:18:8","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2909:22:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2909:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1066,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"2882:19:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$858_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2882:97:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1077,"nodeType":"ExpressionStatement","src":"2882:97:8"}]}]},"id":1080,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"2508:21:8","nodeType":"FunctionDefinition","parameters":{"id":1040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1035,"mutability":"mutable","name":"token","nameLocation":"2557:5:8","nodeType":"VariableDeclaration","scope":1080,"src":"2539:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},"typeName":{"id":1034,"nodeType":"UserDefinedTypeName","pathNode":{"id":1033,"name":"IERC20Upgradeable","nameLocations":["2539:17:8"],"nodeType":"IdentifierPath","referencedDeclaration":858,"src":"2539:17:8"},"referencedDeclaration":858,"src":"2539:17:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":1037,"mutability":"mutable","name":"spender","nameLocation":"2580:7:8","nodeType":"VariableDeclaration","scope":1080,"src":"2572:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1036,"name":"address","nodeType":"ElementaryTypeName","src":"2572:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1039,"mutability":"mutable","name":"value","nameLocation":"2605:5:8","nodeType":"VariableDeclaration","scope":1080,"src":"2597:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1038,"name":"uint256","nodeType":"ElementaryTypeName","src":"2597:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2529:87:8"},"returnParameters":{"id":1041,"nodeType":"ParameterList","parameters":[],"src":"2626:0:8"},"scope":1175,"src":"2499:497:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1135,"nodeType":"Block","src":"3228:257:8","statements":[{"assignments":[1101],"declarations":[{"constant":false,"id":1101,"mutability":"mutable","name":"nonceBefore","nameLocation":"3246:11:8","nodeType":"VariableDeclaration","scope":1135,"src":"3238:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1100,"name":"uint256","nodeType":"ElementaryTypeName","src":"3238:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1106,"initialValue":{"arguments":[{"id":1104,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"3273:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1102,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"3260:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}},"id":1103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3266:6:8","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":887,"src":"3260:12:8","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3260:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3238:41:8"},{"expression":{"arguments":[{"id":1110,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"3302:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1111,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1087,"src":"3309:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1112,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1089,"src":"3318:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1113,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1091,"src":"3325:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1114,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"3335:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1115,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1095,"src":"3338:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1116,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1097,"src":"3341:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1107,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"3289:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}},"id":1109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3295:6:8","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":879,"src":"3289:12:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3289:54:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1118,"nodeType":"ExpressionStatement","src":"3289:54:8"},{"assignments":[1120],"declarations":[{"constant":false,"id":1120,"mutability":"mutable","name":"nonceAfter","nameLocation":"3361:10:8","nodeType":"VariableDeclaration","scope":1135,"src":"3353:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1119,"name":"uint256","nodeType":"ElementaryTypeName","src":"3353:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1125,"initialValue":{"arguments":[{"id":1123,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"3387:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1121,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"3374:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}},"id":1122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3380:6:8","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":887,"src":"3374:12:8","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3374:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3353:40:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1127,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"3411:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1128,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"3425:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3439:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3425:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3411:29:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":1132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3442:35:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":1126,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3403:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3403:75:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1134,"nodeType":"ExpressionStatement","src":"3403:75:8"}]},"id":1136,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"3011:10:8","nodeType":"FunctionDefinition","parameters":{"id":1098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1083,"mutability":"mutable","name":"token","nameLocation":"3055:5:8","nodeType":"VariableDeclaration","scope":1136,"src":"3031:29:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"},"typeName":{"id":1082,"nodeType":"UserDefinedTypeName","pathNode":{"id":1081,"name":"IERC20PermitUpgradeable","nameLocations":["3031:23:8"],"nodeType":"IdentifierPath","referencedDeclaration":894,"src":"3031:23:8"},"referencedDeclaration":894,"src":"3031:23:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}},"visibility":"internal"},{"constant":false,"id":1085,"mutability":"mutable","name":"owner","nameLocation":"3078:5:8","nodeType":"VariableDeclaration","scope":1136,"src":"3070:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1084,"name":"address","nodeType":"ElementaryTypeName","src":"3070:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1087,"mutability":"mutable","name":"spender","nameLocation":"3101:7:8","nodeType":"VariableDeclaration","scope":1136,"src":"3093:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1086,"name":"address","nodeType":"ElementaryTypeName","src":"3093:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1089,"mutability":"mutable","name":"value","nameLocation":"3126:5:8","nodeType":"VariableDeclaration","scope":1136,"src":"3118:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1088,"name":"uint256","nodeType":"ElementaryTypeName","src":"3118:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1091,"mutability":"mutable","name":"deadline","nameLocation":"3149:8:8","nodeType":"VariableDeclaration","scope":1136,"src":"3141:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1090,"name":"uint256","nodeType":"ElementaryTypeName","src":"3141:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1093,"mutability":"mutable","name":"v","nameLocation":"3173:1:8","nodeType":"VariableDeclaration","scope":1136,"src":"3167:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1092,"name":"uint8","nodeType":"ElementaryTypeName","src":"3167:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1095,"mutability":"mutable","name":"r","nameLocation":"3192:1:8","nodeType":"VariableDeclaration","scope":1136,"src":"3184:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1094,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3184:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1097,"mutability":"mutable","name":"s","nameLocation":"3211:1:8","nodeType":"VariableDeclaration","scope":1136,"src":"3203:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1096,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3203:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3021:197:8"},"returnParameters":{"id":1099,"nodeType":"ParameterList","parameters":[],"src":"3228:0:8"},"scope":1175,"src":"3002:483:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1173,"nodeType":"Block","src":"3949:636:8","statements":[{"assignments":[1146],"declarations":[{"constant":false,"id":1146,"mutability":"mutable","name":"returndata","nameLocation":"4311:10:8","nodeType":"VariableDeclaration","scope":1173,"src":"4298:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1145,"name":"bytes","nodeType":"ElementaryTypeName","src":"4298:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1155,"initialValue":{"arguments":[{"id":1152,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"4352:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":1153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4358:34:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":1149,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"4332:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}],"id":1148,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4324:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1147,"name":"address","nodeType":"ElementaryTypeName","src":"4324:7:8","typeDescriptions":{}}},"id":1150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4324:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4339:12:8","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":1265,"src":"4324:27:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4324:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4298:95:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1156,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1146,"src":"4407:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4418:6:8","memberName":"length","nodeType":"MemberAccess","src":"4407:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4427:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4407:21:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1172,"nodeType":"IfStatement","src":"4403:176:8","trueBody":{"id":1171,"nodeType":"Block","src":"4430:149:8","statements":[{"expression":{"arguments":[{"arguments":[{"id":1163,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1146,"src":"4502:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1165,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4515:4:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":1164,"name":"bool","nodeType":"ElementaryTypeName","src":"4515:4:8","typeDescriptions":{}}}],"id":1166,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4514:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":1161,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4491:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4495:6:8","memberName":"decode","nodeType":"MemberAccess","src":"4491:10:8","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4491:30:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":1168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4523:44:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":1160,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4483:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4483:85:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1170,"nodeType":"ExpressionStatement","src":"4483:85:8"}]}}]},"documentation":{"id":1137,"nodeType":"StructuredDocumentation","src":"3491:372:8","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":1174,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"3877:19:8","nodeType":"FunctionDefinition","parameters":{"id":1143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1140,"mutability":"mutable","name":"token","nameLocation":"3915:5:8","nodeType":"VariableDeclaration","scope":1174,"src":"3897:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},"typeName":{"id":1139,"nodeType":"UserDefinedTypeName","pathNode":{"id":1138,"name":"IERC20Upgradeable","nameLocations":["3897:17:8"],"nodeType":"IdentifierPath","referencedDeclaration":858,"src":"3897:17:8"},"referencedDeclaration":858,"src":"3897:17:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":1142,"mutability":"mutable","name":"data","nameLocation":"3935:4:8","nodeType":"VariableDeclaration","scope":1174,"src":"3922:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1141,"name":"bytes","nodeType":"ElementaryTypeName","src":"3922:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3896:44:8"},"returnParameters":{"id":1144,"nodeType":"ParameterList","parameters":[],"src":"3949:0:8"},"scope":1175,"src":"3868:717:8","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":1176,"src":"740:3847:8","usedErrors":[]}],"src":"115:4473:8"},"id":8},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1459]},"id":1460,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1177,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:9"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1178,"nodeType":"StructuredDocumentation","src":"126:67:9","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1459,"linearizedBaseContracts":[1459],"name":"AddressUpgradeable","nameLocation":"202:18:9","nodeType":"ContractDefinition","nodes":[{"body":{"id":1192,"nodeType":"Block","src":"1252:254:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1186,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"1476:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1484:4:9","memberName":"code","nodeType":"MemberAccess","src":"1476:12:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1489:6:9","memberName":"length","nodeType":"MemberAccess","src":"1476:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1498:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1476:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1185,"id":1191,"nodeType":"Return","src":"1469:30:9"}]},"documentation":{"id":1179,"nodeType":"StructuredDocumentation","src":"227:954:9","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1193,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1195:10:9","nodeType":"FunctionDefinition","parameters":{"id":1182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1181,"mutability":"mutable","name":"account","nameLocation":"1214:7:9","nodeType":"VariableDeclaration","scope":1193,"src":"1206:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1180,"name":"address","nodeType":"ElementaryTypeName","src":"1206:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1205:17:9"},"returnParameters":{"id":1185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1193,"src":"1246:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1183,"name":"bool","nodeType":"ElementaryTypeName","src":"1246:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1245:6:9"},"scope":1459,"src":"1186:320:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1226,"nodeType":"Block","src":"2494:241:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1204,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2520:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1459","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1459","typeString":"library AddressUpgradeable"}],"id":1203,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2512:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1202,"name":"address","nodeType":"ElementaryTypeName","src":"2512:7:9","typeDescriptions":{}}},"id":1205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2512:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2526:7:9","memberName":"balance","nodeType":"MemberAccess","src":"2512:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1207,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"2537:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2512:31:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2545:31:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1201,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2504:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2504:73:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1211,"nodeType":"ExpressionStatement","src":"2504:73:9"},{"assignments":[1213,null],"declarations":[{"constant":false,"id":1213,"mutability":"mutable","name":"success","nameLocation":"2594:7:9","nodeType":"VariableDeclaration","scope":1226,"src":"2589:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1212,"name":"bool","nodeType":"ElementaryTypeName","src":"2589:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1220,"initialValue":{"arguments":[{"hexValue":"","id":1218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2637:2:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1214,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1196,"src":"2607:9:9","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2617:4:9","memberName":"call","nodeType":"MemberAccess","src":"2607:14:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1216,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"2629:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2607:29:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2607:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2588:52:9"},{"expression":{"arguments":[{"id":1222,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1213,"src":"2658:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2667:60:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1221,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2650:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2650:78:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1225,"nodeType":"ExpressionStatement","src":"2650:78:9"}]},"documentation":{"id":1194,"nodeType":"StructuredDocumentation","src":"1512:906:9","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1227,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2432:9:9","nodeType":"FunctionDefinition","parameters":{"id":1199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1196,"mutability":"mutable","name":"recipient","nameLocation":"2458:9:9","nodeType":"VariableDeclaration","scope":1227,"src":"2442:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1195,"name":"address","nodeType":"ElementaryTypeName","src":"2442:15:9","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1198,"mutability":"mutable","name":"amount","nameLocation":"2477:6:9","nodeType":"VariableDeclaration","scope":1227,"src":"2469:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1197,"name":"uint256","nodeType":"ElementaryTypeName","src":"2469:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2441:43:9"},"returnParameters":{"id":1200,"nodeType":"ParameterList","parameters":[],"src":"2494:0:9"},"scope":1459,"src":"2423:312:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1244,"nodeType":"Block","src":"3566:96:9","statements":[{"expression":{"arguments":[{"id":1238,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1230,"src":"3605:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1239,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"3613:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3619:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3622:32:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1237,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1285,1329],"referencedDeclaration":1329,"src":"3583:21:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3583:72:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1236,"id":1243,"nodeType":"Return","src":"3576:79:9"}]},"documentation":{"id":1228,"nodeType":"StructuredDocumentation","src":"2741:731:9","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1245,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3486:12:9","nodeType":"FunctionDefinition","parameters":{"id":1233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1230,"mutability":"mutable","name":"target","nameLocation":"3507:6:9","nodeType":"VariableDeclaration","scope":1245,"src":"3499:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1229,"name":"address","nodeType":"ElementaryTypeName","src":"3499:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1232,"mutability":"mutable","name":"data","nameLocation":"3528:4:9","nodeType":"VariableDeclaration","scope":1245,"src":"3515:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1231,"name":"bytes","nodeType":"ElementaryTypeName","src":"3515:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3498:35:9"},"returnParameters":{"id":1236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1235,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1245,"src":"3552:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1234,"name":"bytes","nodeType":"ElementaryTypeName","src":"3552:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3551:14:9"},"scope":1459,"src":"3477:185:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1264,"nodeType":"Block","src":"4031:76:9","statements":[{"expression":{"arguments":[{"id":1258,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"4070:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1259,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"4078:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4084:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1261,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"4087:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1257,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1285,1329],"referencedDeclaration":1329,"src":"4048:21:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4048:52:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1256,"id":1263,"nodeType":"Return","src":"4041:59:9"}]},"documentation":{"id":1246,"nodeType":"StructuredDocumentation","src":"3668:211:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1265,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3893:12:9","nodeType":"FunctionDefinition","parameters":{"id":1253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1248,"mutability":"mutable","name":"target","nameLocation":"3923:6:9","nodeType":"VariableDeclaration","scope":1265,"src":"3915:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1247,"name":"address","nodeType":"ElementaryTypeName","src":"3915:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1250,"mutability":"mutable","name":"data","nameLocation":"3952:4:9","nodeType":"VariableDeclaration","scope":1265,"src":"3939:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1249,"name":"bytes","nodeType":"ElementaryTypeName","src":"3939:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1252,"mutability":"mutable","name":"errorMessage","nameLocation":"3980:12:9","nodeType":"VariableDeclaration","scope":1265,"src":"3966:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1251,"name":"string","nodeType":"ElementaryTypeName","src":"3966:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3905:93:9"},"returnParameters":{"id":1256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1255,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1265,"src":"4017:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1254,"name":"bytes","nodeType":"ElementaryTypeName","src":"4017:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4016:14:9"},"scope":1459,"src":"3884:223:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1284,"nodeType":"Block","src":"4612:111:9","statements":[{"expression":{"arguments":[{"id":1278,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1268,"src":"4651:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1279,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"4659:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1280,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"4665:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4672:43:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1277,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1285,1329],"referencedDeclaration":1329,"src":"4629:21:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4629:87:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1276,"id":1283,"nodeType":"Return","src":"4622:94:9"}]},"documentation":{"id":1266,"nodeType":"StructuredDocumentation","src":"4113:351:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1285,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4478:21:9","nodeType":"FunctionDefinition","parameters":{"id":1273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1268,"mutability":"mutable","name":"target","nameLocation":"4517:6:9","nodeType":"VariableDeclaration","scope":1285,"src":"4509:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1267,"name":"address","nodeType":"ElementaryTypeName","src":"4509:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1270,"mutability":"mutable","name":"data","nameLocation":"4546:4:9","nodeType":"VariableDeclaration","scope":1285,"src":"4533:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1269,"name":"bytes","nodeType":"ElementaryTypeName","src":"4533:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1272,"mutability":"mutable","name":"value","nameLocation":"4568:5:9","nodeType":"VariableDeclaration","scope":1285,"src":"4560:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1271,"name":"uint256","nodeType":"ElementaryTypeName","src":"4560:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4499:80:9"},"returnParameters":{"id":1276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1275,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1285,"src":"4598:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1274,"name":"bytes","nodeType":"ElementaryTypeName","src":"4598:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4597:14:9"},"scope":1459,"src":"4469:254:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1328,"nodeType":"Block","src":"5150:267:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1302,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5176:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1459","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1459","typeString":"library AddressUpgradeable"}],"id":1301,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5168:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1300,"name":"address","nodeType":"ElementaryTypeName","src":"5168:7:9","typeDescriptions":{}}},"id":1303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5168:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5182:7:9","memberName":"balance","nodeType":"MemberAccess","src":"5168:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1305,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1292,"src":"5193:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5168:30:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5200:40:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1299,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5160:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5160:81:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1309,"nodeType":"ExpressionStatement","src":"5160:81:9"},{"assignments":[1311,1313],"declarations":[{"constant":false,"id":1311,"mutability":"mutable","name":"success","nameLocation":"5257:7:9","nodeType":"VariableDeclaration","scope":1328,"src":"5252:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1310,"name":"bool","nodeType":"ElementaryTypeName","src":"5252:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1313,"mutability":"mutable","name":"returndata","nameLocation":"5279:10:9","nodeType":"VariableDeclaration","scope":1328,"src":"5266:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1312,"name":"bytes","nodeType":"ElementaryTypeName","src":"5266:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1320,"initialValue":{"arguments":[{"id":1318,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"5319:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1314,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"5293:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5300:4:9","memberName":"call","nodeType":"MemberAccess","src":"5293:11:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1316,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1292,"src":"5312:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5293:25:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5293:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5251:73:9"},{"expression":{"arguments":[{"id":1322,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"5368:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1323,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"5376:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1324,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"5385:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1325,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1294,"src":"5397:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1321,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"5341:26:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5341:69:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1298,"id":1327,"nodeType":"Return","src":"5334:76:9"}]},"documentation":{"id":1286,"nodeType":"StructuredDocumentation","src":"4729:237:9","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1329,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4980:21:9","nodeType":"FunctionDefinition","parameters":{"id":1295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1288,"mutability":"mutable","name":"target","nameLocation":"5019:6:9","nodeType":"VariableDeclaration","scope":1329,"src":"5011:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1287,"name":"address","nodeType":"ElementaryTypeName","src":"5011:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1290,"mutability":"mutable","name":"data","nameLocation":"5048:4:9","nodeType":"VariableDeclaration","scope":1329,"src":"5035:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1289,"name":"bytes","nodeType":"ElementaryTypeName","src":"5035:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1292,"mutability":"mutable","name":"value","nameLocation":"5070:5:9","nodeType":"VariableDeclaration","scope":1329,"src":"5062:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1291,"name":"uint256","nodeType":"ElementaryTypeName","src":"5062:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1294,"mutability":"mutable","name":"errorMessage","nameLocation":"5099:12:9","nodeType":"VariableDeclaration","scope":1329,"src":"5085:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1293,"name":"string","nodeType":"ElementaryTypeName","src":"5085:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5001:116:9"},"returnParameters":{"id":1298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1297,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1329,"src":"5136:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1296,"name":"bytes","nodeType":"ElementaryTypeName","src":"5136:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5135:14:9"},"scope":1459,"src":"4971:446:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1345,"nodeType":"Block","src":"5694:97:9","statements":[{"expression":{"arguments":[{"id":1340,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"5730:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1341,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1334,"src":"5738:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5744:39:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1339,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1346,1375],"referencedDeclaration":1375,"src":"5711:18:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5711:73:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1338,"id":1344,"nodeType":"Return","src":"5704:80:9"}]},"documentation":{"id":1330,"nodeType":"StructuredDocumentation","src":"5423:166:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1346,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5603:18:9","nodeType":"FunctionDefinition","parameters":{"id":1335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1332,"mutability":"mutable","name":"target","nameLocation":"5630:6:9","nodeType":"VariableDeclaration","scope":1346,"src":"5622:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1331,"name":"address","nodeType":"ElementaryTypeName","src":"5622:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1334,"mutability":"mutable","name":"data","nameLocation":"5651:4:9","nodeType":"VariableDeclaration","scope":1346,"src":"5638:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1333,"name":"bytes","nodeType":"ElementaryTypeName","src":"5638:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5621:35:9"},"returnParameters":{"id":1338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1337,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1346,"src":"5680:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1336,"name":"bytes","nodeType":"ElementaryTypeName","src":"5680:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5679:14:9"},"scope":1459,"src":"5594:197:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1374,"nodeType":"Block","src":"6133:168:9","statements":[{"assignments":[1359,1361],"declarations":[{"constant":false,"id":1359,"mutability":"mutable","name":"success","nameLocation":"6149:7:9","nodeType":"VariableDeclaration","scope":1374,"src":"6144:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1358,"name":"bool","nodeType":"ElementaryTypeName","src":"6144:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1361,"mutability":"mutable","name":"returndata","nameLocation":"6171:10:9","nodeType":"VariableDeclaration","scope":1374,"src":"6158:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1360,"name":"bytes","nodeType":"ElementaryTypeName","src":"6158:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1366,"initialValue":{"arguments":[{"id":1364,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1351,"src":"6203:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1362,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1349,"src":"6185:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6192:10:9","memberName":"staticcall","nodeType":"MemberAccess","src":"6185:17:9","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6185:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6143:65:9"},{"expression":{"arguments":[{"id":1368,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1349,"src":"6252:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1369,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1359,"src":"6260:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1370,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"6269:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1371,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1353,"src":"6281:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1367,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"6225:26:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6225:69:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1357,"id":1373,"nodeType":"Return","src":"6218:76:9"}]},"documentation":{"id":1347,"nodeType":"StructuredDocumentation","src":"5797:173:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1375,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5984:18:9","nodeType":"FunctionDefinition","parameters":{"id":1354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1349,"mutability":"mutable","name":"target","nameLocation":"6020:6:9","nodeType":"VariableDeclaration","scope":1375,"src":"6012:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1348,"name":"address","nodeType":"ElementaryTypeName","src":"6012:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1351,"mutability":"mutable","name":"data","nameLocation":"6049:4:9","nodeType":"VariableDeclaration","scope":1375,"src":"6036:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1350,"name":"bytes","nodeType":"ElementaryTypeName","src":"6036:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1353,"mutability":"mutable","name":"errorMessage","nameLocation":"6077:12:9","nodeType":"VariableDeclaration","scope":1375,"src":"6063:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1352,"name":"string","nodeType":"ElementaryTypeName","src":"6063:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6002:93:9"},"returnParameters":{"id":1357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1356,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1375,"src":"6119:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1355,"name":"bytes","nodeType":"ElementaryTypeName","src":"6119:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6118:14:9"},"scope":1459,"src":"5975:326:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1413,"nodeType":"Block","src":"6783:434:9","statements":[{"condition":{"id":1389,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1380,"src":"6797:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1411,"nodeType":"Block","src":"7153:58:9","statements":[{"expression":{"arguments":[{"id":1407,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1382,"src":"7175:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1408,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"7187:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1406,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"7167:7:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7167:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1410,"nodeType":"ExpressionStatement","src":"7167:33:9"}]},"id":1412,"nodeType":"IfStatement","src":"6793:418:9","trueBody":{"id":1405,"nodeType":"Block","src":"6806:341:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1390,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1382,"src":"6824:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6835:6:9","memberName":"length","nodeType":"MemberAccess","src":"6824:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6845:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6824:22:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1402,"nodeType":"IfStatement","src":"6820:286:9","trueBody":{"id":1401,"nodeType":"Block","src":"6848:258:9","statements":[{"expression":{"arguments":[{"arguments":[{"id":1396,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"7050:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1395,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1193,"src":"7039:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7039:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7059:31:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1394,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7031:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7031:60:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1400,"nodeType":"ExpressionStatement","src":"7031:60:9"}]}},{"expression":{"id":1403,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1382,"src":"7126:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1388,"id":1404,"nodeType":"Return","src":"7119:17:9"}]}}]},"documentation":{"id":1376,"nodeType":"StructuredDocumentation","src":"6307:277:9","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1414,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"6598:26:9","nodeType":"FunctionDefinition","parameters":{"id":1385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1378,"mutability":"mutable","name":"target","nameLocation":"6642:6:9","nodeType":"VariableDeclaration","scope":1414,"src":"6634:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1377,"name":"address","nodeType":"ElementaryTypeName","src":"6634:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1380,"mutability":"mutable","name":"success","nameLocation":"6663:7:9","nodeType":"VariableDeclaration","scope":1414,"src":"6658:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1379,"name":"bool","nodeType":"ElementaryTypeName","src":"6658:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1382,"mutability":"mutable","name":"returndata","nameLocation":"6693:10:9","nodeType":"VariableDeclaration","scope":1414,"src":"6680:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1381,"name":"bytes","nodeType":"ElementaryTypeName","src":"6680:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1384,"mutability":"mutable","name":"errorMessage","nameLocation":"6727:12:9","nodeType":"VariableDeclaration","scope":1414,"src":"6713:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1383,"name":"string","nodeType":"ElementaryTypeName","src":"6713:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6624:121:9"},"returnParameters":{"id":1388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1387,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1414,"src":"6769:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1386,"name":"bytes","nodeType":"ElementaryTypeName","src":"6769:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6768:14:9"},"scope":1459,"src":"6589:628:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1437,"nodeType":"Block","src":"7598:135:9","statements":[{"condition":{"id":1426,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"7612:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1435,"nodeType":"Block","src":"7669:58:9","statements":[{"expression":{"arguments":[{"id":1431,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"7691:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1432,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"7703:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1430,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"7683:7:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7683:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1434,"nodeType":"ExpressionStatement","src":"7683:33:9"}]},"id":1436,"nodeType":"IfStatement","src":"7608:119:9","trueBody":{"id":1429,"nodeType":"Block","src":"7621:42:9","statements":[{"expression":{"id":1427,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"7642:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1425,"id":1428,"nodeType":"Return","src":"7635:17:9"}]}}]},"documentation":{"id":1415,"nodeType":"StructuredDocumentation","src":"7223:210:9","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1438,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"7447:16:9","nodeType":"FunctionDefinition","parameters":{"id":1422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1417,"mutability":"mutable","name":"success","nameLocation":"7478:7:9","nodeType":"VariableDeclaration","scope":1438,"src":"7473:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1416,"name":"bool","nodeType":"ElementaryTypeName","src":"7473:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1419,"mutability":"mutable","name":"returndata","nameLocation":"7508:10:9","nodeType":"VariableDeclaration","scope":1438,"src":"7495:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1418,"name":"bytes","nodeType":"ElementaryTypeName","src":"7495:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1421,"mutability":"mutable","name":"errorMessage","nameLocation":"7542:12:9","nodeType":"VariableDeclaration","scope":1438,"src":"7528:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1420,"name":"string","nodeType":"ElementaryTypeName","src":"7528:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7463:97:9"},"returnParameters":{"id":1425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1424,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1438,"src":"7584:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1423,"name":"bytes","nodeType":"ElementaryTypeName","src":"7584:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7583:14:9"},"scope":1459,"src":"7438:295:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1457,"nodeType":"Block","src":"7822:457:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1445,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"7898:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7909:6:9","memberName":"length","nodeType":"MemberAccess","src":"7898:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7918:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7898:21:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1455,"nodeType":"Block","src":"8228:45:9","statements":[{"expression":{"arguments":[{"id":1452,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"8249:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1451,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"8242:6:9","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8242:20:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1454,"nodeType":"ExpressionStatement","src":"8242:20:9"}]},"id":1456,"nodeType":"IfStatement","src":"7894:379:9","trueBody":{"id":1450,"nodeType":"Block","src":"7921:301:9","statements":[{"AST":{"nodeType":"YulBlock","src":"8079:133:9","statements":[{"nodeType":"YulVariableDeclaration","src":"8097:40:9","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"8126:10:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8120:5:9"},"nodeType":"YulFunctionCall","src":"8120:17:9"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8101:15:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8165:2:9","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"8169:10:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8161:3:9"},"nodeType":"YulFunctionCall","src":"8161:19:9"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"8182:15:9"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8154:6:9"},"nodeType":"YulFunctionCall","src":"8154:44:9"},"nodeType":"YulExpressionStatement","src":"8154:44:9"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1440,"isOffset":false,"isSlot":false,"src":"8126:10:9","valueSize":1},{"declaration":1440,"isOffset":false,"isSlot":false,"src":"8169:10:9","valueSize":1}],"id":1449,"nodeType":"InlineAssembly","src":"8070:142:9"}]}}]},"id":1458,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"7748:7:9","nodeType":"FunctionDefinition","parameters":{"id":1443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1440,"mutability":"mutable","name":"returndata","nameLocation":"7769:10:9","nodeType":"VariableDeclaration","scope":1458,"src":"7756:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1439,"name":"bytes","nodeType":"ElementaryTypeName","src":"7756:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1442,"mutability":"mutable","name":"errorMessage","nameLocation":"7795:12:9","nodeType":"VariableDeclaration","scope":1458,"src":"7781:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1441,"name":"string","nodeType":"ElementaryTypeName","src":"7781:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7755:53:9"},"returnParameters":{"id":1444,"nodeType":"ParameterList","parameters":[],"src":"7822:0:9"},"scope":1459,"src":"7739:540:9","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1460,"src":"194:8087:9","usedErrors":[]}],"src":"101:8181:9"},"id":9},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1459],"ContextUpgradeable":[1501],"Initializable":[580]},"id":1502,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1461,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:10"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1462,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1502,"sourceUnit":581,"src":"110:42:10","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1464,"name":"Initializable","nameLocations":["691:13:10"],"nodeType":"IdentifierPath","referencedDeclaration":580,"src":"691:13:10"},"id":1465,"nodeType":"InheritanceSpecifier","src":"691:13:10"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1463,"nodeType":"StructuredDocumentation","src":"154:496:10","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1501,"linearizedBaseContracts":[1501,580],"name":"ContextUpgradeable","nameLocation":"669:18:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":1470,"nodeType":"Block","src":"763:7:10","statements":[]},"id":1471,"implemented":true,"kind":"function","modifiers":[{"id":1468,"kind":"modifierInvocation","modifierName":{"id":1467,"name":"onlyInitializing","nameLocations":["746:16:10"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"746:16:10"},"nodeType":"ModifierInvocation","src":"746:16:10"}],"name":"__Context_init","nameLocation":"720:14:10","nodeType":"FunctionDefinition","parameters":{"id":1466,"nodeType":"ParameterList","parameters":[],"src":"734:2:10"},"returnParameters":{"id":1469,"nodeType":"ParameterList","parameters":[],"src":"763:0:10"},"scope":1501,"src":"711:59:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1476,"nodeType":"Block","src":"838:7:10","statements":[]},"id":1477,"implemented":true,"kind":"function","modifiers":[{"id":1474,"kind":"modifierInvocation","modifierName":{"id":1473,"name":"onlyInitializing","nameLocations":["821:16:10"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"821:16:10"},"nodeType":"ModifierInvocation","src":"821:16:10"}],"name":"__Context_init_unchained","nameLocation":"785:24:10","nodeType":"FunctionDefinition","parameters":{"id":1472,"nodeType":"ParameterList","parameters":[],"src":"809:2:10"},"returnParameters":{"id":1475,"nodeType":"ParameterList","parameters":[],"src":"838:0:10"},"scope":1501,"src":"776:69:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1485,"nodeType":"Block","src":"912:34:10","statements":[{"expression":{"expression":{"id":1482,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:6:10","memberName":"sender","nodeType":"MemberAccess","src":"929:10:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1481,"id":1484,"nodeType":"Return","src":"922:17:10"}]},"id":1486,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:10","nodeType":"FunctionDefinition","parameters":{"id":1478,"nodeType":"ParameterList","parameters":[],"src":"869:2:10"},"returnParameters":{"id":1481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1486,"src":"903:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1479,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:10"},"scope":1501,"src":"850:96:10","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1494,"nodeType":"Block","src":"1019:32:10","statements":[{"expression":{"expression":{"id":1491,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:4:10","memberName":"data","nodeType":"MemberAccess","src":"1036:8:10","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1490,"id":1493,"nodeType":"Return","src":"1029:15:10"}]},"id":1495,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:10","nodeType":"FunctionDefinition","parameters":{"id":1487,"nodeType":"ParameterList","parameters":[],"src":"969:2:10"},"returnParameters":{"id":1490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1489,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1495,"src":"1003:14:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1488,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:10"},"scope":1501,"src":"952:99:10","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1496,"nodeType":"StructuredDocumentation","src":"1057:254:10","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1500,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:10","nodeType":"VariableDeclaration","scope":1501,"src":"1316:25:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1497,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1499,"length":{"hexValue":"3530","id":1498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:10","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1502,"src":"651:693:10","usedErrors":[]}],"src":"86:1259:10"},"id":10},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[2597],"StringsUpgradeable":[1676]},"id":1677,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1503,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:11"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","id":1504,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1677,"sourceUnit":2598,"src":"126:36:11","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"StringsUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1505,"nodeType":"StructuredDocumentation","src":"164:34:11","text":" @dev String operations."},"fullyImplemented":true,"id":1676,"linearizedBaseContracts":[1676],"name":"StringsUpgradeable","nameLocation":"207:18:11","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1508,"mutability":"constant","name":"_SYMBOLS","nameLocation":"257:8:11","nodeType":"VariableDeclaration","scope":1676,"src":"232:54:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1506,"name":"bytes16","nodeType":"ElementaryTypeName","src":"232:7:11","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"268:18:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1511,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"315:15:11","nodeType":"VariableDeclaration","scope":1676,"src":"292:43:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1509,"name":"uint8","nodeType":"ElementaryTypeName","src":"292:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"333:2:11","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1558,"nodeType":"Block","src":"508:636:11","statements":[{"id":1557,"nodeType":"UncheckedBlock","src":"518:620:11","statements":[{"assignments":[1520],"declarations":[{"constant":false,"id":1520,"mutability":"mutable","name":"length","nameLocation":"550:6:11","nodeType":"VariableDeclaration","scope":1557,"src":"542:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1519,"name":"uint256","nodeType":"ElementaryTypeName","src":"542:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1527,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1523,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"581:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1521,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2597,"src":"559:15:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$2597_$","typeString":"type(library MathUpgradeable)"}},"id":1522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"575:5:11","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2434,"src":"559:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"559:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"590:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"559:32:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"542:49:11"},{"assignments":[1529],"declarations":[{"constant":false,"id":1529,"mutability":"mutable","name":"buffer","nameLocation":"619:6:11","nodeType":"VariableDeclaration","scope":1557,"src":"605:20:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1528,"name":"string","nodeType":"ElementaryTypeName","src":"605:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1534,"initialValue":{"arguments":[{"id":1532,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1520,"src":"639:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1531,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"628:10:11","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1530,"name":"string","nodeType":"ElementaryTypeName","src":"632:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"628:18:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"605:41:11"},{"assignments":[1536],"declarations":[{"constant":false,"id":1536,"mutability":"mutable","name":"ptr","nameLocation":"668:3:11","nodeType":"VariableDeclaration","scope":1557,"src":"660:11:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1535,"name":"uint256","nodeType":"ElementaryTypeName","src":"660:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1537,"nodeType":"VariableDeclarationStatement","src":"660:11:11"},{"AST":{"nodeType":"YulBlock","src":"741:67:11","statements":[{"nodeType":"YulAssignment","src":"759:35:11","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"770:6:11"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"782:2:11","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"786:6:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"778:3:11"},"nodeType":"YulFunctionCall","src":"778:15:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"766:3:11"},"nodeType":"YulFunctionCall","src":"766:28:11"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"759:3:11"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1529,"isOffset":false,"isSlot":false,"src":"770:6:11","valueSize":1},{"declaration":1520,"isOffset":false,"isSlot":false,"src":"786:6:11","valueSize":1},{"declaration":1536,"isOffset":false,"isSlot":false,"src":"759:3:11","valueSize":1}],"id":1538,"nodeType":"InlineAssembly","src":"732:76:11"},{"body":{"id":1553,"nodeType":"Block","src":"834:267:11","statements":[{"expression":{"id":1541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"852:5:11","subExpression":{"id":1540,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"852:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1542,"nodeType":"ExpressionStatement","src":"852:5:11"},{"AST":{"nodeType":"YulBlock","src":"935:84:11","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"965:3:11"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"979:5:11"},{"kind":"number","nodeType":"YulLiteral","src":"986:2:11","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"975:3:11"},"nodeType":"YulFunctionCall","src":"975:14:11"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"991:8:11"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"970:4:11"},"nodeType":"YulFunctionCall","src":"970:30:11"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"957:7:11"},"nodeType":"YulFunctionCall","src":"957:44:11"},"nodeType":"YulExpressionStatement","src":"957:44:11"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1508,"isOffset":false,"isSlot":false,"src":"991:8:11","valueSize":1},{"declaration":1536,"isOffset":false,"isSlot":false,"src":"965:3:11","valueSize":1},{"declaration":1514,"isOffset":false,"isSlot":false,"src":"979:5:11","valueSize":1}],"id":1543,"nodeType":"InlineAssembly","src":"926:93:11"},{"expression":{"id":1546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1544,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"1036:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1036:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1547,"nodeType":"ExpressionStatement","src":"1036:11:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1548,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"1069:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1078:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1069:10:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1552,"nodeType":"IfStatement","src":"1065:21:11","trueBody":{"id":1551,"nodeType":"Break","src":"1081:5:11"}}]},"condition":{"hexValue":"74727565","id":1539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"828:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1554,"nodeType":"WhileStatement","src":"821:280:11"},{"expression":{"id":1555,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"1121:6:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1518,"id":1556,"nodeType":"Return","src":"1114:13:11"}]}]},"documentation":{"id":1512,"nodeType":"StructuredDocumentation","src":"342:90:11","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1559,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"446:8:11","nodeType":"FunctionDefinition","parameters":{"id":1515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1514,"mutability":"mutable","name":"value","nameLocation":"463:5:11","nodeType":"VariableDeclaration","scope":1559,"src":"455:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1513,"name":"uint256","nodeType":"ElementaryTypeName","src":"455:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"454:15:11"},"returnParameters":{"id":1518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1517,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1559,"src":"493:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1516,"name":"string","nodeType":"ElementaryTypeName","src":"493:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"492:15:11"},"scope":1676,"src":"437:707:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1578,"nodeType":"Block","src":"1323:111:11","statements":[{"id":1577,"nodeType":"UncheckedBlock","src":"1333:95:11","statements":[{"expression":{"arguments":[{"id":1568,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1562,"src":"1376:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1571,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1562,"src":"1406:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1569,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2597,"src":"1383:15:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$2597_$","typeString":"type(library MathUpgradeable)"}},"id":1570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1399:6:11","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2557,"src":"1383:22:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1383:29:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1415:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1383:33:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1567,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1579,1655,1675],"referencedDeclaration":1655,"src":"1364:11:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1364:53:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1566,"id":1576,"nodeType":"Return","src":"1357:60:11"}]}]},"documentation":{"id":1560,"nodeType":"StructuredDocumentation","src":"1150:94:11","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1579,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1258:11:11","nodeType":"FunctionDefinition","parameters":{"id":1563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1562,"mutability":"mutable","name":"value","nameLocation":"1278:5:11","nodeType":"VariableDeclaration","scope":1579,"src":"1270:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1561,"name":"uint256","nodeType":"ElementaryTypeName","src":"1270:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1269:15:11"},"returnParameters":{"id":1566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1565,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1579,"src":"1308:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1564,"name":"string","nodeType":"ElementaryTypeName","src":"1308:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1307:15:11"},"scope":1676,"src":"1249:185:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1654,"nodeType":"Block","src":"1647:347:11","statements":[{"assignments":[1590],"declarations":[{"constant":false,"id":1590,"mutability":"mutable","name":"buffer","nameLocation":"1670:6:11","nodeType":"VariableDeclaration","scope":1654,"src":"1657:19:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1589,"name":"bytes","nodeType":"ElementaryTypeName","src":"1657:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1599,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1689:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1594,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"1693:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1689:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1689:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1592,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1679:9:11","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1591,"name":"bytes","nodeType":"ElementaryTypeName","src":"1683:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1679:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1657:47:11"},{"expression":{"id":1604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1600,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1590,"src":"1714:6:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1602,"indexExpression":{"hexValue":"30","id":1601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1721:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1714:9:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1726:3:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1714:15:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1605,"nodeType":"ExpressionStatement","src":"1714:15:11"},{"expression":{"id":1610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1606,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1590,"src":"1739:6:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1608,"indexExpression":{"hexValue":"31","id":1607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1746:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1739:9:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1751:3:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1739:15:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1611,"nodeType":"ExpressionStatement","src":"1739:15:11"},{"body":{"id":1640,"nodeType":"Block","src":"1809:83:11","statements":[{"expression":{"id":1634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1626,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1590,"src":"1823:6:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1628,"indexExpression":{"id":1627,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"1830:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1823:9:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1629,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"1835:8:11","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1633,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1630,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"1844:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1852:3:11","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1844:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1835:21:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1823:33:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1635,"nodeType":"ExpressionStatement","src":"1823:33:11"},{"expression":{"id":1638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1636,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"1870:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1880:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1870:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1639,"nodeType":"ExpressionStatement","src":"1870:11:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1620,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"1797:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1801:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1797:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1641,"initializationExpression":{"assignments":[1613],"declarations":[{"constant":false,"id":1613,"mutability":"mutable","name":"i","nameLocation":"1777:1:11","nodeType":"VariableDeclaration","scope":1641,"src":"1769:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1612,"name":"uint256","nodeType":"ElementaryTypeName","src":"1769:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1619,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1781:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1615,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"1785:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1781:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1794:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1781:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1769:26:11"},"loopExpression":{"expression":{"id":1624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1804:3:11","subExpression":{"id":1623,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"1806:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1625,"nodeType":"ExpressionStatement","src":"1804:3:11"},"nodeType":"ForStatement","src":"1764:128:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1643,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"1909:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1918:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1909:10:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1921:34:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1642,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1901:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:55:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1648,"nodeType":"ExpressionStatement","src":"1901:55:11"},{"expression":{"arguments":[{"id":1651,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1590,"src":"1980:6:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1650,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1973:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1649,"name":"string","nodeType":"ElementaryTypeName","src":"1973:6:11","typeDescriptions":{}}},"id":1652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1973:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1588,"id":1653,"nodeType":"Return","src":"1966:21:11"}]},"documentation":{"id":1580,"nodeType":"StructuredDocumentation","src":"1440:112:11","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1655,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1566:11:11","nodeType":"FunctionDefinition","parameters":{"id":1585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1582,"mutability":"mutable","name":"value","nameLocation":"1586:5:11","nodeType":"VariableDeclaration","scope":1655,"src":"1578:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1581,"name":"uint256","nodeType":"ElementaryTypeName","src":"1578:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1584,"mutability":"mutable","name":"length","nameLocation":"1601:6:11","nodeType":"VariableDeclaration","scope":1655,"src":"1593:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1583,"name":"uint256","nodeType":"ElementaryTypeName","src":"1593:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1577:31:11"},"returnParameters":{"id":1588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1655,"src":"1632:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1586,"name":"string","nodeType":"ElementaryTypeName","src":"1632:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1631:15:11"},"scope":1676,"src":"1557:437:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1674,"nodeType":"Block","src":"2219:76:11","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1668,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"2264:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1667,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2256:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1666,"name":"uint160","nodeType":"ElementaryTypeName","src":"2256:7:11","typeDescriptions":{}}},"id":1669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2256:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1665,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2248:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1664,"name":"uint256","nodeType":"ElementaryTypeName","src":"2248:7:11","typeDescriptions":{}}},"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2248:22:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1671,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1511,"src":"2272:15:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1663,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1579,1655,1675],"referencedDeclaration":1655,"src":"2236:11:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2236:52:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1662,"id":1673,"nodeType":"Return","src":"2229:59:11"}]},"documentation":{"id":1656,"nodeType":"StructuredDocumentation","src":"2000:141:11","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1675,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2155:11:11","nodeType":"FunctionDefinition","parameters":{"id":1659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1658,"mutability":"mutable","name":"addr","nameLocation":"2175:4:11","nodeType":"VariableDeclaration","scope":1675,"src":"2167:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1657,"name":"address","nodeType":"ElementaryTypeName","src":"2167:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2166:14:11"},"returnParameters":{"id":1662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1661,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1675,"src":"2204:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1660,"name":"string","nodeType":"ElementaryTypeName","src":"2204:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2203:15:11"},"scope":1676,"src":"2146:149:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1677,"src":"199:2098:11","usedErrors":[]}],"src":"101:2197:11"},"id":11},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1459],"ERC165Upgradeable":[1720],"IERC165Upgradeable":[1732],"Initializable":[580]},"id":1721,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1678,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:12"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","file":"./IERC165Upgradeable.sol","id":1679,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1721,"sourceUnit":1733,"src":"124:34:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":1680,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1721,"sourceUnit":581,"src":"159:45:12","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1682,"name":"Initializable","nameLocations":["822:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":580,"src":"822:13:12"},"id":1683,"nodeType":"InheritanceSpecifier","src":"822:13:12"},{"baseName":{"id":1684,"name":"IERC165Upgradeable","nameLocations":["837:18:12"],"nodeType":"IdentifierPath","referencedDeclaration":1732,"src":"837:18:12"},"id":1685,"nodeType":"InheritanceSpecifier","src":"837:18:12"}],"canonicalName":"ERC165Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1681,"nodeType":"StructuredDocumentation","src":"206:576:12","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":1720,"linearizedBaseContracts":[1720,1732,580],"name":"ERC165Upgradeable","nameLocation":"801:17:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":1690,"nodeType":"Block","src":"913:7:12","statements":[]},"id":1691,"implemented":true,"kind":"function","modifiers":[{"id":1688,"kind":"modifierInvocation","modifierName":{"id":1687,"name":"onlyInitializing","nameLocations":["896:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"896:16:12"},"nodeType":"ModifierInvocation","src":"896:16:12"}],"name":"__ERC165_init","nameLocation":"871:13:12","nodeType":"FunctionDefinition","parameters":{"id":1686,"nodeType":"ParameterList","parameters":[],"src":"884:2:12"},"returnParameters":{"id":1689,"nodeType":"ParameterList","parameters":[],"src":"913:0:12"},"scope":1720,"src":"862:58:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1696,"nodeType":"Block","src":"987:7:12","statements":[]},"id":1697,"implemented":true,"kind":"function","modifiers":[{"id":1694,"kind":"modifierInvocation","modifierName":{"id":1693,"name":"onlyInitializing","nameLocations":["970:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"970:16:12"},"nodeType":"ModifierInvocation","src":"970:16:12"}],"name":"__ERC165_init_unchained","nameLocation":"935:23:12","nodeType":"FunctionDefinition","parameters":{"id":1692,"nodeType":"ParameterList","parameters":[],"src":"958:2:12"},"returnParameters":{"id":1695,"nodeType":"ParameterList","parameters":[],"src":"987:0:12"},"scope":1720,"src":"926:68:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1731],"body":{"id":1713,"nodeType":"Block","src":"1151:75:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1706,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"1168:11:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1708,"name":"IERC165Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1732,"src":"1188:18:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$1732_$","typeString":"type(contract IERC165Upgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$1732_$","typeString":"type(contract IERC165Upgradeable)"}],"id":1707,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1183:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1183:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165Upgradeable_$1732","typeString":"type(contract IERC165Upgradeable)"}},"id":1710,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1208:11:12","memberName":"interfaceId","nodeType":"MemberAccess","src":"1183:36:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1168:51:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1705,"id":1712,"nodeType":"Return","src":"1161:58:12"}]},"documentation":{"id":1698,"nodeType":"StructuredDocumentation","src":"999:56:12","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1714,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1069:17:12","nodeType":"FunctionDefinition","overrides":{"id":1702,"nodeType":"OverrideSpecifier","overrides":[],"src":"1127:8:12"},"parameters":{"id":1701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1700,"mutability":"mutable","name":"interfaceId","nameLocation":"1094:11:12","nodeType":"VariableDeclaration","scope":1714,"src":"1087:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1699,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1087:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1086:20:12"},"returnParameters":{"id":1705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1704,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1714,"src":"1145:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1703,"name":"bool","nodeType":"ElementaryTypeName","src":"1145:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1144:6:12"},"scope":1720,"src":"1060:166:12","stateMutability":"view","virtual":true,"visibility":"public"},{"constant":false,"documentation":{"id":1715,"nodeType":"StructuredDocumentation","src":"1232:254:12","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1719,"mutability":"mutable","name":"__gap","nameLocation":"1511:5:12","nodeType":"VariableDeclaration","scope":1720,"src":"1491:25:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1716,"name":"uint256","nodeType":"ElementaryTypeName","src":"1491:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1718,"length":{"hexValue":"3530","id":1717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1499:2:12","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1491:11:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1721,"src":"783:736:12","usedErrors":[]}],"src":"99:1421:12"},"id":12},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","exportedSymbols":{"IERC165Upgradeable":[1732]},"id":1733,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1722,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1723,"nodeType":"StructuredDocumentation","src":"125:279:13","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":1732,"linearizedBaseContracts":[1732],"name":"IERC165Upgradeable","nameLocation":"415:18:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1724,"nodeType":"StructuredDocumentation","src":"440:340:13","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":1731,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"794:17:13","nodeType":"FunctionDefinition","parameters":{"id":1727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1726,"mutability":"mutable","name":"interfaceId","nameLocation":"819:11:13","nodeType":"VariableDeclaration","scope":1731,"src":"812:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1725,"name":"bytes4","nodeType":"ElementaryTypeName","src":"812:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"811:20:13"},"returnParameters":{"id":1730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1729,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1731,"src":"855:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1728,"name":"bool","nodeType":"ElementaryTypeName","src":"855:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"854:6:13"},"scope":1732,"src":"785:76:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1733,"src":"405:458:13","usedErrors":[]}],"src":"100:764:13"},"id":13},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[2597]},"id":2598,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1734,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"MathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1735,"nodeType":"StructuredDocumentation","src":"128:73:14","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2597,"linearizedBaseContracts":[2597],"name":"MathUpgradeable","nameLocation":"210:15:14","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MathUpgradeable.Rounding","id":1739,"members":[{"id":1736,"name":"Down","nameLocation":"256:4:14","nodeType":"EnumValue","src":"256:4:14"},{"id":1737,"name":"Up","nameLocation":"298:2:14","nodeType":"EnumValue","src":"298:2:14"},{"id":1738,"name":"Zero","nameLocation":"329:4:14","nodeType":"EnumValue","src":"329:4:14"}],"name":"Rounding","nameLocation":"237:8:14","nodeType":"EnumDefinition","src":"232:122:14"},{"body":{"id":1756,"nodeType":"Block","src":"491:37:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1749,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1742,"src":"508:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1750,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1744,"src":"512:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"508:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1753,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1744,"src":"520:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"508:13:14","trueExpression":{"id":1752,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1742,"src":"516:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1748,"id":1755,"nodeType":"Return","src":"501:20:14"}]},"documentation":{"id":1740,"nodeType":"StructuredDocumentation","src":"360:59:14","text":" @dev Returns the largest of two numbers."},"id":1757,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"433:3:14","nodeType":"FunctionDefinition","parameters":{"id":1745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1742,"mutability":"mutable","name":"a","nameLocation":"445:1:14","nodeType":"VariableDeclaration","scope":1757,"src":"437:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1741,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1744,"mutability":"mutable","name":"b","nameLocation":"456:1:14","nodeType":"VariableDeclaration","scope":1757,"src":"448:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1743,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"436:22:14"},"returnParameters":{"id":1748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1747,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1757,"src":"482:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1746,"name":"uint256","nodeType":"ElementaryTypeName","src":"482:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"481:9:14"},"scope":2597,"src":"424:104:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1774,"nodeType":"Block","src":"666:37:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1767,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"683:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1768,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1762,"src":"687:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"683:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1771,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1762,"src":"695:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"683:13:14","trueExpression":{"id":1770,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"691:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1766,"id":1773,"nodeType":"Return","src":"676:20:14"}]},"documentation":{"id":1758,"nodeType":"StructuredDocumentation","src":"534:60:14","text":" @dev Returns the smallest of two numbers."},"id":1775,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"608:3:14","nodeType":"FunctionDefinition","parameters":{"id":1763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1760,"mutability":"mutable","name":"a","nameLocation":"620:1:14","nodeType":"VariableDeclaration","scope":1775,"src":"612:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1759,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1762,"mutability":"mutable","name":"b","nameLocation":"631:1:14","nodeType":"VariableDeclaration","scope":1775,"src":"623:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1761,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"611:22:14"},"returnParameters":{"id":1766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1765,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1775,"src":"657:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1764,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:9:14"},"scope":2597,"src":"599:104:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1797,"nodeType":"Block","src":"887:82:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1785,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1778,"src":"942:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1786,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"946:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1788,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"941:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1789,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1778,"src":"952:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1790,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"956:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"952:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1792,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"951:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":1793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"961:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"951:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1784,"id":1796,"nodeType":"Return","src":"934:28:14"}]},"documentation":{"id":1776,"nodeType":"StructuredDocumentation","src":"709:102:14","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":1798,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"825:7:14","nodeType":"FunctionDefinition","parameters":{"id":1781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1778,"mutability":"mutable","name":"a","nameLocation":"841:1:14","nodeType":"VariableDeclaration","scope":1798,"src":"833:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1777,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1780,"mutability":"mutable","name":"b","nameLocation":"852:1:14","nodeType":"VariableDeclaration","scope":1798,"src":"844:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1779,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:22:14"},"returnParameters":{"id":1784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1783,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1798,"src":"878:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1782,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"877:9:14"},"scope":2597,"src":"816:153:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1822,"nodeType":"Block","src":"1239:123:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1808,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"1327:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1332:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1327:6:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1812,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"1341:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1345:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1341:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1815,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1340:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1816,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1803,"src":"1350:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1340:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1340:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1327:28:14","trueExpression":{"hexValue":"30","id":1811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1336:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1807,"id":1821,"nodeType":"Return","src":"1320:35:14"}]},"documentation":{"id":1799,"nodeType":"StructuredDocumentation","src":"975:188:14","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":1823,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1177:7:14","nodeType":"FunctionDefinition","parameters":{"id":1804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1801,"mutability":"mutable","name":"a","nameLocation":"1193:1:14","nodeType":"VariableDeclaration","scope":1823,"src":"1185:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1800,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1803,"mutability":"mutable","name":"b","nameLocation":"1204:1:14","nodeType":"VariableDeclaration","scope":1823,"src":"1196:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1802,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1184:22:14"},"returnParameters":{"id":1807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1806,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1823,"src":"1230:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1805,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1229:9:14"},"scope":2597,"src":"1168:194:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1944,"nodeType":"Block","src":"1806:3797:14","statements":[{"id":1943,"nodeType":"UncheckedBlock","src":"1816:3781:14","statements":[{"assignments":[1836],"declarations":[{"constant":false,"id":1836,"mutability":"mutable","name":"prod0","nameLocation":"2145:5:14","nodeType":"VariableDeclaration","scope":1943,"src":"2137:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1835,"name":"uint256","nodeType":"ElementaryTypeName","src":"2137:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1837,"nodeType":"VariableDeclarationStatement","src":"2137:13:14"},{"assignments":[1839],"declarations":[{"constant":false,"id":1839,"mutability":"mutable","name":"prod1","nameLocation":"2217:5:14","nodeType":"VariableDeclaration","scope":1943,"src":"2209:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1838,"name":"uint256","nodeType":"ElementaryTypeName","src":"2209:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1840,"nodeType":"VariableDeclarationStatement","src":"2209:13:14"},{"AST":{"nodeType":"YulBlock","src":"2289:157:14","statements":[{"nodeType":"YulVariableDeclaration","src":"2307:30:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2324:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"2327:1:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2334:1:14","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2330:3:14"},"nodeType":"YulFunctionCall","src":"2330:6:14"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2317:6:14"},"nodeType":"YulFunctionCall","src":"2317:20:14"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2311:2:14","type":""}]},{"nodeType":"YulAssignment","src":"2354:18:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2367:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"2370:1:14"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2363:3:14"},"nodeType":"YulFunctionCall","src":"2363:9:14"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2354:5:14"}]},{"nodeType":"YulAssignment","src":"2389:43:14","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2406:2:14"},{"name":"prod0","nodeType":"YulIdentifier","src":"2410:5:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2402:3:14"},"nodeType":"YulFunctionCall","src":"2402:14:14"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2421:2:14"},{"name":"prod0","nodeType":"YulIdentifier","src":"2425:5:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2418:2:14"},"nodeType":"YulFunctionCall","src":"2418:13:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2398:3:14"},"nodeType":"YulFunctionCall","src":"2398:34:14"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2389:5:14"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1836,"isOffset":false,"isSlot":false,"src":"2354:5:14","valueSize":1},{"declaration":1836,"isOffset":false,"isSlot":false,"src":"2410:5:14","valueSize":1},{"declaration":1836,"isOffset":false,"isSlot":false,"src":"2425:5:14","valueSize":1},{"declaration":1839,"isOffset":false,"isSlot":false,"src":"2389:5:14","valueSize":1},{"declaration":1826,"isOffset":false,"isSlot":false,"src":"2324:1:14","valueSize":1},{"declaration":1826,"isOffset":false,"isSlot":false,"src":"2367:1:14","valueSize":1},{"declaration":1828,"isOffset":false,"isSlot":false,"src":"2327:1:14","valueSize":1},{"declaration":1828,"isOffset":false,"isSlot":false,"src":"2370:1:14","valueSize":1}],"id":1841,"nodeType":"InlineAssembly","src":"2280:166:14"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1842,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"2527:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2536:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2527:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1850,"nodeType":"IfStatement","src":"2523:75:14","trueBody":{"id":1849,"nodeType":"Block","src":"2539:59:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1845,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"2564:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1846,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"2572:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2564:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1834,"id":1848,"nodeType":"Return","src":"2557:26:14"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1852,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"2708:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1853,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"2722:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2708:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1851,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2700:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2700:28:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1856,"nodeType":"ExpressionStatement","src":"2700:28:14"},{"assignments":[1858],"declarations":[{"constant":false,"id":1858,"mutability":"mutable","name":"remainder","nameLocation":"2992:9:14","nodeType":"VariableDeclaration","scope":1943,"src":"2984:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1857,"name":"uint256","nodeType":"ElementaryTypeName","src":"2984:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1859,"nodeType":"VariableDeclarationStatement","src":"2984:17:14"},{"AST":{"nodeType":"YulBlock","src":"3024:291:14","statements":[{"nodeType":"YulAssignment","src":"3093:38:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3113:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"3116:1:14"},{"name":"denominator","nodeType":"YulIdentifier","src":"3119:11:14"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3106:6:14"},"nodeType":"YulFunctionCall","src":"3106:25:14"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3093:9:14"}]},{"nodeType":"YulAssignment","src":"3213:41:14","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3226:5:14"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3236:9:14"},{"name":"prod0","nodeType":"YulIdentifier","src":"3247:5:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3233:2:14"},"nodeType":"YulFunctionCall","src":"3233:20:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3222:3:14"},"nodeType":"YulFunctionCall","src":"3222:32:14"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3213:5:14"}]},{"nodeType":"YulAssignment","src":"3271:30:14","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3284:5:14"},{"name":"remainder","nodeType":"YulIdentifier","src":"3291:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3280:3:14"},"nodeType":"YulFunctionCall","src":"3280:21:14"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3271:5:14"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1830,"isOffset":false,"isSlot":false,"src":"3119:11:14","valueSize":1},{"declaration":1836,"isOffset":false,"isSlot":false,"src":"3247:5:14","valueSize":1},{"declaration":1836,"isOffset":false,"isSlot":false,"src":"3271:5:14","valueSize":1},{"declaration":1836,"isOffset":false,"isSlot":false,"src":"3284:5:14","valueSize":1},{"declaration":1839,"isOffset":false,"isSlot":false,"src":"3213:5:14","valueSize":1},{"declaration":1839,"isOffset":false,"isSlot":false,"src":"3226:5:14","valueSize":1},{"declaration":1858,"isOffset":false,"isSlot":false,"src":"3093:9:14","valueSize":1},{"declaration":1858,"isOffset":false,"isSlot":false,"src":"3236:9:14","valueSize":1},{"declaration":1858,"isOffset":false,"isSlot":false,"src":"3291:9:14","valueSize":1},{"declaration":1826,"isOffset":false,"isSlot":false,"src":"3113:1:14","valueSize":1},{"declaration":1828,"isOffset":false,"isSlot":false,"src":"3116:1:14","valueSize":1}],"id":1860,"nodeType":"InlineAssembly","src":"3015:300:14"},{"assignments":[1862],"declarations":[{"constant":false,"id":1862,"mutability":"mutable","name":"twos","nameLocation":"3630:4:14","nodeType":"VariableDeclaration","scope":1943,"src":"3622:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1861,"name":"uint256","nodeType":"ElementaryTypeName","src":"3622:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1870,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1863,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"3637:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3652:12:14","subExpression":{"id":1864,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"3653:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3667:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3652:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1868,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3651:18:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3637:32:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3622:47:14"},{"AST":{"nodeType":"YulBlock","src":"3692:362:14","statements":[{"nodeType":"YulAssignment","src":"3757:37:14","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3776:11:14"},{"name":"twos","nodeType":"YulIdentifier","src":"3789:4:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3772:3:14"},"nodeType":"YulFunctionCall","src":"3772:22:14"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3757:11:14"}]},{"nodeType":"YulAssignment","src":"3861:25:14","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3874:5:14"},{"name":"twos","nodeType":"YulIdentifier","src":"3881:4:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3870:3:14"},"nodeType":"YulFunctionCall","src":"3870:16:14"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3861:5:14"}]},{"nodeType":"YulAssignment","src":"4001:39:14","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4021:1:14","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4024:4:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4017:3:14"},"nodeType":"YulFunctionCall","src":"4017:12:14"},{"name":"twos","nodeType":"YulIdentifier","src":"4031:4:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4013:3:14"},"nodeType":"YulFunctionCall","src":"4013:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"4038:1:14","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4009:3:14"},"nodeType":"YulFunctionCall","src":"4009:31:14"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4001:4:14"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1830,"isOffset":false,"isSlot":false,"src":"3757:11:14","valueSize":1},{"declaration":1830,"isOffset":false,"isSlot":false,"src":"3776:11:14","valueSize":1},{"declaration":1836,"isOffset":false,"isSlot":false,"src":"3861:5:14","valueSize":1},{"declaration":1836,"isOffset":false,"isSlot":false,"src":"3874:5:14","valueSize":1},{"declaration":1862,"isOffset":false,"isSlot":false,"src":"3789:4:14","valueSize":1},{"declaration":1862,"isOffset":false,"isSlot":false,"src":"3881:4:14","valueSize":1},{"declaration":1862,"isOffset":false,"isSlot":false,"src":"4001:4:14","valueSize":1},{"declaration":1862,"isOffset":false,"isSlot":false,"src":"4024:4:14","valueSize":1},{"declaration":1862,"isOffset":false,"isSlot":false,"src":"4031:4:14","valueSize":1}],"id":1871,"nodeType":"InlineAssembly","src":"3683:371:14"},{"expression":{"id":1876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1872,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"4120:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1873,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"4129:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1874,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"4137:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4129:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4120:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1877,"nodeType":"ExpressionStatement","src":"4120:21:14"},{"assignments":[1879],"declarations":[{"constant":false,"id":1879,"mutability":"mutable","name":"inverse","nameLocation":"4467:7:14","nodeType":"VariableDeclaration","scope":1943,"src":"4459:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1878,"name":"uint256","nodeType":"ElementaryTypeName","src":"4459:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1886,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":1880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4478:1:14","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1881,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"4482:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4478:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1883,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4477:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":1884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4497:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4477:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4459:39:14"},{"expression":{"id":1893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1887,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4715:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4726:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1889,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"4730:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1890,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4744:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4730:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4726:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1894,"nodeType":"ExpressionStatement","src":"4715:36:14"},{"expression":{"id":1901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1895,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4784:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4795:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1897,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"4799:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1898,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4813:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4799:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4795:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1902,"nodeType":"ExpressionStatement","src":"4784:36:14"},{"expression":{"id":1909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1903,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4854:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4865:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1905,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"4869:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1906,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4883:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4869:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4865:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1910,"nodeType":"ExpressionStatement","src":"4854:36:14"},{"expression":{"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1911,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4924:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4935:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1913,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"4939:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1914,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4953:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4939:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4935:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1918,"nodeType":"ExpressionStatement","src":"4924:36:14"},{"expression":{"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1919,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4994:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5005:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1921,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"5009:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1922,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"5023:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5009:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5005:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1926,"nodeType":"ExpressionStatement","src":"4994:36:14"},{"expression":{"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1927,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"5065:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5076:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1929,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"5080:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1930,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"5094:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5080:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1934,"nodeType":"ExpressionStatement","src":"5065:36:14"},{"expression":{"id":1939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1935,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1833,"src":"5535:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1936,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"5544:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1937,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"5552:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5544:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5535:24:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1940,"nodeType":"ExpressionStatement","src":"5535:24:14"},{"expression":{"id":1941,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1833,"src":"5580:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1834,"id":1942,"nodeType":"Return","src":"5573:13:14"}]}]},"documentation":{"id":1824,"nodeType":"StructuredDocumentation","src":"1368:305:14","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":1945,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1687:6:14","nodeType":"FunctionDefinition","parameters":{"id":1831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1826,"mutability":"mutable","name":"x","nameLocation":"1711:1:14","nodeType":"VariableDeclaration","scope":1945,"src":"1703:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1825,"name":"uint256","nodeType":"ElementaryTypeName","src":"1703:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1828,"mutability":"mutable","name":"y","nameLocation":"1730:1:14","nodeType":"VariableDeclaration","scope":1945,"src":"1722:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1827,"name":"uint256","nodeType":"ElementaryTypeName","src":"1722:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1830,"mutability":"mutable","name":"denominator","nameLocation":"1749:11:14","nodeType":"VariableDeclaration","scope":1945,"src":"1741:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1829,"name":"uint256","nodeType":"ElementaryTypeName","src":"1741:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1693:73:14"},"returnParameters":{"id":1834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1833,"mutability":"mutable","name":"result","nameLocation":"1798:6:14","nodeType":"VariableDeclaration","scope":1945,"src":"1790:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1832,"name":"uint256","nodeType":"ElementaryTypeName","src":"1790:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1789:16:14"},"scope":2597,"src":"1678:3925:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1988,"nodeType":"Block","src":"5883:189:14","statements":[{"assignments":[1961],"declarations":[{"constant":false,"id":1961,"mutability":"mutable","name":"result","nameLocation":"5901:6:14","nodeType":"VariableDeclaration","scope":1988,"src":"5893:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1960,"name":"uint256","nodeType":"ElementaryTypeName","src":"5893:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1967,"initialValue":{"arguments":[{"id":1963,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"5917:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1964,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1950,"src":"5920:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1965,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1952,"src":"5923:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1962,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[1945,1989],"referencedDeclaration":1945,"src":"5910:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5910:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5893:42:14"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"},"id":1971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1968,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"5949:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1969,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"5961:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1739_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":1970,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5970:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1737,"src":"5961:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"src":"5949:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1973,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"5983:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1974,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1950,"src":"5986:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1975,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1952,"src":"5989:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1972,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5976:6:14","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5976:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6004:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5976:29:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5949:56:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1985,"nodeType":"IfStatement","src":"5945:98:14","trueBody":{"id":1984,"nodeType":"Block","src":"6007:36:14","statements":[{"expression":{"id":1982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1980,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"6021:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6031:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6021:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1983,"nodeType":"ExpressionStatement","src":"6021:11:14"}]}},{"expression":{"id":1986,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"6059:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1959,"id":1987,"nodeType":"Return","src":"6052:13:14"}]},"documentation":{"id":1946,"nodeType":"StructuredDocumentation","src":"5609:121:14","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":1989,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5744:6:14","nodeType":"FunctionDefinition","parameters":{"id":1956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1948,"mutability":"mutable","name":"x","nameLocation":"5768:1:14","nodeType":"VariableDeclaration","scope":1989,"src":"5760:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1947,"name":"uint256","nodeType":"ElementaryTypeName","src":"5760:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1950,"mutability":"mutable","name":"y","nameLocation":"5787:1:14","nodeType":"VariableDeclaration","scope":1989,"src":"5779:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1949,"name":"uint256","nodeType":"ElementaryTypeName","src":"5779:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1952,"mutability":"mutable","name":"denominator","nameLocation":"5806:11:14","nodeType":"VariableDeclaration","scope":1989,"src":"5798:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1951,"name":"uint256","nodeType":"ElementaryTypeName","src":"5798:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1955,"mutability":"mutable","name":"rounding","nameLocation":"5836:8:14","nodeType":"VariableDeclaration","scope":1989,"src":"5827:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":1954,"nodeType":"UserDefinedTypeName","pathNode":{"id":1953,"name":"Rounding","nameLocations":["5827:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":1739,"src":"5827:8:14"},"referencedDeclaration":1739,"src":"5827:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"5750:100:14"},"returnParameters":{"id":1959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1958,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1989,"src":"5874:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1957,"name":"uint256","nodeType":"ElementaryTypeName","src":"5874:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5873:9:14"},"scope":2597,"src":"5735:337:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2100,"nodeType":"Block","src":"6348:1585:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1997,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"6362:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6367:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6362:6:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2003,"nodeType":"IfStatement","src":"6358:45:14","trueBody":{"id":2002,"nodeType":"Block","src":"6370:33:14","statements":[{"expression":{"hexValue":"30","id":2000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6391:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1996,"id":2001,"nodeType":"Return","src":"6384:8:14"}]}},{"assignments":[2005],"declarations":[{"constant":false,"id":2005,"mutability":"mutable","name":"result","nameLocation":"7090:6:14","nodeType":"VariableDeclaration","scope":2100,"src":"7082:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2004,"name":"uint256","nodeType":"ElementaryTypeName","src":"7082:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2014,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7099:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2008,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"7110:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2007,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2269,2305],"referencedDeclaration":2269,"src":"7105:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7105:7:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7116:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7105:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2012,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7104:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7099:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7082:36:14"},{"id":2099,"nodeType":"UncheckedBlock","src":"7519:408:14","statements":[{"expression":{"id":2024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2015,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7543:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2016,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7553:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2017,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"7562:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2018,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7566:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7562:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7553:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2021,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7552:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7577:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7552:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7543:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2025,"nodeType":"ExpressionStatement","src":"7543:35:14"},{"expression":{"id":2035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2026,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7592:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2027,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7602:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2028,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"7611:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2029,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7615:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7611:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7602:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2032,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7601:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7626:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7601:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7592:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2036,"nodeType":"ExpressionStatement","src":"7592:35:14"},{"expression":{"id":2046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2037,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7641:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2038,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7651:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2039,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"7660:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2040,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7664:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7660:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7651:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2043,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7650:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7675:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7650:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7641:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2047,"nodeType":"ExpressionStatement","src":"7641:35:14"},{"expression":{"id":2057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2048,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7690:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2049,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7700:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2050,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"7709:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2051,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7713:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7709:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7700:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2054,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7699:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7724:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7699:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7690:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2058,"nodeType":"ExpressionStatement","src":"7690:35:14"},{"expression":{"id":2068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2059,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7739:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2060,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7749:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2061,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"7758:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2062,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7762:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7758:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7749:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2065,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7748:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7773:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7748:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7739:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2069,"nodeType":"ExpressionStatement","src":"7739:35:14"},{"expression":{"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2070,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7788:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2071,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7798:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2072,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"7807:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2073,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7811:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7807:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7798:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2076,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7797:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7822:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7797:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7788:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2080,"nodeType":"ExpressionStatement","src":"7788:35:14"},{"expression":{"id":2090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2081,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7837:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2082,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7847:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2083,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"7856:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2084,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7860:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7856:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7847:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2087,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7846:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7871:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7846:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7837:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2091,"nodeType":"ExpressionStatement","src":"7837:35:14"},{"expression":{"arguments":[{"id":2093,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7897:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2094,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"7905:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2095,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7909:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7905:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2092,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1775,"src":"7893:3:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7893:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1996,"id":2098,"nodeType":"Return","src":"7886:30:14"}]}]},"documentation":{"id":1990,"nodeType":"StructuredDocumentation","src":"6078:208:14","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2101,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6300:4:14","nodeType":"FunctionDefinition","parameters":{"id":1993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1992,"mutability":"mutable","name":"a","nameLocation":"6313:1:14","nodeType":"VariableDeclaration","scope":2101,"src":"6305:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1991,"name":"uint256","nodeType":"ElementaryTypeName","src":"6305:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6304:11:14"},"returnParameters":{"id":1996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1995,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2101,"src":"6339:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1994,"name":"uint256","nodeType":"ElementaryTypeName","src":"6339:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6338:9:14"},"scope":2597,"src":"6291:1642:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2136,"nodeType":"Block","src":"8109:161:14","statements":[{"id":2135,"nodeType":"UncheckedBlock","src":"8119:145:14","statements":[{"assignments":[2113],"declarations":[{"constant":false,"id":2113,"mutability":"mutable","name":"result","nameLocation":"8151:6:14","nodeType":"VariableDeclaration","scope":2135,"src":"8143:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2112,"name":"uint256","nodeType":"ElementaryTypeName","src":"8143:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2117,"initialValue":{"arguments":[{"id":2115,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2104,"src":"8165:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2114,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2101,2137],"referencedDeclaration":2101,"src":"8160:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8160:7:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8143:24:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2118,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"8188:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"},"id":2122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2119,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"8198:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2120,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"8210:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1739_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2121,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8219:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1737,"src":"8210:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"src":"8198:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2123,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"8225:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2124,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"8234:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8225:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2126,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2104,"src":"8243:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8225:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8198:46:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8251:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8198:54:14","trueExpression":{"hexValue":"31","id":2129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8247:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2132,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8197:56:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8188:65:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2111,"id":2134,"nodeType":"Return","src":"8181:72:14"}]}]},"documentation":{"id":2102,"nodeType":"StructuredDocumentation","src":"7939:89:14","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2137,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8042:4:14","nodeType":"FunctionDefinition","parameters":{"id":2108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2104,"mutability":"mutable","name":"a","nameLocation":"8055:1:14","nodeType":"VariableDeclaration","scope":2137,"src":"8047:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2103,"name":"uint256","nodeType":"ElementaryTypeName","src":"8047:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2107,"mutability":"mutable","name":"rounding","nameLocation":"8067:8:14","nodeType":"VariableDeclaration","scope":2137,"src":"8058:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2106,"nodeType":"UserDefinedTypeName","pathNode":{"id":2105,"name":"Rounding","nameLocations":["8058:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":1739,"src":"8058:8:14"},"referencedDeclaration":1739,"src":"8058:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"8046:30:14"},"returnParameters":{"id":2111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2110,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2137,"src":"8100:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2109,"name":"uint256","nodeType":"ElementaryTypeName","src":"8100:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8099:9:14"},"scope":2597,"src":"8033:237:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2268,"nodeType":"Block","src":"8455:922:14","statements":[{"assignments":[2146],"declarations":[{"constant":false,"id":2146,"mutability":"mutable","name":"result","nameLocation":"8473:6:14","nodeType":"VariableDeclaration","scope":2268,"src":"8465:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2145,"name":"uint256","nodeType":"ElementaryTypeName","src":"8465:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2148,"initialValue":{"hexValue":"30","id":2147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8482:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8465:18:14"},{"id":2265,"nodeType":"UncheckedBlock","src":"8493:855:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2149,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"8521:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8530:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8521:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8536:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8521:16:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2163,"nodeType":"IfStatement","src":"8517:99:14","trueBody":{"id":2162,"nodeType":"Block","src":"8539:77:14","statements":[{"expression":{"id":2156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2154,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"8557:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8567:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8557:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2157,"nodeType":"ExpressionStatement","src":"8557:13:14"},{"expression":{"id":2160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2158,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"8588:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8598:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8588:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2161,"nodeType":"ExpressionStatement","src":"8588:13:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2164,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"8633:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8642:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8633:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8647:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8633:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2178,"nodeType":"IfStatement","src":"8629:96:14","trueBody":{"id":2177,"nodeType":"Block","src":"8650:75:14","statements":[{"expression":{"id":2171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2169,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"8668:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8678:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8668:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2172,"nodeType":"ExpressionStatement","src":"8668:12:14"},{"expression":{"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2173,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"8698:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8708:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8698:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2176,"nodeType":"ExpressionStatement","src":"8698:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2179,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"8742:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8751:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8742:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8756:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8742:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2193,"nodeType":"IfStatement","src":"8738:96:14","trueBody":{"id":2192,"nodeType":"Block","src":"8759:75:14","statements":[{"expression":{"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2184,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"8777:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8787:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8777:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2187,"nodeType":"ExpressionStatement","src":"8777:12:14"},{"expression":{"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2188,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"8807:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8817:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8807:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2191,"nodeType":"ExpressionStatement","src":"8807:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2194,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"8851:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8860:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8851:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8865:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8851:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2208,"nodeType":"IfStatement","src":"8847:96:14","trueBody":{"id":2207,"nodeType":"Block","src":"8868:75:14","statements":[{"expression":{"id":2201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2199,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"8886:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8896:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8886:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2202,"nodeType":"ExpressionStatement","src":"8886:12:14"},{"expression":{"id":2205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2203,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"8916:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8926:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8916:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2206,"nodeType":"ExpressionStatement","src":"8916:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2209,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"8960:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8969:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8960:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8973:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8960:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2223,"nodeType":"IfStatement","src":"8956:93:14","trueBody":{"id":2222,"nodeType":"Block","src":"8976:73:14","statements":[{"expression":{"id":2216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2214,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"8994:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9004:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8994:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2217,"nodeType":"ExpressionStatement","src":"8994:11:14"},{"expression":{"id":2220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2218,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"9023:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9033:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9023:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2221,"nodeType":"ExpressionStatement","src":"9023:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2224,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"9066:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9075:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9066:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9079:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9066:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2238,"nodeType":"IfStatement","src":"9062:93:14","trueBody":{"id":2237,"nodeType":"Block","src":"9082:73:14","statements":[{"expression":{"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2229,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"9100:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9110:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9100:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2232,"nodeType":"ExpressionStatement","src":"9100:11:14"},{"expression":{"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2233,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"9129:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9139:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9129:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2236,"nodeType":"ExpressionStatement","src":"9129:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2239,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"9172:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9181:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9172:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9185:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9172:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2253,"nodeType":"IfStatement","src":"9168:93:14","trueBody":{"id":2252,"nodeType":"Block","src":"9188:73:14","statements":[{"expression":{"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2244,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"9206:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9216:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9206:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2247,"nodeType":"ExpressionStatement","src":"9206:11:14"},{"expression":{"id":2250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2248,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"9235:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9245:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9235:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2251,"nodeType":"ExpressionStatement","src":"9235:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2254,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"9278:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9287:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9278:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9291:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9278:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2264,"nodeType":"IfStatement","src":"9274:64:14","trueBody":{"id":2263,"nodeType":"Block","src":"9294:44:14","statements":[{"expression":{"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2259,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"9312:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9322:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9312:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2262,"nodeType":"ExpressionStatement","src":"9312:11:14"}]}}]},{"expression":{"id":2266,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"9364:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2144,"id":2267,"nodeType":"Return","src":"9357:13:14"}]},"documentation":{"id":2138,"nodeType":"StructuredDocumentation","src":"8276:113:14","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2269,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8403:4:14","nodeType":"FunctionDefinition","parameters":{"id":2141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2140,"mutability":"mutable","name":"value","nameLocation":"8416:5:14","nodeType":"VariableDeclaration","scope":2269,"src":"8408:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2139,"name":"uint256","nodeType":"ElementaryTypeName","src":"8408:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8407:15:14"},"returnParameters":{"id":2144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2143,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2269,"src":"8446:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2142,"name":"uint256","nodeType":"ElementaryTypeName","src":"8446:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8445:9:14"},"scope":2597,"src":"8394:983:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2304,"nodeType":"Block","src":"9610:165:14","statements":[{"id":2303,"nodeType":"UncheckedBlock","src":"9620:149:14","statements":[{"assignments":[2281],"declarations":[{"constant":false,"id":2281,"mutability":"mutable","name":"result","nameLocation":"9652:6:14","nodeType":"VariableDeclaration","scope":2303,"src":"9644:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2280,"name":"uint256","nodeType":"ElementaryTypeName","src":"9644:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2285,"initialValue":{"arguments":[{"id":2283,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"9666:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2282,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2269,2305],"referencedDeclaration":2269,"src":"9661:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9661:11:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9644:28:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2286,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"9693:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"},"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2287,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2275,"src":"9703:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2288,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"9715:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1739_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2289,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9724:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1737,"src":"9715:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"src":"9703:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9730:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2292,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"9735:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9730:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2294,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"9744:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9730:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9703:46:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9756:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9703:54:14","trueExpression":{"hexValue":"31","id":2297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9752:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2300,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9702:56:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9693:65:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2279,"id":2302,"nodeType":"Return","src":"9686:72:14"}]}]},"documentation":{"id":2270,"nodeType":"StructuredDocumentation","src":"9383:142:14","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2305,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9539:4:14","nodeType":"FunctionDefinition","parameters":{"id":2276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2272,"mutability":"mutable","name":"value","nameLocation":"9552:5:14","nodeType":"VariableDeclaration","scope":2305,"src":"9544:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2271,"name":"uint256","nodeType":"ElementaryTypeName","src":"9544:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2275,"mutability":"mutable","name":"rounding","nameLocation":"9568:8:14","nodeType":"VariableDeclaration","scope":2305,"src":"9559:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2274,"nodeType":"UserDefinedTypeName","pathNode":{"id":2273,"name":"Rounding","nameLocations":["9559:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":1739,"src":"9559:8:14"},"referencedDeclaration":1739,"src":"9559:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"9543:34:14"},"returnParameters":{"id":2279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2278,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2305,"src":"9601:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2277,"name":"uint256","nodeType":"ElementaryTypeName","src":"9601:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9600:9:14"},"scope":2597,"src":"9530:245:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2433,"nodeType":"Block","src":"9962:828:14","statements":[{"assignments":[2314],"declarations":[{"constant":false,"id":2314,"mutability":"mutable","name":"result","nameLocation":"9980:6:14","nodeType":"VariableDeclaration","scope":2433,"src":"9972:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2313,"name":"uint256","nodeType":"ElementaryTypeName","src":"9972:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2316,"initialValue":{"hexValue":"30","id":2315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9989:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9972:18:14"},{"id":2430,"nodeType":"UncheckedBlock","src":"10000:761:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2317,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10028:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10037:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10041:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10037:6:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10028:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2333,"nodeType":"IfStatement","src":"10024:99:14","trueBody":{"id":2332,"nodeType":"Block","src":"10045:78:14","statements":[{"expression":{"id":2326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2322,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10063:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2325,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10072:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10076:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10072:6:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10063:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2327,"nodeType":"ExpressionStatement","src":"10063:15:14"},{"expression":{"id":2330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2328,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"10096:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10106:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10096:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2331,"nodeType":"ExpressionStatement","src":"10096:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2334,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10140:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2337,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10149:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10153:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10149:6:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10140:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2350,"nodeType":"IfStatement","src":"10136:99:14","trueBody":{"id":2349,"nodeType":"Block","src":"10157:78:14","statements":[{"expression":{"id":2343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2339,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10175:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2342,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10184:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10188:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10184:6:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10175:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2344,"nodeType":"ExpressionStatement","src":"10175:15:14"},{"expression":{"id":2347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2345,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"10208:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10218:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10208:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2348,"nodeType":"ExpressionStatement","src":"10208:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2351,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10252:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2354,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10261:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10265:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10261:6:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10252:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2367,"nodeType":"IfStatement","src":"10248:99:14","trueBody":{"id":2366,"nodeType":"Block","src":"10269:78:14","statements":[{"expression":{"id":2360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2356,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10287:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2359,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10296:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10300:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10296:6:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10287:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2361,"nodeType":"ExpressionStatement","src":"10287:15:14"},{"expression":{"id":2364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2362,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"10320:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10330:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10320:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2365,"nodeType":"ExpressionStatement","src":"10320:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2368,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10364:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2371,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10373:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10377:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10373:5:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10364:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2384,"nodeType":"IfStatement","src":"10360:96:14","trueBody":{"id":2383,"nodeType":"Block","src":"10380:76:14","statements":[{"expression":{"id":2377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2373,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10398:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2376,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10407:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10411:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10407:5:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10398:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2378,"nodeType":"ExpressionStatement","src":"10398:14:14"},{"expression":{"id":2381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2379,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"10430:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10440:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10430:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2382,"nodeType":"ExpressionStatement","src":"10430:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2385,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10473:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2388,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10482:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10486:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10482:5:14","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10473:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2401,"nodeType":"IfStatement","src":"10469:96:14","trueBody":{"id":2400,"nodeType":"Block","src":"10489:76:14","statements":[{"expression":{"id":2394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2390,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10507:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2393,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10516:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10520:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10516:5:14","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10507:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2395,"nodeType":"ExpressionStatement","src":"10507:14:14"},{"expression":{"id":2398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2396,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"10539:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10549:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10539:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2399,"nodeType":"ExpressionStatement","src":"10539:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2402,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10582:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2405,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10591:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10595:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10591:5:14","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10582:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2418,"nodeType":"IfStatement","src":"10578:96:14","trueBody":{"id":2417,"nodeType":"Block","src":"10598:76:14","statements":[{"expression":{"id":2411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2407,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10616:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2410,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10625:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10629:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10625:5:14","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10616:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2412,"nodeType":"ExpressionStatement","src":"10616:14:14"},{"expression":{"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2413,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"10648:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10658:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10648:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2416,"nodeType":"ExpressionStatement","src":"10648:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2419,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10691:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2422,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10700:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10704:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10700:5:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10691:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2429,"nodeType":"IfStatement","src":"10687:64:14","trueBody":{"id":2428,"nodeType":"Block","src":"10707:44:14","statements":[{"expression":{"id":2426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2424,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"10725:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10735:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10725:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2427,"nodeType":"ExpressionStatement","src":"10725:11:14"}]}}]},{"expression":{"id":2431,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"10777:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2312,"id":2432,"nodeType":"Return","src":"10770:13:14"}]},"documentation":{"id":2306,"nodeType":"StructuredDocumentation","src":"9781:114:14","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2434,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9909:5:14","nodeType":"FunctionDefinition","parameters":{"id":2309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2308,"mutability":"mutable","name":"value","nameLocation":"9923:5:14","nodeType":"VariableDeclaration","scope":2434,"src":"9915:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2307,"name":"uint256","nodeType":"ElementaryTypeName","src":"9915:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9914:15:14"},"returnParameters":{"id":2312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2311,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2434,"src":"9953:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2310,"name":"uint256","nodeType":"ElementaryTypeName","src":"9953:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9952:9:14"},"scope":2597,"src":"9900:890:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2469,"nodeType":"Block","src":"11025:165:14","statements":[{"id":2468,"nodeType":"UncheckedBlock","src":"11035:149:14","statements":[{"assignments":[2446],"declarations":[{"constant":false,"id":2446,"mutability":"mutable","name":"result","nameLocation":"11067:6:14","nodeType":"VariableDeclaration","scope":2468,"src":"11059:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2445,"name":"uint256","nodeType":"ElementaryTypeName","src":"11059:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2450,"initialValue":{"arguments":[{"id":2448,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"11082:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2447,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2434,2470],"referencedDeclaration":2434,"src":"11076:5:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11076:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11059:29:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2451,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2446,"src":"11109:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"},"id":2455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2452,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2440,"src":"11119:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2453,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"11131:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1739_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2454,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11140:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1737,"src":"11131:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"src":"11119:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11146:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2457,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2446,"src":"11150:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11146:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2459,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"11159:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11146:18:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11119:45:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11171:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11119:53:14","trueExpression":{"hexValue":"31","id":2462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11167:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2465,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11118:55:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11109:64:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2444,"id":2467,"nodeType":"Return","src":"11102:71:14"}]}]},"documentation":{"id":2435,"nodeType":"StructuredDocumentation","src":"10796:143:14","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2470,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10953:5:14","nodeType":"FunctionDefinition","parameters":{"id":2441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2437,"mutability":"mutable","name":"value","nameLocation":"10967:5:14","nodeType":"VariableDeclaration","scope":2470,"src":"10959:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2436,"name":"uint256","nodeType":"ElementaryTypeName","src":"10959:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2440,"mutability":"mutable","name":"rounding","nameLocation":"10983:8:14","nodeType":"VariableDeclaration","scope":2470,"src":"10974:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2439,"nodeType":"UserDefinedTypeName","pathNode":{"id":2438,"name":"Rounding","nameLocations":["10974:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":1739,"src":"10974:8:14"},"referencedDeclaration":1739,"src":"10974:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"10958:34:14"},"returnParameters":{"id":2444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2443,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2470,"src":"11016:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2442,"name":"uint256","nodeType":"ElementaryTypeName","src":"11016:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11015:9:14"},"scope":2597,"src":"10944:246:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2556,"nodeType":"Block","src":"11504:600:14","statements":[{"assignments":[2479],"declarations":[{"constant":false,"id":2479,"mutability":"mutable","name":"result","nameLocation":"11522:6:14","nodeType":"VariableDeclaration","scope":2556,"src":"11514:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2478,"name":"uint256","nodeType":"ElementaryTypeName","src":"11514:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2481,"initialValue":{"hexValue":"30","id":2480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11531:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11514:18:14"},{"id":2553,"nodeType":"UncheckedBlock","src":"11542:533:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2482,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"11570:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11579:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11570:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11585:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11570:16:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2496,"nodeType":"IfStatement","src":"11566:98:14","trueBody":{"id":2495,"nodeType":"Block","src":"11588:76:14","statements":[{"expression":{"id":2489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2487,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"11606:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11616:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11606:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2490,"nodeType":"ExpressionStatement","src":"11606:13:14"},{"expression":{"id":2493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2491,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2479,"src":"11637:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11647:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11637:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2494,"nodeType":"ExpressionStatement","src":"11637:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2497,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"11681:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11690:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11681:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11695:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11681:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2511,"nodeType":"IfStatement","src":"11677:95:14","trueBody":{"id":2510,"nodeType":"Block","src":"11698:74:14","statements":[{"expression":{"id":2504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2502,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"11716:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11726:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11716:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2505,"nodeType":"ExpressionStatement","src":"11716:12:14"},{"expression":{"id":2508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2506,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2479,"src":"11746:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11756:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11746:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2509,"nodeType":"ExpressionStatement","src":"11746:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2512,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"11789:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11789:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11803:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11789:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2526,"nodeType":"IfStatement","src":"11785:95:14","trueBody":{"id":2525,"nodeType":"Block","src":"11806:74:14","statements":[{"expression":{"id":2519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2517,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"11824:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11834:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11824:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2520,"nodeType":"ExpressionStatement","src":"11824:12:14"},{"expression":{"id":2523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2521,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2479,"src":"11854:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11864:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11854:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2524,"nodeType":"ExpressionStatement","src":"11854:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2527,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"11897:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11906:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11897:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11911:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11897:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2541,"nodeType":"IfStatement","src":"11893:95:14","trueBody":{"id":2540,"nodeType":"Block","src":"11914:74:14","statements":[{"expression":{"id":2534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2532,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"11932:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11942:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11932:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2535,"nodeType":"ExpressionStatement","src":"11932:12:14"},{"expression":{"id":2538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2536,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2479,"src":"11962:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11972:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11962:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2539,"nodeType":"ExpressionStatement","src":"11962:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2542,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"12005:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12014:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12005:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12018:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12005:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2552,"nodeType":"IfStatement","src":"12001:64:14","trueBody":{"id":2551,"nodeType":"Block","src":"12021:44:14","statements":[{"expression":{"id":2549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2547,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2479,"src":"12039:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12049:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12039:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2550,"nodeType":"ExpressionStatement","src":"12039:11:14"}]}}]},{"expression":{"id":2554,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2479,"src":"12091:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2477,"id":2555,"nodeType":"Return","src":"12084:13:14"}]},"documentation":{"id":2471,"nodeType":"StructuredDocumentation","src":"11196:240:14","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2557,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11450:6:14","nodeType":"FunctionDefinition","parameters":{"id":2474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2473,"mutability":"mutable","name":"value","nameLocation":"11465:5:14","nodeType":"VariableDeclaration","scope":2557,"src":"11457:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2472,"name":"uint256","nodeType":"ElementaryTypeName","src":"11457:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11456:15:14"},"returnParameters":{"id":2477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2476,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2557,"src":"11495:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2475,"name":"uint256","nodeType":"ElementaryTypeName","src":"11495:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11494:9:14"},"scope":2597,"src":"11441:663:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2595,"nodeType":"Block","src":"12340:173:14","statements":[{"id":2594,"nodeType":"UncheckedBlock","src":"12350:157:14","statements":[{"assignments":[2569],"declarations":[{"constant":false,"id":2569,"mutability":"mutable","name":"result","nameLocation":"12382:6:14","nodeType":"VariableDeclaration","scope":2594,"src":"12374:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2568,"name":"uint256","nodeType":"ElementaryTypeName","src":"12374:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2573,"initialValue":{"arguments":[{"id":2571,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2560,"src":"12398:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2570,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2557,2596],"referencedDeclaration":2557,"src":"12391:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12391:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12374:30:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2574,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"12425:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"},"id":2578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2575,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"12435:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2576,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"12447:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1739_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2577,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12456:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1737,"src":"12447:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"src":"12435:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12462:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2580,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"12468:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":2581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12477:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12468:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2583,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12467:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12462:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2585,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2560,"src":"12482:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12462:25:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12435:52:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12494:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12435:60:14","trueExpression":{"hexValue":"31","id":2588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12490:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2591,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12434:62:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12425:71:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2567,"id":2593,"nodeType":"Return","src":"12418:78:14"}]}]},"documentation":{"id":2558,"nodeType":"StructuredDocumentation","src":"12110:143:14","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2596,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12267:6:14","nodeType":"FunctionDefinition","parameters":{"id":2564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2560,"mutability":"mutable","name":"value","nameLocation":"12282:5:14","nodeType":"VariableDeclaration","scope":2596,"src":"12274:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2559,"name":"uint256","nodeType":"ElementaryTypeName","src":"12274:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2563,"mutability":"mutable","name":"rounding","nameLocation":"12298:8:14","nodeType":"VariableDeclaration","scope":2596,"src":"12289:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2562,"nodeType":"UserDefinedTypeName","pathNode":{"id":2561,"name":"Rounding","nameLocations":["12289:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":1739,"src":"12289:8:14"},"referencedDeclaration":1739,"src":"12289:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"12273:34:14"},"returnParameters":{"id":2567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2566,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2596,"src":"12331:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2565,"name":"uint256","nodeType":"ElementaryTypeName","src":"12331:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12330:9:14"},"scope":2597,"src":"12258:255:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2598,"src":"202:12313:14","usedErrors":[]}],"src":"103:12413:14"},"id":14},"contracts/BaseUpgradeablePausable.sol":{"ast":{"absolutePath":"contracts/BaseUpgradeablePausable.sol","exportedSymbols":{"AccessControlUpgradeable":[335],"AddressUpgradeable":[1459],"BaseUpgradeablePausable":[2699],"BaseUpgradeablePausable__ZeroAddressError":[2606],"Constants":[2728],"ContextUpgradeable":[1501],"ERC165Upgradeable":[1720],"IAccessControlUpgradeable":[408],"IERC165Upgradeable":[1732],"Initializable":[580],"MathUpgradeable":[2597],"PausableUpgradeable":[707],"ReentrancyGuardUpgradeable":[780],"StringsUpgradeable":[1676]},"id":2700,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2599,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"33:23:15"},{"absolutePath":"contracts/Constants.sol","file":"./Constants.sol","id":2600,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2700,"sourceUnit":2729,"src":"58:25:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":2601,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2700,"sourceUnit":581,"src":"85:75:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","id":2602,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2700,"sourceUnit":708,"src":"161:78:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","id":2603,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2700,"sourceUnit":336,"src":"240:81:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","id":2604,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2700,"sourceUnit":781,"src":"322:85:15","symbolAliases":[],"unitAlias":""},{"errorSelector":"54151394","id":2606,"name":"BaseUpgradeablePausable__ZeroAddressError","nameLocation":"415:41:15","nodeType":"ErrorDefinition","parameters":{"id":2605,"nodeType":"ParameterList","parameters":[],"src":"456:2:15"},"src":"409:50:15"},{"abstract":false,"baseContracts":[{"baseName":{"id":2607,"name":"Initializable","nameLocations":["502:13:15"],"nodeType":"IdentifierPath","referencedDeclaration":580,"src":"502:13:15"},"id":2608,"nodeType":"InheritanceSpecifier","src":"502:13:15"},{"baseName":{"id":2609,"name":"PausableUpgradeable","nameLocations":["522:19:15"],"nodeType":"IdentifierPath","referencedDeclaration":707,"src":"522:19:15"},"id":2610,"nodeType":"InheritanceSpecifier","src":"522:19:15"},{"baseName":{"id":2611,"name":"AccessControlUpgradeable","nameLocations":["548:24:15"],"nodeType":"IdentifierPath","referencedDeclaration":335,"src":"548:24:15"},"id":2612,"nodeType":"InheritanceSpecifier","src":"548:24:15"},{"baseName":{"id":2613,"name":"ReentrancyGuardUpgradeable","nameLocations":["578:26:15"],"nodeType":"IdentifierPath","referencedDeclaration":780,"src":"578:26:15"},"id":2614,"nodeType":"InheritanceSpecifier","src":"578:26:15"}],"canonicalName":"BaseUpgradeablePausable","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2699,"linearizedBaseContracts":[2699,780,335,1720,1732,408,707,1501,580],"name":"BaseUpgradeablePausable","nameLocation":"470:23:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":2623,"nodeType":"Block","src":"634:94:15","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2617,"name":"isAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2698,"src":"652:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":2618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"652:9:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d75737420686176652061646d696e20726f6c6520746f20706572666f726d207468697320616374696f6e2e","id":2619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"663:46:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","typeString":"literal_string \"Must have admin role to perform this action.\""},"value":"Must have admin role to perform this action."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","typeString":"literal_string \"Must have admin role to perform this action.\""}],"id":2616,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"644:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"644:66:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2621,"nodeType":"ExpressionStatement","src":"644:66:15"},{"id":2622,"nodeType":"PlaceholderStatement","src":"720:1:15"}]},"id":2624,"name":"onlyAdmin","nameLocation":"622:9:15","nodeType":"ModifierDefinition","parameters":{"id":2615,"nodeType":"ParameterList","parameters":[],"src":"631:2:15"},"src":"613:115:15","virtual":false,"visibility":"internal"},{"body":{"id":2683,"nodeType":"Block","src":"815:468:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2631,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2626,"src":"828:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"845:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2633,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"837:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2632,"name":"address","nodeType":"ElementaryTypeName","src":"837:7:15","typeDescriptions":{}}},"id":2635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"837:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"828:19:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2641,"nodeType":"IfStatement","src":"825:99:15","trueBody":{"id":2640,"nodeType":"Block","src":"849:75:15","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2637,"name":"BaseUpgradeablePausable__ZeroAddressError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2606,"src":"870:41:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"870:43:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2639,"nodeType":"RevertStatement","src":"863:50:15"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2642,"name":"__Pausable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"933:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"933:17:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2644,"nodeType":"ExpressionStatement","src":"933:17:15"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2645,"name":"__AccessControl_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"960:20:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"960:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2647,"nodeType":"ExpressionStatement","src":"960:22:15"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2648,"name":"__ReentrancyGuard_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"992:22:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"992:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2650,"nodeType":"ExpressionStatement","src":"992:24:15"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2652,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"1038:9:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$2728_$","typeString":"type(library Constants)"}},"id":2653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1048:12:15","memberName":"getAdminRole","nodeType":"MemberAccess","referencedDeclaration":2719,"src":"1038:22:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":2654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1038:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2655,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2626,"src":"1064:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2651,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"1027:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1027:43:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2657,"nodeType":"ExpressionStatement","src":"1027:43:15"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2659,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"1091:9:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$2728_$","typeString":"type(library Constants)"}},"id":2660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1101:13:15","memberName":"getPauserRole","nodeType":"MemberAccess","referencedDeclaration":2727,"src":"1091:23:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":2661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1091:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2662,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2626,"src":"1118:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2658,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"1080:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":2663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1080:44:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2664,"nodeType":"ExpressionStatement","src":"1080:44:15"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2666,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"1149:9:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$2728_$","typeString":"type(library Constants)"}},"id":2667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1159:13:15","memberName":"getPauserRole","nodeType":"MemberAccess","referencedDeclaration":2727,"src":"1149:23:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":2668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1149:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2669,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"1176:9:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$2728_$","typeString":"type(library Constants)"}},"id":2670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1186:12:15","memberName":"getAdminRole","nodeType":"MemberAccess","referencedDeclaration":2719,"src":"1176:22:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":2671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1176:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2665,"name":"_setRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"1135:13:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32)"}},"id":2672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1135:66:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2673,"nodeType":"ExpressionStatement","src":"1135:66:15"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2675,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"1225:9:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$2728_$","typeString":"type(library Constants)"}},"id":2676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1235:12:15","memberName":"getAdminRole","nodeType":"MemberAccess","referencedDeclaration":2719,"src":"1225:22:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":2677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1225:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2678,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"1251:9:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$2728_$","typeString":"type(library Constants)"}},"id":2679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1261:12:15","memberName":"getAdminRole","nodeType":"MemberAccess","referencedDeclaration":2719,"src":"1251:22:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1251:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2674,"name":"_setRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"1211:13:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32)"}},"id":2681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1211:65:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2682,"nodeType":"ExpressionStatement","src":"1211:65:15"}]},"functionSelector":"6e810b1a","id":2684,"implemented":true,"kind":"function","modifiers":[{"arguments":[],"id":2629,"kind":"modifierInvocation","modifierName":{"id":2628,"name":"onlyInitializing","nameLocations":["796:16:15"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"796:16:15"},"nodeType":"ModifierInvocation","src":"796:18:15"}],"name":"__BaseUpgradeablePausable_init","nameLocation":"743:30:15","nodeType":"FunctionDefinition","parameters":{"id":2627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2626,"mutability":"mutable","name":"owner","nameLocation":"782:5:15","nodeType":"VariableDeclaration","scope":2684,"src":"774:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2625,"name":"address","nodeType":"ElementaryTypeName","src":"774:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"773:15:15"},"returnParameters":{"id":2630,"nodeType":"ParameterList","parameters":[],"src":"815:0:15"},"scope":2699,"src":"734:549:15","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2697,"nodeType":"Block","src":"1335:71:15","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2690,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"1360:9:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$2728_$","typeString":"type(library Constants)"}},"id":2691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1370:12:15","memberName":"getAdminRole","nodeType":"MemberAccess","referencedDeclaration":2719,"src":"1360:22:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":2692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1360:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2693,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"1386:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1386:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2689,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"1352:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":2695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1352:47:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2688,"id":2696,"nodeType":"Return","src":"1345:54:15"}]},"functionSelector":"b6db75a0","id":2698,"implemented":true,"kind":"function","modifiers":[],"name":"isAdmin","nameLocation":"1298:7:15","nodeType":"FunctionDefinition","parameters":{"id":2685,"nodeType":"ParameterList","parameters":[],"src":"1305:2:15"},"returnParameters":{"id":2688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2687,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2698,"src":"1329:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2686,"name":"bool","nodeType":"ElementaryTypeName","src":"1329:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1328:6:15"},"scope":2699,"src":"1289:117:15","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":2700,"src":"461:951:15","usedErrors":[2606]}],"src":"33:1379:15"},"id":15},"contracts/Constants.sol":{"ast":{"absolutePath":"contracts/Constants.sol","exportedSymbols":{"Constants":[2728]},"id":2729,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":2701,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"37:23:16"},{"abstract":false,"baseContracts":[],"canonicalName":"Constants","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":2728,"linearizedBaseContracts":[2728],"name":"Constants","nameLocation":"70:9:16","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"75b238fc","id":2706,"mutability":"constant","name":"ADMIN_ROLE","nameLocation":"111:10:16","nodeType":"VariableDeclaration","scope":2728,"src":"87:60:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2702,"name":"bytes32","nodeType":"ElementaryTypeName","src":"87:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"41444d494e5f524f4c45","id":2704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"134:12:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""},"value":"ADMIN_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""}],"id":2703,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"124:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"124:23:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"e63ab1e9","id":2711,"mutability":"constant","name":"PAUSER_ROLE","nameLocation":"177:11:16","nodeType":"VariableDeclaration","scope":2728,"src":"153:62:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2707,"name":"bytes32","nodeType":"ElementaryTypeName","src":"153:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5041555345525f524f4c45","id":2709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"201:13:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a","typeString":"literal_string \"PAUSER_ROLE\""},"value":"PAUSER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a","typeString":"literal_string \"PAUSER_ROLE\""}],"id":2708,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"191:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"191:24:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"body":{"id":2718,"nodeType":"Block","src":"278:34:16","statements":[{"expression":{"id":2716,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2706,"src":"295:10:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2715,"id":2717,"nodeType":"Return","src":"288:17:16"}]},"id":2719,"implemented":true,"kind":"function","modifiers":[],"name":"getAdminRole","nameLocation":"231:12:16","nodeType":"FunctionDefinition","parameters":{"id":2712,"nodeType":"ParameterList","parameters":[],"src":"243:2:16"},"returnParameters":{"id":2715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2714,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2719,"src":"269:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2713,"name":"bytes32","nodeType":"ElementaryTypeName","src":"269:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"268:9:16"},"scope":2728,"src":"222:90:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2726,"nodeType":"Block","src":"375:35:16","statements":[{"expression":{"id":2724,"name":"PAUSER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2711,"src":"392:11:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2723,"id":2725,"nodeType":"Return","src":"385:18:16"}]},"id":2727,"implemented":true,"kind":"function","modifiers":[],"name":"getPauserRole","nameLocation":"327:13:16","nodeType":"FunctionDefinition","parameters":{"id":2720,"nodeType":"ParameterList","parameters":[],"src":"340:2:16"},"returnParameters":{"id":2723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2722,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2727,"src":"366:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2721,"name":"bytes32","nodeType":"ElementaryTypeName","src":"366:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"365:9:16"},"scope":2728,"src":"318:92:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2729,"src":"62:350:16","usedErrors":[]}],"src":"37:375:16"},"id":16},"contracts/core/buySell/BuyGENZ.sol":{"ast":{"absolutePath":"contracts/core/buySell/BuyGENZ.sol","exportedSymbols":{"AccessControlUpgradeable":[335],"AddressUpgradeable":[1459],"BaseUpgradeablePausable":[2699],"BaseUpgradeablePausable__ZeroAddressError":[2606],"BuyGENZ":[3191],"Constants":[2728],"ContextUpgradeable":[1501],"ERC165Upgradeable":[1720],"IAccessControlUpgradeable":[408],"IBuyGENZ":[5542],"IERC165Upgradeable":[1732],"IERC20Extended":[5713],"IERC20PermitUpgradeable":[894],"IERC20Upgradeable":[858],"IGlobalPauseOperation":[5797],"Initializable":[580],"MathUpgradeable":[2597],"PausableUpgradeable":[707],"ReentrancyGuardUpgradeable":[780],"SafeERC20Upgradeable":[1175],"StringsUpgradeable":[1676]},"id":3192,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":2730,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"37:23:17"},{"absolutePath":"contracts/interfaces/IBuyGENZ.sol","file":"./../../interfaces/IBuyGENZ.sol","id":2731,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3192,"sourceUnit":5543,"src":"1599:41:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IERC20Extended.sol","file":"./../../interfaces/IERC20Extended.sol","id":2732,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3192,"sourceUnit":5714,"src":"1641:47:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IGlobalPauseOperation.sol","file":"./../../interfaces/IGlobalPauseOperation.sol","id":2733,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3192,"sourceUnit":5798,"src":"1689:54:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","id":2734,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3192,"sourceUnit":1176,"src":"1778:88:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/BaseUpgradeablePausable.sol","file":"./../../BaseUpgradeablePausable.sol","id":2735,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3192,"sourceUnit":2700,"src":"1891:45:17","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2737,"name":"IBuyGENZ","nameLocations":["2043:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":5542,"src":"2043:8:17"},"id":2738,"nodeType":"InheritanceSpecifier","src":"2043:8:17"},{"baseName":{"id":2739,"name":"BaseUpgradeablePausable","nameLocations":["2053:23:17"],"nodeType":"IdentifierPath","referencedDeclaration":2699,"src":"2053:23:17"},"id":2740,"nodeType":"InheritanceSpecifier","src":"2053:23:17"}],"canonicalName":"BuyGENZ","contractDependencies":[],"contractKind":"contract","documentation":{"id":2736,"nodeType":"StructuredDocumentation","src":"1938:85:17","text":"Report any bug or issues at:\n @custom:security-contact anshik@safezen.finance"},"fullyImplemented":true,"id":3191,"linearizedBaseContracts":[3191,2699,780,335,1720,1732,408,707,1501,580,5542],"name":"BuyGENZ","nameLocation":"2032:7:17","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2744,"libraryName":{"id":2741,"name":"SafeERC20Upgradeable","nameLocations":["2090:20:17"],"nodeType":"IdentifierPath","referencedDeclaration":1175,"src":"2090:20:17"},"nodeType":"UsingForDirective","src":"2084:49:17","typeName":{"id":2743,"nodeType":"UserDefinedTypeName","pathNode":{"id":2742,"name":"IERC20Upgradeable","nameLocations":["2115:17:17"],"nodeType":"IdentifierPath","referencedDeclaration":858,"src":"2115:17:17"},"referencedDeclaration":858,"src":"2115:17:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}}},{"global":false,"id":2748,"libraryName":{"id":2745,"name":"SafeERC20Upgradeable","nameLocations":["2144:20:17"],"nodeType":"IdentifierPath","referencedDeclaration":1175,"src":"2144:20:17"},"nodeType":"UsingForDirective","src":"2138:55:17","typeName":{"id":2747,"nodeType":"UserDefinedTypeName","pathNode":{"id":2746,"name":"IERC20PermitUpgradeable","nameLocations":["2169:23:17"],"nodeType":"IdentifierPath","referencedDeclaration":894,"src":"2169:23:17"},"referencedDeclaration":894,"src":"2169:23:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}}},{"constant":false,"documentation":{"id":2749,"nodeType":"StructuredDocumentation","src":"2199:74:17","text":"_tokenCounter: GENZ ERC20 tokens in circulation\n _currVersion: "},"id":2751,"mutability":"mutable","name":"_tokenCounter","nameLocation":"2294:13:17","nodeType":"VariableDeclaration","scope":3191,"src":"2278:29:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2750,"name":"uint256","nodeType":"ElementaryTypeName","src":"2278:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":2753,"mutability":"mutable","name":"_minWithdrawalPeriod","nameLocation":"2329:20:17","nodeType":"VariableDeclaration","scope":3191,"src":"2313:36:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2752,"name":"uint256","nodeType":"ElementaryTypeName","src":"2313:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":true,"id":2756,"mutability":"constant","name":"WITHDRAWAL_PERIOD_MULTIPLIER","nameLocation":"2380:28:17","nodeType":"VariableDeclaration","scope":3191,"src":"2355:63:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2754,"name":"uint256","nodeType":"ElementaryTypeName","src":"2355:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"38","id":2755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2411:7:17","subdenomination":"hours","typeDescriptions":{"typeIdentifier":"t_rational_28800_by_1","typeString":"int_const 28800"},"value":"8"},"visibility":"private"},{"constant":false,"id":2758,"mutability":"mutable","name":"_commonRatio","nameLocation":"2440:12:17","nodeType":"VariableDeclaration","scope":3191,"src":"2424:28:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2757,"name":"uint256","nodeType":"ElementaryTypeName","src":"2424:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":2760,"mutability":"mutable","name":"_baseSalePrice","nameLocation":"2474:14:17","nodeType":"VariableDeclaration","scope":3191,"src":"2458:30:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2759,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":2762,"mutability":"mutable","name":"_basePriceWithDec","nameLocation":"2510:17:17","nodeType":"VariableDeclaration","scope":3191,"src":"2494:33:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2761,"name":"uint256","nodeType":"ElementaryTypeName","src":"2494:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"documentation":{"id":2763,"nodeType":"StructuredDocumentation","src":"2534:131:17","text":"_tokenDAI: DAI ERC20 token\n _tokenUSDC: USDC ERC20 token\n _globalPauseOperation: Global Pause Operations Contract"},"id":2766,"mutability":"immutable","name":"_tokenDAI","nameLocation":"2706:9:17","nodeType":"VariableDeclaration","scope":3191,"src":"2670:45:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},"typeName":{"id":2765,"nodeType":"UserDefinedTypeName","pathNode":{"id":2764,"name":"IERC20Upgradeable","nameLocations":["2670:17:17"],"nodeType":"IdentifierPath","referencedDeclaration":858,"src":"2670:17:17"},"referencedDeclaration":858,"src":"2670:17:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"visibility":"private"},{"constant":false,"id":2769,"mutability":"immutable","name":"_tokenGENZ","nameLocation":"2757:10:17","nodeType":"VariableDeclaration","scope":3191,"src":"2721:46:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},"typeName":{"id":2768,"nodeType":"UserDefinedTypeName","pathNode":{"id":2767,"name":"IERC20Upgradeable","nameLocations":["2721:17:17"],"nodeType":"IdentifierPath","referencedDeclaration":858,"src":"2721:17:17"},"referencedDeclaration":858,"src":"2721:17:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"visibility":"private"},{"constant":false,"id":2772,"mutability":"mutable","name":"_globalPauseOperation","nameLocation":"2803:21:17","nodeType":"VariableDeclaration","scope":3191,"src":"2773:51:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IGlobalPauseOperation_$5797","typeString":"contract IGlobalPauseOperation"},"typeName":{"id":2771,"nodeType":"UserDefinedTypeName","pathNode":{"id":2770,"name":"IGlobalPauseOperation","nameLocations":["2773:21:17"],"nodeType":"IdentifierPath","referencedDeclaration":5797,"src":"2773:21:17"},"referencedDeclaration":5797,"src":"2773:21:17","typeDescriptions":{"typeIdentifier":"t_contract$_IGlobalPauseOperation_$5797","typeString":"contract IGlobalPauseOperation"}},"visibility":"private"},{"constant":false,"id":2775,"mutability":"immutable","name":"_tokenPermitDAI","nameLocation":"2872:15:17","nodeType":"VariableDeclaration","scope":3191,"src":"2830:57:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"},"typeName":{"id":2774,"nodeType":"UserDefinedTypeName","pathNode":{"id":2773,"name":"IERC20PermitUpgradeable","nameLocations":["2830:23:17"],"nodeType":"IdentifierPath","referencedDeclaration":894,"src":"2830:23:17"},"referencedDeclaration":894,"src":"2830:23:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}},"visibility":"private"},{"canonicalName":"BuyGENZ.StakeInformation","id":2782,"members":[{"constant":false,"id":2777,"mutability":"mutable","name":"hasStaked","nameLocation":"2933:9:17","nodeType":"VariableDeclaration","scope":2782,"src":"2928:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2776,"name":"bool","nodeType":"ElementaryTypeName","src":"2928:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2779,"mutability":"mutable","name":"amount","nameLocation":"2960:6:17","nodeType":"VariableDeclaration","scope":2782,"src":"2952:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2778,"name":"uint256","nodeType":"ElementaryTypeName","src":"2952:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2781,"mutability":"mutable","name":"minWithdrawTime","nameLocation":"2984:15:17","nodeType":"VariableDeclaration","scope":2782,"src":"2976:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2780,"name":"uint256","nodeType":"ElementaryTypeName","src":"2976:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"StakeInformation","nameLocation":"2901:16:17","nodeType":"StructDefinition","scope":3191,"src":"2894:112:17","visibility":"public"},{"constant":false,"id":2787,"mutability":"mutable","name":"stakingInformation","nameLocation":"3057:18:17","nodeType":"VariableDeclaration","scope":3191,"src":"3012:63:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StakeInformation_$2782_storage_$","typeString":"mapping(address => struct BuyGENZ.StakeInformation)"},"typeName":{"id":2786,"keyType":{"id":2783,"name":"address","nodeType":"ElementaryTypeName","src":"3020:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3012:36:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StakeInformation_$2782_storage_$","typeString":"mapping(address => struct BuyGENZ.StakeInformation)"},"valueType":{"id":2785,"nodeType":"UserDefinedTypeName","pathNode":{"id":2784,"name":"StakeInformation","nameLocations":["3031:16:17"],"nodeType":"IdentifierPath","referencedDeclaration":2782,"src":"3031:16:17"},"referencedDeclaration":2782,"src":"3031:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInformation_$2782_storage_ptr","typeString":"struct BuyGENZ.StakeInformation"}}},"visibility":"private"},{"body":{"id":2805,"nodeType":"Block","src":"3109:127:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2790,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"3141:6:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":2791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3141:8:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"74727565","id":2792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3153:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3141:16:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2794,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3140:18:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2795,"name":"_globalPauseOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2772,"src":"3176:21:17","typeDescriptions":{"typeIdentifier":"t_contract$_IGlobalPauseOperation_$5797","typeString":"contract IGlobalPauseOperation"}},"id":2796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3198:8:17","memberName":"isPaused","nodeType":"MemberAccess","referencedDeclaration":5796,"src":"3176:30:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bool_$","typeString":"function () view external returns (bool)"}},"id":2797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3176:32:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"74727565","id":2798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3212:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3176:40:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2800,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3175:42:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3140:77:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2789,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3119:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":2802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3119:99:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2803,"nodeType":"ExpressionStatement","src":"3119:99:17"},{"id":2804,"nodeType":"PlaceholderStatement","src":"3228:1:17"}]},"id":2806,"name":"ifNotPaused","nameLocation":"3095:11:17","nodeType":"ModifierDefinition","parameters":{"id":2788,"nodeType":"ParameterList","parameters":[],"src":"3106:2:17"},"src":"3086:150:17","virtual":false,"visibility":"internal"},{"body":{"id":2848,"nodeType":"Block","src":"3463:242:17","statements":[{"expression":{"id":2822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2818,"name":"_tokenDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2766,"src":"3473:9:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2820,"name":"tokenDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2813,"src":"3503:8:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2819,"name":"IERC20Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":858,"src":"3485:17:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Upgradeable_$858_$","typeString":"type(contract IERC20Upgradeable)"}},"id":2821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3485:27:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"src":"3473:39:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":2823,"nodeType":"ExpressionStatement","src":"3473:39:17"},{"expression":{"id":2828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2824,"name":"_tokenGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"3523:10:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2826,"name":"tokenGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2815,"src":"3554:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2825,"name":"IERC20Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":858,"src":"3536:17:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Upgradeable_$858_$","typeString":"type(contract IERC20Upgradeable)"}},"id":2827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3536:28:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"src":"3523:41:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":2829,"nodeType":"ExpressionStatement","src":"3523:41:17"},{"expression":{"id":2834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2830,"name":"_tokenPermitDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2775,"src":"3575:15:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2832,"name":"tokenDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2813,"src":"3617:8:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2831,"name":"IERC20PermitUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"3593:23:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20PermitUpgradeable_$894_$","typeString":"type(contract IERC20PermitUpgradeable)"}},"id":2833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3593:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}},"src":"3575:51:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}},"id":2835,"nodeType":"ExpressionStatement","src":"3575:51:17"},{"expression":{"id":2846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2836,"name":"_commonRatio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"3636:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2837,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2809,"src":"3652:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3130653137","id":2838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3660:5:17","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"10e17"},"src":"3652:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2840,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3651:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3670:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2842,"name":"decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"3676:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3670:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2844,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3669:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3651:34:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3636:49:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2847,"nodeType":"ExpressionStatement","src":"3636:49:17"}]},"documentation":{"id":2807,"nodeType":"StructuredDocumentation","src":"3242:134:17","text":"@dev initializing _tokenDAI\n @param tokenDAI: address of the DAI token\n @custom:oz-upgrades-unsafe-allow-constructor"},"id":2849,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2809,"mutability":"mutable","name":"value","nameLocation":"3401:5:17","nodeType":"VariableDeclaration","scope":2849,"src":"3393:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2808,"name":"uint256","nodeType":"ElementaryTypeName","src":"3393:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2811,"mutability":"mutable","name":"decimals","nameLocation":"3416:8:17","nodeType":"VariableDeclaration","scope":2849,"src":"3408:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2810,"name":"uint256","nodeType":"ElementaryTypeName","src":"3408:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2813,"mutability":"mutable","name":"tokenDAI","nameLocation":"3434:8:17","nodeType":"VariableDeclaration","scope":2849,"src":"3426:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2812,"name":"address","nodeType":"ElementaryTypeName","src":"3426:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2815,"mutability":"mutable","name":"tokenGENZ","nameLocation":"3452:9:17","nodeType":"VariableDeclaration","scope":2849,"src":"3444:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2814,"name":"address","nodeType":"ElementaryTypeName","src":"3444:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3392:70:17"},"returnParameters":{"id":2817,"nodeType":"ParameterList","parameters":[],"src":"3463:0:17"},"scope":3191,"src":"3381:324:17","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2876,"nodeType":"Block","src":"3940:201:17","statements":[{"expression":{"id":2859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2857,"name":"_baseSalePrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2760,"src":"3950:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":2858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3967:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3950:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2860,"nodeType":"ExpressionStatement","src":"3950:18:17"},{"expression":{"id":2863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2861,"name":"_basePriceWithDec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2762,"src":"3978:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31653138","id":2862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3998:4:17","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"3978:24:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2864,"nodeType":"ExpressionStatement","src":"3978:24:17"},{"expression":{"id":2869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2865,"name":"_globalPauseOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2772,"src":"4012:21:17","typeDescriptions":{"typeIdentifier":"t_contract$_IGlobalPauseOperation_$5797","typeString":"contract IGlobalPauseOperation"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2867,"name":"pauseOperationAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2852,"src":"4058:21:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2866,"name":"IGlobalPauseOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5797,"src":"4036:21:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IGlobalPauseOperation_$5797_$","typeString":"type(contract IGlobalPauseOperation)"}},"id":2868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4036:44:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IGlobalPauseOperation_$5797","typeString":"contract IGlobalPauseOperation"}},"src":"4012:68:17","typeDescriptions":{"typeIdentifier":"t_contract$_IGlobalPauseOperation_$5797","typeString":"contract IGlobalPauseOperation"}},"id":2870,"nodeType":"ExpressionStatement","src":"4012:68:17"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2872,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"4121:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4121:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2871,"name":"__BaseUpgradeablePausable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2684,"src":"4090:30:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4090:44:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2875,"nodeType":"ExpressionStatement","src":"4090:44:17"}]},"documentation":{"id":2850,"nodeType":"StructuredDocumentation","src":"3711:138:17","text":"@dev one time function to initialize the contract\n @param pauseOperationAddress: address of the Global Pause Operation contract"},"functionSelector":"c4d66de8","id":2877,"implemented":true,"kind":"function","modifiers":[{"id":2855,"kind":"modifierInvocation","modifierName":{"id":2854,"name":"initializer","nameLocations":["3928:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":482,"src":"3928:11:17"},"nodeType":"ModifierInvocation","src":"3928:11:17"}],"name":"initialize","nameLocation":"3863:10:17","nodeType":"FunctionDefinition","parameters":{"id":2853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2852,"mutability":"mutable","name":"pauseOperationAddress","nameLocation":"3891:21:17","nodeType":"VariableDeclaration","scope":2877,"src":"3883:29:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2851,"name":"address","nodeType":"ElementaryTypeName","src":"3883:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3873:45:17"},"returnParameters":{"id":2856,"nodeType":"ParameterList","parameters":[],"src":"3940:0:17"},"scope":3191,"src":"3854:287:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2894,"nodeType":"Block","src":"4215:91:17","statements":[{"expression":{"id":2886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2884,"name":"_baseSalePrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2760,"src":"4225:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2885,"name":"tokenPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"4242:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4225:27:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2887,"nodeType":"ExpressionStatement","src":"4225:27:17"},{"expression":{"id":2892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2888,"name":"_basePriceWithDec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2762,"src":"4262:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2889,"name":"tokenPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"4282:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31653138","id":2890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4295:4:17","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"4282:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4262:37:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2893,"nodeType":"ExpressionStatement","src":"4262:37:17"}]},"functionSelector":"eaef3999","id":2895,"implemented":true,"kind":"function","modifiers":[{"id":2882,"kind":"modifierInvocation","modifierName":{"id":2881,"name":"onlyAdmin","nameLocations":["4205:9:17"],"nodeType":"IdentifierPath","referencedDeclaration":2624,"src":"4205:9:17"},"nodeType":"ModifierInvocation","src":"4205:9:17"}],"name":"updateBaseSalePrice","nameLocation":"4156:19:17","nodeType":"FunctionDefinition","parameters":{"id":2880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2879,"mutability":"mutable","name":"tokenPrice","nameLocation":"4184:10:17","nodeType":"VariableDeclaration","scope":2895,"src":"4176:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2878,"name":"uint256","nodeType":"ElementaryTypeName","src":"4176:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4175:20:17"},"returnParameters":{"id":2883,"nodeType":"ParameterList","parameters":[],"src":"4215:0:17"},"scope":3191,"src":"4147:159:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2908,"nodeType":"Block","src":"4391:60:17","statements":[{"expression":{"id":2906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2902,"name":"_minWithdrawalPeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2753,"src":"4401:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2903,"name":"valueInDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2897,"src":"4424:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31","id":2904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4438:6:17","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_86400_by_1","typeString":"int_const 86400"},"value":"1"},"src":"4424:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4401:43:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2907,"nodeType":"ExpressionStatement","src":"4401:43:17"}]},"functionSelector":"051e6cb1","id":2909,"implemented":true,"kind":"function","modifiers":[{"id":2900,"kind":"modifierInvocation","modifierName":{"id":2899,"name":"onlyAdmin","nameLocations":["4381:9:17"],"nodeType":"IdentifierPath","referencedDeclaration":2624,"src":"4381:9:17"},"nodeType":"ModifierInvocation","src":"4381:9:17"}],"name":"updateMinimumWithdrawalPeriod","nameLocation":"4321:29:17","nodeType":"FunctionDefinition","parameters":{"id":2898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2897,"mutability":"mutable","name":"valueInDays","nameLocation":"4359:11:17","nodeType":"VariableDeclaration","scope":2909,"src":"4351:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2896,"name":"uint256","nodeType":"ElementaryTypeName","src":"4351:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4350:21:17"},"returnParameters":{"id":2901,"nodeType":"ParameterList","parameters":[],"src":"4391:0:17"},"scope":3191,"src":"4312:139:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2917,"nodeType":"Block","src":"4493:25:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2914,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"4503:6:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4503:8:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2916,"nodeType":"ExpressionStatement","src":"4503:8:17"}]},"functionSelector":"8456cb59","id":2918,"implemented":true,"kind":"function","modifiers":[{"id":2912,"kind":"modifierInvocation","modifierName":{"id":2911,"name":"onlyAdmin","nameLocations":["4483:9:17"],"nodeType":"IdentifierPath","referencedDeclaration":2624,"src":"4483:9:17"},"nodeType":"ModifierInvocation","src":"4483:9:17"}],"name":"pause","nameLocation":"4466:5:17","nodeType":"FunctionDefinition","parameters":{"id":2910,"nodeType":"ParameterList","parameters":[],"src":"4471:2:17"},"returnParameters":{"id":2913,"nodeType":"ParameterList","parameters":[],"src":"4493:0:17"},"scope":3191,"src":"4457:61:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2926,"nodeType":"Block","src":"4562:27:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2923,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"4572:8:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4572:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2925,"nodeType":"ExpressionStatement","src":"4572:10:17"}]},"functionSelector":"3f4ba83a","id":2927,"implemented":true,"kind":"function","modifiers":[{"id":2921,"kind":"modifierInvocation","modifierName":{"id":2920,"name":"onlyAdmin","nameLocations":["4552:9:17"],"nodeType":"IdentifierPath","referencedDeclaration":2624,"src":"4552:9:17"},"nodeType":"ModifierInvocation","src":"4552:9:17"}],"name":"unpause","nameLocation":"4533:7:17","nodeType":"FunctionDefinition","parameters":{"id":2919,"nodeType":"ParameterList","parameters":[],"src":"4540:2:17"},"returnParameters":{"id":2922,"nodeType":"ParameterList","parameters":[],"src":"4562:0:17"},"scope":3191,"src":"4524:65:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3039,"nodeType":"Block","src":"4854:901:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2947,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2930,"src":"4868:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31653138","id":2948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4876:4:17","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"4868:12:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2954,"nodeType":"IfStatement","src":"4864:79:17","trueBody":{"id":2953,"nodeType":"Block","src":"4882:61:17","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2950,"name":"BuySellGENZ__LowAmountError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5527,"src":"4903:27:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4903:29:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2952,"nodeType":"RevertStatement","src":"4896:36:17"}]}},{"expression":{"id":2957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2955,"name":"_minWithdrawalPeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2753,"src":"4952:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2956,"name":"WITHDRAWAL_PERIOD_MULTIPLIER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2756,"src":"4976:28:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4952:52:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2958,"nodeType":"ExpressionStatement","src":"4952:52:17"},{"assignments":[null,2960],"declarations":[null,{"constant":false,"id":2960,"mutability":"mutable","name":"amountToBePaid","nameLocation":"5053:14:17","nodeType":"VariableDeclaration","scope":3039,"src":"5045:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2959,"name":"uint256","nodeType":"ElementaryTypeName","src":"5045:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2967,"initialValue":{"arguments":[{"id":2962,"name":"_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2751,"src":"5103:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2963,"name":"_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2751,"src":"5118:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2964,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2930,"src":"5134:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5118:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2961,"name":"calculatePriceGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"5071:18:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256) view returns (uint256,uint256)"}},"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5071:69:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"5014:126:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2968,"name":"amountToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"5154:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2971,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"5191:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5191:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2969,"name":"_tokenDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2766,"src":"5171:9:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":2970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5181:9:17","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":815,"src":"5171:19:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":2973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5171:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5154:50:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2979,"nodeType":"IfStatement","src":"5150:127:17","trueBody":{"id":2978,"nodeType":"Block","src":"5206:71:17","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2975,"name":"BuySellGENZ__InsufficientBalanceError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5539,"src":"5227:37:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5227:39:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2977,"nodeType":"RevertStatement","src":"5220:46:17"}]}},{"assignments":[2982],"declarations":[{"constant":false,"id":2982,"mutability":"mutable","name":"userStakeInformation","nameLocation":"5311:20:17","nodeType":"VariableDeclaration","scope":3039,"src":"5286:45:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInformation_$2782_storage_ptr","typeString":"struct BuyGENZ.StakeInformation"},"typeName":{"id":2981,"nodeType":"UserDefinedTypeName","pathNode":{"id":2980,"name":"StakeInformation","nameLocations":["5286:16:17"],"nodeType":"IdentifierPath","referencedDeclaration":2782,"src":"5286:16:17"},"referencedDeclaration":2782,"src":"5286:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInformation_$2782_storage_ptr","typeString":"struct BuyGENZ.StakeInformation"}},"visibility":"internal"}],"id":2987,"initialValue":{"baseExpression":{"id":2983,"name":"stakingInformation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"5334:18:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StakeInformation_$2782_storage_$","typeString":"mapping(address => struct BuyGENZ.StakeInformation storage ref)"}},"id":2986,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2984,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"5353:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5353:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5334:32:17","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInformation_$2782_storage","typeString":"struct BuyGENZ.StakeInformation storage ref"}},"nodeType":"VariableDeclarationStatement","src":"5286:80:17"},{"expression":{"id":2992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2988,"name":"userStakeInformation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"5376:20:17","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInformation_$2782_storage_ptr","typeString":"struct BuyGENZ.StakeInformation storage pointer"}},"id":2990,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5397:6:17","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":2779,"src":"5376:27:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2991,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2930,"src":"5407:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5376:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2993,"nodeType":"ExpressionStatement","src":"5376:36:17"},{"expression":{"id":2998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2994,"name":"userStakeInformation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"5422:20:17","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInformation_$2782_storage_ptr","typeString":"struct BuyGENZ.StakeInformation storage pointer"}},"id":2996,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5443:9:17","memberName":"hasStaked","nodeType":"MemberAccess","referencedDeclaration":2777,"src":"5422:30:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5455:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5422:37:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2999,"nodeType":"ExpressionStatement","src":"5422:37:17"},{"expression":{"id":3007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3000,"name":"userStakeInformation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"5469:20:17","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInformation_$2782_storage_ptr","typeString":"struct BuyGENZ.StakeInformation storage pointer"}},"id":3002,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5490:15:17","memberName":"minWithdrawTime","nodeType":"MemberAccess","referencedDeclaration":2781,"src":"5469:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3003,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5508:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5514:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"5508:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3005,"name":"_minWithdrawalPeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2753,"src":"5526:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5508:38:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5469:77:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3008,"nodeType":"ExpressionStatement","src":"5469:77:17"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3012,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"5583:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5583:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3016,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5605:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_BuyGENZ_$3191","typeString":"contract BuyGENZ"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BuyGENZ_$3191","typeString":"contract BuyGENZ"}],"id":3015,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5597:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3014,"name":"address","nodeType":"ElementaryTypeName","src":"5597:7:17","typeDescriptions":{}}},"id":3017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5597:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3018,"name":"amountToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"5612:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3019,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"5628:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3020,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2934,"src":"5638:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3021,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2936,"src":"5641:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3022,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"5644:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3009,"name":"_tokenPermitDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2775,"src":"5556:15:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}},"id":3011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5572:10:17","memberName":"safePermit","nodeType":"MemberAccess","referencedDeclaration":1136,"src":"5556:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20PermitUpgradeable_$894_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$bound_to$_t_contract$_IERC20PermitUpgradeable_$894_$","typeString":"function (contract IERC20PermitUpgradeable,address,address,uint256,uint256,uint8,bytes32,bytes32)"}},"id":3023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5556:90:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3024,"nodeType":"ExpressionStatement","src":"5556:90:17"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3028,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"5683:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5683:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3032,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5705:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_BuyGENZ_$3191","typeString":"contract BuyGENZ"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BuyGENZ_$3191","typeString":"contract BuyGENZ"}],"id":3031,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5697:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3030,"name":"address","nodeType":"ElementaryTypeName","src":"5697:7:17","typeDescriptions":{}}},"id":3033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5697:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3034,"name":"amountToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"5712:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3025,"name":"_tokenDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2766,"src":"5656:9:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":3027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5666:16:17","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":952,"src":"5656:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$858_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20Upgradeable_$858_$","typeString":"function (contract IERC20Upgradeable,address,address,uint256)"}},"id":3035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5656:71:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3036,"nodeType":"ExpressionStatement","src":"5656:71:17"},{"expression":{"hexValue":"74727565","id":3037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5744:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2946,"id":3038,"nodeType":"Return","src":"5737:11:17"}]},"documentation":{"id":2928,"nodeType":"StructuredDocumentation","src":"4595:76:17","text":"@dev \n @param value: amount of SZT tokens user wishes to purchase"},"functionSelector":"34d131bf","id":3040,"implemented":true,"kind":"function","modifiers":[{"id":2941,"kind":"modifierInvocation","modifierName":{"id":2940,"name":"nonReentrant","nameLocations":["4815:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":751,"src":"4815:12:17"},"nodeType":"ModifierInvocation","src":"4815:12:17"},{"id":2943,"kind":"modifierInvocation","modifierName":{"id":2942,"name":"ifNotPaused","nameLocations":["4828:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":2806,"src":"4828:11:17"},"nodeType":"ModifierInvocation","src":"4828:11:17"}],"name":"buyGENZToken","nameLocation":"4685:12:17","nodeType":"FunctionDefinition","parameters":{"id":2939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2930,"mutability":"mutable","name":"value","nameLocation":"4715:5:17","nodeType":"VariableDeclaration","scope":3040,"src":"4707:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2929,"name":"uint256","nodeType":"ElementaryTypeName","src":"4707:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2932,"mutability":"mutable","name":"deadline","nameLocation":"4735:8:17","nodeType":"VariableDeclaration","scope":3040,"src":"4730:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2931,"name":"uint","nodeType":"ElementaryTypeName","src":"4730:4:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2934,"mutability":"mutable","name":"v","nameLocation":"4760:1:17","nodeType":"VariableDeclaration","scope":3040,"src":"4754:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2933,"name":"uint8","nodeType":"ElementaryTypeName","src":"4754:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2936,"mutability":"mutable","name":"r","nameLocation":"4779:1:17","nodeType":"VariableDeclaration","scope":3040,"src":"4771:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2935,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4771:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2938,"mutability":"mutable","name":"s","nameLocation":"4798:1:17","nodeType":"VariableDeclaration","scope":3040,"src":"4790:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2937,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4790:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4697:108:17"},"returnParameters":{"id":2946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2945,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3040,"src":"4848:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2944,"name":"bool","nodeType":"ElementaryTypeName","src":"4848:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4847:6:17"},"scope":3191,"src":"4676:1079:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3101,"nodeType":"Block","src":"5900:441:17","statements":[{"assignments":[3052],"declarations":[{"constant":false,"id":3052,"mutability":"mutable","name":"commonRatioGENZ","nameLocation":"5918:15:17","nodeType":"VariableDeclaration","scope":3101,"src":"5910:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3051,"name":"uint256","nodeType":"ElementaryTypeName","src":"5910:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3056,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3053,"name":"_commonRatio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"5936:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3054,"name":"_baseSalePrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2760,"src":"5951:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5936:29:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5910:55:17"},{"assignments":[3058],"declarations":[{"constant":false,"id":3058,"mutability":"mutable","name":"tokenDifference","nameLocation":"5983:15:17","nodeType":"VariableDeclaration","scope":3101,"src":"5975:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3057,"name":"uint256","nodeType":"ElementaryTypeName","src":"5975:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3066,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3059,"name":"issuedTokensGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3042,"src":"6002:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3060,"name":"requiredTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"6022:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31653138","id":3061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6039:4:17","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"6022:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3063,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6021:23:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6002:42:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3065,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6001:44:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5975:70:17"},{"assignments":[3068],"declarations":[{"constant":false,"id":3068,"mutability":"mutable","name":"averageDiff","nameLocation":"6063:11:17","nodeType":"VariableDeclaration","scope":3101,"src":"6055:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3067,"name":"uint256","nodeType":"ElementaryTypeName","src":"6055:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3078,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3069,"name":"commonRatioGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"6079:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3070,"name":"tokenDifference","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3058,"src":"6097:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6079:33:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3072,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6078:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6116:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6078:39:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3075,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6077:41:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"31653138","id":3076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6121:4:17","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"6077:48:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6055:70:17"},{"assignments":[3080],"declarations":[{"constant":false,"id":3080,"mutability":"mutable","name":"amountPerToken","nameLocation":"6143:14:17","nodeType":"VariableDeclaration","scope":3101,"src":"6135:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3079,"name":"uint256","nodeType":"ElementaryTypeName","src":"6135:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3084,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3081,"name":"_basePriceWithDec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2762,"src":"6160:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3082,"name":"averageDiff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"6180:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6160:31:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6135:56:17"},{"assignments":[3086],"declarations":[{"constant":false,"id":3086,"mutability":"mutable","name":"amountToBePaid","nameLocation":"6209:14:17","nodeType":"VariableDeclaration","scope":3101,"src":"6201:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3085,"name":"uint256","nodeType":"ElementaryTypeName","src":"6201:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3096,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3087,"name":"amountPerToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3080,"src":"6227:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3088,"name":"requiredTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"6245:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3089,"name":"issuedTokensGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3042,"src":"6262:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6245:33:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3091,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6244:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6227:52:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3093,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6226:54:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"31653138","id":3094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6281:4:17","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"6226:59:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6201:84:17"},{"expression":{"components":[{"id":3097,"name":"amountPerToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3080,"src":"6303:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3098,"name":"amountToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"6319:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3099,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6302:32:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":3050,"id":3100,"nodeType":"Return","src":"6295:39:17"}]},"functionSelector":"06fb46ba","id":3102,"implemented":true,"kind":"function","modifiers":[],"name":"calculatePriceGENZ","nameLocation":"5770:18:17","nodeType":"FunctionDefinition","parameters":{"id":3045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3042,"mutability":"mutable","name":"issuedTokensGENZ","nameLocation":"5806:16:17","nodeType":"VariableDeclaration","scope":3102,"src":"5798:24:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3041,"name":"uint256","nodeType":"ElementaryTypeName","src":"5798:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3044,"mutability":"mutable","name":"requiredTokens","nameLocation":"5841:14:17","nodeType":"VariableDeclaration","scope":3102,"src":"5833:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3043,"name":"uint256","nodeType":"ElementaryTypeName","src":"5833:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5788:73:17"},"returnParameters":{"id":3050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3047,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3102,"src":"5882:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3046,"name":"uint256","nodeType":"ElementaryTypeName","src":"5882:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3049,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3102,"src":"5891:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3048,"name":"uint256","nodeType":"ElementaryTypeName","src":"5891:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5881:18:17"},"scope":3191,"src":"5761:580:17","stateMutability":"view","virtual":false,"visibility":"public"},{"errorSelector":"23d1e2cb","id":3104,"name":"BuyGENZ__TransactionFailedError","nameLocation":"6353:31:17","nodeType":"ErrorDefinition","parameters":{"id":3103,"nodeType":"ParameterList","parameters":[],"src":"6384:2:17"},"src":"6347:40:17"},{"body":{"id":3163,"nodeType":"Block","src":"6432:523:17","statements":[{"condition":{"id":3112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6446:43:17","subExpression":{"expression":{"baseExpression":{"id":3107,"name":"stakingInformation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"6447:18:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StakeInformation_$2782_storage_$","typeString":"mapping(address => struct BuyGENZ.StakeInformation storage ref)"}},"id":3110,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3108,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"6466:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6466:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6447:32:17","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInformation_$2782_storage","typeString":"struct BuyGENZ.StakeInformation storage ref"}},"id":3111,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6480:9:17","memberName":"hasStaked","nodeType":"MemberAccess","referencedDeclaration":2777,"src":"6447:42:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3117,"nodeType":"IfStatement","src":"6442:114:17","trueBody":{"id":3116,"nodeType":"Block","src":"6491:65:17","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3113,"name":"BuyGENZ__TransactionFailedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3104,"src":"6512:31:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6512:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3115,"nodeType":"RevertStatement","src":"6505:40:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3118,"name":"stakingInformation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"6569:18:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StakeInformation_$2782_storage_$","typeString":"mapping(address => struct BuyGENZ.StakeInformation storage ref)"}},"id":3121,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3119,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"6588:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6588:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6569:32:17","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInformation_$2782_storage","typeString":"struct BuyGENZ.StakeInformation storage ref"}},"id":3122,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6602:15:17","memberName":"minWithdrawTime","nodeType":"MemberAccess","referencedDeclaration":2781,"src":"6569:48:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":3123,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6620:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6626:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"6620:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6569:66:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3130,"nodeType":"IfStatement","src":"6565:138:17","trueBody":{"id":3129,"nodeType":"Block","src":"6638:65:17","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3126,"name":"BuyGENZ__TransactionFailedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3104,"src":"6659:31:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6659:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3128,"nodeType":"RevertStatement","src":"6652:40:17"}]}},{"assignments":[3132],"declarations":[{"constant":false,"id":3132,"mutability":"mutable","name":"amountStaked","nameLocation":"6720:12:17","nodeType":"VariableDeclaration","scope":3163,"src":"6712:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3131,"name":"uint256","nodeType":"ElementaryTypeName","src":"6712:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3138,"initialValue":{"expression":{"baseExpression":{"id":3133,"name":"stakingInformation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"6735:18:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StakeInformation_$2782_storage_$","typeString":"mapping(address => struct BuyGENZ.StakeInformation storage ref)"}},"id":3136,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3134,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"6754:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6754:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6735:32:17","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInformation_$2782_storage","typeString":"struct BuyGENZ.StakeInformation storage ref"}},"id":3137,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6768:6:17","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":2779,"src":"6735:39:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6712:62:17"},{"expression":{"id":3145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3139,"name":"stakingInformation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"6784:18:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StakeInformation_$2782_storage_$","typeString":"mapping(address => struct BuyGENZ.StakeInformation storage ref)"}},"id":3142,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3140,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"6803:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6803:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6784:32:17","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInformation_$2782_storage","typeString":"struct BuyGENZ.StakeInformation storage ref"}},"id":3143,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6817:9:17","memberName":"hasStaked","nodeType":"MemberAccess","referencedDeclaration":2777,"src":"6784:42:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":3144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6829:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"6784:50:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3146,"nodeType":"ExpressionStatement","src":"6784:50:17"},{"expression":{"id":3153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3147,"name":"stakingInformation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"6844:18:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StakeInformation_$2782_storage_$","typeString":"mapping(address => struct BuyGENZ.StakeInformation storage ref)"}},"id":3150,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3148,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"6863:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6863:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6844:32:17","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInformation_$2782_storage","typeString":"struct BuyGENZ.StakeInformation storage ref"}},"id":3151,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6877:6:17","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":2779,"src":"6844:39:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6886:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6844:43:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3154,"nodeType":"ExpressionStatement","src":"6844:43:17"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3158,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"6921:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6921:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3160,"name":"amountStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3132,"src":"6935:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3155,"name":"_tokenGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"6897:10:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":3157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6908:12:17","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":926,"src":"6897:23:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$858_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20Upgradeable_$858_$","typeString":"function (contract IERC20Upgradeable,address,uint256)"}},"id":3161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6897:51:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3162,"nodeType":"ExpressionStatement","src":"6897:51:17"}]},"functionSelector":"869eac93","id":3164,"implemented":true,"kind":"function","modifiers":[],"name":"withdrawStakedToken","nameLocation":"6401:19:17","nodeType":"FunctionDefinition","parameters":{"id":3105,"nodeType":"ParameterList","parameters":[],"src":"6420:2:17"},"returnParameters":{"id":3106,"nodeType":"ParameterList","parameters":[],"src":"6432:0:17"},"scope":3191,"src":"6392:563:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3180,"nodeType":"Block","src":"7022:171:17","statements":[{"assignments":[3170,null],"declarations":[{"constant":false,"id":3170,"mutability":"mutable","name":"amountPerToken","nameLocation":"7041:14:17","nodeType":"VariableDeclaration","scope":3180,"src":"7033:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3169,"name":"uint256","nodeType":"ElementaryTypeName","src":"7033:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},null],"id":3177,"initialValue":{"arguments":[{"id":3172,"name":"_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2751,"src":"7119:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3173,"name":"_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2751,"src":"7134:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31653138","id":3174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7150:4:17","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"7134:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3171,"name":"calculatePriceGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"7087:18:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256) view returns (uint256,uint256)"}},"id":3176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7087:68:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"7032:123:17"},{"expression":{"id":3178,"name":"amountPerToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3170,"src":"7172:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3168,"id":3179,"nodeType":"Return","src":"7165:21:17"}]},"functionSelector":"f751758b","id":3181,"implemented":true,"kind":"function","modifiers":[],"name":"getCurrentTokenPrice","nameLocation":"6970:20:17","nodeType":"FunctionDefinition","parameters":{"id":3165,"nodeType":"ParameterList","parameters":[],"src":"6990:2:17"},"returnParameters":{"id":3168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3167,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3181,"src":"7013:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3166,"name":"uint256","nodeType":"ElementaryTypeName","src":"7013:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7012:9:17"},"scope":3191,"src":"6961:232:17","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3189,"nodeType":"Block","src":"7303:37:17","statements":[{"expression":{"id":3187,"name":"_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2751,"src":"7320:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3186,"id":3188,"nodeType":"Return","src":"7313:20:17"}]},"documentation":{"id":3182,"nodeType":"StructuredDocumentation","src":"7199:41:17","text":"@dev returns the token in circulation"},"functionSelector":"74a7dce5","id":3190,"implemented":true,"kind":"function","modifiers":[],"name":"getGENZTokenCount","nameLocation":"7254:17:17","nodeType":"FunctionDefinition","parameters":{"id":3183,"nodeType":"ParameterList","parameters":[],"src":"7271:2:17"},"returnParameters":{"id":3186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3185,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3190,"src":"7294:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3184,"name":"uint256","nodeType":"ElementaryTypeName","src":"7294:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7293:9:17"},"scope":3191,"src":"7245:95:17","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":3192,"src":"2023:5319:17","usedErrors":[2606,3104,5525,5527,5529,5531,5533,5535,5537,5539,5541]}],"src":"37:7305:17"},"id":17},"contracts/core/payAsYouGo/ConstantFlowAgreement.sol":{"ast":{"absolutePath":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol","exportedSymbols":{"AccessControlUpgradeable":[335],"AddressUpgradeable":[1459],"BaseUpgradeablePausable":[2699],"BaseUpgradeablePausable__ZeroAddressError":[2606],"ConstantFlowAgreement":[4809],"Constants":[2728],"ContextUpgradeable":[1501],"ERC165Upgradeable":[1720],"IAccessControlUpgradeable":[408],"ICFA":[5688],"IERC165Upgradeable":[1732],"IERC20Extended":[5713],"IERC20PermitUpgradeable":[894],"IERC20Upgradeable":[858],"IInsuranceRegistry":[5916],"Initializable":[580],"MathUpgradeable":[2597],"PausableUpgradeable":[707],"ReentrancyGuardUpgradeable":[780],"SafeERC20Upgradeable":[1175],"StringsUpgradeable":[1676]},"id":4810,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":3193,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"37:23:18"},{"absolutePath":"contracts/interfaces/ICFA.sol","file":"./../../interfaces/ICFA.sol","id":3194,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4810,"sourceUnit":5689,"src":"192:37:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IERC20Extended.sol","file":"./../../interfaces/IERC20Extended.sol","id":3195,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4810,"sourceUnit":5714,"src":"230:47:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IInsuranceRegistry.sol","file":"./../../interfaces/IInsuranceRegistry.sol","id":3196,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4810,"sourceUnit":5917,"src":"278:51:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","id":3197,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4810,"sourceUnit":1176,"src":"364:88:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/BaseUpgradeablePausable.sol","file":"./../../BaseUpgradeablePausable.sol","id":3198,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4810,"sourceUnit":2700,"src":"487:45:18","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3200,"name":"ICFA","nameLocations":["654:4:18"],"nodeType":"IdentifierPath","referencedDeclaration":5688,"src":"654:4:18"},"id":3201,"nodeType":"InheritanceSpecifier","src":"654:4:18"},{"baseName":{"id":3202,"name":"BaseUpgradeablePausable","nameLocations":["660:23:18"],"nodeType":"IdentifierPath","referencedDeclaration":2699,"src":"660:23:18"},"id":3203,"nodeType":"InheritanceSpecifier","src":"660:23:18"}],"canonicalName":"ConstantFlowAgreement","contractDependencies":[],"contractKind":"contract","documentation":{"id":3199,"nodeType":"StructuredDocumentation","src":"534:85:18","text":"Report any bug or issues at:\n @custom:security-contact anshik@safezen.finance"},"fullyImplemented":true,"id":4809,"linearizedBaseContracts":[4809,2699,780,335,1720,1732,408,707,1501,580,5688],"name":"ConstantFlowAgreement","nameLocation":"629:21:18","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":3204,"nodeType":"StructuredDocumentation","src":"690:471:18","text":"_initVersion: counter to initialize the init one-time function, max value can be 1.\n _categoriesCount: counter to keep track of the available insurance categories.\n _maxInsuredDays: the maximum insurance period [in days], 90 days will be kept as default.\n _startWaitingTime: insurance activation waiting period, 4-8 hours will be kept as default.\n _minimumInsurancePeriod: the minimum insurance period, 120 minutes will be kept as default."},"id":3206,"mutability":"mutable","name":"_categoriesCount","nameLocation":"1182:16:18","nodeType":"VariableDeclaration","scope":4809,"src":"1166:32:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3205,"name":"uint256","nodeType":"ElementaryTypeName","src":"1166:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":3208,"mutability":"mutable","name":"_maxInsuredDays","nameLocation":"1220:15:18","nodeType":"VariableDeclaration","scope":4809,"src":"1204:31:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3207,"name":"uint256","nodeType":"ElementaryTypeName","src":"1204:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":3210,"mutability":"mutable","name":"_startWaitingTime","nameLocation":"1257:17:18","nodeType":"VariableDeclaration","scope":4809,"src":"1241:33:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3209,"name":"uint256","nodeType":"ElementaryTypeName","src":"1241:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":3212,"mutability":"mutable","name":"_minimumInsurancePeriod","nameLocation":"1296:23:18","nodeType":"VariableDeclaration","scope":4809,"src":"1280:39:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3211,"name":"uint256","nodeType":"ElementaryTypeName","src":"1280:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"global":false,"id":3216,"libraryName":{"id":3213,"name":"SafeERC20Upgradeable","nameLocations":["1332:20:18"],"nodeType":"IdentifierPath","referencedDeclaration":1175,"src":"1332:20:18"},"nodeType":"UsingForDirective","src":"1326:49:18","typeName":{"id":3215,"nodeType":"UserDefinedTypeName","pathNode":{"id":3214,"name":"IERC20Upgradeable","nameLocations":["1357:17:18"],"nodeType":"IdentifierPath","referencedDeclaration":858,"src":"1357:17:18"},"referencedDeclaration":858,"src":"1357:17:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}}},{"global":false,"id":3220,"libraryName":{"id":3217,"name":"SafeERC20Upgradeable","nameLocations":["1386:20:18"],"nodeType":"IdentifierPath","referencedDeclaration":1175,"src":"1386:20:18"},"nodeType":"UsingForDirective","src":"1380:55:18","typeName":{"id":3219,"nodeType":"UserDefinedTypeName","pathNode":{"id":3218,"name":"IERC20PermitUpgradeable","nameLocations":["1411:23:18"],"nodeType":"IdentifierPath","referencedDeclaration":894,"src":"1411:23:18"},"referencedDeclaration":894,"src":"1411:23:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}}},{"constant":false,"documentation":{"id":3221,"nodeType":"StructuredDocumentation","src":"1441:122:18","text":"_tokenDAI: DAI ERC20 token\n _sztDAI: sztDAI ERC20 token\n _insuranceRegistry: Insurance Registry Contract"},"id":3224,"mutability":"mutable","name":"_tokenDAI","nameLocation":"1594:9:18","nodeType":"VariableDeclaration","scope":4809,"src":"1568:35:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},"typeName":{"id":3223,"nodeType":"UserDefinedTypeName","pathNode":{"id":3222,"name":"IERC20Upgradeable","nameLocations":["1568:17:18"],"nodeType":"IdentifierPath","referencedDeclaration":858,"src":"1568:17:18"},"referencedDeclaration":858,"src":"1568:17:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"visibility":"private"},{"constant":false,"id":3227,"mutability":"mutable","name":"_tokenPermitDAI","nameLocation":"1641:15:18","nodeType":"VariableDeclaration","scope":4809,"src":"1609:47:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"},"typeName":{"id":3226,"nodeType":"UserDefinedTypeName","pathNode":{"id":3225,"name":"IERC20PermitUpgradeable","nameLocations":["1609:23:18"],"nodeType":"IdentifierPath","referencedDeclaration":894,"src":"1609:23:18"},"referencedDeclaration":894,"src":"1609:23:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}},"visibility":"private"},{"constant":false,"id":3230,"mutability":"mutable","name":"_sztDAI","nameLocation":"1685:7:18","nodeType":"VariableDeclaration","scope":4809,"src":"1662:30:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Extended_$5713","typeString":"contract IERC20Extended"},"typeName":{"id":3229,"nodeType":"UserDefinedTypeName","pathNode":{"id":3228,"name":"IERC20Extended","nameLocations":["1662:14:18"],"nodeType":"IdentifierPath","referencedDeclaration":5713,"src":"1662:14:18"},"referencedDeclaration":5713,"src":"1662:14:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Extended_$5713","typeString":"contract IERC20Extended"}},"visibility":"private"},{"constant":false,"id":3233,"mutability":"mutable","name":"_insuranceRegistry","nameLocation":"1725:18:18","nodeType":"VariableDeclaration","scope":4809,"src":"1698:45:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$5916","typeString":"contract IInsuranceRegistry"},"typeName":{"id":3232,"nodeType":"UserDefinedTypeName","pathNode":{"id":3231,"name":"IInsuranceRegistry","nameLocations":["1698:18:18"],"nodeType":"IdentifierPath","referencedDeclaration":5916,"src":"1698:18:18"},"referencedDeclaration":5916,"src":"1698:18:18","typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$5916","typeString":"contract IInsuranceRegistry"}},"visibility":"private"},{"canonicalName":"ConstantFlowAgreement.UserInsuranceInfo","id":3248,"members":[{"constant":false,"id":3235,"mutability":"mutable","name":"startTime","nameLocation":"2367:9:18","nodeType":"VariableDeclaration","scope":3248,"src":"2359:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3234,"name":"uint256","nodeType":"ElementaryTypeName","src":"2359:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3237,"mutability":"mutable","name":"validTill","nameLocation":"2394:9:18","nodeType":"VariableDeclaration","scope":3248,"src":"2386:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3236,"name":"uint256","nodeType":"ElementaryTypeName","src":"2386:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3239,"mutability":"mutable","name":"insuredAmount","nameLocation":"2421:13:18","nodeType":"VariableDeclaration","scope":3248,"src":"2413:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3238,"name":"uint256","nodeType":"ElementaryTypeName","src":"2413:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3241,"mutability":"mutable","name":"registrationTime","nameLocation":"2452:16:18","nodeType":"VariableDeclaration","scope":3248,"src":"2444:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3240,"name":"uint256","nodeType":"ElementaryTypeName","src":"2444:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3243,"mutability":"mutable","name":"insuranceFlowRate","nameLocation":"2486:17:18","nodeType":"VariableDeclaration","scope":3248,"src":"2478:25:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3242,"name":"uint256","nodeType":"ElementaryTypeName","src":"2478:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3245,"mutability":"mutable","name":"insuranceCost","nameLocation":"2521:13:18","nodeType":"VariableDeclaration","scope":3248,"src":"2513:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3244,"name":"uint256","nodeType":"ElementaryTypeName","src":"2513:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3247,"mutability":"mutable","name":"isValid","nameLocation":"2549:7:18","nodeType":"VariableDeclaration","scope":3248,"src":"2544:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3246,"name":"bool","nodeType":"ElementaryTypeName","src":"2544:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"UserInsuranceInfo","nameLocation":"2331:17:18","nodeType":"StructDefinition","scope":4809,"src":"2324:239:18","visibility":"public"},{"canonicalName":"ConstantFlowAgreement.UserGlobalInsuranceInfo","id":3255,"members":[{"constant":false,"id":3250,"mutability":"mutable","name":"validTill","nameLocation":"2909:9:18","nodeType":"VariableDeclaration","scope":3255,"src":"2901:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3249,"name":"uint256","nodeType":"ElementaryTypeName","src":"2901:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3252,"mutability":"mutable","name":"insuranceStreamRate","nameLocation":"2936:19:18","nodeType":"VariableDeclaration","scope":3255,"src":"2928:27:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3251,"name":"uint256","nodeType":"ElementaryTypeName","src":"2928:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3254,"mutability":"mutable","name":"globalInsuranceCost","nameLocation":"2973:19:18","nodeType":"VariableDeclaration","scope":3255,"src":"2965:27:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3253,"name":"uint256","nodeType":"ElementaryTypeName","src":"2965:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"UserGlobalInsuranceInfo","nameLocation":"2867:23:18","nodeType":"StructDefinition","scope":4809,"src":"2860:139:18","visibility":"public"},{"constant":false,"documentation":{"id":3256,"nodeType":"StructuredDocumentation","src":"3005:102:18","text":"@dev mapping to store UserGlobalInsuranceInfo\n maps: userAddress => UserGlobalInsuranceInfo"},"id":3261,"mutability":"mutable","name":"usersGlobalInsuranceInfo","nameLocation":"3164:24:18","nodeType":"VariableDeclaration","scope":4809,"src":"3112:76:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserGlobalInsuranceInfo_$3255_storage_$","typeString":"mapping(address => struct ConstantFlowAgreement.UserGlobalInsuranceInfo)"},"typeName":{"id":3260,"keyType":{"id":3257,"name":"address","nodeType":"ElementaryTypeName","src":"3120:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3112:43:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserGlobalInsuranceInfo_$3255_storage_$","typeString":"mapping(address => struct ConstantFlowAgreement.UserGlobalInsuranceInfo)"},"valueType":{"id":3259,"nodeType":"UserDefinedTypeName","pathNode":{"id":3258,"name":"UserGlobalInsuranceInfo","nameLocations":["3131:23:18"],"nodeType":"IdentifierPath","referencedDeclaration":3255,"src":"3131:23:18"},"referencedDeclaration":3255,"src":"3131:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$3255_storage_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo"}}},"visibility":"private"},{"constant":false,"documentation":{"id":3262,"nodeType":"StructuredDocumentation","src":"3195:122:18","text":"@dev mapping to store UserInsurance Info\n maps: userAddress => categoryID => subCategoryID => UserInsuranceInfo"},"id":3271,"mutability":"mutable","name":"usersInsuranceInfo","nameLocation":"3408:18:18","nodeType":"VariableDeclaration","scope":4809,"src":"3322:104:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo)))"},"typeName":{"id":3270,"keyType":{"id":3263,"name":"address","nodeType":"ElementaryTypeName","src":"3330:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3322:77:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo)))"},"valueType":{"id":3269,"keyType":{"id":3264,"name":"uint256","nodeType":"ElementaryTypeName","src":"3349:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"3341:57:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo))"},"valueType":{"id":3268,"keyType":{"id":3265,"name":"uint256","nodeType":"ElementaryTypeName","src":"3368:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"3360:37:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo)"},"valueType":{"id":3267,"nodeType":"UserDefinedTypeName","pathNode":{"id":3266,"name":"UserInsuranceInfo","nameLocations":["3379:17:18"],"nodeType":"IdentifierPath","referencedDeclaration":3248,"src":"3379:17:18"},"referencedDeclaration":3248,"src":"3379:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"}}}}},"visibility":"private"},{"body":{"id":3344,"nodeType":"Block","src":"4307:538:18","statements":[{"expression":{"id":3293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3291,"name":"_categoriesCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3206,"src":"4317:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4336:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4317:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3294,"nodeType":"ExpressionStatement","src":"4317:20:18"},{"expression":{"id":3299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3295,"name":"_maxInsuredDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"4347:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3296,"name":"maxInsuredDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"4365:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31","id":3297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4382:9:18","subdenomination":"minutes","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"1"},"src":"4365:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4347:44:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3300,"nodeType":"ExpressionStatement","src":"4347:44:18"},{"expression":{"id":3305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3301,"name":"_startWaitingTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3210,"src":"4401:17:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3302,"name":"startWaitingTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3282,"src":"4421:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31","id":3303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4440:9:18","subdenomination":"minutes","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"1"},"src":"4421:28:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4401:48:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3306,"nodeType":"ExpressionStatement","src":"4401:48:18"},{"expression":{"id":3311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3307,"name":"_minimumInsurancePeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3212,"src":"4460:23:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3308,"name":"minimumInsurancePeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"4486:22:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31","id":3309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4511:9:18","subdenomination":"minutes","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"1"},"src":"4486:34:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4460:60:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3312,"nodeType":"ExpressionStatement","src":"4460:60:18"},{"expression":{"id":3317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3313,"name":"_tokenDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3224,"src":"4530:9:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3315,"name":"tokenDAIaddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3274,"src":"4560:15:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3314,"name":"IERC20Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":858,"src":"4542:17:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Upgradeable_$858_$","typeString":"type(contract IERC20Upgradeable)"}},"id":3316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4542:34:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"src":"4530:46:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":3318,"nodeType":"ExpressionStatement","src":"4530:46:18"},{"expression":{"id":3323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3319,"name":"_tokenPermitDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3227,"src":"4586:15:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3321,"name":"tokenDAIaddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3274,"src":"4628:15:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3320,"name":"IERC20PermitUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"4604:23:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20PermitUpgradeable_$894_$","typeString":"type(contract IERC20PermitUpgradeable)"}},"id":3322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4604:40:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}},"src":"4586:58:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}},"id":3324,"nodeType":"ExpressionStatement","src":"4586:58:18"},{"expression":{"id":3329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3325,"name":"_sztDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3230,"src":"4654:7:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Extended_$5713","typeString":"contract IERC20Extended"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3327,"name":"sztDAIAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"4679:13:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3326,"name":"IERC20Extended","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5713,"src":"4664:14:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Extended_$5713_$","typeString":"type(contract IERC20Extended)"}},"id":3328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4664:29:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Extended_$5713","typeString":"contract IERC20Extended"}},"src":"4654:39:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Extended_$5713","typeString":"contract IERC20Extended"}},"id":3330,"nodeType":"ExpressionStatement","src":"4654:39:18"},{"expression":{"id":3335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3331,"name":"_insuranceRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3233,"src":"4703:18:18","typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$5916","typeString":"contract IInsuranceRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3333,"name":"insuranceRegistryCA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3278,"src":"4743:19:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3332,"name":"IInsuranceRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5916,"src":"4724:18:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IInsuranceRegistry_$5916_$","typeString":"type(contract IInsuranceRegistry)"}},"id":3334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4724:39:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$5916","typeString":"contract IInsuranceRegistry"}},"src":"4703:60:18","typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$5916","typeString":"contract IInsuranceRegistry"}},"id":3336,"nodeType":"ExpressionStatement","src":"4703:60:18"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3338,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"4804:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4804:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3337,"name":"__BaseUpgradeablePausable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2684,"src":"4773:30:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4773:44:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3341,"nodeType":"ExpressionStatement","src":"4773:44:18"},{"expression":{"hexValue":"74727565","id":3342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4834:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3290,"id":3343,"nodeType":"Return","src":"4827:11:18"}]},"documentation":{"id":3272,"nodeType":"StructuredDocumentation","src":"3433:601:18","text":"@dev one-time function aims to initialize the contract\n @dev MUST revert if called more than once.\n @param tokenDAIaddress: address of the DAI ERC20 token\n @param sztDAIAddress address of the sztDAI ERC20 token\n @param insuranceRegistryCA: address of the Protocol Registry contract\n @param minimumInsurancePeriod: minimum insurance period\n @return bool: true if the function executues successfully else false.\n [PRODUCTION TODO: _startWaitingTime =  startWaitingTime * 1 hours;]\n [PRODUCTION TODO: _maxInsuredDays = maxInsuredDays * 1 days;]"},"functionSelector":"728cdbca","id":3345,"implemented":true,"kind":"function","modifiers":[{"id":3287,"kind":"modifierInvocation","modifierName":{"id":3286,"name":"initializer","nameLocations":["4281:11:18"],"nodeType":"IdentifierPath","referencedDeclaration":482,"src":"4281:11:18"},"nodeType":"ModifierInvocation","src":"4281:11:18"}],"name":"initialize","nameLocation":"4048:10:18","nodeType":"FunctionDefinition","parameters":{"id":3285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3274,"mutability":"mutable","name":"tokenDAIaddress","nameLocation":"4076:15:18","nodeType":"VariableDeclaration","scope":3345,"src":"4068:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3273,"name":"address","nodeType":"ElementaryTypeName","src":"4068:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3276,"mutability":"mutable","name":"sztDAIAddress","nameLocation":"4109:13:18","nodeType":"VariableDeclaration","scope":3345,"src":"4101:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3275,"name":"address","nodeType":"ElementaryTypeName","src":"4101:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3278,"mutability":"mutable","name":"insuranceRegistryCA","nameLocation":"4140:19:18","nodeType":"VariableDeclaration","scope":3345,"src":"4132:27:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3277,"name":"address","nodeType":"ElementaryTypeName","src":"4132:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3280,"mutability":"mutable","name":"minimumInsurancePeriod","nameLocation":"4177:22:18","nodeType":"VariableDeclaration","scope":3345,"src":"4169:30:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3279,"name":"uint256","nodeType":"ElementaryTypeName","src":"4169:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3282,"mutability":"mutable","name":"startWaitingTime","nameLocation":"4217:16:18","nodeType":"VariableDeclaration","scope":3345,"src":"4209:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3281,"name":"uint256","nodeType":"ElementaryTypeName","src":"4209:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3284,"mutability":"mutable","name":"maxInsuredDays","nameLocation":"4251:14:18","nodeType":"VariableDeclaration","scope":3345,"src":"4243:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3283,"name":"uint256","nodeType":"ElementaryTypeName","src":"4243:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4058:213:18"},"returnParameters":{"id":3290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3289,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3345,"src":"4301:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3288,"name":"bool","nodeType":"ElementaryTypeName","src":"4301:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4300:6:18"},"scope":4809,"src":"4039:806:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3353,"nodeType":"Block","src":"4887:25:18","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3350,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"4897:6:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4897:8:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3352,"nodeType":"ExpressionStatement","src":"4897:8:18"}]},"functionSelector":"8456cb59","id":3354,"implemented":true,"kind":"function","modifiers":[{"id":3348,"kind":"modifierInvocation","modifierName":{"id":3347,"name":"onlyAdmin","nameLocations":["4877:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":2624,"src":"4877:9:18"},"nodeType":"ModifierInvocation","src":"4877:9:18"}],"name":"pause","nameLocation":"4860:5:18","nodeType":"FunctionDefinition","parameters":{"id":3346,"nodeType":"ParameterList","parameters":[],"src":"4865:2:18"},"returnParameters":{"id":3349,"nodeType":"ParameterList","parameters":[],"src":"4887:0:18"},"scope":4809,"src":"4851:61:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3362,"nodeType":"Block","src":"4956:27:18","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3359,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"4966:8:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4966:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3361,"nodeType":"ExpressionStatement","src":"4966:10:18"}]},"functionSelector":"3f4ba83a","id":3363,"implemented":true,"kind":"function","modifiers":[{"id":3357,"kind":"modifierInvocation","modifierName":{"id":3356,"name":"onlyAdmin","nameLocations":["4946:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":2624,"src":"4946:9:18"},"nodeType":"ModifierInvocation","src":"4946:9:18"}],"name":"unpause","nameLocation":"4927:7:18","nodeType":"FunctionDefinition","parameters":{"id":3355,"nodeType":"ParameterList","parameters":[],"src":"4934:2:18"},"returnParameters":{"id":3358,"nodeType":"ParameterList","parameters":[],"src":"4956:0:18"},"scope":4809,"src":"4918:65:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3380,"nodeType":"Block","src":"5204:114:18","statements":[{"expression":{"id":3375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3371,"name":"_minimumInsurancePeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3212,"src":"5214:23:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3372,"name":"timeInMinutes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"5240:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31","id":3373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5256:9:18","subdenomination":"minutes","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"1"},"src":"5240:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5214:51:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3376,"nodeType":"ExpressionStatement","src":"5214:51:18"},{"eventCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3377,"name":"UpdatedMinimumInsurancePeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5550,"src":"5280:29:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5280:31:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3379,"nodeType":"EmitStatement","src":"5275:36:18"}]},"documentation":{"id":3364,"nodeType":"StructuredDocumentation","src":"4989:130:18","text":"@dev this function aims to updates minimum insurance period\n @param timeInMinutes: 120 minutes will be kept as default."},"functionSelector":"56eb66bb","id":3381,"implemented":true,"kind":"function","modifiers":[{"id":3369,"kind":"modifierInvocation","modifierName":{"id":3368,"name":"onlyAdmin","nameLocations":["5194:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":2624,"src":"5194:9:18"},"nodeType":"ModifierInvocation","src":"5194:9:18"}],"name":"updateMinimumInsurancePeriod","nameLocation":"5133:28:18","nodeType":"FunctionDefinition","parameters":{"id":3367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3366,"mutability":"mutable","name":"timeInMinutes","nameLocation":"5170:13:18","nodeType":"VariableDeclaration","scope":3381,"src":"5162:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3365,"name":"uint256","nodeType":"ElementaryTypeName","src":"5162:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5161:23:18"},"returnParameters":{"id":3370,"nodeType":"ParameterList","parameters":[],"src":"5204:0:18"},"scope":4809,"src":"5124:194:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3398,"nodeType":"Block","src":"5542:98:18","statements":[{"expression":{"id":3393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3389,"name":"_startWaitingTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3210,"src":"5552:17:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3390,"name":"timeInHours","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3384,"src":"5572:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31","id":3391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5586:7:18","subdenomination":"hours","typeDescriptions":{"typeIdentifier":"t_rational_3600_by_1","typeString":"int_const 3600"},"value":"1"},"src":"5572:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5552:41:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3394,"nodeType":"ExpressionStatement","src":"5552:41:18"},{"eventCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3395,"name":"UpdatedStartWaitingTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5548,"src":"5608:23:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5608:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3397,"nodeType":"EmitStatement","src":"5603:30:18"}]},"documentation":{"id":3382,"nodeType":"StructuredDocumentation","src":"5324:141:18","text":"@dev this function aims to update the insurance activation waiting period\n @param timeInHours: 4-8 hours will be kept as default. "},"functionSelector":"24b7ab24","id":3399,"implemented":true,"kind":"function","modifiers":[{"id":3387,"kind":"modifierInvocation","modifierName":{"id":3386,"name":"onlyAdmin","nameLocations":["5532:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":2624,"src":"5532:9:18"},"nodeType":"ModifierInvocation","src":"5532:9:18"}],"name":"updateStartWaitingTime","nameLocation":"5479:22:18","nodeType":"FunctionDefinition","parameters":{"id":3385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3384,"mutability":"mutable","name":"timeInHours","nameLocation":"5510:11:18","nodeType":"VariableDeclaration","scope":3399,"src":"5502:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3383,"name":"uint256","nodeType":"ElementaryTypeName","src":"5502:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5501:21:18"},"returnParameters":{"id":3388,"nodeType":"ParameterList","parameters":[],"src":"5542:0:18"},"scope":4809,"src":"5470:170:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3416,"nodeType":"Block","src":"5846:92:18","statements":[{"expression":{"id":3411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3407,"name":"_maxInsuredDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"5856:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3408,"name":"timeInDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"5874:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31","id":3409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5887:6:18","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_86400_by_1","typeString":"int_const 86400"},"value":"1"},"src":"5874:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5856:37:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3412,"nodeType":"ExpressionStatement","src":"5856:37:18"},{"eventCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3413,"name":"UpdatedMaxInsuredDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5546,"src":"5908:21:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5908:23:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3415,"nodeType":"EmitStatement","src":"5903:28:18"}]},"documentation":{"id":3400,"nodeType":"StructuredDocumentation","src":"5646:126:18","text":"@dev this function aims to update the maximum insurance period\n @param timeInDays: 90 days will be kept as default."},"functionSelector":"b4706268","id":3417,"implemented":true,"kind":"function","modifiers":[{"id":3405,"kind":"modifierInvocation","modifierName":{"id":3404,"name":"onlyAdmin","nameLocations":["5836:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":2624,"src":"5836:9:18"},"nodeType":"ModifierInvocation","src":"5836:9:18"}],"name":"updateMaxInsuredDays","nameLocation":"5786:20:18","nodeType":"FunctionDefinition","parameters":{"id":3403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3402,"mutability":"mutable","name":"timeInDays","nameLocation":"5815:10:18","nodeType":"VariableDeclaration","scope":3417,"src":"5807:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3401,"name":"uint256","nodeType":"ElementaryTypeName","src":"5807:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5806:20:18"},"returnParameters":{"id":3406,"nodeType":"ParameterList","parameters":[],"src":"5846:0:18"},"scope":4809,"src":"5777:161:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[5581],"body":{"id":3451,"nodeType":"Block","src":"6576:126:18","statements":[{"assignments":[3439],"declarations":[{"constant":false,"id":3439,"mutability":"mutable","name":"success","nameLocation":"6591:7:18","nodeType":"VariableDeclaration","scope":3451,"src":"6586:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3438,"name":"bool","nodeType":"ElementaryTypeName","src":"6586:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3448,"initialValue":{"arguments":[{"id":3441,"name":"insuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3420,"src":"6621:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3442,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"6636:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3443,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"6648:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3444,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3426,"src":"6663:1:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3445,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3428,"src":"6666:1:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3446,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"6669:1:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3440,"name":"_addInsuranceAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3555,"src":"6601:19:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (uint256,uint256,uint256,uint8,bytes32,bytes32) returns (bool)"}},"id":3447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6601:70:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"6586:85:18"},{"expression":{"id":3449,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3439,"src":"6688:7:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3437,"id":3450,"nodeType":"Return","src":"6681:14:18"}]},"documentation":{"id":3418,"nodeType":"StructuredDocumentation","src":"5944:398:18","text":"@dev this function aims to create or top-up user insurance coverage amount.\n @param insuredAmount: maximum user coverage amount\n @param categoryID: insurance category, e.g., stablecoin depeg insurance.\n @param subCategoryID: insurance sub-category, e.g., USDC depeg coverage, DAI depeg coverage.\n @return bool: true if the function executues successfully else false."},"functionSelector":"6e8847bd","id":3452,"implemented":true,"kind":"function","modifiers":[{"id":3434,"kind":"modifierInvocation","modifierName":{"id":3433,"name":"nonReentrant","nameLocations":["6549:12:18"],"nodeType":"IdentifierPath","referencedDeclaration":751,"src":"6549:12:18"},"nodeType":"ModifierInvocation","src":"6549:12:18"}],"name":"addInsuranceAmount","nameLocation":"6356:18:18","nodeType":"FunctionDefinition","overrides":{"id":3432,"nodeType":"OverrideSpecifier","overrides":[],"src":"6540:8:18"},"parameters":{"id":3431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3420,"mutability":"mutable","name":"insuredAmount","nameLocation":"6392:13:18","nodeType":"VariableDeclaration","scope":3452,"src":"6384:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3419,"name":"uint256","nodeType":"ElementaryTypeName","src":"6384:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3422,"mutability":"mutable","name":"categoryID","nameLocation":"6424:10:18","nodeType":"VariableDeclaration","scope":3452,"src":"6416:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3421,"name":"uint256","nodeType":"ElementaryTypeName","src":"6416:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3424,"mutability":"mutable","name":"subCategoryID","nameLocation":"6453:13:18","nodeType":"VariableDeclaration","scope":3452,"src":"6445:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3423,"name":"uint256","nodeType":"ElementaryTypeName","src":"6445:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3426,"mutability":"mutable","name":"v","nameLocation":"6483:1:18","nodeType":"VariableDeclaration","scope":3452,"src":"6477:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3425,"name":"uint8","nodeType":"ElementaryTypeName","src":"6477:5:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3428,"mutability":"mutable","name":"r","nameLocation":"6503:1:18","nodeType":"VariableDeclaration","scope":3452,"src":"6495:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3427,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6495:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3430,"mutability":"mutable","name":"s","nameLocation":"6523:1:18","nodeType":"VariableDeclaration","scope":3452,"src":"6515:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3429,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6515:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6374:156:18"},"returnParameters":{"id":3437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3436,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3452,"src":"6570:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3435,"name":"bool","nodeType":"ElementaryTypeName","src":"6570:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6569:6:18"},"scope":4809,"src":"6347:355:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3554,"nodeType":"Block","src":"6923:844:18","statements":[{"assignments":[3470],"declarations":[{"constant":false,"id":3470,"mutability":"mutable","name":"newInsuredAmount","nameLocation":"6941:16:18","nodeType":"VariableDeclaration","scope":3554,"src":"6933:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3469,"name":"uint256","nodeType":"ElementaryTypeName","src":"6933:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3482,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":3471,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"6960:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":3474,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3472,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"6979:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6979:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6960:32:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":3476,"indexExpression":{"id":3475,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"6993:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6960:44:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":3478,"indexExpression":{"id":3477,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3458,"src":"7005:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6960:59:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"id":3479,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7020:13:18","memberName":"insuredAmount","nodeType":"MemberAccess","referencedDeclaration":3239,"src":"6960:73:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3480,"name":"insuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3454,"src":"7036:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6960:89:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6933:116:18"},{"condition":{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":3483,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"7063:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":3486,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3484,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"7082:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7082:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7063:32:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":3488,"indexExpression":{"id":3487,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"7096:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7063:44:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":3490,"indexExpression":{"id":3489,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3458,"src":"7108:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7063:59:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"id":3491,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7123:7:18","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":3247,"src":"7063:67:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3509,"nodeType":"IfStatement","src":"7059:291:18","trueBody":{"id":3508,"nodeType":"Block","src":"7132:218:18","statements":[{"assignments":[3493],"declarations":[{"constant":false,"id":3493,"mutability":"mutable","name":"closeStreamSuccess","nameLocation":"7151:18:18","nodeType":"VariableDeclaration","scope":3508,"src":"7146:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3492,"name":"bool","nodeType":"ElementaryTypeName","src":"7146:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3500,"initialValue":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3495,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"7192:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7192:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3497,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"7206:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3498,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3458,"src":"7218:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3494,"name":"deactivateInsurance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4120,"src":"7172:19:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256,uint256) returns (bool)"}},"id":3499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7172:60:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"7146:86:18"},{"condition":{"id":3502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7250:19:18","subExpression":{"id":3501,"name":"closeStreamSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3493,"src":"7251:18:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3507,"nodeType":"IfStatement","src":"7246:94:18","trueBody":{"id":3506,"nodeType":"Block","src":"7271:69:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3503,"name":"CFA__TransactionFailedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5554,"src":"7296:27:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7296:29:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3505,"nodeType":"RevertStatement","src":"7289:36:18"}]}}]}},{"assignments":[3511],"declarations":[{"constant":false,"id":3511,"mutability":"mutable","name":"deadline","nameLocation":"7370:8:18","nodeType":"VariableDeclaration","scope":3554,"src":"7362:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3510,"name":"uint256","nodeType":"ElementaryTypeName","src":"7362:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3518,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3512,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"7381:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7387:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"7381:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3514,"name":"_maxInsuredDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"7399:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7381:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3330","id":3516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7417:7:18","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_2592000_by_1","typeString":"int_const 2592000"},"value":"30"},"src":"7381:43:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7362:62:18"},{"assignments":[3520,3522],"declarations":[{"constant":false,"id":3520,"mutability":"mutable","name":"activateSuccess","nameLocation":"7442:15:18","nodeType":"VariableDeclaration","scope":3554,"src":"7437:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3519,"name":"bool","nodeType":"ElementaryTypeName","src":"7437:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3522,"mutability":"mutable","name":"insuranceCost","nameLocation":"7467:13:18","nodeType":"VariableDeclaration","scope":3554,"src":"7459:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3521,"name":"uint256","nodeType":"ElementaryTypeName","src":"7459:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3528,"initialValue":{"arguments":[{"id":3524,"name":"newInsuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"7502:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3525,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"7520:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3526,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3458,"src":"7532:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3523,"name":"activateInsurance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3981,"src":"7484:17:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (uint256,uint256,uint256) returns (bool,uint256)"}},"id":3527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7484:62:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"7436:110:18"},{"condition":{"id":3530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7560:16:18","subExpression":{"id":3529,"name":"activateSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3520,"src":"7561:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3535,"nodeType":"IfStatement","src":"7556:83:18","trueBody":{"id":3534,"nodeType":"Block","src":"7578:61:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3531,"name":"CFA__TransactionFailedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5554,"src":"7599:27:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7599:29:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3533,"nodeType":"RevertStatement","src":"7592:36:18"}]}},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3539,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"7675:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7675:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3543,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7697:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_ConstantFlowAgreement_$4809","typeString":"contract ConstantFlowAgreement"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ConstantFlowAgreement_$4809","typeString":"contract ConstantFlowAgreement"}],"id":3542,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7689:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3541,"name":"address","nodeType":"ElementaryTypeName","src":"7689:7:18","typeDescriptions":{}}},"id":3544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7689:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3545,"name":"insuranceCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3522,"src":"7704:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3546,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3511,"src":"7719:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3547,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3460,"src":"7729:1:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3548,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"7732:1:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3549,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3464,"src":"7735:1:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3536,"name":"_tokenPermitDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3227,"src":"7648:15:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}},"id":3538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7664:10:18","memberName":"safePermit","nodeType":"MemberAccess","referencedDeclaration":1136,"src":"7648:26:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20PermitUpgradeable_$894_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$bound_to$_t_contract$_IERC20PermitUpgradeable_$894_$","typeString":"function (contract IERC20PermitUpgradeable,address,address,uint256,uint256,uint8,bytes32,bytes32)"}},"id":3550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7648:89:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3551,"nodeType":"ExpressionStatement","src":"7648:89:18"},{"expression":{"hexValue":"74727565","id":3552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7756:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3468,"id":3553,"nodeType":"Return","src":"7749:11:18"}]},"id":3555,"implemented":true,"kind":"function","modifiers":[],"name":"_addInsuranceAmount","nameLocation":"6726:19:18","nodeType":"FunctionDefinition","parameters":{"id":3465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3454,"mutability":"mutable","name":"insuredAmount","nameLocation":"6763:13:18","nodeType":"VariableDeclaration","scope":3555,"src":"6755:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3453,"name":"uint256","nodeType":"ElementaryTypeName","src":"6755:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3456,"mutability":"mutable","name":"categoryID","nameLocation":"6795:10:18","nodeType":"VariableDeclaration","scope":3555,"src":"6787:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3455,"name":"uint256","nodeType":"ElementaryTypeName","src":"6787:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3458,"mutability":"mutable","name":"subCategoryID","nameLocation":"6824:13:18","nodeType":"VariableDeclaration","scope":3555,"src":"6816:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3457,"name":"uint256","nodeType":"ElementaryTypeName","src":"6816:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3460,"mutability":"mutable","name":"v","nameLocation":"6853:1:18","nodeType":"VariableDeclaration","scope":3555,"src":"6847:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3459,"name":"uint8","nodeType":"ElementaryTypeName","src":"6847:5:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3462,"mutability":"mutable","name":"r","nameLocation":"6873:1:18","nodeType":"VariableDeclaration","scope":3555,"src":"6865:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3461,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6865:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3464,"mutability":"mutable","name":"s","nameLocation":"6893:1:18","nodeType":"VariableDeclaration","scope":3555,"src":"6885:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3463,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6885:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6745:155:18"},"returnParameters":{"id":3468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3467,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3555,"src":"6917:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3466,"name":"bool","nodeType":"ElementaryTypeName","src":"6917:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6916:6:18"},"scope":4809,"src":"6717:1050:18","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"baseFunctions":[5600],"body":{"id":3592,"nodeType":"Block","src":"8524:141:18","statements":[{"assignments":[3579],"declarations":[{"constant":false,"id":3579,"mutability":"mutable","name":"success","nameLocation":"8539:7:18","nodeType":"VariableDeclaration","scope":3592,"src":"8534:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3578,"name":"bool","nodeType":"ElementaryTypeName","src":"8534:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3589,"initialValue":{"arguments":[{"id":3581,"name":"insuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3558,"src":"8571:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3582,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"8586:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3583,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"8598:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3584,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3564,"src":"8613:1:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3585,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3566,"src":"8616:1:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3586,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"8619:1:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3587,"name":"closeStream","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3570,"src":"8622:11:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3580,"name":"_minusInsuranceAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"8549:21:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$_t_bool_$returns$_t_bool_$","typeString":"function (uint256,uint256,uint256,uint8,bytes32,bytes32,bool) returns (bool)"}},"id":3588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8549:85:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"8534:100:18"},{"expression":{"id":3590,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3579,"src":"8651:7:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3577,"id":3591,"nodeType":"Return","src":"8644:14:18"}]},"documentation":{"id":3556,"nodeType":"StructuredDocumentation","src":"7773:490:18","text":"@dev this function aims to close or reduce user insurance coverage amount.\n @param insuredAmount: maximum user coverage amount\n @param categoryID: insurance category, e.g., stablecoin depeg insurance.\n @param subCategoryID: insurance sub-category, e.g., USDC depeg coverage, DAI depeg coverage.\n @param closeStream: checks whether user initiate to deactivate its insurance or not.\n @return bool: true if the function executues successfully else false."},"functionSelector":"642adc28","id":3593,"implemented":true,"kind":"function","modifiers":[{"id":3574,"kind":"modifierInvocation","modifierName":{"id":3573,"name":"nonReentrant","nameLocations":["8497:12:18"],"nodeType":"IdentifierPath","referencedDeclaration":751,"src":"8497:12:18"},"nodeType":"ModifierInvocation","src":"8497:12:18"}],"name":"minusInsuranceAmount","nameLocation":"8277:20:18","nodeType":"FunctionDefinition","overrides":{"id":3572,"nodeType":"OverrideSpecifier","overrides":[],"src":"8488:8:18"},"parameters":{"id":3571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3558,"mutability":"mutable","name":"insuredAmount","nameLocation":"8315:13:18","nodeType":"VariableDeclaration","scope":3593,"src":"8307:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3557,"name":"uint256","nodeType":"ElementaryTypeName","src":"8307:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3560,"mutability":"mutable","name":"categoryID","nameLocation":"8347:10:18","nodeType":"VariableDeclaration","scope":3593,"src":"8339:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3559,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3562,"mutability":"mutable","name":"subCategoryID","nameLocation":"8376:13:18","nodeType":"VariableDeclaration","scope":3593,"src":"8368:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3561,"name":"uint256","nodeType":"ElementaryTypeName","src":"8368:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3564,"mutability":"mutable","name":"v","nameLocation":"8405:1:18","nodeType":"VariableDeclaration","scope":3593,"src":"8399:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3563,"name":"uint8","nodeType":"ElementaryTypeName","src":"8399:5:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3566,"mutability":"mutable","name":"r","nameLocation":"8425:1:18","nodeType":"VariableDeclaration","scope":3593,"src":"8417:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3565,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8417:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3568,"mutability":"mutable","name":"s","nameLocation":"8445:1:18","nodeType":"VariableDeclaration","scope":3593,"src":"8437:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3567,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8437:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3570,"mutability":"mutable","name":"closeStream","nameLocation":"8461:11:18","nodeType":"VariableDeclaration","scope":3593,"src":"8456:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3569,"name":"bool","nodeType":"ElementaryTypeName","src":"8456:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8297:181:18"},"returnParameters":{"id":3577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3576,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3593,"src":"8518:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3575,"name":"bool","nodeType":"ElementaryTypeName","src":"8518:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8517:6:18"},"scope":4809,"src":"8268:397:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3705,"nodeType":"Block","src":"8914:941:18","statements":[{"condition":{"id":3621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"8928:68:18","subExpression":{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":3612,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"8929:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":3615,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3613,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"8948:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8948:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8929:32:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":3617,"indexExpression":{"id":3616,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3597,"src":"8962:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8929:44:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":3619,"indexExpression":{"id":3618,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3599,"src":"8974:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8929:59:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"id":3620,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8989:7:18","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":3247,"src":"8929:67:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3626,"nodeType":"IfStatement","src":"8924:135:18","trueBody":{"id":3625,"nodeType":"Block","src":"8998:61:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3622,"name":"CFA__InactiveInsuranceError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5556,"src":"9019:27:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9019:29:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3624,"nodeType":"RevertStatement","src":"9012:36:18"}]}},{"assignments":[3628],"declarations":[{"constant":false,"id":3628,"mutability":"mutable","name":"closeStreamSuccess","nameLocation":"9073:18:18","nodeType":"VariableDeclaration","scope":3705,"src":"9068:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3627,"name":"bool","nodeType":"ElementaryTypeName","src":"9068:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3635,"initialValue":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3630,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"9114:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9114:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3632,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3597,"src":"9128:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3633,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3599,"src":"9140:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3629,"name":"deactivateInsurance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4120,"src":"9094:19:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256,uint256) returns (bool)"}},"id":3634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9094:60:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"9068:86:18"},{"condition":{"id":3637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9168:19:18","subExpression":{"id":3636,"name":"closeStreamSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3628,"src":"9169:18:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3642,"nodeType":"IfStatement","src":"9164:86:18","trueBody":{"id":3641,"nodeType":"Block","src":"9189:61:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3638,"name":"CFA__TransactionFailedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5554,"src":"9210:27:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9210:29:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3640,"nodeType":"RevertStatement","src":"9203:36:18"}]}},{"condition":{"id":3644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9263:12:18","subExpression":{"id":3643,"name":"closeStream","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3607,"src":"9264:11:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3702,"nodeType":"IfStatement","src":"9259:569:18","trueBody":{"id":3701,"nodeType":"Block","src":"9277:551:18","statements":[{"assignments":[3646],"declarations":[{"constant":false,"id":3646,"mutability":"mutable","name":"newInsuredAmount","nameLocation":"9299:16:18","nodeType":"VariableDeclaration","scope":3701,"src":"9291:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3645,"name":"uint256","nodeType":"ElementaryTypeName","src":"9291:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3658,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":3647,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"9318:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":3650,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3648,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"9337:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9337:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9318:32:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":3652,"indexExpression":{"id":3651,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3597,"src":"9351:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9318:44:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":3654,"indexExpression":{"id":3653,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3599,"src":"9363:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9318:59:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"id":3655,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9378:13:18","memberName":"insuredAmount","nodeType":"MemberAccess","referencedDeclaration":3239,"src":"9318:73:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3656,"name":"insuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3595,"src":"9394:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9318:89:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9291:116:18"},{"assignments":[3660],"declarations":[{"constant":false,"id":3660,"mutability":"mutable","name":"deadline","nameLocation":"9429:8:18","nodeType":"VariableDeclaration","scope":3701,"src":"9421:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3659,"name":"uint256","nodeType":"ElementaryTypeName","src":"9421:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3667,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3661,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"9440:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9446:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"9440:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3663,"name":"_maxInsuredDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"9458:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9440:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3330","id":3665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9476:7:18","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_2592000_by_1","typeString":"int_const 2592000"},"value":"30"},"src":"9440:43:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9421:62:18"},{"assignments":[3669,3671],"declarations":[{"constant":false,"id":3669,"mutability":"mutable","name":"activateSuccess","nameLocation":"9503:15:18","nodeType":"VariableDeclaration","scope":3701,"src":"9498:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3668,"name":"bool","nodeType":"ElementaryTypeName","src":"9498:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3671,"mutability":"mutable","name":"insuranceCost","nameLocation":"9528:13:18","nodeType":"VariableDeclaration","scope":3701,"src":"9520:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3670,"name":"uint256","nodeType":"ElementaryTypeName","src":"9520:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3677,"initialValue":{"arguments":[{"id":3673,"name":"newInsuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3646,"src":"9563:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3674,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3597,"src":"9581:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3675,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3599,"src":"9593:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3672,"name":"activateInsurance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3981,"src":"9545:17:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (uint256,uint256,uint256) returns (bool,uint256)"}},"id":3676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9545:62:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"9497:110:18"},{"condition":{"id":3679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9625:16:18","subExpression":{"id":3678,"name":"activateSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3669,"src":"9626:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3684,"nodeType":"IfStatement","src":"9621:91:18","trueBody":{"id":3683,"nodeType":"Block","src":"9643:69:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3680,"name":"CFA__TransactionFailedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5554,"src":"9668:27:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9668:29:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3682,"nodeType":"RevertStatement","src":"9661:36:18"}]}},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3688,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"9752:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9752:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3692,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"9774:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_ConstantFlowAgreement_$4809","typeString":"contract ConstantFlowAgreement"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ConstantFlowAgreement_$4809","typeString":"contract ConstantFlowAgreement"}],"id":3691,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9766:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3690,"name":"address","nodeType":"ElementaryTypeName","src":"9766:7:18","typeDescriptions":{}}},"id":3693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9766:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3694,"name":"insuranceCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3671,"src":"9781:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3695,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3660,"src":"9796:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3696,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"9806:1:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3697,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"9809:1:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3698,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"9812:1:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3685,"name":"_tokenPermitDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3227,"src":"9725:15:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}},"id":3687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9741:10:18","memberName":"safePermit","nodeType":"MemberAccess","referencedDeclaration":1136,"src":"9725:26:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20PermitUpgradeable_$894_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$bound_to$_t_contract$_IERC20PermitUpgradeable_$894_$","typeString":"function (contract IERC20PermitUpgradeable,address,address,uint256,uint256,uint8,bytes32,bytes32)"}},"id":3699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9725:89:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3700,"nodeType":"ExpressionStatement","src":"9725:89:18"}]}},{"expression":{"hexValue":"74727565","id":3703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9844:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3611,"id":3704,"nodeType":"Return","src":"9837:11:18"}]},"id":3706,"implemented":true,"kind":"function","modifiers":[],"name":"_minusInsuranceAmount","nameLocation":"8689:21:18","nodeType":"FunctionDefinition","parameters":{"id":3608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3595,"mutability":"mutable","name":"insuredAmount","nameLocation":"8728:13:18","nodeType":"VariableDeclaration","scope":3706,"src":"8720:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3594,"name":"uint256","nodeType":"ElementaryTypeName","src":"8720:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3597,"mutability":"mutable","name":"categoryID","nameLocation":"8760:10:18","nodeType":"VariableDeclaration","scope":3706,"src":"8752:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3596,"name":"uint256","nodeType":"ElementaryTypeName","src":"8752:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3599,"mutability":"mutable","name":"subCategoryID","nameLocation":"8789:13:18","nodeType":"VariableDeclaration","scope":3706,"src":"8781:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3598,"name":"uint256","nodeType":"ElementaryTypeName","src":"8781:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3601,"mutability":"mutable","name":"v","nameLocation":"8818:1:18","nodeType":"VariableDeclaration","scope":3706,"src":"8812:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3600,"name":"uint8","nodeType":"ElementaryTypeName","src":"8812:5:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3603,"mutability":"mutable","name":"r","nameLocation":"8838:1:18","nodeType":"VariableDeclaration","scope":3706,"src":"8830:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3602,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8830:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3605,"mutability":"mutable","name":"s","nameLocation":"8858:1:18","nodeType":"VariableDeclaration","scope":3706,"src":"8850:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3604,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8850:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3607,"mutability":"mutable","name":"closeStream","nameLocation":"8874:11:18","nodeType":"VariableDeclaration","scope":3706,"src":"8869:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3606,"name":"bool","nodeType":"ElementaryTypeName","src":"8869:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8710:181:18"},"returnParameters":{"id":3611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3610,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3706,"src":"8908:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3609,"name":"bool","nodeType":"ElementaryTypeName","src":"8908:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8907:6:18"},"scope":4809,"src":"8680:1175:18","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3747,"nodeType":"Block","src":"10000:397:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3718,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"10057:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3719,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3710,"src":"10070:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3720,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3712,"src":"10082:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3717,"name":"getUserInsuranceValidTillInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4674,"src":"10027:29:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256,uint256) view returns (uint256)"}},"id":3721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10027:69:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":3722,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"10112:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10118:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"10112:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10027:100:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3729,"nodeType":"IfStatement","src":"10010:192:18","trueBody":{"id":3728,"nodeType":"Block","src":"10138:64:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3725,"name":"CFA__ActiveInsuranceExistError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5560,"src":"10159:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10159:32:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3727,"nodeType":"RevertStatement","src":"10152:39:18"}]}},{"assignments":[3731],"declarations":[{"constant":false,"id":3731,"mutability":"mutable","name":"success","nameLocation":"10216:7:18","nodeType":"VariableDeclaration","scope":3747,"src":"10211:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3730,"name":"bool","nodeType":"ElementaryTypeName","src":"10211:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3737,"initialValue":{"arguments":[{"id":3733,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"10246:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3734,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3710,"src":"10259:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3735,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3712,"src":"10271:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3732,"name":"deactivateInsurance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4120,"src":"10226:19:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256,uint256) returns (bool)"}},"id":3736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10226:59:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"10211:74:18"},{"condition":{"id":3739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"10299:8:18","subExpression":{"id":3738,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3731,"src":"10300:7:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3744,"nodeType":"IfStatement","src":"10295:75:18","trueBody":{"id":3743,"nodeType":"Block","src":"10309:61:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3740,"name":"CFA__TransactionFailedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5554,"src":"10330:27:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10330:29:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3742,"nodeType":"RevertStatement","src":"10323:36:18"}]}},{"expression":{"hexValue":"74727565","id":3745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10386:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3716,"id":3746,"nodeType":"Return","src":"10379:11:18"}]},"functionSelector":"f099dd50","id":3748,"implemented":true,"kind":"function","modifiers":[],"name":"claimPremium","nameLocation":"9870:12:18","nodeType":"FunctionDefinition","parameters":{"id":3713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3708,"mutability":"mutable","name":"userAddress","nameLocation":"9900:11:18","nodeType":"VariableDeclaration","scope":3748,"src":"9892:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3707,"name":"address","nodeType":"ElementaryTypeName","src":"9892:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3710,"mutability":"mutable","name":"categoryID","nameLocation":"9929:10:18","nodeType":"VariableDeclaration","scope":3748,"src":"9921:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3709,"name":"uint256","nodeType":"ElementaryTypeName","src":"9921:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3712,"mutability":"mutable","name":"subCategoryID","nameLocation":"9957:13:18","nodeType":"VariableDeclaration","scope":3748,"src":"9949:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3711,"name":"uint256","nodeType":"ElementaryTypeName","src":"9949:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9882:94:18"},"returnParameters":{"id":3716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3715,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3748,"src":"9994:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3714,"name":"bool","nodeType":"ElementaryTypeName","src":"9994:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9993:6:18"},"scope":4809,"src":"9861:536:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3757,"nodeType":"Block","src":"10511:8:18","statements":[]},"functionSelector":"77bd35fc","id":3758,"implemented":true,"kind":"function","modifiers":[],"name":"claimPremium","nameLocation":"10412:12:18","nodeType":"FunctionDefinition","parameters":{"id":3753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3750,"mutability":"mutable","name":"userAddress","nameLocation":"10442:11:18","nodeType":"VariableDeclaration","scope":3758,"src":"10434:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3749,"name":"address","nodeType":"ElementaryTypeName","src":"10434:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3752,"mutability":"mutable","name":"categoryID","nameLocation":"10471:10:18","nodeType":"VariableDeclaration","scope":3758,"src":"10463:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3751,"name":"uint256","nodeType":"ElementaryTypeName","src":"10463:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10424:63:18"},"returnParameters":{"id":3756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3755,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3758,"src":"10505:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3754,"name":"bool","nodeType":"ElementaryTypeName","src":"10505:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10504:6:18"},"scope":4809,"src":"10403:116:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3980,"nodeType":"Block","src":"10781:2549:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3772,"name":"insuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3761,"src":"10795:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31653138","id":3773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10811:4:18","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"10795:20:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3779,"nodeType":"IfStatement","src":"10791:96:18","trueBody":{"id":3778,"nodeType":"Block","src":"10817:70:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3775,"name":"CFA__InsuranceCoverNotAvailableError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5562,"src":"10838:36:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10838:38:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3777,"nodeType":"RevertStatement","src":"10831:45:18"}]}},{"condition":{"components":[{"id":3786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"10914:79:18","subExpression":{"arguments":[{"id":3782,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3763,"src":"10952:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3783,"name":"insuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3761,"src":"10964:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3784,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"10979:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3780,"name":"_insuranceRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3233,"src":"10915:18:18","typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$5916","typeString":"contract IInsuranceRegistry"}},"id":3781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10934:17:18","memberName":"ifEnoughLiquidity","nodeType":"MemberAccess","referencedDeclaration":5906,"src":"10915:36:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256,uint256,uint256) view external returns (bool)"}},"id":3785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10915:78:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3787,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10913:81:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3792,"nodeType":"IfStatement","src":"10896:177:18","trueBody":{"id":3791,"nodeType":"Block","src":"11009:64:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3788,"name":"CFA__SubCategoryNotActiveError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5558,"src":"11030:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11030:32:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3790,"nodeType":"RevertStatement","src":"11023:39:18"}]}},{"condition":{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":3793,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"11086:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":3796,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3794,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"11105:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11105:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11086:32:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":3798,"indexExpression":{"id":3797,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3763,"src":"11119:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11086:44:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":3800,"indexExpression":{"id":3799,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"11131:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11086:59:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"id":3801,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11146:7:18","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":3247,"src":"11086:67:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3806,"nodeType":"IfStatement","src":"11082:137:18","trueBody":{"id":3805,"nodeType":"Block","src":"11155:64:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3802,"name":"CFA__ActiveInsuranceExistError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5560,"src":"11176:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11176:32:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3804,"nodeType":"RevertStatement","src":"11169:39:18"}]}},{"assignments":[3809],"declarations":[{"constant":false,"id":3809,"mutability":"mutable","name":"userInsuranceInfo","nameLocation":"11263:17:18","nodeType":"VariableDeclaration","scope":3980,"src":"11237:43:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"},"typeName":{"id":3808,"nodeType":"UserDefinedTypeName","pathNode":{"id":3807,"name":"UserInsuranceInfo","nameLocations":["11237:17:18"],"nodeType":"IdentifierPath","referencedDeclaration":3248,"src":"11237:17:18"},"referencedDeclaration":3248,"src":"11237:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"}},"visibility":"internal"}],"id":3818,"initialValue":{"baseExpression":{"baseExpression":{"baseExpression":{"id":3810,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"11283:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":3813,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3811,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"11302:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11302:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11283:32:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":3815,"indexExpression":{"id":3814,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3763,"src":"11316:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11283:44:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":3817,"indexExpression":{"id":3816,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"11328:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11283:59:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"11237:105:18"},{"assignments":[3821],"declarations":[{"constant":false,"id":3821,"mutability":"mutable","name":"userGlobalInsuranceInfo","nameLocation":"11384:23:18","nodeType":"VariableDeclaration","scope":3980,"src":"11352:55:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$3255_storage_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo"},"typeName":{"id":3820,"nodeType":"UserDefinedTypeName","pathNode":{"id":3819,"name":"UserGlobalInsuranceInfo","nameLocations":["11352:23:18"],"nodeType":"IdentifierPath","referencedDeclaration":3255,"src":"11352:23:18"},"referencedDeclaration":3255,"src":"11352:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$3255_storage_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo"}},"visibility":"internal"}],"id":3826,"initialValue":{"baseExpression":{"id":3822,"name":"usersGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3261,"src":"11410:24:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserGlobalInsuranceInfo_$3255_storage_$","typeString":"mapping(address => struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage ref)"}},"id":3825,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3823,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"11435:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11435:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11410:38:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$3255_storage","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"11352:96:18"},{"assignments":[3828],"declarations":[{"constant":false,"id":3828,"mutability":"mutable","name":"userEstimatedBalance","nameLocation":"11475:20:18","nodeType":"VariableDeclaration","scope":3980,"src":"11467:28:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3827,"name":"uint256","nodeType":"ElementaryTypeName","src":"11467:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3837,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3831,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"11516:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11516:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3829,"name":"_sztDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3230,"src":"11498:7:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Extended_$5713","typeString":"contract IERC20Extended"}},"id":3830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11506:9:18","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":815,"src":"11498:17:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11498:31:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":3834,"name":"userGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3821,"src":"11532:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$3255_storage_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage pointer"}},"id":3835,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11556:19:18","memberName":"globalInsuranceCost","nodeType":"MemberAccess","referencedDeclaration":3254,"src":"11532:43:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11498:77:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11467:108:18"},{"assignments":[3839],"declarations":[{"constant":false,"id":3839,"mutability":"mutable","name":"incomingAmountPerSec","nameLocation":"11593:20:18","nodeType":"VariableDeclaration","scope":3980,"src":"11585:28:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3838,"name":"uint256","nodeType":"ElementaryTypeName","src":"11585:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3850,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3842,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3763,"src":"11667:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3843,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"11679:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3840,"name":"_insuranceRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3233,"src":"11630:18:18","typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$5916","typeString":"contract IInsuranceRegistry"}},"id":3841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11649:17:18","memberName":"getStreamFlowRate","nodeType":"MemberAccess","referencedDeclaration":5915,"src":"11630:36:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) view external returns (uint256)"}},"id":3844,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11630:63:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3845,"name":"insuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3761,"src":"11696:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11630:79:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3847,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11616:94:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"31653138","id":3848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11713:4:18","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"11616:101:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11585:132:18"},{"assignments":[3852],"declarations":[{"constant":false,"id":3852,"mutability":"mutable","name":"globalIncomingAmountPerSec","nameLocation":"11735:26:18","nodeType":"VariableDeclaration","scope":3980,"src":"11727:34:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3851,"name":"uint256","nodeType":"ElementaryTypeName","src":"11727:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3857,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3853,"name":"userGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3821,"src":"11764:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$3255_storage_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage pointer"}},"id":3854,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11788:19:18","memberName":"insuranceStreamRate","nodeType":"MemberAccess","referencedDeclaration":3252,"src":"11764:43:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3855,"name":"incomingAmountPerSec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3839,"src":"11810:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11764:66:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11727:103:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3858,"name":"globalIncomingAmountPerSec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3852,"src":"11951:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3859,"name":"_minimumInsurancePeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3212,"src":"11980:23:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11951:52:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3861,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11950:54:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3862,"name":"userEstimatedBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"12007:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11950:77:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3868,"nodeType":"IfStatement","src":"11946:157:18","trueBody":{"id":3867,"nodeType":"Block","src":"12029:74:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3864,"name":"CFA__NotEvenMinimumInsurancePeriodAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5564,"src":"12050:40:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12050:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3866,"nodeType":"RevertStatement","src":"12043:49:18"}]}},{"assignments":[3870],"declarations":[{"constant":false,"id":3870,"mutability":"mutable","name":"validTill","nameLocation":"12121:9:18","nodeType":"VariableDeclaration","scope":3980,"src":"12113:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3869,"name":"uint256","nodeType":"ElementaryTypeName","src":"12113:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3875,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3871,"name":"userEstimatedBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"12134:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3872,"name":"incomingAmountPerSec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3839,"src":"12157:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12134:43:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3874,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12133:45:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12113:65:18"},{"expression":{"id":3880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3876,"name":"userGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3821,"src":"12188:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$3255_storage_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage pointer"}},"id":3878,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12212:19:18","memberName":"insuranceStreamRate","nodeType":"MemberAccess","referencedDeclaration":3252,"src":"12188:43:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3879,"name":"incomingAmountPerSec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3839,"src":"12235:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12188:67:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3881,"nodeType":"ExpressionStatement","src":"12188:67:18"},{"expression":{"id":3886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3882,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3809,"src":"12265:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":3884,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12283:13:18","memberName":"insuredAmount","nodeType":"MemberAccess","referencedDeclaration":3239,"src":"12265:31:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3885,"name":"insuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3761,"src":"12299:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12265:47:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3887,"nodeType":"ExpressionStatement","src":"12265:47:18"},{"expression":{"id":3892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3888,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3809,"src":"12322:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":3890,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12340:17:18","memberName":"insuranceFlowRate","nodeType":"MemberAccess","referencedDeclaration":3243,"src":"12322:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3891,"name":"incomingAmountPerSec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3839,"src":"12360:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12322:58:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3893,"nodeType":"ExpressionStatement","src":"12322:58:18"},{"expression":{"id":3899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3894,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3809,"src":"12390:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":3896,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12408:16:18","memberName":"registrationTime","nodeType":"MemberAccess","referencedDeclaration":3241,"src":"12390:34:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":3897,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"12427:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12433:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"12427:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12390:52:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3900,"nodeType":"ExpressionStatement","src":"12390:52:18"},{"expression":{"id":3908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3901,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3809,"src":"12452:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":3903,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12470:9:18","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":3235,"src":"12452:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3904,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"12482:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12488:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"12482:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3906,"name":"_startWaitingTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3210,"src":"12500:17:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12482:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12452:65:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3909,"nodeType":"ExpressionStatement","src":"12452:65:18"},{"expression":{"id":3926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3910,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3809,"src":"12527:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":3912,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12545:9:18","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":3237,"src":"12527:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3913,"name":"validTill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3870,"src":"12571:9:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3914,"name":"_maxInsuredDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"12583:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12571:27:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3920,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3809,"src":"12656:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":3921,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12674:9:18","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":3235,"src":"12656:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3922,"name":"_maxInsuredDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"12686:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12656:45:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12571:130:18","trueExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3916,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3809,"src":"12614:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":3917,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12632:9:18","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":3235,"src":"12614:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3918,"name":"validTill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3870,"src":"12644:9:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12614:39:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3925,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12557:154:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12527:184:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3927,"nodeType":"ExpressionStatement","src":"12527:184:18"},{"expression":{"id":3934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3928,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3809,"src":"12721:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":3930,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12739:13:18","memberName":"insuranceCost","nodeType":"MemberAccess","referencedDeclaration":3245,"src":"12721:31:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3931,"name":"validTill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3870,"src":"12755:9:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3932,"name":"incomingAmountPerSec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3839,"src":"12767:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12755:32:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12721:66:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3935,"nodeType":"ExpressionStatement","src":"12721:66:18"},{"expression":{"id":3940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3936,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3809,"src":"12797:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":3938,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12815:7:18","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":3247,"src":"12797:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12825:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"12797:32:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3941,"nodeType":"ExpressionStatement","src":"12797:32:18"},{"expression":{"id":3947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3942,"name":"userGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3821,"src":"12848:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$3255_storage_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage pointer"}},"id":3944,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12872:19:18","memberName":"globalInsuranceCost","nodeType":"MemberAccess","referencedDeclaration":3254,"src":"12848:43:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":3945,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3809,"src":"12895:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":3946,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12913:13:18","memberName":"insuranceCost","nodeType":"MemberAccess","referencedDeclaration":3245,"src":"12895:31:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12848:78:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3948,"nodeType":"ExpressionStatement","src":"12848:78:18"},{"expression":{"id":3963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3949,"name":"userGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3821,"src":"12936:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$3255_storage_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage pointer"}},"id":3951,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12960:9:18","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":3250,"src":"12936:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3952,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3809,"src":"12986:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":3953,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13004:9:18","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":3237,"src":"12986:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3954,"name":"userGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3821,"src":"13016:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$3255_storage_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage pointer"}},"id":3955,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13040:9:18","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":3250,"src":"13016:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12986:63:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"id":3959,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3809,"src":"13101:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":3960,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13119:9:18","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":3237,"src":"13101:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12986:142:18","trueExpression":{"expression":{"id":3957,"name":"userGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3821,"src":"13065:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$3255_storage_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage pointer"}},"id":3958,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13089:9:18","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":3250,"src":"13065:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3962,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12972:166:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12936:202:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3964,"nodeType":"ExpressionStatement","src":"12936:202:18"},{"assignments":[3966],"declarations":[{"constant":false,"id":3966,"mutability":"mutable","name":"success","nameLocation":"13153:7:18","nodeType":"VariableDeclaration","scope":3980,"src":"13148:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3965,"name":"bool","nodeType":"ElementaryTypeName","src":"13148:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3974,"initialValue":{"arguments":[{"id":3969,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3763,"src":"13201:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3970,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"13213:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3971,"name":"insuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3761,"src":"13228:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3972,"name":"incomingAmountPerSec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3839,"src":"13243:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3967,"name":"_insuranceRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3233,"src":"13163:18:18","typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$5916","typeString":"contract IInsuranceRegistry"}},"id":3968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13182:18:18","memberName":"addCoverageOffered","nodeType":"MemberAccess","referencedDeclaration":5843,"src":"13163:37:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256,uint256,uint256,uint256) external returns (bool)"}},"id":3973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13163:101:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"13148:116:18"},{"expression":{"components":[{"id":3975,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3966,"src":"13282:7:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"id":3976,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3809,"src":"13291:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":3977,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13309:13:18","memberName":"insuranceCost","nodeType":"MemberAccess","referencedDeclaration":3245,"src":"13291:31:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3978,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13281:42:18","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3771,"id":3979,"nodeType":"Return","src":"13274:49:18"}]},"documentation":{"id":3759,"nodeType":"StructuredDocumentation","src":"10525:97:18","text":"@param insuredAmount: insured amount\n @param categoryID: like Smart Contract Insurance"},"id":3981,"implemented":true,"kind":"function","modifiers":[],"name":"activateInsurance","nameLocation":"10636:17:18","nodeType":"FunctionDefinition","parameters":{"id":3766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3761,"mutability":"mutable","name":"insuredAmount","nameLocation":"10671:13:18","nodeType":"VariableDeclaration","scope":3981,"src":"10663:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3760,"name":"uint256","nodeType":"ElementaryTypeName","src":"10663:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3763,"mutability":"mutable","name":"categoryID","nameLocation":"10702:10:18","nodeType":"VariableDeclaration","scope":3981,"src":"10694:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3762,"name":"uint256","nodeType":"ElementaryTypeName","src":"10694:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3765,"mutability":"mutable","name":"subCategoryID","nameLocation":"10730:13:18","nodeType":"VariableDeclaration","scope":3981,"src":"10722:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3764,"name":"uint256","nodeType":"ElementaryTypeName","src":"10722:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10653:96:18"},"returnParameters":{"id":3771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3768,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3981,"src":"10766:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3767,"name":"bool","nodeType":"ElementaryTypeName","src":"10766:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3770,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3981,"src":"10772:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3769,"name":"uint256","nodeType":"ElementaryTypeName","src":"10772:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10765:15:18"},"scope":4809,"src":"10627:2703:18","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4119,"nodeType":"Block","src":"13578:1353:18","statements":[{"assignments":[3995],"declarations":[{"constant":false,"id":3995,"mutability":"mutable","name":"userInsuranceInfo","nameLocation":"13614:17:18","nodeType":"VariableDeclaration","scope":4119,"src":"13588:43:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"},"typeName":{"id":3994,"nodeType":"UserDefinedTypeName","pathNode":{"id":3993,"name":"UserInsuranceInfo","nameLocations":["13588:17:18"],"nodeType":"IdentifierPath","referencedDeclaration":3248,"src":"13588:17:18"},"referencedDeclaration":3248,"src":"13588:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"}},"visibility":"internal"}],"id":4003,"initialValue":{"baseExpression":{"baseExpression":{"baseExpression":{"id":3996,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"13634:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":3998,"indexExpression":{"id":3997,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3984,"src":"13653:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13634:31:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":4000,"indexExpression":{"id":3999,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3986,"src":"13666:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13634:43:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":4002,"indexExpression":{"id":4001,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3988,"src":"13678:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13634:58:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"13588:104:18"},{"condition":{"id":4006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"13706:26:18","subExpression":{"expression":{"id":4004,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3995,"src":"13707:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4005,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13725:7:18","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":3247,"src":"13707:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4011,"nodeType":"IfStatement","src":"13702:93:18","trueBody":{"id":4010,"nodeType":"Block","src":"13734:61:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4007,"name":"CFA__InactiveInsuranceError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5556,"src":"13755:27:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13755:29:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4009,"nodeType":"RevertStatement","src":"13748:36:18"}]}},{"expression":{"id":4016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4012,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3995,"src":"13804:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4014,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"13822:7:18","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":3247,"src":"13804:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":4015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13832:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"13804:33:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4017,"nodeType":"ExpressionStatement","src":"13804:33:18"},{"assignments":[4019],"declarations":[{"constant":false,"id":4019,"mutability":"mutable","name":"duration","nameLocation":"13855:8:18","nodeType":"VariableDeclaration","scope":4119,"src":"13847:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4018,"name":"uint256","nodeType":"ElementaryTypeName","src":"13847:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4045,"initialValue":{"components":[{"condition":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4020,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"13881:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13887:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"13881:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":4022,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3995,"src":"13899:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4023,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13917:9:18","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":3235,"src":"13899:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13881:45:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4025,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13880:47:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14109:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13880:230:18","trueExpression":{"components":[{"condition":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4026,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"13949:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13955:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"13949:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":4028,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3995,"src":"13967:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4029,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13985:9:18","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":3237,"src":"13967:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13949:45:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4031,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13948:47:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4034,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"14046:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14052:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"14046:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":4036,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3995,"src":"14064:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4037,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14082:9:18","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":3235,"src":"14064:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14046:45:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4039,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14045:47:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13948:144:18","trueExpression":{"expression":{"id":4032,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3995,"src":"14015:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4033,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14033:9:18","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":3237,"src":"14015:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4041,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13930:176:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4044,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13866:245:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13847:264:18"},{"assignments":[4047],"declarations":[{"constant":false,"id":4047,"mutability":"mutable","name":"amountToBeBurned","nameLocation":"14129:16:18","nodeType":"VariableDeclaration","scope":4119,"src":"14121:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4046,"name":"uint256","nodeType":"ElementaryTypeName","src":"14121:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4053,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4048,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4019,"src":"14149:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"id":4049,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3995,"src":"14160:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4050,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14178:17:18","memberName":"insuranceFlowRate","nodeType":"MemberAccess","referencedDeclaration":3243,"src":"14160:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14149:46:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4052,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14148:48:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14121:75:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4054,"name":"amountToBeBurned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4047,"src":"14210:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14230:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14210:21:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4060,"nodeType":"IfStatement","src":"14206:63:18","trueBody":{"id":4059,"nodeType":"Block","src":"14233:36:18","statements":[{"expression":{"hexValue":"74727565","id":4057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14254:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3992,"id":4058,"nodeType":"Return","src":"14247:11:18"}]}},{"expression":{"id":4067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":4061,"name":"usersGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3261,"src":"14279:24:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserGlobalInsuranceInfo_$3255_storage_$","typeString":"mapping(address => struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage ref)"}},"id":4063,"indexExpression":{"id":4062,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3984,"src":"14304:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14279:37:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$3255_storage","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage ref"}},"id":4064,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14317:19:18","memberName":"insuranceStreamRate","nodeType":"MemberAccess","referencedDeclaration":3252,"src":"14279:57:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"expression":{"id":4065,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3995,"src":"14340:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4066,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14358:17:18","memberName":"insuranceFlowRate","nodeType":"MemberAccess","referencedDeclaration":3243,"src":"14340:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14279:96:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4068,"nodeType":"ExpressionStatement","src":"14279:96:18"},{"expression":{"id":4075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":4069,"name":"usersGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3261,"src":"14385:24:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserGlobalInsuranceInfo_$3255_storage_$","typeString":"mapping(address => struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage ref)"}},"id":4071,"indexExpression":{"id":4070,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3984,"src":"14410:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14385:37:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$3255_storage","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage ref"}},"id":4072,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14423:19:18","memberName":"globalInsuranceCost","nodeType":"MemberAccess","referencedDeclaration":3254,"src":"14385:57:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"expression":{"id":4073,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3995,"src":"14446:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4074,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14464:13:18","memberName":"insuranceCost","nodeType":"MemberAccess","referencedDeclaration":3245,"src":"14446:31:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14385:92:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4076,"nodeType":"ExpressionStatement","src":"14385:92:18"},{"assignments":[4078],"declarations":[{"constant":false,"id":4078,"mutability":"mutable","name":"flowRate","nameLocation":"14495:8:18","nodeType":"VariableDeclaration","scope":4119,"src":"14487:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4077,"name":"uint256","nodeType":"ElementaryTypeName","src":"14487:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4081,"initialValue":{"expression":{"id":4079,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3995,"src":"14506:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4080,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14524:17:18","memberName":"insuranceFlowRate","nodeType":"MemberAccess","referencedDeclaration":3243,"src":"14506:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14487:54:18"},{"assignments":[4083],"declarations":[{"constant":false,"id":4083,"mutability":"mutable","name":"insuredAmount","nameLocation":"14559:13:18","nodeType":"VariableDeclaration","scope":4119,"src":"14551:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4082,"name":"uint256","nodeType":"ElementaryTypeName","src":"14551:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4086,"initialValue":{"expression":{"id":4084,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3995,"src":"14575:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4085,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14593:13:18","memberName":"insuredAmount","nodeType":"MemberAccess","referencedDeclaration":3239,"src":"14575:31:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14551:55:18"},{"assignments":[4088],"declarations":[{"constant":false,"id":4088,"mutability":"mutable","name":"success","nameLocation":"14621:7:18","nodeType":"VariableDeclaration","scope":4119,"src":"14616:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4087,"name":"bool","nodeType":"ElementaryTypeName","src":"14616:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4096,"initialValue":{"arguments":[{"id":4091,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3986,"src":"14672:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4092,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3988,"src":"14684:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4093,"name":"insuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4083,"src":"14699:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4094,"name":"flowRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4078,"src":"14714:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4089,"name":"_insuranceRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3233,"src":"14631:18:18","typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$5916","typeString":"contract IInsuranceRegistry"}},"id":4090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14650:21:18","memberName":"removeCoverageOffered","nodeType":"MemberAccess","referencedDeclaration":5856,"src":"14631:40:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256,uint256,uint256,uint256) external returns (bool)"}},"id":4095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14631:92:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"14616:107:18"},{"assignments":[4098],"declarations":[{"constant":false,"id":4098,"mutability":"mutable","name":"burnSuccess","nameLocation":"14738:11:18","nodeType":"VariableDeclaration","scope":4119,"src":"14733:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4097,"name":"bool","nodeType":"ElementaryTypeName","src":"14733:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4104,"initialValue":{"arguments":[{"id":4101,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3984,"src":"14769:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4102,"name":"amountToBeBurned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4047,"src":"14782:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4099,"name":"_sztDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3230,"src":"14752:7:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Extended_$5713","typeString":"contract IERC20Extended"}},"id":4100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14760:8:18","memberName":"burnFrom","nodeType":"MemberAccess","referencedDeclaration":5712,"src":"14752:16:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14752:47:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"14733:66:18"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":4106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"14814:8:18","subExpression":{"id":4105,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4088,"src":"14815:7:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4107,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14813:10:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"id":4109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"14828:12:18","subExpression":{"id":4108,"name":"burnSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4098,"src":"14829:11:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4110,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14827:14:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14813:28:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4116,"nodeType":"IfStatement","src":"14809:95:18","trueBody":{"id":4115,"nodeType":"Block","src":"14843:61:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4112,"name":"CFA__TransactionFailedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5554,"src":"14864:27:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14864:29:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4114,"nodeType":"RevertStatement","src":"14857:36:18"}]}},{"expression":{"hexValue":"74727565","id":4117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14920:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3992,"id":4118,"nodeType":"Return","src":"14913:11:18"}]},"documentation":{"id":3982,"nodeType":"StructuredDocumentation","src":"13336:90:18","text":"NOTE: few if and else to consider for globalinsuranceinfo like endtime and start time "},"id":4120,"implemented":true,"kind":"function","modifiers":[],"name":"deactivateInsurance","nameLocation":"13440:19:18","nodeType":"FunctionDefinition","parameters":{"id":3989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3984,"mutability":"mutable","name":"userAddress","nameLocation":"13477:11:18","nodeType":"VariableDeclaration","scope":4120,"src":"13469:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3983,"name":"address","nodeType":"ElementaryTypeName","src":"13469:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3986,"mutability":"mutable","name":"categoryID","nameLocation":"13507:10:18","nodeType":"VariableDeclaration","scope":4120,"src":"13499:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3985,"name":"uint256","nodeType":"ElementaryTypeName","src":"13499:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3988,"mutability":"mutable","name":"subCategoryID","nameLocation":"13536:13:18","nodeType":"VariableDeclaration","scope":4120,"src":"13528:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3987,"name":"uint256","nodeType":"ElementaryTypeName","src":"13528:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13459:96:18"},"returnParameters":{"id":3992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3991,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4120,"src":"13572:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3990,"name":"bool","nodeType":"ElementaryTypeName","src":"13572:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13571:6:18"},"scope":4809,"src":"13431:1500:18","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4263,"nodeType":"Block","src":"15284:1290:18","statements":[{"assignments":[4134],"declarations":[{"constant":false,"id":4134,"mutability":"mutable","name":"activeID","nameLocation":"15311:8:18","nodeType":"VariableDeclaration","scope":4263,"src":"15294:25:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4132,"name":"uint256","nodeType":"ElementaryTypeName","src":"15294:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4133,"nodeType":"ArrayTypeName","src":"15294:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":4143,"initialValue":{"arguments":[{"id":4136,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4123,"src":"15344:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4137,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"15357:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":4140,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"15411:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4138,"name":"_insuranceRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3233,"src":"15369:18:18","typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$5916","typeString":"contract IInsuranceRegistry"}},"id":4139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15388:22:18","memberName":"getLatestSubCategoryID","nodeType":"MemberAccess","referencedDeclaration":5895,"src":"15369:41:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":4141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15369:53:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4135,"name":"findActivePremiumCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"15322:21:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (address,uint256,uint256) view returns (uint256[] memory)"}},"id":4142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15322:101:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"15294:129:18"},{"assignments":[4145],"declarations":[{"constant":false,"id":4145,"mutability":"mutable","name":"expectedAmountToBePaid","nameLocation":"15441:22:18","nodeType":"VariableDeclaration","scope":4263,"src":"15433:30:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4144,"name":"uint256","nodeType":"ElementaryTypeName","src":"15433:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4151,"initialValue":{"arguments":[{"id":4147,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4123,"src":"15490:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4148,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"15503:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4149,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4134,"src":"15515:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":4146,"name":"_calculateTotalFlowMade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4558,"src":"15466:23:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$_t_uint256_$","typeString":"function (address,uint256,uint256[] memory) view returns (uint256)"}},"id":4150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15466:58:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15433:91:18"},{"body":{"id":4221,"nodeType":"Block","src":"15573:572:18","statements":[{"expression":{"id":4171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4160,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"15587:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":4166,"indexExpression":{"id":4161,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4123,"src":"15606:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15587:31:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":4167,"indexExpression":{"id":4162,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"15619:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15587:43:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":4168,"indexExpression":{"baseExpression":{"id":4163,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4134,"src":"15631:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4165,"indexExpression":{"id":4164,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4153,"src":"15640:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15631:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15587:56:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"id":4169,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"15644:7:18","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":3247,"src":"15587:64:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":4170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"15654:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"15587:72:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4172,"nodeType":"ExpressionStatement","src":"15587:72:18"},{"assignments":[4174],"declarations":[{"constant":false,"id":4174,"mutability":"mutable","name":"flowRate","nameLocation":"15681:8:18","nodeType":"VariableDeclaration","scope":4221,"src":"15673:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4173,"name":"uint256","nodeType":"ElementaryTypeName","src":"15673:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4185,"initialValue":{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4175,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"15692:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":4177,"indexExpression":{"id":4176,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4123,"src":"15711:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15692:31:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":4179,"indexExpression":{"id":4178,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"15724:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15692:43:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":4183,"indexExpression":{"baseExpression":{"id":4180,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4134,"src":"15736:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4182,"indexExpression":{"id":4181,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4153,"src":"15745:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15736:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15692:56:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"id":4184,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15749:17:18","memberName":"insuranceFlowRate","nodeType":"MemberAccess","referencedDeclaration":3243,"src":"15692:74:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15673:93:18"},{"assignments":[4187],"declarations":[{"constant":false,"id":4187,"mutability":"mutable","name":"insuredAmount","nameLocation":"15788:13:18","nodeType":"VariableDeclaration","scope":4221,"src":"15780:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4186,"name":"uint256","nodeType":"ElementaryTypeName","src":"15780:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4198,"initialValue":{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4188,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"15804:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":4190,"indexExpression":{"id":4189,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4123,"src":"15823:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15804:31:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":4192,"indexExpression":{"id":4191,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"15836:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15804:43:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":4196,"indexExpression":{"baseExpression":{"id":4193,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4134,"src":"15848:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4195,"indexExpression":{"id":4194,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4153,"src":"15857:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15848:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15804:56:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"id":4197,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15861:13:18","memberName":"insuredAmount","nodeType":"MemberAccess","referencedDeclaration":3239,"src":"15804:70:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15780:94:18"},{"assignments":[4200],"declarations":[{"constant":false,"id":4200,"mutability":"mutable","name":"coverageRemoveSuccess","nameLocation":"15893:21:18","nodeType":"VariableDeclaration","scope":4221,"src":"15888:26:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4199,"name":"bool","nodeType":"ElementaryTypeName","src":"15888:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4210,"initialValue":{"arguments":[{"id":4203,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"15958:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":4204,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4134,"src":"15970:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4206,"indexExpression":{"id":4205,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4153,"src":"15979:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15970:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4207,"name":"insuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4187,"src":"15983:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4208,"name":"flowRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"15998:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4201,"name":"_insuranceRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3233,"src":"15917:18:18","typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$5916","typeString":"contract IInsuranceRegistry"}},"id":4202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15936:21:18","memberName":"removeCoverageOffered","nodeType":"MemberAccess","referencedDeclaration":5856,"src":"15917:40:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256,uint256,uint256,uint256) external returns (bool)"}},"id":4209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15917:90:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"15888:119:18"},{"condition":{"id":4212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"16025:22:18","subExpression":{"id":4211,"name":"coverageRemoveSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4200,"src":"16026:21:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4217,"nodeType":"IfStatement","src":"16021:97:18","trueBody":{"id":4216,"nodeType":"Block","src":"16049:69:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4213,"name":"CFA__TransactionFailedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5554,"src":"16074:27:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16074:29:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4215,"nodeType":"RevertStatement","src":"16067:36:18"}]}},{"expression":{"id":4219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"16131:3:18","subExpression":{"id":4218,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4153,"src":"16133:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4220,"nodeType":"ExpressionStatement","src":"16131:3:18"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4156,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4153,"src":"15551:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4157,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4134,"src":"15555:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15564:6:18","memberName":"length","nodeType":"MemberAccess","src":"15555:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15551:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4222,"initializationExpression":{"assignments":[4153],"declarations":[{"constant":false,"id":4153,"mutability":"mutable","name":"i","nameLocation":"15546:1:18","nodeType":"VariableDeclaration","scope":4222,"src":"15538:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4152,"name":"uint256","nodeType":"ElementaryTypeName","src":"15538:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4155,"initialValue":{"hexValue":"30","id":4154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15548:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"15538:11:18"},"nodeType":"ForStatement","src":"15534:611:18"},{"assignments":[4224],"declarations":[{"constant":false,"id":4224,"mutability":"mutable","name":"userBalance","nameLocation":"16162:11:18","nodeType":"VariableDeclaration","scope":4263,"src":"16154:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4223,"name":"uint256","nodeType":"ElementaryTypeName","src":"16154:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4229,"initialValue":{"arguments":[{"id":4227,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4123,"src":"16194:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4225,"name":"_sztDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3230,"src":"16176:7:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Extended_$5713","typeString":"contract IERC20Extended"}},"id":4226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16184:9:18","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":815,"src":"16176:17:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":4228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16176:30:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16154:52:18"},{"assignments":[4231],"declarations":[{"constant":false,"id":4231,"mutability":"mutable","name":"amountToBeBurned","nameLocation":"16225:16:18","nodeType":"VariableDeclaration","scope":4263,"src":"16217:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4230,"name":"uint256","nodeType":"ElementaryTypeName","src":"16217:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4238,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4232,"name":"expectedAmountToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4145,"src":"16244:22:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4233,"name":"userBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"16269:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16244:36:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4236,"name":"expectedAmountToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4145,"src":"16297:22:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"16244:75:18","trueExpression":{"id":4235,"name":"userBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"16283:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16217:102:18"},{"expression":{"id":4244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":4239,"name":"usersGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3261,"src":"16329:24:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserGlobalInsuranceInfo_$3255_storage_$","typeString":"mapping(address => struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage ref)"}},"id":4241,"indexExpression":{"id":4240,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4123,"src":"16354:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16329:37:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$3255_storage","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage ref"}},"id":4242,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"16367:19:18","memberName":"insuranceStreamRate","nodeType":"MemberAccess","referencedDeclaration":3252,"src":"16329:57:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":4243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16389:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"16329:61:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4245,"nodeType":"ExpressionStatement","src":"16329:61:18"},{"assignments":[4247],"declarations":[{"constant":false,"id":4247,"mutability":"mutable","name":"success","nameLocation":"16405:7:18","nodeType":"VariableDeclaration","scope":4263,"src":"16400:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4246,"name":"bool","nodeType":"ElementaryTypeName","src":"16400:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4253,"initialValue":{"arguments":[{"id":4250,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4123,"src":"16432:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4251,"name":"amountToBeBurned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4231,"src":"16445:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4248,"name":"_sztDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3230,"src":"16415:7:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Extended_$5713","typeString":"contract IERC20Extended"}},"id":4249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16423:8:18","memberName":"burnFrom","nodeType":"MemberAccess","referencedDeclaration":5712,"src":"16415:16:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16415:47:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"16400:62:18"},{"condition":{"id":4255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"16476:8:18","subExpression":{"id":4254,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4247,"src":"16477:7:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4260,"nodeType":"IfStatement","src":"16472:75:18","trueBody":{"id":4259,"nodeType":"Block","src":"16486:61:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4256,"name":"CFA__TransactionFailedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5554,"src":"16507:27:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16507:29:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4258,"nodeType":"RevertStatement","src":"16500:36:18"}]}},{"expression":{"hexValue":"74727565","id":4261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"16563:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4129,"id":4262,"nodeType":"Return","src":"16556:11:18"}]},"documentation":{"id":4121,"nodeType":"StructuredDocumentation","src":"14937:219:18","text":"@dev this function aims to deactivate user's all activated insurance in a single-call.\n @param userAddress: user wallet address\n @param categoryID: insurance category, e.g., stablecoin depeg insurance."},"id":4264,"implemented":true,"kind":"function","modifiers":[],"name":"deactivateCategoryInsurance","nameLocation":"15170:27:18","nodeType":"FunctionDefinition","parameters":{"id":4126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4123,"mutability":"mutable","name":"userAddress","nameLocation":"15215:11:18","nodeType":"VariableDeclaration","scope":4264,"src":"15207:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4122,"name":"address","nodeType":"ElementaryTypeName","src":"15207:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4125,"mutability":"mutable","name":"categoryID","nameLocation":"15245:10:18","nodeType":"VariableDeclaration","scope":4264,"src":"15237:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4124,"name":"uint256","nodeType":"ElementaryTypeName","src":"15237:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15197:64:18"},"returnParameters":{"id":4129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4128,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4264,"src":"15278:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4127,"name":"bool","nodeType":"ElementaryTypeName","src":"15278:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15277:6:18"},"scope":4809,"src":"15161:1413:18","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"baseFunctions":[5612],"body":{"id":4365,"nodeType":"Block","src":"16781:758:18","statements":[{"assignments":[4279],"declarations":[{"constant":false,"id":4279,"mutability":"mutable","name":"activeProtocolCount","nameLocation":"16799:19:18","nodeType":"VariableDeclaration","scope":4365,"src":"16791:27:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4278,"name":"uint256","nodeType":"ElementaryTypeName","src":"16791:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4281,"initialValue":{"hexValue":"30","id":4280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16821:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"16791:31:18"},{"body":{"id":4310,"nodeType":"Block","src":"16871:231:18","statements":[{"assignments":[4291],"declarations":[{"constant":false,"id":4291,"mutability":"mutable","name":"userInsuranceInfo","nameLocation":"16910:17:18","nodeType":"VariableDeclaration","scope":4310,"src":"16885:42:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_memory_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"},"typeName":{"id":4290,"nodeType":"UserDefinedTypeName","pathNode":{"id":4289,"name":"UserInsuranceInfo","nameLocations":["16885:17:18"],"nodeType":"IdentifierPath","referencedDeclaration":3248,"src":"16885:17:18"},"referencedDeclaration":3248,"src":"16885:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"}},"visibility":"internal"}],"id":4299,"initialValue":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4292,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"16930:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":4294,"indexExpression":{"id":4293,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"16949:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16930:31:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":4296,"indexExpression":{"id":4295,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4269,"src":"16962:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16930:43:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":4298,"indexExpression":{"id":4297,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4283,"src":"16974:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16930:46:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"16885:91:18"},{"condition":{"expression":{"id":4300,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4291,"src":"16994:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_memory_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo memory"}},"id":4301,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17012:7:18","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":3247,"src":"16994:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4306,"nodeType":"IfStatement","src":"16990:85:18","trueBody":{"id":4305,"nodeType":"Block","src":"17021:54:18","statements":[{"expression":{"id":4303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"17039:21:18","subExpression":{"id":4302,"name":"activeProtocolCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4279,"src":"17041:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4304,"nodeType":"ExpressionStatement","src":"17039:21:18"}]}},{"expression":{"id":4308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"17088:3:18","subExpression":{"id":4307,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4283,"src":"17090:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4309,"nodeType":"ExpressionStatement","src":"17088:3:18"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4286,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4283,"src":"16848:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4287,"name":"subCategoryCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4271,"src":"16852:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16848:20:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4311,"initializationExpression":{"assignments":[4283],"declarations":[{"constant":false,"id":4283,"mutability":"mutable","name":"i","nameLocation":"16841:1:18","nodeType":"VariableDeclaration","scope":4311,"src":"16836:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4282,"name":"uint","nodeType":"ElementaryTypeName","src":"16836:4:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4285,"initialValue":{"hexValue":"30","id":4284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16845:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"16836:10:18"},"nodeType":"ForStatement","src":"16832:270:18"},{"assignments":[4316],"declarations":[{"constant":false,"id":4316,"mutability":"mutable","name":"activeID","nameLocation":"17128:8:18","nodeType":"VariableDeclaration","scope":4365,"src":"17111:25:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4314,"name":"uint256","nodeType":"ElementaryTypeName","src":"17111:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4315,"nodeType":"ArrayTypeName","src":"17111:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":4322,"initialValue":{"arguments":[{"id":4320,"name":"activeProtocolCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4279,"src":"17153:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4319,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"17139:13:18","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":4317,"name":"uint256","nodeType":"ElementaryTypeName","src":"17143:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4318,"nodeType":"ArrayTypeName","src":"17143:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":4321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17139:34:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"17111:62:18"},{"assignments":[4324],"declarations":[{"constant":false,"id":4324,"mutability":"mutable","name":"counter","nameLocation":"17191:7:18","nodeType":"VariableDeclaration","scope":4365,"src":"17183:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4323,"name":"uint256","nodeType":"ElementaryTypeName","src":"17183:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4326,"initialValue":{"hexValue":"30","id":4325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17201:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"17183:19:18"},{"body":{"id":4361,"nodeType":"Block","src":"17251:259:18","statements":[{"assignments":[4336],"declarations":[{"constant":false,"id":4336,"mutability":"mutable","name":"userInsuranceInfo","nameLocation":"17291:17:18","nodeType":"VariableDeclaration","scope":4361,"src":"17265:43:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"},"typeName":{"id":4335,"nodeType":"UserDefinedTypeName","pathNode":{"id":4334,"name":"UserInsuranceInfo","nameLocations":["17265:17:18"],"nodeType":"IdentifierPath","referencedDeclaration":3248,"src":"17265:17:18"},"referencedDeclaration":3248,"src":"17265:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"}},"visibility":"internal"}],"id":4344,"initialValue":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4337,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"17311:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":4339,"indexExpression":{"id":4338,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"17330:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17311:31:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":4341,"indexExpression":{"id":4340,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4269,"src":"17343:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17311:43:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":4343,"indexExpression":{"id":4342,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4328,"src":"17355:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17311:46:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"17265:92:18"},{"condition":{"expression":{"id":4345,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4336,"src":"17375:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4346,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17393:7:18","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":3247,"src":"17375:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4357,"nodeType":"IfStatement","src":"17371:112:18","trueBody":{"id":4356,"nodeType":"Block","src":"17402:81:18","statements":[{"expression":{"id":4351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4347,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4316,"src":"17420:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4349,"indexExpression":{"id":4348,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4324,"src":"17429:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17420:17:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4350,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4328,"src":"17440:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17420:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4352,"nodeType":"ExpressionStatement","src":"17420:21:18"},{"expression":{"id":4354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"17459:9:18","subExpression":{"id":4353,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4324,"src":"17461:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4355,"nodeType":"ExpressionStatement","src":"17459:9:18"}]}},{"expression":{"id":4359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"17496:3:18","subExpression":{"id":4358,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4328,"src":"17498:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4360,"nodeType":"ExpressionStatement","src":"17496:3:18"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4331,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4328,"src":"17228:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4332,"name":"subCategoryCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4271,"src":"17232:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17228:20:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4362,"initializationExpression":{"assignments":[4328],"declarations":[{"constant":false,"id":4328,"mutability":"mutable","name":"i","nameLocation":"17221:1:18","nodeType":"VariableDeclaration","scope":4362,"src":"17216:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4327,"name":"uint","nodeType":"ElementaryTypeName","src":"17216:4:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4330,"initialValue":{"hexValue":"30","id":4329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17225:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"17216:10:18"},"nodeType":"ForStatement","src":"17212:298:18"},{"expression":{"id":4363,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4316,"src":"17524:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":4277,"id":4364,"nodeType":"Return","src":"17517:15:18"}]},"documentation":{"id":4265,"nodeType":"StructuredDocumentation","src":"16580:19:18","text":"VIEW FUNCTIONS"},"functionSelector":"1a5c8f28","id":4366,"implemented":true,"kind":"function","modifiers":[],"name":"findActivePremiumCost","nameLocation":"16613:21:18","nodeType":"FunctionDefinition","overrides":{"id":4273,"nodeType":"OverrideSpecifier","overrides":[],"src":"16746:8:18"},"parameters":{"id":4272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4267,"mutability":"mutable","name":"userAddress","nameLocation":"16652:11:18","nodeType":"VariableDeclaration","scope":4366,"src":"16644:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4266,"name":"address","nodeType":"ElementaryTypeName","src":"16644:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4269,"mutability":"mutable","name":"categoryID","nameLocation":"16682:10:18","nodeType":"VariableDeclaration","scope":4366,"src":"16674:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4268,"name":"uint256","nodeType":"ElementaryTypeName","src":"16674:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4271,"mutability":"mutable","name":"subCategoryCount","nameLocation":"16711:16:18","nodeType":"VariableDeclaration","scope":4366,"src":"16703:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4270,"name":"uint256","nodeType":"ElementaryTypeName","src":"16703:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16634:99:18"},"returnParameters":{"id":4277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4276,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4366,"src":"16763:16:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4274,"name":"uint256","nodeType":"ElementaryTypeName","src":"16763:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4275,"nodeType":"ArrayTypeName","src":"16763:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"16762:18:18"},"scope":4809,"src":"16604:935:18","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[5628],"body":{"id":4476,"nodeType":"Block","src":"17660:1019:18","statements":[{"assignments":[4375],"declarations":[{"constant":false,"id":4375,"mutability":"mutable","name":"globalBalanceToBePaid","nameLocation":"17678:21:18","nodeType":"VariableDeclaration","scope":4476,"src":"17670:29:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4374,"name":"uint256","nodeType":"ElementaryTypeName","src":"17670:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4377,"initialValue":{"hexValue":"30","id":4376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17702:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"17670:33:18"},{"body":{"id":4472,"nodeType":"Block","src":"17753:882:18","statements":[{"assignments":[4386],"declarations":[{"constant":false,"id":4386,"mutability":"mutable","name":"balanceToBePaid","nameLocation":"17775:15:18","nodeType":"VariableDeclaration","scope":4472,"src":"17767:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4385,"name":"uint256","nodeType":"ElementaryTypeName","src":"17767:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4388,"initialValue":{"hexValue":"30","id":4387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17793:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"17767:27:18"},{"assignments":[4393],"declarations":[{"constant":false,"id":4393,"mutability":"mutable","name":"activeID","nameLocation":"17825:8:18","nodeType":"VariableDeclaration","scope":4472,"src":"17808:25:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4391,"name":"uint256","nodeType":"ElementaryTypeName","src":"17808:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4392,"nodeType":"ArrayTypeName","src":"17808:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":4402,"initialValue":{"arguments":[{"id":4395,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4369,"src":"17858:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4396,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4379,"src":"17871:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":4399,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4379,"src":"17916:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4397,"name":"_insuranceRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3233,"src":"17874:18:18","typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$5916","typeString":"contract IInsuranceRegistry"}},"id":4398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17893:22:18","memberName":"getLatestSubCategoryID","nodeType":"MemberAccess","referencedDeclaration":5895,"src":"17874:41:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":4400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17874:44:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4394,"name":"findActivePremiumCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"17836:21:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (address,uint256,uint256) view returns (uint256[] memory)"}},"id":4401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17836:83:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"17808:111:18"},{"body":{"id":4463,"nodeType":"Block","src":"17972:582:18","statements":[{"assignments":[4413],"declarations":[{"constant":false,"id":4413,"mutability":"mutable","name":"userActiveInsuranceInfo","nameLocation":"18016:23:18","nodeType":"VariableDeclaration","scope":4463,"src":"17990:49:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"},"typeName":{"id":4412,"nodeType":"UserDefinedTypeName","pathNode":{"id":4411,"name":"UserInsuranceInfo","nameLocations":["17990:17:18"],"nodeType":"IdentifierPath","referencedDeclaration":3248,"src":"17990:17:18"},"referencedDeclaration":3248,"src":"17990:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"}},"visibility":"internal"}],"id":4423,"initialValue":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4414,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"18042:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":4416,"indexExpression":{"id":4415,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4369,"src":"18061:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18042:31:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":4418,"indexExpression":{"id":4417,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4379,"src":"18074:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18042:34:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":4422,"indexExpression":{"baseExpression":{"id":4419,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4393,"src":"18077:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4421,"indexExpression":{"id":4420,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"18086:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18077:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18042:47:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"17990:99:18"},{"assignments":[4425],"declarations":[{"constant":false,"id":4425,"mutability":"mutable","name":"duration","nameLocation":"18115:8:18","nodeType":"VariableDeclaration","scope":4463,"src":"18107:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4424,"name":"uint256","nodeType":"ElementaryTypeName","src":"18107:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4451,"initialValue":{"components":[{"condition":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4426,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"18149:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18155:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"18149:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":4428,"name":"userActiveInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4413,"src":"18167:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4429,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18191:9:18","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":3235,"src":"18167:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18149:51:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4431,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18148:53:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18425:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"18148:278:18","trueExpression":{"components":[{"condition":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4432,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"18231:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18237:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"18231:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":4434,"name":"userActiveInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4413,"src":"18249:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4435,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18273:9:18","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":3237,"src":"18249:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18231:51:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4437,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18230:53:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4440,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"18348:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18354:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"18348:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":4442,"name":"userActiveInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4413,"src":"18366:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4443,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18390:9:18","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":3235,"src":"18366:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18348:51:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4445,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18347:53:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"18230:170:18","trueExpression":{"expression":{"id":4438,"name":"userActiveInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4413,"src":"18311:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4439,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18335:9:18","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":3237,"src":"18311:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4447,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18204:218:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4450,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18126:301:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18107:320:18"},{"expression":{"id":4458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4452,"name":"balanceToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4386,"src":"18445:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4453,"name":"userActiveInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4413,"src":"18465:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4454,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18489:17:18","memberName":"insuranceFlowRate","nodeType":"MemberAccess","referencedDeclaration":3243,"src":"18465:41:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4455,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4425,"src":"18509:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18465:52:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4457,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18464:54:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18445:73:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4459,"nodeType":"ExpressionStatement","src":"18445:73:18"},{"expression":{"id":4461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"18536:3:18","subExpression":{"id":4460,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"18538:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4462,"nodeType":"ExpressionStatement","src":"18536:3:18"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4407,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"17950:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4408,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4393,"src":"17954:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17963:6:18","memberName":"length","nodeType":"MemberAccess","src":"17954:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17950:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4464,"initializationExpression":{"assignments":[4404],"declarations":[{"constant":false,"id":4404,"mutability":"mutable","name":"j","nameLocation":"17945:1:18","nodeType":"VariableDeclaration","scope":4464,"src":"17937:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4403,"name":"uint256","nodeType":"ElementaryTypeName","src":"17937:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4406,"initialValue":{"hexValue":"30","id":4405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17947:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"17937:11:18"},"nodeType":"ForStatement","src":"17933:621:18"},{"expression":{"id":4467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4465,"name":"globalBalanceToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4375,"src":"18567:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4466,"name":"balanceToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4386,"src":"18592:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18567:40:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4468,"nodeType":"ExpressionStatement","src":"18567:40:18"},{"expression":{"id":4470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"18621:3:18","subExpression":{"id":4469,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4379,"src":"18623:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4471,"nodeType":"ExpressionStatement","src":"18621:3:18"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4382,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4379,"src":"17730:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4383,"name":"_categoriesCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3206,"src":"17734:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17730:20:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4473,"initializationExpression":{"assignments":[4379],"declarations":[{"constant":false,"id":4379,"mutability":"mutable","name":"i","nameLocation":"17725:1:18","nodeType":"VariableDeclaration","scope":4473,"src":"17717:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4378,"name":"uint256","nodeType":"ElementaryTypeName","src":"17717:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4381,"initialValue":{"hexValue":"30","id":4380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17727:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"17717:11:18"},"nodeType":"ForStatement","src":"17713:922:18"},{"expression":{"id":4474,"name":"globalBalanceToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4375,"src":"18651:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4373,"id":4475,"nodeType":"Return","src":"18644:28:18"}]},"documentation":{"id":4367,"nodeType":"StructuredDocumentation","src":"17545:12:18","text":"DURATION"},"functionSelector":"cff5eede","id":4477,"implemented":true,"kind":"function","modifiers":[],"name":"calculateTotalFlowMade","nameLocation":"17571:22:18","nodeType":"FunctionDefinition","parameters":{"id":4370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4369,"mutability":"mutable","name":"userAddress","nameLocation":"17611:11:18","nodeType":"VariableDeclaration","scope":4477,"src":"17603:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4368,"name":"address","nodeType":"ElementaryTypeName","src":"17603:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17593:35:18"},"returnParameters":{"id":4373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4372,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4477,"src":"17651:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4371,"name":"uint256","nodeType":"ElementaryTypeName","src":"17651:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17650:9:18"},"scope":4809,"src":"17562:1117:18","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4557,"nodeType":"Block","src":"18848:677:18","statements":[{"assignments":[4490],"declarations":[{"constant":false,"id":4490,"mutability":"mutable","name":"balanceToBePaid","nameLocation":"18866:15:18","nodeType":"VariableDeclaration","scope":4557,"src":"18858:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4489,"name":"uint256","nodeType":"ElementaryTypeName","src":"18858:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4492,"initialValue":{"hexValue":"30","id":4491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18884:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18858:27:18"},{"body":{"id":4553,"nodeType":"Block","src":"18932:555:18","statements":[{"assignments":[4503],"declarations":[{"constant":false,"id":4503,"mutability":"mutable","name":"userActiveInsuranceInfo","nameLocation":"18972:23:18","nodeType":"VariableDeclaration","scope":4553,"src":"18946:49:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"},"typeName":{"id":4502,"nodeType":"UserDefinedTypeName","pathNode":{"id":4501,"name":"UserInsuranceInfo","nameLocations":["18946:17:18"],"nodeType":"IdentifierPath","referencedDeclaration":3248,"src":"18946:17:18"},"referencedDeclaration":3248,"src":"18946:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"}},"visibility":"internal"}],"id":4513,"initialValue":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4504,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"18998:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":4506,"indexExpression":{"id":4505,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4479,"src":"19017:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18998:31:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":4508,"indexExpression":{"id":4507,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4481,"src":"19030:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18998:43:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":4512,"indexExpression":{"baseExpression":{"id":4509,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"19042:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4511,"indexExpression":{"id":4510,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"19051:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19042:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18998:56:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"18946:108:18"},{"assignments":[4515],"declarations":[{"constant":false,"id":4515,"mutability":"mutable","name":"duration","nameLocation":"19076:8:18","nodeType":"VariableDeclaration","scope":4553,"src":"19068:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4514,"name":"uint256","nodeType":"ElementaryTypeName","src":"19068:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4541,"initialValue":{"components":[{"condition":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4516,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"19106:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19112:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"19106:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":4518,"name":"userActiveInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4503,"src":"19124:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4519,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19148:9:18","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":3235,"src":"19124:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19106:51:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4521,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19105:53:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19370:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19105:266:18","trueExpression":{"components":[{"condition":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4522,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"19184:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19190:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"19184:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":4524,"name":"userActiveInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4503,"src":"19202:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4525,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19226:9:18","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":3237,"src":"19202:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19184:51:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4527,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19183:53:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4530,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"19297:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19303:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"19297:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":4532,"name":"userActiveInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4503,"src":"19315:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4533,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19339:9:18","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":3235,"src":"19315:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19297:51:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4535,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19296:53:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19183:166:18","trueExpression":{"expression":{"id":4528,"name":"userActiveInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4503,"src":"19260:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4529,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19284:9:18","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":3237,"src":"19260:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4537,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19161:206:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4540,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19087:285:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"19068:304:18"},{"expression":{"id":4548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4542,"name":"balanceToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4490,"src":"19386:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4543,"name":"userActiveInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4503,"src":"19406:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4544,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19430:17:18","memberName":"insuranceFlowRate","nodeType":"MemberAccess","referencedDeclaration":3243,"src":"19406:41:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4545,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"19450:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19406:52:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4547,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19405:54:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19386:73:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4549,"nodeType":"ExpressionStatement","src":"19386:73:18"},{"expression":{"id":4551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"19473:3:18","subExpression":{"id":4550,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"19475:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4552,"nodeType":"ExpressionStatement","src":"19473:3:18"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4497,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"18912:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4498,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"18915:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18924:6:18","memberName":"length","nodeType":"MemberAccess","src":"18915:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18912:18:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4554,"initializationExpression":{"assignments":[4494],"declarations":[{"constant":false,"id":4494,"mutability":"mutable","name":"i","nameLocation":"18907:1:18","nodeType":"VariableDeclaration","scope":4554,"src":"18899:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4493,"name":"uint256","nodeType":"ElementaryTypeName","src":"18899:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4496,"initialValue":{"hexValue":"30","id":4495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18909:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18899:11:18"},"nodeType":"ForStatement","src":"18895:592:18"},{"expression":{"id":4555,"name":"balanceToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4490,"src":"19503:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4488,"id":4556,"nodeType":"Return","src":"19496:22:18"}]},"id":4558,"implemented":true,"kind":"function","modifiers":[],"name":"_calculateTotalFlowMade","nameLocation":"18694:23:18","nodeType":"FunctionDefinition","parameters":{"id":4485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4479,"mutability":"mutable","name":"userAddress","nameLocation":"18735:11:18","nodeType":"VariableDeclaration","scope":4558,"src":"18727:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4478,"name":"address","nodeType":"ElementaryTypeName","src":"18727:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4481,"mutability":"mutable","name":"categoryID","nameLocation":"18765:10:18","nodeType":"VariableDeclaration","scope":4558,"src":"18757:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4480,"name":"uint256","nodeType":"ElementaryTypeName","src":"18757:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4484,"mutability":"mutable","name":"activeID","nameLocation":"18802:8:18","nodeType":"VariableDeclaration","scope":4558,"src":"18785:25:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4482,"name":"uint256","nodeType":"ElementaryTypeName","src":"18785:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4483,"nodeType":"ArrayTypeName","src":"18785:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"18717:99:18"},"returnParameters":{"id":4488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4487,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4558,"src":"18839:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4486,"name":"uint256","nodeType":"ElementaryTypeName","src":"18839:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18838:9:18"},"scope":4809,"src":"18685:840:18","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[5621],"body":{"id":4651,"nodeType":"Block","src":"19684:816:18","statements":[{"assignments":[4570],"declarations":[{"constant":false,"id":4570,"mutability":"mutable","name":"balanceToBePaid","nameLocation":"19702:15:18","nodeType":"VariableDeclaration","scope":4651,"src":"19694:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4569,"name":"uint256","nodeType":"ElementaryTypeName","src":"19694:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4572,"initialValue":{"hexValue":"30","id":4571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19720:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"19694:27:18"},{"assignments":[4577],"declarations":[{"constant":false,"id":4577,"mutability":"mutable","name":"activeID","nameLocation":"19748:8:18","nodeType":"VariableDeclaration","scope":4651,"src":"19731:25:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4575,"name":"uint256","nodeType":"ElementaryTypeName","src":"19731:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4576,"nodeType":"ArrayTypeName","src":"19731:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":4586,"initialValue":{"arguments":[{"id":4579,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4561,"src":"19781:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4580,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4563,"src":"19794:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":4583,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4563,"src":"19848:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4581,"name":"_insuranceRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3233,"src":"19806:18:18","typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$5916","typeString":"contract IInsuranceRegistry"}},"id":4582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19825:22:18","memberName":"getLatestSubCategoryID","nodeType":"MemberAccess","referencedDeclaration":5895,"src":"19806:41:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":4584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19806:53:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4578,"name":"findActivePremiumCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"19759:21:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (address,uint256,uint256) view returns (uint256[] memory)"}},"id":4585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19759:101:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"19731:129:18"},{"body":{"id":4647,"nodeType":"Block","src":"19907:555:18","statements":[{"assignments":[4597],"declarations":[{"constant":false,"id":4597,"mutability":"mutable","name":"userActiveInsuranceInfo","nameLocation":"19947:23:18","nodeType":"VariableDeclaration","scope":4647,"src":"19921:49:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"},"typeName":{"id":4596,"nodeType":"UserDefinedTypeName","pathNode":{"id":4595,"name":"UserInsuranceInfo","nameLocations":["19921:17:18"],"nodeType":"IdentifierPath","referencedDeclaration":3248,"src":"19921:17:18"},"referencedDeclaration":3248,"src":"19921:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"}},"visibility":"internal"}],"id":4607,"initialValue":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4598,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"19973:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":4600,"indexExpression":{"id":4599,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4561,"src":"19992:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19973:31:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":4602,"indexExpression":{"id":4601,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4563,"src":"20005:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19973:43:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":4606,"indexExpression":{"baseExpression":{"id":4603,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4577,"src":"20017:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4605,"indexExpression":{"id":4604,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4588,"src":"20026:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20017:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19973:56:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"19921:108:18"},{"assignments":[4609],"declarations":[{"constant":false,"id":4609,"mutability":"mutable","name":"duration","nameLocation":"20051:8:18","nodeType":"VariableDeclaration","scope":4647,"src":"20043:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4608,"name":"uint256","nodeType":"ElementaryTypeName","src":"20043:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4635,"initialValue":{"components":[{"condition":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4610,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"20081:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20087:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"20081:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":4612,"name":"userActiveInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4597,"src":"20099:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4613,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20123:9:18","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":3235,"src":"20099:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20081:51:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4615,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"20080:53:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20345:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"20080:266:18","trueExpression":{"components":[{"condition":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4616,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"20159:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20165:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"20159:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":4618,"name":"userActiveInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4597,"src":"20177:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4619,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20201:9:18","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":3237,"src":"20177:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20159:51:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4621,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"20158:53:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4624,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"20272:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20278:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"20272:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":4626,"name":"userActiveInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4597,"src":"20290:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4627,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20314:9:18","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":3235,"src":"20290:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20272:51:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4629,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"20271:53:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"20158:166:18","trueExpression":{"expression":{"id":4622,"name":"userActiveInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4597,"src":"20235:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4623,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20259:9:18","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":3237,"src":"20235:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4631,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"20136:206:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4634,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"20062:285:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"20043:304:18"},{"expression":{"id":4642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4636,"name":"balanceToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4570,"src":"20361:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4637,"name":"userActiveInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4597,"src":"20381:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4638,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20405:17:18","memberName":"insuranceFlowRate","nodeType":"MemberAccess","referencedDeclaration":3243,"src":"20381:41:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4639,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4609,"src":"20425:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20381:52:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4641,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"20380:54:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20361:73:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4643,"nodeType":"ExpressionStatement","src":"20361:73:18"},{"expression":{"id":4645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"20448:3:18","subExpression":{"id":4644,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4588,"src":"20450:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4646,"nodeType":"ExpressionStatement","src":"20448:3:18"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4591,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4588,"src":"19887:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4592,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4577,"src":"19890:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19899:6:18","memberName":"length","nodeType":"MemberAccess","src":"19890:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19887:18:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4648,"initializationExpression":{"assignments":[4588],"declarations":[{"constant":false,"id":4588,"mutability":"mutable","name":"i","nameLocation":"19882:1:18","nodeType":"VariableDeclaration","scope":4648,"src":"19874:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4587,"name":"uint256","nodeType":"ElementaryTypeName","src":"19874:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4590,"initialValue":{"hexValue":"30","id":4589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19884:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"19874:11:18"},"nodeType":"ForStatement","src":"19870:592:18"},{"expression":{"id":4649,"name":"balanceToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4570,"src":"20478:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4568,"id":4650,"nodeType":"Return","src":"20471:22:18"}]},"documentation":{"id":4559,"nodeType":"StructuredDocumentation","src":"19531:12:18","text":"DURATION"},"functionSelector":"4e94c048","id":4652,"implemented":true,"kind":"function","modifiers":[],"name":"calculateTotalFlowMade","nameLocation":"19557:22:18","nodeType":"FunctionDefinition","overrides":{"id":4565,"nodeType":"OverrideSpecifier","overrides":[],"src":"19658:8:18"},"parameters":{"id":4564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4561,"mutability":"mutable","name":"userAddress","nameLocation":"19597:11:18","nodeType":"VariableDeclaration","scope":4652,"src":"19589:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4560,"name":"address","nodeType":"ElementaryTypeName","src":"19589:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4563,"mutability":"mutable","name":"categoryID","nameLocation":"19627:10:18","nodeType":"VariableDeclaration","scope":4652,"src":"19619:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4562,"name":"uint256","nodeType":"ElementaryTypeName","src":"19619:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19579:64:18"},"returnParameters":{"id":4568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4567,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4652,"src":"19675:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4566,"name":"uint256","nodeType":"ElementaryTypeName","src":"19675:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19674:9:18"},"scope":4809,"src":"19548:952:18","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[5639],"body":{"id":4673,"nodeType":"Block","src":"20680:92:18","statements":[{"expression":{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4664,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"20697:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":4666,"indexExpression":{"id":4665,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4654,"src":"20716:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20697:31:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":4668,"indexExpression":{"id":4667,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4656,"src":"20729:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20697:43:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":4670,"indexExpression":{"id":4669,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4658,"src":"20741:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20697:58:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"id":4671,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20756:9:18","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":3237,"src":"20697:68:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4663,"id":4672,"nodeType":"Return","src":"20690:75:18"}]},"functionSelector":"c392e850","id":4674,"implemented":true,"kind":"function","modifiers":[],"name":"getUserInsuranceValidTillInfo","nameLocation":"20516:29:18","nodeType":"FunctionDefinition","overrides":{"id":4660,"nodeType":"OverrideSpecifier","overrides":[],"src":"20654:8:18"},"parameters":{"id":4659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4654,"mutability":"mutable","name":"userAddress","nameLocation":"20563:11:18","nodeType":"VariableDeclaration","scope":4674,"src":"20555:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4653,"name":"address","nodeType":"ElementaryTypeName","src":"20555:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4656,"mutability":"mutable","name":"categoryID","nameLocation":"20593:10:18","nodeType":"VariableDeclaration","scope":4674,"src":"20585:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4655,"name":"uint256","nodeType":"ElementaryTypeName","src":"20585:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4658,"mutability":"mutable","name":"subCategoryID","nameLocation":"20622:13:18","nodeType":"VariableDeclaration","scope":4674,"src":"20614:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4657,"name":"uint256","nodeType":"ElementaryTypeName","src":"20614:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20545:96:18"},"returnParameters":{"id":4663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4662,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4674,"src":"20671:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4661,"name":"uint256","nodeType":"ElementaryTypeName","src":"20671:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20670:9:18"},"scope":4809,"src":"20507:265:18","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[5650],"body":{"id":4695,"nodeType":"Block","src":"20943:90:18","statements":[{"expression":{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4686,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"20960:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":4688,"indexExpression":{"id":4687,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4676,"src":"20979:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20960:31:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":4690,"indexExpression":{"id":4689,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4678,"src":"20992:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20960:43:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":4692,"indexExpression":{"id":4691,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4680,"src":"21004:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20960:58:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"id":4693,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21019:7:18","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":3247,"src":"20960:66:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4685,"id":4694,"nodeType":"Return","src":"20953:73:18"}]},"functionSelector":"81280d2b","id":4696,"implemented":true,"kind":"function","modifiers":[],"name":"getUserInsuranceStatus","nameLocation":"20787:22:18","nodeType":"FunctionDefinition","overrides":{"id":4682,"nodeType":"OverrideSpecifier","overrides":[],"src":"20920:8:18"},"parameters":{"id":4681,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4676,"mutability":"mutable","name":"userAddress","nameLocation":"20827:11:18","nodeType":"VariableDeclaration","scope":4696,"src":"20819:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4675,"name":"address","nodeType":"ElementaryTypeName","src":"20819:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4678,"mutability":"mutable","name":"categoryID","nameLocation":"20857:10:18","nodeType":"VariableDeclaration","scope":4696,"src":"20849:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4677,"name":"uint256","nodeType":"ElementaryTypeName","src":"20849:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4680,"mutability":"mutable","name":"subCategoryID","nameLocation":"20886:13:18","nodeType":"VariableDeclaration","scope":4696,"src":"20878:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4679,"name":"uint256","nodeType":"ElementaryTypeName","src":"20878:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20809:96:18"},"returnParameters":{"id":4685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4684,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4696,"src":"20937:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4683,"name":"bool","nodeType":"ElementaryTypeName","src":"20937:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"20936:6:18"},"scope":4809,"src":"20778:255:18","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[5671],"body":{"id":4743,"nodeType":"Block","src":"21247:415:18","statements":[{"assignments":[4720],"declarations":[{"constant":false,"id":4720,"mutability":"mutable","name":"userInsuranceInfo","nameLocation":"21282:17:18","nodeType":"VariableDeclaration","scope":4743,"src":"21257:42:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_memory_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"},"typeName":{"id":4719,"nodeType":"UserDefinedTypeName","pathNode":{"id":4718,"name":"UserInsuranceInfo","nameLocations":["21257:17:18"],"nodeType":"IdentifierPath","referencedDeclaration":3248,"src":"21257:17:18"},"referencedDeclaration":3248,"src":"21257:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"}},"visibility":"internal"}],"id":4728,"initialValue":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4721,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"21302:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":4723,"indexExpression":{"id":4722,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4698,"src":"21321:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21302:31:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":4725,"indexExpression":{"id":4724,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4700,"src":"21334:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21302:43:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":4727,"indexExpression":{"id":4726,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4702,"src":"21346:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21302:58:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"21257:103:18"},{"expression":{"components":[{"expression":{"id":4729,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4720,"src":"21391:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_memory_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo memory"}},"id":4730,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21409:13:18","memberName":"insuredAmount","nodeType":"MemberAccess","referencedDeclaration":3239,"src":"21391:31:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4731,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4720,"src":"21437:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_memory_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo memory"}},"id":4732,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21455:17:18","memberName":"insuranceFlowRate","nodeType":"MemberAccess","referencedDeclaration":3243,"src":"21437:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4733,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4720,"src":"21486:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_memory_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo memory"}},"id":4734,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21504:16:18","memberName":"registrationTime","nodeType":"MemberAccess","referencedDeclaration":3241,"src":"21486:34:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4735,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4720,"src":"21534:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_memory_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo memory"}},"id":4736,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21552:9:18","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":3235,"src":"21534:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4737,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4720,"src":"21575:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_memory_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo memory"}},"id":4738,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21593:9:18","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":3237,"src":"21575:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4739,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4720,"src":"21616:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_memory_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo memory"}},"id":4740,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21634:7:18","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":3247,"src":"21616:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4741,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21377:278:18","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_bool_$","typeString":"tuple(uint256,uint256,uint256,uint256,uint256,bool)"}},"functionReturnParameters":4717,"id":4742,"nodeType":"Return","src":"21370:285:18"}]},"functionSelector":"88295fb2","id":4744,"implemented":true,"kind":"function","modifiers":[],"name":"getUserInsuranceInfo","nameLocation":"21048:20:18","nodeType":"FunctionDefinition","overrides":{"id":4704,"nodeType":"OverrideSpecifier","overrides":[],"src":"21179:8:18"},"parameters":{"id":4703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4698,"mutability":"mutable","name":"userAddress","nameLocation":"21086:11:18","nodeType":"VariableDeclaration","scope":4744,"src":"21078:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4697,"name":"address","nodeType":"ElementaryTypeName","src":"21078:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4700,"mutability":"mutable","name":"categoryID","nameLocation":"21116:10:18","nodeType":"VariableDeclaration","scope":4744,"src":"21108:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4699,"name":"uint256","nodeType":"ElementaryTypeName","src":"21108:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4702,"mutability":"mutable","name":"subCategoryID","nameLocation":"21145:13:18","nodeType":"VariableDeclaration","scope":4744,"src":"21137:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4701,"name":"uint256","nodeType":"ElementaryTypeName","src":"21137:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21068:96:18"},"returnParameters":{"id":4717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4706,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4744,"src":"21196:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4705,"name":"uint256","nodeType":"ElementaryTypeName","src":"21196:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4708,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4744,"src":"21205:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4707,"name":"uint256","nodeType":"ElementaryTypeName","src":"21205:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4710,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4744,"src":"21214:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4709,"name":"uint256","nodeType":"ElementaryTypeName","src":"21214:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4712,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4744,"src":"21223:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4711,"name":"uint256","nodeType":"ElementaryTypeName","src":"21223:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4714,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4744,"src":"21232:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4713,"name":"uint256","nodeType":"ElementaryTypeName","src":"21232:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4716,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4744,"src":"21241:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4715,"name":"bool","nodeType":"ElementaryTypeName","src":"21241:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"21195:51:18"},"scope":4809,"src":"21039:623:18","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[5680],"body":{"id":4767,"nodeType":"Block","src":"21790:209:18","statements":[{"assignments":[4756],"declarations":[{"constant":false,"id":4756,"mutability":"mutable","name":"userGlobalInsuranceInfo","nameLocation":"21831:23:18","nodeType":"VariableDeclaration","scope":4767,"src":"21800:54:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$3255_memory_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo"},"typeName":{"id":4755,"nodeType":"UserDefinedTypeName","pathNode":{"id":4754,"name":"UserGlobalInsuranceInfo","nameLocations":["21800:23:18"],"nodeType":"IdentifierPath","referencedDeclaration":3255,"src":"21800:23:18"},"referencedDeclaration":3255,"src":"21800:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$3255_storage_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo"}},"visibility":"internal"}],"id":4760,"initialValue":{"baseExpression":{"id":4757,"name":"usersGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3261,"src":"21857:24:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserGlobalInsuranceInfo_$3255_storage_$","typeString":"mapping(address => struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage ref)"}},"id":4759,"indexExpression":{"id":4758,"name":"_userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4746,"src":"21882:12:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21857:38:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$3255_storage","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"21800:95:18"},{"expression":{"components":[{"expression":{"id":4761,"name":"userGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4756,"src":"21913:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$3255_memory_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo memory"}},"id":4762,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21937:19:18","memberName":"insuranceStreamRate","nodeType":"MemberAccess","referencedDeclaration":3252,"src":"21913:43:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4763,"name":"userGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4756,"src":"21958:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$3255_memory_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo memory"}},"id":4764,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21982:9:18","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":3250,"src":"21958:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4765,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21912:80:18","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":4753,"id":4766,"nodeType":"Return","src":"21905:87:18"}]},"functionSelector":"ec249164","id":4768,"implemented":true,"kind":"function","modifiers":[],"name":"getGlobalUserInsuranceInfo","nameLocation":"21677:26:18","nodeType":"FunctionDefinition","overrides":{"id":4748,"nodeType":"OverrideSpecifier","overrides":[],"src":"21754:8:18"},"parameters":{"id":4747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4746,"mutability":"mutable","name":"_userAddress","nameLocation":"21721:12:18","nodeType":"VariableDeclaration","scope":4768,"src":"21713:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4745,"name":"address","nodeType":"ElementaryTypeName","src":"21713:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"21703:36:18"},"returnParameters":{"id":4753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4750,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4768,"src":"21772:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4749,"name":"uint256","nodeType":"ElementaryTypeName","src":"21772:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4752,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4768,"src":"21781:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4751,"name":"uint256","nodeType":"ElementaryTypeName","src":"21781:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21771:18:18"},"scope":4809,"src":"21668:331:18","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[5687],"body":{"id":4786,"nodeType":"Block","src":"22123:171:18","statements":[{"assignments":[4778],"declarations":[{"constant":false,"id":4778,"mutability":"mutable","name":"userGlobalInsuranceInfo","nameLocation":"22163:23:18","nodeType":"VariableDeclaration","scope":4786,"src":"22132:54:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$3255_memory_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo"},"typeName":{"id":4777,"nodeType":"UserDefinedTypeName","pathNode":{"id":4776,"name":"UserGlobalInsuranceInfo","nameLocations":["22132:23:18"],"nodeType":"IdentifierPath","referencedDeclaration":3255,"src":"22132:23:18"},"referencedDeclaration":3255,"src":"22132:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$3255_storage_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo"}},"visibility":"internal"}],"id":4782,"initialValue":{"baseExpression":{"id":4779,"name":"usersGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3261,"src":"22189:24:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserGlobalInsuranceInfo_$3255_storage_$","typeString":"mapping(address => struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage ref)"}},"id":4781,"indexExpression":{"id":4780,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4770,"src":"22214:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22189:37:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$3255_storage","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"22132:94:18"},{"expression":{"expression":{"id":4783,"name":"userGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4778,"src":"22243:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$3255_memory_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo memory"}},"id":4784,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"22267:19:18","memberName":"globalInsuranceCost","nodeType":"MemberAccess","referencedDeclaration":3254,"src":"22243:43:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4775,"id":4785,"nodeType":"Return","src":"22236:50:18"}]},"functionSelector":"42f6b8a7","id":4787,"implemented":true,"kind":"function","modifiers":[],"name":"getGlobalUserInsurancePremiumCost","nameLocation":"22014:33:18","nodeType":"FunctionDefinition","overrides":{"id":4772,"nodeType":"OverrideSpecifier","overrides":[],"src":"22097:8:18"},"parameters":{"id":4771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4770,"mutability":"mutable","name":"userAddress","nameLocation":"22065:11:18","nodeType":"VariableDeclaration","scope":4787,"src":"22057:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4769,"name":"address","nodeType":"ElementaryTypeName","src":"22057:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"22047:35:18"},"returnParameters":{"id":4775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4774,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4787,"src":"22114:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4773,"name":"uint256","nodeType":"ElementaryTypeName","src":"22114:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22113:9:18"},"scope":4809,"src":"22005:289:18","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4807,"nodeType":"Block","src":"22457:96:18","statements":[{"expression":{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4798,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"22474:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":4800,"indexExpression":{"id":4799,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4789,"src":"22493:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22474:31:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":4802,"indexExpression":{"id":4801,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4791,"src":"22506:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22474:43:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$3248_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":4804,"indexExpression":{"id":4803,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4793,"src":"22518:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22474:58:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$3248_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"id":4805,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"22533:13:18","memberName":"insuredAmount","nodeType":"MemberAccess","referencedDeclaration":3239,"src":"22474:72:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4797,"id":4806,"nodeType":"Return","src":"22467:79:18"}]},"functionSelector":"6b6d105e","id":4808,"implemented":true,"kind":"function","modifiers":[],"name":"getUserInsuredAmount","nameLocation":"22309:20:18","nodeType":"FunctionDefinition","parameters":{"id":4794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4789,"mutability":"mutable","name":"userAddress","nameLocation":"22347:11:18","nodeType":"VariableDeclaration","scope":4808,"src":"22339:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4788,"name":"address","nodeType":"ElementaryTypeName","src":"22339:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4791,"mutability":"mutable","name":"categoryID","nameLocation":"22377:10:18","nodeType":"VariableDeclaration","scope":4808,"src":"22369:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4790,"name":"uint256","nodeType":"ElementaryTypeName","src":"22369:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4793,"mutability":"mutable","name":"subCategoryID","nameLocation":"22406:13:18","nodeType":"VariableDeclaration","scope":4808,"src":"22398:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4792,"name":"uint256","nodeType":"ElementaryTypeName","src":"22398:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22329:96:18"},"returnParameters":{"id":4797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4796,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4808,"src":"22448:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4795,"name":"uint256","nodeType":"ElementaryTypeName","src":"22448:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22447:9:18"},"scope":4809,"src":"22300:253:18","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4810,"src":"620:21935:18","usedErrors":[2606,5552,5554,5556,5558,5560,5562,5564]}],"src":"37:22518:18"},"id":18},"contracts/core/staking/GENZStaking.sol":{"ast":{"absolutePath":"contracts/core/staking/GENZStaking.sol","exportedSymbols":{"AccessControlUpgradeable":[335],"AddressUpgradeable":[1459],"BaseUpgradeablePausable":[2699],"BaseUpgradeablePausable__ZeroAddressError":[2606],"Constants":[2728],"ContextUpgradeable":[1501],"ERC165Upgradeable":[1720],"GENZStaking":[5520],"GENZStaking__NotAMinimumStakeAmountError":[4820],"GENZStaking__TransactionFailedError":[4818],"IAccessControlUpgradeable":[408],"IBuyGENZ":[5542],"IERC165Upgradeable":[1732],"IERC20PermitUpgradeable":[894],"IERC20Upgradeable":[858],"IGENZStaking":[5767],"Initializable":[580],"MathUpgradeable":[2597],"PausableUpgradeable":[707],"ReentrancyGuardUpgradeable":[780],"SafeERC20Upgradeable":[1175],"StringsUpgradeable":[1676]},"id":5521,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":4811,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"37:23:19"},{"absolutePath":"contracts/interfaces/IBuyGENZ.sol","file":"./../../interfaces/IBuyGENZ.sol","id":4812,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5521,"sourceUnit":5543,"src":"181:41:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IGENZStaking.sol","file":"./../../interfaces/IGENZStaking.sol","id":4813,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5521,"sourceUnit":5768,"src":"223:45:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol","id":4814,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5521,"sourceUnit":412,"src":"269:78:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","id":4815,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5521,"sourceUnit":1176,"src":"382:88:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/BaseUpgradeablePausable.sol","file":"./../../BaseUpgradeablePausable.sol","id":4816,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5521,"sourceUnit":2700,"src":"505:45:19","symbolAliases":[],"unitAlias":""},{"errorSelector":"71a61d9d","id":4818,"name":"GENZStaking__TransactionFailedError","nameLocation":"558:35:19","nodeType":"ErrorDefinition","parameters":{"id":4817,"nodeType":"ParameterList","parameters":[],"src":"593:2:19"},"src":"552:44:19"},{"errorSelector":"ad401403","id":4820,"name":"GENZStaking__NotAMinimumStakeAmountError","nameLocation":"603:40:19","nodeType":"ErrorDefinition","parameters":{"id":4819,"nodeType":"ParameterList","parameters":[],"src":"643:2:19"},"src":"597:49:19"},{"abstract":false,"baseContracts":[{"baseName":{"id":4822,"name":"IGENZStaking","nameLocations":["789:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":5767,"src":"789:12:19"},"id":4823,"nodeType":"InheritanceSpecifier","src":"789:12:19"},{"baseName":{"id":4824,"name":"BaseUpgradeablePausable","nameLocations":["803:23:19"],"nodeType":"IdentifierPath","referencedDeclaration":2699,"src":"803:23:19"},"id":4825,"nodeType":"InheritanceSpecifier","src":"803:23:19"}],"canonicalName":"GENZStaking","contractDependencies":[],"contractKind":"contract","documentation":{"id":4821,"nodeType":"StructuredDocumentation","src":"648:117:19","text":"NOTE: Staking tokens would be used for activities like flash loans \n to generate rewards for the staked users"},"fullyImplemented":true,"id":5520,"linearizedBaseContracts":[5520,2699,780,335,1720,1732,408,707,1501,580,5767],"name":"GENZStaking","nameLocation":"774:11:19","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":4827,"mutability":"mutable","name":"_currVersion","nameLocation":"849:12:19","nodeType":"VariableDeclaration","scope":5520,"src":"833:28:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4826,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":4829,"mutability":"mutable","name":"_minStakeValue","nameLocation":"883:14:19","nodeType":"VariableDeclaration","scope":5520,"src":"867:30:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4828,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":4831,"mutability":"mutable","name":"_withdrawTimer","nameLocation":"919:14:19","nodeType":"VariableDeclaration","scope":5520,"src":"903:30:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4830,"name":"uint256","nodeType":"ElementaryTypeName","src":"903:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"baseFunctions":[5761],"constant":false,"functionSelector":"b0e31b2d","id":4834,"mutability":"mutable","name":"totalTokensStaked","nameLocation":"963:17:19","nodeType":"VariableDeclaration","overrides":{"id":4833,"nodeType":"OverrideSpecifier","overrides":[],"src":"954:8:19"},"scope":5520,"src":"939:41:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4832,"name":"uint256","nodeType":"ElementaryTypeName","src":"939:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"id":4837,"mutability":"immutable","name":"_tokenGENZ","nameLocation":"1022:10:19","nodeType":"VariableDeclaration","scope":5520,"src":"986:46:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},"typeName":{"id":4836,"nodeType":"UserDefinedTypeName","pathNode":{"id":4835,"name":"IERC20Upgradeable","nameLocations":["986:17:19"],"nodeType":"IdentifierPath","referencedDeclaration":858,"src":"986:17:19"},"referencedDeclaration":858,"src":"986:17:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"visibility":"private"},{"global":false,"id":4841,"libraryName":{"id":4838,"name":"SafeERC20Upgradeable","nameLocations":["1045:20:19"],"nodeType":"IdentifierPath","referencedDeclaration":1175,"src":"1045:20:19"},"nodeType":"UsingForDirective","src":"1039:49:19","typeName":{"id":4840,"nodeType":"UserDefinedTypeName","pathNode":{"id":4839,"name":"IERC20Upgradeable","nameLocations":["1070:17:19"],"nodeType":"IdentifierPath","referencedDeclaration":858,"src":"1070:17:19"},"referencedDeclaration":858,"src":"1070:17:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}}},{"canonicalName":"GENZStaking.VersionableInfo","id":4850,"members":[{"constant":false,"id":4843,"mutability":"mutable","name":"startTime","nameLocation":"1199:9:19","nodeType":"VariableDeclaration","scope":4850,"src":"1191:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4842,"name":"uint256","nodeType":"ElementaryTypeName","src":"1191:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4845,"mutability":"mutable","name":"endTime","nameLocation":"1226:7:19","nodeType":"VariableDeclaration","scope":4850,"src":"1218:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4844,"name":"uint256","nodeType":"ElementaryTypeName","src":"1218:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4847,"mutability":"mutable","name":"distributedAmount","nameLocation":"1251:17:19","nodeType":"VariableDeclaration","scope":4850,"src":"1243:25:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4846,"name":"uint256","nodeType":"ElementaryTypeName","src":"1243:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4849,"mutability":"mutable","name":"tokenDistributed","nameLocation":"1286:16:19","nodeType":"VariableDeclaration","scope":4850,"src":"1278:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4848,"name":"uint256","nodeType":"ElementaryTypeName","src":"1278:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"VersionableInfo","nameLocation":"1165:15:19","nodeType":"StructDefinition","scope":5520,"src":"1158:151:19","visibility":"public"},{"canonicalName":"GENZStaking.UserInfo","id":4859,"members":[{"constant":false,"id":4852,"mutability":"mutable","name":"hasStaked","nameLocation":"1346:9:19","nodeType":"VariableDeclaration","scope":4859,"src":"1341:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4851,"name":"bool","nodeType":"ElementaryTypeName","src":"1341:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4854,"mutability":"mutable","name":"stakedTokens","nameLocation":"1373:12:19","nodeType":"VariableDeclaration","scope":4859,"src":"1365:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4853,"name":"uint256","nodeType":"ElementaryTypeName","src":"1365:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4856,"mutability":"mutable","name":"startVersionBlock","nameLocation":"1403:17:19","nodeType":"VariableDeclaration","scope":4859,"src":"1395:25:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4855,"name":"uint256","nodeType":"ElementaryTypeName","src":"1395:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4858,"mutability":"mutable","name":"claimedRewards","nameLocation":"1439:14:19","nodeType":"VariableDeclaration","scope":4859,"src":"1431:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4857,"name":"uint256","nodeType":"ElementaryTypeName","src":"1431:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"UserInfo","nameLocation":"1322:8:19","nodeType":"StructDefinition","scope":5520,"src":"1315:145:19","visibility":"public"},{"canonicalName":"GENZStaking.UserBalanceInfo","id":4864,"members":[{"constant":false,"id":4861,"mutability":"mutable","name":"stakedTokens","nameLocation":"1507:12:19","nodeType":"VariableDeclaration","scope":4864,"src":"1499:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4860,"name":"uint256","nodeType":"ElementaryTypeName","src":"1499:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4863,"mutability":"mutable","name":"withdrawnTokens","nameLocation":"1537:15:19","nodeType":"VariableDeclaration","scope":4864,"src":"1529:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4862,"name":"uint256","nodeType":"ElementaryTypeName","src":"1529:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"UserBalanceInfo","nameLocation":"1473:15:19","nodeType":"StructDefinition","scope":5520,"src":"1466:93:19","visibility":"public"},{"canonicalName":"GENZStaking.WithdrawWaitPeriod","id":4871,"members":[{"constant":false,"id":4866,"mutability":"mutable","name":"ifTimerStarted","nameLocation":"1605:14:19","nodeType":"VariableDeclaration","scope":4871,"src":"1600:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4865,"name":"bool","nodeType":"ElementaryTypeName","src":"1600:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4868,"mutability":"mutable","name":"GENZTokenCount","nameLocation":"1637:14:19","nodeType":"VariableDeclaration","scope":4871,"src":"1629:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4867,"name":"uint256","nodeType":"ElementaryTypeName","src":"1629:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4870,"mutability":"mutable","name":"canWithdrawTime","nameLocation":"1669:15:19","nodeType":"VariableDeclaration","scope":4871,"src":"1661:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4869,"name":"uint256","nodeType":"ElementaryTypeName","src":"1661:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"WithdrawWaitPeriod","nameLocation":"1572:18:19","nodeType":"StructDefinition","scope":5520,"src":"1565:126:19","visibility":"public"},{"constant":false,"id":4876,"mutability":"mutable","name":"checkWaitTime","nameLocation":"1745:13:19","nodeType":"VariableDeclaration","scope":5520,"src":"1697:61:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_WithdrawWaitPeriod_$4871_storage_$","typeString":"mapping(address => struct GENZStaking.WithdrawWaitPeriod)"},"typeName":{"id":4875,"keyType":{"id":4872,"name":"address","nodeType":"ElementaryTypeName","src":"1706:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1697:39:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_WithdrawWaitPeriod_$4871_storage_$","typeString":"mapping(address => struct GENZStaking.WithdrawWaitPeriod)"},"valueType":{"id":4874,"nodeType":"UserDefinedTypeName","pathNode":{"id":4873,"name":"WithdrawWaitPeriod","nameLocations":["1717:18:19"],"nodeType":"IdentifierPath","referencedDeclaration":4871,"src":"1717:18:19"},"referencedDeclaration":4871,"src":"1717:18:19","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4871_storage_ptr","typeString":"struct GENZStaking.WithdrawWaitPeriod"}}},"visibility":"private"},{"constant":false,"id":4881,"mutability":"mutable","name":"usersInfo","nameLocation":"1802:9:19","nodeType":"VariableDeclaration","scope":5520,"src":"1765:46:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserInfo_$4859_storage_$","typeString":"mapping(address => struct GENZStaking.UserInfo)"},"typeName":{"id":4880,"keyType":{"id":4877,"name":"address","nodeType":"ElementaryTypeName","src":"1773:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1765:28:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserInfo_$4859_storage_$","typeString":"mapping(address => struct GENZStaking.UserInfo)"},"valueType":{"id":4879,"nodeType":"UserDefinedTypeName","pathNode":{"id":4878,"name":"UserInfo","nameLocations":["1784:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":4859,"src":"1784:8:19"},"referencedDeclaration":4859,"src":"1784:8:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4859_storage_ptr","typeString":"struct GENZStaking.UserInfo"}}},"visibility":"private"},{"constant":false,"documentation":{"id":4882,"nodeType":"StructuredDocumentation","src":"1818:32:19","text":"versionID => VersionableInfo"},"id":4887,"mutability":"mutable","name":"versionableInfos","nameLocation":"1899:16:19","nodeType":"VariableDeclaration","scope":5520,"src":"1855:60:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VersionableInfo_$4850_storage_$","typeString":"mapping(uint256 => struct GENZStaking.VersionableInfo)"},"typeName":{"id":4886,"keyType":{"id":4883,"name":"uint256","nodeType":"ElementaryTypeName","src":"1863:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1855:35:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VersionableInfo_$4850_storage_$","typeString":"mapping(uint256 => struct GENZStaking.VersionableInfo)"},"valueType":{"id":4885,"nodeType":"UserDefinedTypeName","pathNode":{"id":4884,"name":"VersionableInfo","nameLocations":["1874:15:19"],"nodeType":"IdentifierPath","referencedDeclaration":4850,"src":"1874:15:19"},"referencedDeclaration":4850,"src":"1874:15:19","typeDescriptions":{"typeIdentifier":"t_struct$_VersionableInfo_$4850_storage_ptr","typeString":"struct GENZStaking.VersionableInfo"}}},"visibility":"private"},{"constant":false,"documentation":{"id":4888,"nodeType":"StructuredDocumentation","src":"1922:47:19","text":"userAddress => versionID => UserBalanceInfo"},"id":4895,"mutability":"mutable","name":"usersBalanceInfo","nameLocation":"2038:16:19","nodeType":"VariableDeclaration","scope":5520,"src":"1974:80:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4864_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GENZStaking.UserBalanceInfo))"},"typeName":{"id":4894,"keyType":{"id":4889,"name":"address","nodeType":"ElementaryTypeName","src":"1982:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1974:55:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4864_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GENZStaking.UserBalanceInfo))"},"valueType":{"id":4893,"keyType":{"id":4890,"name":"uint256","nodeType":"ElementaryTypeName","src":"2001:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1993:35:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4864_storage_$","typeString":"mapping(uint256 => struct GENZStaking.UserBalanceInfo)"},"valueType":{"id":4892,"nodeType":"UserDefinedTypeName","pathNode":{"id":4891,"name":"UserBalanceInfo","nameLocations":["2012:15:19"],"nodeType":"IdentifierPath","referencedDeclaration":4864,"src":"2012:15:19"},"referencedDeclaration":4864,"src":"2012:15:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4864_storage_ptr","typeString":"struct GENZStaking.UserBalanceInfo"}}}},"visibility":"private"},{"body":{"id":4919,"nodeType":"Block","src":"2207:154:19","statements":[{"expression":{"id":4905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4903,"name":"_minStakeValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4829,"src":"2217:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31653138","id":4904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2234:4:19","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"2217:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4906,"nodeType":"ExpressionStatement","src":"2217:21:19"},{"expression":{"id":4911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4907,"name":"_withdrawTimer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4831,"src":"2248:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4908,"name":"timeInDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4900,"src":"2265:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31","id":4909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2278:9:19","subdenomination":"minutes","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"1"},"src":"2265:22:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2248:39:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4912,"nodeType":"ExpressionStatement","src":"2248:39:19"},{"expression":{"id":4917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4913,"name":"_tokenGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4837,"src":"2297:10:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4915,"name":"tokenAddressGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4898,"src":"2328:16:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4914,"name":"IERC20Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":858,"src":"2310:17:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Upgradeable_$858_$","typeString":"type(contract IERC20Upgradeable)"}},"id":4916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2310:35:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"src":"2297:48:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":4918,"nodeType":"ExpressionStatement","src":"2297:48:19"}]},"documentation":{"id":4896,"nodeType":"StructuredDocumentation","src":"2061:60:19","text":"[PRODUCTION TODO: _withdrawTimer = timeInDays * 1 days;]"},"id":4920,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4898,"mutability":"mutable","name":"tokenAddressGENZ","nameLocation":"2155:16:19","nodeType":"VariableDeclaration","scope":4920,"src":"2147:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4897,"name":"address","nodeType":"ElementaryTypeName","src":"2147:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4900,"mutability":"mutable","name":"timeInDays","nameLocation":"2190:10:19","nodeType":"VariableDeclaration","scope":4920,"src":"2182:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4899,"name":"uint256","nodeType":"ElementaryTypeName","src":"2182:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2137:69:19"},"returnParameters":{"id":4902,"nodeType":"ParameterList","parameters":[],"src":"2207:0:19"},"scope":5520,"src":"2126:235:19","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4928,"nodeType":"Block","src":"2403:25:19","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4925,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"2413:6:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2413:8:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4927,"nodeType":"ExpressionStatement","src":"2413:8:19"}]},"functionSelector":"8456cb59","id":4929,"implemented":true,"kind":"function","modifiers":[{"id":4923,"kind":"modifierInvocation","modifierName":{"id":4922,"name":"onlyAdmin","nameLocations":["2393:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":2624,"src":"2393:9:19"},"nodeType":"ModifierInvocation","src":"2393:9:19"}],"name":"pause","nameLocation":"2376:5:19","nodeType":"FunctionDefinition","parameters":{"id":4921,"nodeType":"ParameterList","parameters":[],"src":"2381:2:19"},"returnParameters":{"id":4924,"nodeType":"ParameterList","parameters":[],"src":"2403:0:19"},"scope":5520,"src":"2367:61:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4937,"nodeType":"Block","src":"2472:27:19","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4934,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"2482:8:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2482:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4936,"nodeType":"ExpressionStatement","src":"2482:10:19"}]},"functionSelector":"3f4ba83a","id":4938,"implemented":true,"kind":"function","modifiers":[{"id":4932,"kind":"modifierInvocation","modifierName":{"id":4931,"name":"onlyAdmin","nameLocations":["2462:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":2624,"src":"2462:9:19"},"nodeType":"ModifierInvocation","src":"2462:9:19"}],"name":"unpause","nameLocation":"2443:7:19","nodeType":"FunctionDefinition","parameters":{"id":4930,"nodeType":"ParameterList","parameters":[],"src":"2450:2:19"},"returnParameters":{"id":4933,"nodeType":"ParameterList","parameters":[],"src":"2472:0:19"},"scope":5520,"src":"2434:65:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4953,"nodeType":"Block","src":"2573:84:19","statements":[{"expression":{"id":4947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4945,"name":"_minStakeValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4829,"src":"2583:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4946,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4940,"src":"2600:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2583:22:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4948,"nodeType":"ExpressionStatement","src":"2583:22:19"},{"eventCall":{"arguments":[{"id":4950,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4940,"src":"2644:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4949,"name":"UpdatedMinStakingAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5723,"src":"2620:23:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2620:30:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4952,"nodeType":"EmitStatement","src":"2615:35:19"}]},"functionSelector":"77539417","id":4954,"implemented":true,"kind":"function","modifiers":[{"id":4943,"kind":"modifierInvocation","modifierName":{"id":4942,"name":"onlyAdmin","nameLocations":["2563:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":2624,"src":"2563:9:19"},"nodeType":"ModifierInvocation","src":"2563:9:19"}],"name":"updateMinimumStakeAmount","nameLocation":"2514:24:19","nodeType":"FunctionDefinition","parameters":{"id":4941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4940,"mutability":"mutable","name":"value","nameLocation":"2547:5:19","nodeType":"VariableDeclaration","scope":4954,"src":"2539:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4939,"name":"uint256","nodeType":"ElementaryTypeName","src":"2539:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2538:15:19"},"returnParameters":{"id":4944,"nodeType":"ParameterList","parameters":[],"src":"2573:0:19"},"scope":5520,"src":"2505:152:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4972,"nodeType":"Block","src":"2797:109:19","statements":[{"expression":{"id":4966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4962,"name":"_withdrawTimer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4831,"src":"2807:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4963,"name":"timeInMinutes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4957,"src":"2824:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31","id":4964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2840:9:19","subdenomination":"minutes","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"1"},"src":"2824:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2807:42:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4967,"nodeType":"ExpressionStatement","src":"2807:42:19"},{"eventCall":{"arguments":[{"id":4969,"name":"timeInMinutes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4957,"src":"2885:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4968,"name":"UpdatedWithdrawTimer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5719,"src":"2864:20:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2864:35:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4971,"nodeType":"EmitStatement","src":"2859:40:19"}]},"documentation":{"id":4955,"nodeType":"StructuredDocumentation","src":"2663:62:19","text":"[PRODUCTION TODO: _withdrawTimer = timeInHours * 1 hours;]"},"functionSelector":"58418587","id":4973,"implemented":true,"kind":"function","modifiers":[{"id":4960,"kind":"modifierInvocation","modifierName":{"id":4959,"name":"onlyAdmin","nameLocations":["2787:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":2624,"src":"2787:9:19"},"nodeType":"ModifierInvocation","src":"2787:9:19"}],"name":"setWithdrawTime","nameLocation":"2739:15:19","nodeType":"FunctionDefinition","parameters":{"id":4958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4957,"mutability":"mutable","name":"timeInMinutes","nameLocation":"2763:13:19","nodeType":"VariableDeclaration","scope":4973,"src":"2755:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4956,"name":"uint256","nodeType":"ElementaryTypeName","src":"2755:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2754:23:19"},"returnParameters":{"id":4961,"nodeType":"ParameterList","parameters":[],"src":"2797:0:19"},"scope":5520,"src":"2730:176:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[5742],"body":{"id":5059,"nodeType":"Block","src":"2989:640:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4983,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4975,"src":"3003:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4984,"name":"_minStakeValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4829,"src":"3011:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3003:22:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4990,"nodeType":"IfStatement","src":"2999:102:19","trueBody":{"id":4989,"nodeType":"Block","src":"3027:74:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4986,"name":"GENZStaking__NotAMinimumStakeAmountError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4820,"src":"3048:40:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3048:42:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4988,"nodeType":"RevertStatement","src":"3041:49:19"}]}},{"expression":{"id":4992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3110:14:19","subExpression":{"id":4991,"name":"_currVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4827,"src":"3112:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4993,"nodeType":"ExpressionStatement","src":"3110:14:19"},{"assignments":[4996],"declarations":[{"constant":false,"id":4996,"mutability":"mutable","name":"userInfo","nameLocation":"3151:8:19","nodeType":"VariableDeclaration","scope":5059,"src":"3134:25:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4859_storage_ptr","typeString":"struct GENZStaking.UserInfo"},"typeName":{"id":4995,"nodeType":"UserDefinedTypeName","pathNode":{"id":4994,"name":"UserInfo","nameLocations":["3134:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":4859,"src":"3134:8:19"},"referencedDeclaration":4859,"src":"3134:8:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4859_storage_ptr","typeString":"struct GENZStaking.UserInfo"}},"visibility":"internal"}],"id":5001,"initialValue":{"baseExpression":{"id":4997,"name":"usersInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4881,"src":"3162:9:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserInfo_$4859_storage_$","typeString":"mapping(address => struct GENZStaking.UserInfo storage ref)"}},"id":5000,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4998,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"3172:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3172:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3162:23:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4859_storage","typeString":"struct GENZStaking.UserInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"3134:51:19"},{"condition":{"id":5004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3198:19:19","subExpression":{"expression":{"id":5002,"name":"userInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4996,"src":"3199:8:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4859_storage_ptr","typeString":"struct GENZStaking.UserInfo storage pointer"}},"id":5003,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3208:9:19","memberName":"hasStaked","nodeType":"MemberAccess","referencedDeclaration":4852,"src":"3199:18:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5018,"nodeType":"IfStatement","src":"3195:129:19","trueBody":{"id":5017,"nodeType":"Block","src":"3219:105:19","statements":[{"expression":{"id":5009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5005,"name":"userInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4996,"src":"3233:8:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4859_storage_ptr","typeString":"struct GENZStaking.UserInfo storage pointer"}},"id":5007,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3242:9:19","memberName":"hasStaked","nodeType":"MemberAccess","referencedDeclaration":4852,"src":"3233:18:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3254:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3233:25:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5010,"nodeType":"ExpressionStatement","src":"3233:25:19"},{"expression":{"id":5015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5011,"name":"userInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4996,"src":"3272:8:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4859_storage_ptr","typeString":"struct GENZStaking.UserInfo storage pointer"}},"id":5013,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3281:17:19","memberName":"startVersionBlock","nodeType":"MemberAccess","referencedDeclaration":4856,"src":"3272:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5014,"name":"_currVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4827,"src":"3301:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3272:41:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5016,"nodeType":"ExpressionStatement","src":"3272:41:19"}]}},{"expression":{"id":5023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5019,"name":"userInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4996,"src":"3333:8:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4859_storage_ptr","typeString":"struct GENZStaking.UserInfo storage pointer"}},"id":5021,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3342:12:19","memberName":"stakedTokens","nodeType":"MemberAccess","referencedDeclaration":4854,"src":"3333:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":5022,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4975,"src":"3358:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3333:30:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5024,"nodeType":"ExpressionStatement","src":"3333:30:19"},{"expression":{"id":5033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":5025,"name":"usersBalanceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4895,"src":"3373:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4864_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GENZStaking.UserBalanceInfo storage ref))"}},"id":5029,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5026,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"3390:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3390:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3373:30:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4864_storage_$","typeString":"mapping(uint256 => struct GENZStaking.UserBalanceInfo storage ref)"}},"id":5030,"indexExpression":{"id":5028,"name":"_currVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4827,"src":"3404:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3373:44:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4864_storage","typeString":"struct GENZStaking.UserBalanceInfo storage ref"}},"id":5031,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3418:12:19","memberName":"stakedTokens","nodeType":"MemberAccess","referencedDeclaration":4861,"src":"3373:57:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5032,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4975,"src":"3433:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3373:65:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5034,"nodeType":"ExpressionStatement","src":"3373:65:19"},{"expression":{"id":5037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5035,"name":"totalTokensStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4834,"src":"3456:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":5036,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4975,"src":"3477:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3456:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5038,"nodeType":"ExpressionStatement","src":"3456:26:19"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5042,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"3520:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3520:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":5046,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3542:4:19","typeDescriptions":{"typeIdentifier":"t_contract$_GENZStaking_$5520","typeString":"contract GENZStaking"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_GENZStaking_$5520","typeString":"contract GENZStaking"}],"id":5045,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3534:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5044,"name":"address","nodeType":"ElementaryTypeName","src":"3534:7:19","typeDescriptions":{}}},"id":5047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3534:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5048,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4975,"src":"3549:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5039,"name":"_tokenGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4837,"src":"3492:10:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":5041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3503:16:19","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":952,"src":"3492:27:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$858_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20Upgradeable_$858_$","typeString":"function (contract IERC20Upgradeable,address,address,uint256)"}},"id":5049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3492:63:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5050,"nodeType":"ExpressionStatement","src":"3492:63:19"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5052,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"3581:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3581:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5054,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4975,"src":"3595:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5051,"name":"StakedGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5729,"src":"3570:10:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3570:31:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5056,"nodeType":"EmitStatement","src":"3565:36:19"},{"expression":{"hexValue":"74727565","id":5057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3618:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4982,"id":5058,"nodeType":"Return","src":"3611:11:19"}]},"functionSelector":"d6fb97a5","id":5060,"implemented":true,"kind":"function","modifiers":[{"id":4979,"kind":"modifierInvocation","modifierName":{"id":4978,"name":"nonReentrant","nameLocations":["2962:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":751,"src":"2962:12:19"},"nodeType":"ModifierInvocation","src":"2962:12:19"}],"name":"stakeGENZ","nameLocation":"2921:9:19","nodeType":"FunctionDefinition","overrides":{"id":4977,"nodeType":"OverrideSpecifier","overrides":[],"src":"2953:8:19"},"parameters":{"id":4976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4975,"mutability":"mutable","name":"value","nameLocation":"2939:5:19","nodeType":"VariableDeclaration","scope":5060,"src":"2931:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4974,"name":"uint256","nodeType":"ElementaryTypeName","src":"2931:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2930:15:19"},"returnParameters":{"id":4982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4981,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5060,"src":"2983:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4980,"name":"bool","nodeType":"ElementaryTypeName","src":"2983:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2982:6:19"},"scope":5520,"src":"2912:717:19","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[5749],"body":{"id":5120,"nodeType":"Block","src":"3752:507:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":5074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3780:45:19","subExpression":{"components":[{"expression":{"baseExpression":{"id":5068,"name":"checkWaitTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4876,"src":"3782:13:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_WithdrawWaitPeriod_$4871_storage_$","typeString":"mapping(address => struct GENZStaking.WithdrawWaitPeriod storage ref)"}},"id":5071,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5069,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"3796:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3796:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3782:27:19","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4871_storage","typeString":"struct GENZStaking.WithdrawWaitPeriod storage ref"}},"id":5072,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3810:14:19","memberName":"ifTimerStarted","nodeType":"MemberAccess","referencedDeclaration":4866,"src":"3782:42:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5073,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3781:44:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5075,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3779:47:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":5076,"name":"checkWaitTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4876,"src":"3844:13:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_WithdrawWaitPeriod_$4871_storage_$","typeString":"mapping(address => struct GENZStaking.WithdrawWaitPeriod storage ref)"}},"id":5079,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5077,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"3858:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5078,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3858:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3844:27:19","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4871_storage","typeString":"struct GENZStaking.WithdrawWaitPeriod storage ref"}},"id":5080,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3872:14:19","memberName":"GENZTokenCount","nodeType":"MemberAccess","referencedDeclaration":4868,"src":"3844:42:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5081,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5062,"src":"3889:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3844:50:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5083,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3843:52:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3779:116:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5117,"nodeType":"IfStatement","src":"3762:469:19","trueBody":{"id":5116,"nodeType":"Block","src":"3906:325:19","statements":[{"assignments":[5087],"declarations":[{"constant":false,"id":5087,"mutability":"mutable","name":"waitingTimeCountdown","nameLocation":"3947:20:19","nodeType":"VariableDeclaration","scope":5116,"src":"3920:47:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4871_storage_ptr","typeString":"struct GENZStaking.WithdrawWaitPeriod"},"typeName":{"id":5086,"nodeType":"UserDefinedTypeName","pathNode":{"id":5085,"name":"WithdrawWaitPeriod","nameLocations":["3920:18:19"],"nodeType":"IdentifierPath","referencedDeclaration":4871,"src":"3920:18:19"},"referencedDeclaration":4871,"src":"3920:18:19","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4871_storage_ptr","typeString":"struct GENZStaking.WithdrawWaitPeriod"}},"visibility":"internal"}],"id":5092,"initialValue":{"baseExpression":{"id":5088,"name":"checkWaitTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4876,"src":"3970:13:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_WithdrawWaitPeriod_$4871_storage_$","typeString":"mapping(address => struct GENZStaking.WithdrawWaitPeriod storage ref)"}},"id":5091,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5089,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"3984:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3984:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3970:27:19","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4871_storage","typeString":"struct GENZStaking.WithdrawWaitPeriod storage ref"}},"nodeType":"VariableDeclarationStatement","src":"3920:77:19"},{"expression":{"id":5097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5093,"name":"waitingTimeCountdown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5087,"src":"4011:20:19","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4871_storage_ptr","typeString":"struct GENZStaking.WithdrawWaitPeriod storage pointer"}},"id":5095,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4032:14:19","memberName":"ifTimerStarted","nodeType":"MemberAccess","referencedDeclaration":4866,"src":"4011:35:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4049:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4011:42:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5098,"nodeType":"ExpressionStatement","src":"4011:42:19"},{"expression":{"id":5103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5099,"name":"waitingTimeCountdown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5087,"src":"4067:20:19","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4871_storage_ptr","typeString":"struct GENZStaking.WithdrawWaitPeriod storage pointer"}},"id":5101,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4088:14:19","memberName":"GENZTokenCount","nodeType":"MemberAccess","referencedDeclaration":4868,"src":"4067:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5102,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5062,"src":"4105:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4067:43:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5104,"nodeType":"ExpressionStatement","src":"4067:43:19"},{"expression":{"id":5112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5105,"name":"waitingTimeCountdown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5087,"src":"4124:20:19","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4871_storage_ptr","typeString":"struct GENZStaking.WithdrawWaitPeriod storage pointer"}},"id":5107,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4145:15:19","memberName":"canWithdrawTime","nodeType":"MemberAccess","referencedDeclaration":4870,"src":"4124:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5108,"name":"_withdrawTimer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4831,"src":"4163:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":5109,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4180:5:19","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4186:9:19","memberName":"timestamp","nodeType":"MemberAccess","src":"4180:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4163:32:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4124:71:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5113,"nodeType":"ExpressionStatement","src":"4124:71:19"},{"expression":{"hexValue":"74727565","id":5114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4216:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":5067,"id":5115,"nodeType":"Return","src":"4209:11:19"}]}},{"expression":{"hexValue":"66616c7365","id":5118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4247:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":5067,"id":5119,"nodeType":"Return","src":"4240:12:19"}]},"functionSelector":"6c64f0b4","id":5121,"implemented":true,"kind":"function","modifiers":[],"name":"activateWithdrawalTimer","nameLocation":"3681:23:19","nodeType":"FunctionDefinition","overrides":{"id":5064,"nodeType":"OverrideSpecifier","overrides":[],"src":"3729:8:19"},"parameters":{"id":5063,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5062,"mutability":"mutable","name":"value","nameLocation":"3713:5:19","nodeType":"VariableDeclaration","scope":5121,"src":"3705:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5061,"name":"uint256","nodeType":"ElementaryTypeName","src":"3705:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3704:15:19"},"returnParameters":{"id":5067,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5066,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5121,"src":"3746:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5065,"name":"bool","nodeType":"ElementaryTypeName","src":"3746:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3745:6:19"},"scope":5520,"src":"3672:587:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[5756],"body":{"id":5232,"nodeType":"Block","src":"4351:857:19","statements":[{"assignments":[5133],"declarations":[{"constant":false,"id":5133,"mutability":"mutable","name":"userInfo","nameLocation":"4378:8:19","nodeType":"VariableDeclaration","scope":5232,"src":"4361:25:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4859_storage_ptr","typeString":"struct GENZStaking.UserInfo"},"typeName":{"id":5132,"nodeType":"UserDefinedTypeName","pathNode":{"id":5131,"name":"UserInfo","nameLocations":["4361:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":4859,"src":"4361:8:19"},"referencedDeclaration":4859,"src":"4361:8:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4859_storage_ptr","typeString":"struct GENZStaking.UserInfo"}},"visibility":"internal"}],"id":5138,"initialValue":{"baseExpression":{"id":5134,"name":"usersInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4881,"src":"4389:9:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserInfo_$4859_storage_$","typeString":"mapping(address => struct GENZStaking.UserInfo storage ref)"}},"id":5137,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5135,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"4399:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4399:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4389:23:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4859_storage","typeString":"struct GENZStaking.UserInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"4361:51:19"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5139,"name":"userInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5133,"src":"4440:8:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4859_storage_ptr","typeString":"struct GENZStaking.UserInfo storage pointer"}},"id":5140,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4449:12:19","memberName":"stakedTokens","nodeType":"MemberAccess","referencedDeclaration":4854,"src":"4440:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5141,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"4464:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4440:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5143,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4439:31:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5144,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4488:5:19","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4494:9:19","memberName":"timestamp","nodeType":"MemberAccess","src":"4488:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"baseExpression":{"id":5146,"name":"checkWaitTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4876,"src":"4506:13:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_WithdrawWaitPeriod_$4871_storage_$","typeString":"mapping(address => struct GENZStaking.WithdrawWaitPeriod storage ref)"}},"id":5149,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5147,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"4520:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4520:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4506:27:19","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4871_storage","typeString":"struct GENZStaking.WithdrawWaitPeriod storage ref"}},"id":5150,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4534:15:19","memberName":"canWithdrawTime","nodeType":"MemberAccess","referencedDeclaration":4870,"src":"4506:43:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4488:61:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5152,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4487:63:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4439:111:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5154,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"4568:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"baseExpression":{"id":5155,"name":"checkWaitTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4876,"src":"4576:13:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_WithdrawWaitPeriod_$4871_storage_$","typeString":"mapping(address => struct GENZStaking.WithdrawWaitPeriod storage ref)"}},"id":5158,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5156,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"4590:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4590:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4576:27:19","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4871_storage","typeString":"struct GENZStaking.WithdrawWaitPeriod storage ref"}},"id":5159,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4604:14:19","memberName":"GENZTokenCount","nodeType":"MemberAccess","referencedDeclaration":4868,"src":"4576:42:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4568:50:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5161,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4567:52:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4439:180:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5167,"nodeType":"IfStatement","src":"4422:277:19","trueBody":{"id":5166,"nodeType":"Block","src":"4630:69:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5163,"name":"GENZStaking__TransactionFailedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4818,"src":"4651:35:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4651:37:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5165,"nodeType":"RevertStatement","src":"4644:44:19"}]}},{"expression":{"id":5169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"4708:14:19","subExpression":{"id":5168,"name":"_currVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4827,"src":"4710:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5170,"nodeType":"ExpressionStatement","src":"4708:14:19"},{"expression":{"id":5173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5171,"name":"totalTokensStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4834,"src":"4732:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":5172,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"4753:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4732:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5174,"nodeType":"ExpressionStatement","src":"4732:26:19"},{"expression":{"id":5179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5175,"name":"userInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5133,"src":"4768:8:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4859_storage_ptr","typeString":"struct GENZStaking.UserInfo storage pointer"}},"id":5177,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4777:12:19","memberName":"stakedTokens","nodeType":"MemberAccess","referencedDeclaration":4854,"src":"4768:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":5178,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"4793:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4768:30:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5180,"nodeType":"ExpressionStatement","src":"4768:30:19"},{"expression":{"id":5189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":5181,"name":"usersBalanceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4895,"src":"4808:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4864_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GENZStaking.UserBalanceInfo storage ref))"}},"id":5185,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5182,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"4825:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4825:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4808:30:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4864_storage_$","typeString":"mapping(uint256 => struct GENZStaking.UserBalanceInfo storage ref)"}},"id":5186,"indexExpression":{"id":5184,"name":"_currVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4827,"src":"4839:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4808:44:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4864_storage","typeString":"struct GENZStaking.UserBalanceInfo storage ref"}},"id":5187,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4853:15:19","memberName":"withdrawnTokens","nodeType":"MemberAccess","referencedDeclaration":4863,"src":"4808:60:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5188,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"4871:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4808:68:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5190,"nodeType":"ExpressionStatement","src":"4808:68:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":5191,"name":"checkWaitTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4876,"src":"4890:13:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_WithdrawWaitPeriod_$4871_storage_$","typeString":"mapping(address => struct GENZStaking.WithdrawWaitPeriod storage ref)"}},"id":5194,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5192,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"4904:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4904:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4890:27:19","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4871_storage","typeString":"struct GENZStaking.WithdrawWaitPeriod storage ref"}},"id":5195,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4918:14:19","memberName":"GENZTokenCount","nodeType":"MemberAccess","referencedDeclaration":4868,"src":"4890:42:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5196,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"4936:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4890:51:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5207,"nodeType":"IfStatement","src":"4886:132:19","trueBody":{"id":5206,"nodeType":"Block","src":"4943:75:19","statements":[{"expression":{"id":5204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":5198,"name":"checkWaitTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4876,"src":"4957:13:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_WithdrawWaitPeriod_$4871_storage_$","typeString":"mapping(address => struct GENZStaking.WithdrawWaitPeriod storage ref)"}},"id":5201,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5199,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"4971:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4971:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4957:27:19","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4871_storage","typeString":"struct GENZStaking.WithdrawWaitPeriod storage ref"}},"id":5202,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4985:14:19","memberName":"ifTimerStarted","nodeType":"MemberAccess","referencedDeclaration":4866,"src":"4957:42:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":5203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5002:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"4957:50:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5205,"nodeType":"ExpressionStatement","src":"4957:50:19"}]}},{"expression":{"id":5214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":5208,"name":"checkWaitTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4876,"src":"5027:13:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_WithdrawWaitPeriod_$4871_storage_$","typeString":"mapping(address => struct GENZStaking.WithdrawWaitPeriod storage ref)"}},"id":5211,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5209,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"5041:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5041:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5027:27:19","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4871_storage","typeString":"struct GENZStaking.WithdrawWaitPeriod storage ref"}},"id":5212,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5055:14:19","memberName":"GENZTokenCount","nodeType":"MemberAccess","referencedDeclaration":4868,"src":"5027:42:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":5213,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"5073:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5027:51:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5215,"nodeType":"ExpressionStatement","src":"5027:51:19"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5219,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"5112:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5112:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5221,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"5126:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5216,"name":"_tokenGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4837,"src":"5088:10:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":5218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5099:12:19","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":926,"src":"5088:23:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$858_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20Upgradeable_$858_$","typeString":"function (contract IERC20Upgradeable,address,uint256)"}},"id":5222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5088:44:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5223,"nodeType":"ExpressionStatement","src":"5088:44:19"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5225,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"5160:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5160:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5227,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"5174:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5224,"name":"UnstakedGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5735,"src":"5147:12:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5147:33:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5229,"nodeType":"EmitStatement","src":"5142:38:19"},{"expression":{"hexValue":"74727565","id":5230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5197:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":5130,"id":5231,"nodeType":"Return","src":"5190:11:19"}]},"functionSelector":"060e5c6e","id":5233,"implemented":true,"kind":"function","modifiers":[{"id":5127,"kind":"modifierInvocation","modifierName":{"id":5126,"name":"nonReentrant","nameLocations":["4324:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":751,"src":"4324:12:19"},"nodeType":"ModifierInvocation","src":"4324:12:19"}],"name":"withdrawGENZ","nameLocation":"4278:12:19","nodeType":"FunctionDefinition","overrides":{"id":5125,"nodeType":"OverrideSpecifier","overrides":[],"src":"4315:8:19"},"parameters":{"id":5124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5123,"mutability":"mutable","name":"value","nameLocation":"4299:5:19","nodeType":"VariableDeclaration","scope":5233,"src":"4291:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5122,"name":"uint256","nodeType":"ElementaryTypeName","src":"4291:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4290:15:19"},"returnParameters":{"id":5130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5129,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5233,"src":"4345:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5128,"name":"bool","nodeType":"ElementaryTypeName","src":"4345:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4344:6:19"},"scope":5520,"src":"4269:939:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5240,"nodeType":"Block","src":"5267:36:19","statements":[{"expression":{"id":5238,"name":"_currVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4827,"src":"5284:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5237,"id":5239,"nodeType":"Return","src":"5277:19:19"}]},"functionSelector":"77c379a4","id":5241,"implemented":true,"kind":"function","modifiers":[],"name":"getVersionID","nameLocation":"5223:12:19","nodeType":"FunctionDefinition","parameters":{"id":5234,"nodeType":"ParameterList","parameters":[],"src":"5235:2:19"},"returnParameters":{"id":5237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5236,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5241,"src":"5258:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5235,"name":"uint256","nodeType":"ElementaryTypeName","src":"5258:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5257:9:19"},"scope":5520,"src":"5214:89:19","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5370,"nodeType":"Block","src":"5379:1031:19","statements":[{"assignments":[5248],"declarations":[{"constant":false,"id":5248,"mutability":"mutable","name":"activeCount","nameLocation":"5397:11:19","nodeType":"VariableDeclaration","scope":5370,"src":"5389:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5247,"name":"uint256","nodeType":"ElementaryTypeName","src":"5389:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5250,"initialValue":{"hexValue":"30","id":5249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5411:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5389:23:19"},{"assignments":[5252],"declarations":[{"constant":false,"id":5252,"mutability":"mutable","name":"userStartVersion","nameLocation":"5430:16:19","nodeType":"VariableDeclaration","scope":5370,"src":"5422:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5251,"name":"uint256","nodeType":"ElementaryTypeName","src":"5422:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5258,"initialValue":{"expression":{"baseExpression":{"id":5253,"name":"usersInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4881,"src":"5449:9:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserInfo_$4859_storage_$","typeString":"mapping(address => struct GENZStaking.UserInfo storage ref)"}},"id":5256,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5254,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"5459:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5459:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5449:23:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4859_storage","typeString":"struct GENZStaking.UserInfo storage ref"}},"id":5257,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5473:17:19","memberName":"startVersionBlock","nodeType":"MemberAccess","referencedDeclaration":4856,"src":"5449:41:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5422:68:19"},{"assignments":[5260],"declarations":[{"constant":false,"id":5260,"mutability":"mutable","name":"currVersion","nameLocation":"5508:11:19","nodeType":"VariableDeclaration","scope":5370,"src":"5500:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5259,"name":"uint256","nodeType":"ElementaryTypeName","src":"5500:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5263,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":5261,"name":"getVersionID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5241,"src":"5523:12:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":5262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5523:14:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5500:37:19"},{"body":{"id":5302,"nodeType":"Block","src":"5600:261:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"id":5271,"name":"usersBalanceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4895,"src":"5618:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4864_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GENZStaking.UserBalanceInfo storage ref))"}},"id":5274,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5272,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"5635:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5635:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5618:30:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4864_storage_$","typeString":"mapping(uint256 => struct GENZStaking.UserBalanceInfo storage ref)"}},"id":5276,"indexExpression":{"id":5275,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5265,"src":"5649:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5618:33:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4864_storage","typeString":"struct GENZStaking.UserBalanceInfo storage ref"}},"id":5277,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5652:12:19","memberName":"stakedTokens","nodeType":"MemberAccess","referencedDeclaration":4861,"src":"5618:46:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5667:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5618:50:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5284,"nodeType":"IfStatement","src":"5614:102:19","trueBody":{"id":5283,"nodeType":"Block","src":"5670:46:19","statements":[{"expression":{"id":5281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"5688:13:19","subExpression":{"id":5280,"name":"activeCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5248,"src":"5690:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5282,"nodeType":"ExpressionStatement","src":"5688:13:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"id":5285,"name":"usersBalanceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4895,"src":"5733:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4864_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GENZStaking.UserBalanceInfo storage ref))"}},"id":5288,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5286,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"5750:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5750:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5733:30:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4864_storage_$","typeString":"mapping(uint256 => struct GENZStaking.UserBalanceInfo storage ref)"}},"id":5290,"indexExpression":{"id":5289,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5265,"src":"5764:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5733:33:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4864_storage","typeString":"struct GENZStaking.UserBalanceInfo storage ref"}},"id":5291,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5767:15:19","memberName":"withdrawnTokens","nodeType":"MemberAccess","referencedDeclaration":4863,"src":"5733:49:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5785:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5733:53:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5298,"nodeType":"IfStatement","src":"5729:105:19","trueBody":{"id":5297,"nodeType":"Block","src":"5788:46:19","statements":[{"expression":{"id":5295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"5806:13:19","subExpression":{"id":5294,"name":"activeCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5248,"src":"5808:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5296,"nodeType":"ExpressionStatement","src":"5806:13:19"}]}},{"expression":{"id":5300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"5847:3:19","subExpression":{"id":5299,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5265,"src":"5849:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5301,"nodeType":"ExpressionStatement","src":"5847:3:19"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5268,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5265,"src":"5581:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":5269,"name":"currVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5260,"src":"5586:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5581:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5303,"initializationExpression":{"assignments":[5265],"declarations":[{"constant":false,"id":5265,"mutability":"mutable","name":"i","nameLocation":"5559:1:19","nodeType":"VariableDeclaration","scope":5303,"src":"5551:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5264,"name":"uint256","nodeType":"ElementaryTypeName","src":"5551:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5267,"initialValue":{"id":5266,"name":"userStartVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5252,"src":"5563:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5551:28:19"},"nodeType":"ForStatement","src":"5547:314:19"},{"assignments":[5308],"declarations":[{"constant":false,"id":5308,"mutability":"mutable","name":"activeVersionID","nameLocation":"5887:15:19","nodeType":"VariableDeclaration","scope":5370,"src":"5870:32:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5306,"name":"uint256","nodeType":"ElementaryTypeName","src":"5870:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5307,"nodeType":"ArrayTypeName","src":"5870:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":5314,"initialValue":{"arguments":[{"id":5312,"name":"activeCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5248,"src":"5919:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5311,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5905:13:19","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":5309,"name":"uint256","nodeType":"ElementaryTypeName","src":"5909:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5310,"nodeType":"ArrayTypeName","src":"5909:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":5313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5870:61:19"},{"assignments":[5316],"declarations":[{"constant":false,"id":5316,"mutability":"mutable","name":"counter","nameLocation":"5949:7:19","nodeType":"VariableDeclaration","scope":5370,"src":"5941:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5315,"name":"uint256","nodeType":"ElementaryTypeName","src":"5941:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5318,"initialValue":{"hexValue":"30","id":5317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5959:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5941:19:19"},{"body":{"id":5366,"nodeType":"Block","src":"6020:352:19","statements":[{"assignments":[5328],"declarations":[{"constant":false,"id":5328,"mutability":"mutable","name":"userBalance","nameLocation":"6057:11:19","nodeType":"VariableDeclaration","scope":5366,"src":"6034:34:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4864_memory_ptr","typeString":"struct GENZStaking.UserBalanceInfo"},"typeName":{"id":5327,"nodeType":"UserDefinedTypeName","pathNode":{"id":5326,"name":"UserBalanceInfo","nameLocations":["6034:15:19"],"nodeType":"IdentifierPath","referencedDeclaration":4864,"src":"6034:15:19"},"referencedDeclaration":4864,"src":"6034:15:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4864_storage_ptr","typeString":"struct GENZStaking.UserBalanceInfo"}},"visibility":"internal"}],"id":5335,"initialValue":{"baseExpression":{"baseExpression":{"id":5329,"name":"usersBalanceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4895,"src":"6071:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4864_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GENZStaking.UserBalanceInfo storage ref))"}},"id":5332,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5330,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"6088:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6088:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6071:30:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4864_storage_$","typeString":"mapping(uint256 => struct GENZStaking.UserBalanceInfo storage ref)"}},"id":5334,"indexExpression":{"id":5333,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5320,"src":"6102:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6071:33:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4864_storage","typeString":"struct GENZStaking.UserBalanceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"6034:70:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5336,"name":"userBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5328,"src":"6121:11:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4864_memory_ptr","typeString":"struct GENZStaking.UserBalanceInfo memory"}},"id":5337,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6133:12:19","memberName":"stakedTokens","nodeType":"MemberAccess","referencedDeclaration":4861,"src":"6121:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6148:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6121:28:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5347,"nodeType":"IfStatement","src":"6118:94:19","trueBody":{"id":5346,"nodeType":"Block","src":"6151:61:19","statements":[{"expression":{"id":5344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5340,"name":"activeVersionID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5308,"src":"6169:15:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5342,"indexExpression":{"id":5341,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5316,"src":"6185:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6169:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5343,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5320,"src":"6196:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6169:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5345,"nodeType":"ExpressionStatement","src":"6169:28:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5348,"name":"userBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5328,"src":"6228:11:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4864_memory_ptr","typeString":"struct GENZStaking.UserBalanceInfo memory"}},"id":5349,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6240:15:19","memberName":"withdrawnTokens","nodeType":"MemberAccess","referencedDeclaration":4863,"src":"6228:27:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6258:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6228:31:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5359,"nodeType":"IfStatement","src":"6225:97:19","trueBody":{"id":5358,"nodeType":"Block","src":"6261:61:19","statements":[{"expression":{"id":5356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5352,"name":"activeVersionID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5308,"src":"6279:15:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5354,"indexExpression":{"id":5353,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5316,"src":"6295:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6279:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5355,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5320,"src":"6306:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6279:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5357,"nodeType":"ExpressionStatement","src":"6279:28:19"}]}},{"expression":{"id":5361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"6335:9:19","subExpression":{"id":5360,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5316,"src":"6337:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5362,"nodeType":"ExpressionStatement","src":"6335:9:19"},{"expression":{"id":5364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"6358:3:19","subExpression":{"id":5363,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5320,"src":"6360:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5365,"nodeType":"ExpressionStatement","src":"6358:3:19"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5323,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5320,"src":"6001:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":5324,"name":"currVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5260,"src":"6006:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6001:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5367,"initializationExpression":{"assignments":[5320],"declarations":[{"constant":false,"id":5320,"mutability":"mutable","name":"i","nameLocation":"5979:1:19","nodeType":"VariableDeclaration","scope":5367,"src":"5974:6:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5319,"name":"uint","nodeType":"ElementaryTypeName","src":"5974:4:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5322,"initialValue":{"id":5321,"name":"userStartVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5252,"src":"5983:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5974:25:19"},"nodeType":"ForStatement","src":"5970:402:19"},{"expression":{"id":5368,"name":"activeVersionID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5308,"src":"6388:15:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":5246,"id":5369,"nodeType":"Return","src":"6381:22:19"}]},"id":5371,"implemented":true,"kind":"function","modifiers":[],"name":"getActiveVersionID","nameLocation":"5318:18:19","nodeType":"FunctionDefinition","parameters":{"id":5242,"nodeType":"ParameterList","parameters":[],"src":"5336:2:19"},"returnParameters":{"id":5246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5245,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5371,"src":"5361:16:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5243,"name":"uint256","nodeType":"ElementaryTypeName","src":"5361:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5244,"nodeType":"ArrayTypeName","src":"5361:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"5360:18:19"},"scope":5520,"src":"5309:1101:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5483,"nodeType":"Block","src":"6475:1069:19","statements":[{"assignments":[5377],"declarations":[{"constant":false,"id":5377,"mutability":"mutable","name":"userBalance","nameLocation":"6493:11:19","nodeType":"VariableDeclaration","scope":5483,"src":"6485:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5376,"name":"uint256","nodeType":"ElementaryTypeName","src":"6485:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5379,"initialValue":{"hexValue":"30","id":5378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6507:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6485:23:19"},{"assignments":[5384],"declarations":[{"constant":false,"id":5384,"mutability":"mutable","name":"activeVersionID","nameLocation":"6535:15:19","nodeType":"VariableDeclaration","scope":5483,"src":"6518:32:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5382,"name":"uint256","nodeType":"ElementaryTypeName","src":"6518:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5383,"nodeType":"ArrayTypeName","src":"6518:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":5387,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":5385,"name":"getActiveVersionID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5371,"src":"6553:18:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function () view returns (uint256[] memory)"}},"id":5386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6553:20:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"6518:55:19"},{"assignments":[5389],"declarations":[{"constant":false,"id":5389,"mutability":"mutable","name":"startVersionID","nameLocation":"6591:14:19","nodeType":"VariableDeclaration","scope":5483,"src":"6583:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5388,"name":"uint256","nodeType":"ElementaryTypeName","src":"6583:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5393,"initialValue":{"baseExpression":{"id":5390,"name":"activeVersionID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"6608:15:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5392,"indexExpression":{"hexValue":"30","id":5391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6624:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6608:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6583:43:19"},{"assignments":[5395],"declarations":[{"constant":false,"id":5395,"mutability":"mutable","name":"userPremiumEarned","nameLocation":"6644:17:19","nodeType":"VariableDeclaration","scope":5483,"src":"6636:25:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5394,"name":"uint256","nodeType":"ElementaryTypeName","src":"6636:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5397,"initialValue":{"hexValue":"30","id":5396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6664:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6636:29:19"},{"assignments":[5399],"declarations":[{"constant":false,"id":5399,"mutability":"mutable","name":"counter","nameLocation":"6683:7:19","nodeType":"VariableDeclaration","scope":5483,"src":"6675:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5398,"name":"uint256","nodeType":"ElementaryTypeName","src":"6675:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5401,"initialValue":{"hexValue":"30","id":5400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6693:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6675:19:19"},{"body":{"id":5479,"nodeType":"Block","src":"6756:748:19","statements":[{"assignments":[5411],"declarations":[{"constant":false,"id":5411,"mutability":"mutable","name":"userVersionBalance","nameLocation":"6793:18:19","nodeType":"VariableDeclaration","scope":5479,"src":"6770:41:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4864_memory_ptr","typeString":"struct GENZStaking.UserBalanceInfo"},"typeName":{"id":5410,"nodeType":"UserDefinedTypeName","pathNode":{"id":5409,"name":"UserBalanceInfo","nameLocations":["6770:15:19"],"nodeType":"IdentifierPath","referencedDeclaration":4864,"src":"6770:15:19"},"referencedDeclaration":4864,"src":"6770:15:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4864_storage_ptr","typeString":"struct GENZStaking.UserBalanceInfo"}},"visibility":"internal"}],"id":5418,"initialValue":{"baseExpression":{"baseExpression":{"id":5412,"name":"usersBalanceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4895,"src":"6814:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4864_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GENZStaking.UserBalanceInfo storage ref))"}},"id":5415,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5413,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"6831:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6831:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6814:30:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4864_storage_$","typeString":"mapping(uint256 => struct GENZStaking.UserBalanceInfo storage ref)"}},"id":5417,"indexExpression":{"id":5416,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5403,"src":"6845:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6814:33:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4864_storage","typeString":"struct GENZStaking.UserBalanceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"6770:77:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5419,"name":"activeVersionID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"6864:15:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5421,"indexExpression":{"id":5420,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5399,"src":"6880:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6864:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5422,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5403,"src":"6892:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6864:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5445,"nodeType":"IfStatement","src":"6861:333:19","trueBody":{"id":5444,"nodeType":"Block","src":"6895:299:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5424,"name":"userVersionBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5411,"src":"6917:18:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4864_memory_ptr","typeString":"struct GENZStaking.UserBalanceInfo memory"}},"id":5425,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6936:12:19","memberName":"stakedTokens","nodeType":"MemberAccess","referencedDeclaration":4861,"src":"6917:31:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6951:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6917:35:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5439,"nodeType":"Block","src":"7063:90:19","statements":[{"expression":{"id":5437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5434,"name":"userBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5377,"src":"7085:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"expression":{"id":5435,"name":"userVersionBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5411,"src":"7100:18:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4864_memory_ptr","typeString":"struct GENZStaking.UserBalanceInfo memory"}},"id":5436,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7119:15:19","memberName":"withdrawnTokens","nodeType":"MemberAccess","referencedDeclaration":4863,"src":"7100:34:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7085:49:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5438,"nodeType":"ExpressionStatement","src":"7085:49:19"}]},"id":5440,"nodeType":"IfStatement","src":"6913:240:19","trueBody":{"id":5433,"nodeType":"Block","src":"6954:87:19","statements":[{"expression":{"id":5431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5428,"name":"userBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5377,"src":"6976:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":5429,"name":"userVersionBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5411,"src":"6991:18:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4864_memory_ptr","typeString":"struct GENZStaking.UserBalanceInfo memory"}},"id":5430,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7010:12:19","memberName":"stakedTokens","nodeType":"MemberAccess","referencedDeclaration":4861,"src":"6991:31:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6976:46:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5432,"nodeType":"ExpressionStatement","src":"6976:46:19"}]}},{"expression":{"id":5442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"7170:9:19","subExpression":{"id":5441,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5399,"src":"7172:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5443,"nodeType":"ExpressionStatement","src":"7170:9:19"}]}},{"assignments":[5448],"declarations":[{"constant":false,"id":5448,"mutability":"mutable","name":"versionInfo","nameLocation":"7231:11:19","nodeType":"VariableDeclaration","scope":5479,"src":"7207:35:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_VersionableInfo_$4850_storage_ptr","typeString":"struct GENZStaking.VersionableInfo"},"typeName":{"id":5447,"nodeType":"UserDefinedTypeName","pathNode":{"id":5446,"name":"VersionableInfo","nameLocations":["7207:15:19"],"nodeType":"IdentifierPath","referencedDeclaration":4850,"src":"7207:15:19"},"referencedDeclaration":4850,"src":"7207:15:19","typeDescriptions":{"typeIdentifier":"t_struct$_VersionableInfo_$4850_storage_ptr","typeString":"struct GENZStaking.VersionableInfo"}},"visibility":"internal"}],"id":5452,"initialValue":{"baseExpression":{"id":5449,"name":"versionableInfos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4887,"src":"7245:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VersionableInfo_$4850_storage_$","typeString":"mapping(uint256 => struct GENZStaking.VersionableInfo storage ref)"}},"id":5451,"indexExpression":{"id":5450,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5403,"src":"7262:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7245:19:19","typeDescriptions":{"typeIdentifier":"t_struct$_VersionableInfo_$4850_storage","typeString":"struct GENZStaking.VersionableInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"7207:57:19"},{"assignments":[5454],"declarations":[{"constant":false,"id":5454,"mutability":"mutable","name":"duration","nameLocation":"7297:8:19","nodeType":"VariableDeclaration","scope":5479,"src":"7289:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5453,"name":"uint256","nodeType":"ElementaryTypeName","src":"7289:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5460,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5455,"name":"versionInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5448,"src":"7308:11:19","typeDescriptions":{"typeIdentifier":"t_struct$_VersionableInfo_$4850_storage_ptr","typeString":"struct GENZStaking.VersionableInfo storage pointer"}},"id":5456,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7320:7:19","memberName":"endTime","nodeType":"MemberAccess","referencedDeclaration":4845,"src":"7308:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":5457,"name":"versionInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5448,"src":"7330:11:19","typeDescriptions":{"typeIdentifier":"t_struct$_VersionableInfo_$4850_storage_ptr","typeString":"struct GENZStaking.VersionableInfo storage pointer"}},"id":5458,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7342:9:19","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":4843,"src":"7330:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7308:43:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7289:62:19"},{"expression":{"id":5474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5461,"name":"userPremiumEarned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5395,"src":"7365:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5462,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5454,"src":"7388:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5463,"name":"userBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5377,"src":"7399:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7388:22:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"id":5465,"name":"versionInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5448,"src":"7413:11:19","typeDescriptions":{"typeIdentifier":"t_struct$_VersionableInfo_$4850_storage_ptr","typeString":"struct GENZStaking.VersionableInfo storage pointer"}},"id":5466,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7425:17:19","memberName":"distributedAmount","nodeType":"MemberAccess","referencedDeclaration":4847,"src":"7413:29:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7388:54:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5468,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7387:56:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"expression":{"id":5469,"name":"versionInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5448,"src":"7446:11:19","typeDescriptions":{"typeIdentifier":"t_struct$_VersionableInfo_$4850_storage_ptr","typeString":"struct GENZStaking.VersionableInfo storage pointer"}},"id":5470,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7458:16:19","memberName":"tokenDistributed","nodeType":"MemberAccess","referencedDeclaration":4849,"src":"7446:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5471,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7445:30:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7387:88:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5473,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7386:90:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7365:111:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5475,"nodeType":"ExpressionStatement","src":"7365:111:19"},{"expression":{"id":5477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"7490:3:19","subExpression":{"id":5476,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5403,"src":"7492:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5478,"nodeType":"ExpressionStatement","src":"7490:3:19"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5406,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5403,"src":"6736:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":5407,"name":"_currVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4827,"src":"6741:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6736:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5480,"initializationExpression":{"assignments":[5403],"declarations":[{"constant":false,"id":5403,"mutability":"mutable","name":"i","nameLocation":"6716:1:19","nodeType":"VariableDeclaration","scope":5480,"src":"6708:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5402,"name":"uint256","nodeType":"ElementaryTypeName","src":"6708:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5405,"initialValue":{"id":5404,"name":"startVersionID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5389,"src":"6720:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6708:26:19"},"nodeType":"ForStatement","src":"6704:800:19"},{"expression":{"id":5481,"name":"userPremiumEarned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5395,"src":"7520:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5375,"id":5482,"nodeType":"Return","src":"7513:24:19"}]},"functionSelector":"3e50de30","id":5484,"implemented":true,"kind":"function","modifiers":[],"name":"calculateRewards","nameLocation":"6425:16:19","nodeType":"FunctionDefinition","parameters":{"id":5372,"nodeType":"ParameterList","parameters":[],"src":"6441:2:19"},"returnParameters":{"id":5375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5374,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5484,"src":"6466:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5373,"name":"uint256","nodeType":"ElementaryTypeName","src":"6466:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6465:9:19"},"scope":5520,"src":"6416:1128:19","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[5766],"body":{"id":5506,"nodeType":"Block","src":"7626:109:19","statements":[{"expression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":5490,"name":"usersInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4881,"src":"7644:9:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserInfo_$4859_storage_$","typeString":"mapping(address => struct GENZStaking.UserInfo storage ref)"}},"id":5493,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5491,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"7654:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7654:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7644:23:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4859_storage","typeString":"struct GENZStaking.UserInfo storage ref"}},"id":5494,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7668:12:19","memberName":"stakedTokens","nodeType":"MemberAccess","referencedDeclaration":4854,"src":"7644:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7683:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7644:40:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":5502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7726:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":5503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"7644:83:19","trueExpression":{"expression":{"baseExpression":{"id":5497,"name":"usersInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4881,"src":"7687:9:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserInfo_$4859_storage_$","typeString":"mapping(address => struct GENZStaking.UserInfo storage ref)"}},"id":5500,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5498,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"7697:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7697:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7687:23:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4859_storage","typeString":"struct GENZStaking.UserInfo storage ref"}},"id":5501,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7711:12:19","memberName":"stakedTokens","nodeType":"MemberAccess","referencedDeclaration":4854,"src":"7687:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5504,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7643:85:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5489,"id":5505,"nodeType":"Return","src":"7636:92:19"}]},"functionSelector":"ed0cdb1a","id":5507,"implemented":true,"kind":"function","modifiers":[],"name":"getUserStakedGENZBalance","nameLocation":"7559:24:19","nodeType":"FunctionDefinition","overrides":{"id":5486,"nodeType":"OverrideSpecifier","overrides":[],"src":"7600:8:19"},"parameters":{"id":5485,"nodeType":"ParameterList","parameters":[],"src":"7583:2:19"},"returnParameters":{"id":5489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5488,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5507,"src":"7617:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5487,"name":"uint256","nodeType":"ElementaryTypeName","src":"7617:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7616:9:19"},"scope":5520,"src":"7550:185:19","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5518,"nodeType":"Block","src":"7810:62:19","statements":[{"expression":{"expression":{"baseExpression":{"id":5512,"name":"usersInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4881,"src":"7827:9:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserInfo_$4859_storage_$","typeString":"mapping(address => struct GENZStaking.UserInfo storage ref)"}},"id":5515,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5513,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"7837:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7837:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7827:23:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4859_storage","typeString":"struct GENZStaking.UserInfo storage ref"}},"id":5516,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7851:14:19","memberName":"claimedRewards","nodeType":"MemberAccess","referencedDeclaration":4858,"src":"7827:38:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5511,"id":5517,"nodeType":"Return","src":"7820:45:19"}]},"functionSelector":"53b3ad7f","id":5519,"implemented":true,"kind":"function","modifiers":[],"name":"getStakerClaimedRewardInfo","nameLocation":"7750:26:19","nodeType":"FunctionDefinition","parameters":{"id":5508,"nodeType":"ParameterList","parameters":[],"src":"7776:2:19"},"returnParameters":{"id":5511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5510,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5519,"src":"7801:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5509,"name":"uint256","nodeType":"ElementaryTypeName","src":"7801:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7800:9:19"},"scope":5520,"src":"7741:131:19","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5521,"src":"765:7109:19","usedErrors":[2606,4818,4820]}],"src":"37:7837:19"},"id":19},"contracts/interfaces/IBuyGENZ.sol":{"ast":{"absolutePath":"contracts/interfaces/IBuyGENZ.sol","exportedSymbols":{"IBuyGENZ":[5542]},"id":5543,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5522,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"32:23:20"},{"abstract":false,"baseContracts":[],"canonicalName":"IBuyGENZ","contractDependencies":[],"contractKind":"interface","fullyImplemented":true,"id":5542,"linearizedBaseContracts":[5542],"name":"IBuyGENZ","nameLocation":"67:8:20","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":5523,"nodeType":"StructuredDocumentation","src":"87:22:20","text":"Custom Error Codes"},"errorSelector":"6fe97ed3","id":5525,"name":"BuySellGENZ__PausedError","nameLocation":"120:24:20","nodeType":"ErrorDefinition","parameters":{"id":5524,"nodeType":"ParameterList","parameters":[],"src":"144:2:20"},"src":"114:33:20"},{"errorSelector":"8facb45e","id":5527,"name":"BuySellGENZ__LowAmountError","nameLocation":"158:27:20","nodeType":"ErrorDefinition","parameters":{"id":5526,"nodeType":"ParameterList","parameters":[],"src":"185:2:20"},"src":"152:36:20"},{"errorSelector":"4ee4a447","id":5529,"name":"BuySellGENZ__LowSZTBalanceError","nameLocation":"199:31:20","nodeType":"ErrorDefinition","parameters":{"id":5528,"nodeType":"ParameterList","parameters":[],"src":"230:2:20"},"src":"193:40:20"},{"errorSelector":"e24c1298","id":5531,"name":"BuySellGENZ__GENZBurnFailedError","nameLocation":"244:32:20","nodeType":"ErrorDefinition","parameters":{"id":5530,"nodeType":"ParameterList","parameters":[],"src":"276:2:20"},"src":"238:41:20"},{"errorSelector":"d52c622d","id":5533,"name":"BuySellGENZ__GENZMintFailedError","nameLocation":"290:32:20","nodeType":"ErrorDefinition","parameters":{"id":5532,"nodeType":"ParameterList","parameters":[],"src":"322:2:20"},"src":"284:41:20"},{"errorSelector":"6cbbb4e4","id":5535,"name":"BuySellGENZ__ImmutableChangesError","nameLocation":"336:34:20","nodeType":"ErrorDefinition","parameters":{"id":5534,"nodeType":"ParameterList","parameters":[],"src":"370:2:20"},"src":"330:43:20"},{"errorSelector":"b0afccc8","id":5537,"name":"BuySellGENZ__TransactionFailedError","nameLocation":"384:35:20","nodeType":"ErrorDefinition","parameters":{"id":5536,"nodeType":"ParameterList","parameters":[],"src":"419:2:20"},"src":"378:44:20"},{"errorSelector":"2b2cce3f","id":5539,"name":"BuySellGENZ__InsufficientBalanceError","nameLocation":"433:37:20","nodeType":"ErrorDefinition","parameters":{"id":5538,"nodeType":"ParameterList","parameters":[],"src":"470:2:20"},"src":"427:46:20"},{"errorSelector":"ba627e24","id":5541,"name":"BuySellGENZ__ZeroAddressTransactionError","nameLocation":"484:40:20","nodeType":"ErrorDefinition","parameters":{"id":5540,"nodeType":"ParameterList","parameters":[],"src":"524:2:20"},"src":"478:49:20"}],"scope":5543,"src":"57:473:20","usedErrors":[5525,5527,5529,5531,5533,5535,5537,5539,5541]}],"src":"32:498:20"},"id":20},"contracts/interfaces/ICFA.sol":{"ast":{"absolutePath":"contracts/interfaces/ICFA.sol","exportedSymbols":{"ICFA":[5688]},"id":5689,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":5544,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"37:23:21"},{"abstract":false,"baseContracts":[],"canonicalName":"ICFA","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5688,"linearizedBaseContracts":[5688],"name":"ICFA","nameLocation":"73:4:21","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"db4fb2fd6b8b90f67bda8671842d5cab4eb4b7eba9683f5bcec9aba9473cc957","id":5546,"name":"UpdatedMaxInsuredDays","nameLocation":"108:21:21","nodeType":"EventDefinition","parameters":{"id":5545,"nodeType":"ParameterList","parameters":[],"src":"129:2:21"},"src":"102:30:21"},{"anonymous":false,"eventSelector":"75c07eb064b8ccf959bcc601b55315ca198e67b597dc0a7b93e130f8ca779a67","id":5548,"name":"UpdatedStartWaitingTime","nameLocation":"143:23:21","nodeType":"EventDefinition","parameters":{"id":5547,"nodeType":"ParameterList","parameters":[],"src":"166:2:21"},"src":"137:32:21"},{"anonymous":false,"eventSelector":"003a5a2424463bb22c8fc4c0f2422b7a18712b7713f9619caa313f499fad615e","id":5550,"name":"UpdatedMinimumInsurancePeriod","nameLocation":"180:29:21","nodeType":"EventDefinition","parameters":{"id":5549,"nodeType":"ParameterList","parameters":[],"src":"209:2:21"},"src":"174:38:21"},{"errorSelector":"005321aa","id":5552,"name":"CFA__ImmutableChangesError","nameLocation":"253:26:21","nodeType":"ErrorDefinition","parameters":{"id":5551,"nodeType":"ParameterList","parameters":[],"src":"279:2:21"},"src":"247:35:21"},{"errorSelector":"b00fcb1e","id":5554,"name":"CFA__TransactionFailedError","nameLocation":"293:27:21","nodeType":"ErrorDefinition","parameters":{"id":5553,"nodeType":"ParameterList","parameters":[],"src":"320:2:21"},"src":"287:36:21"},{"errorSelector":"96ae3e82","id":5556,"name":"CFA__InactiveInsuranceError","nameLocation":"334:27:21","nodeType":"ErrorDefinition","parameters":{"id":5555,"nodeType":"ParameterList","parameters":[],"src":"361:2:21"},"src":"328:36:21"},{"errorSelector":"1e45d1b4","id":5558,"name":"CFA__SubCategoryNotActiveError","nameLocation":"375:30:21","nodeType":"ErrorDefinition","parameters":{"id":5557,"nodeType":"ParameterList","parameters":[],"src":"405:2:21"},"src":"369:39:21"},{"errorSelector":"707001b5","id":5560,"name":"CFA__ActiveInsuranceExistError","nameLocation":"419:30:21","nodeType":"ErrorDefinition","parameters":{"id":5559,"nodeType":"ParameterList","parameters":[],"src":"449:2:21"},"src":"413:39:21"},{"errorSelector":"00cd4743","id":5562,"name":"CFA__InsuranceCoverNotAvailableError","nameLocation":"463:36:21","nodeType":"ErrorDefinition","parameters":{"id":5561,"nodeType":"ParameterList","parameters":[],"src":"499:2:21"},"src":"457:45:21"},{"errorSelector":"e4b581a5","id":5564,"name":"CFA__NotEvenMinimumInsurancePeriodAmount","nameLocation":"513:40:21","nodeType":"ErrorDefinition","parameters":{"id":5563,"nodeType":"ParameterList","parameters":[],"src":"553:2:21"},"src":"507:49:21"},{"functionSelector":"6e8847bd","id":5581,"implemented":false,"kind":"function","modifiers":[],"name":"addInsuranceAmount","nameLocation":"571:18:21","nodeType":"FunctionDefinition","parameters":{"id":5577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5566,"mutability":"mutable","name":"insuredAmount","nameLocation":"607:13:21","nodeType":"VariableDeclaration","scope":5581,"src":"599:21:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5565,"name":"uint256","nodeType":"ElementaryTypeName","src":"599:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5568,"mutability":"mutable","name":"categoryID","nameLocation":"639:10:21","nodeType":"VariableDeclaration","scope":5581,"src":"631:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5567,"name":"uint256","nodeType":"ElementaryTypeName","src":"631:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5570,"mutability":"mutable","name":"subCategoryID","nameLocation":"668:13:21","nodeType":"VariableDeclaration","scope":5581,"src":"660:21:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5569,"name":"uint256","nodeType":"ElementaryTypeName","src":"660:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5572,"mutability":"mutable","name":"v","nameLocation":"697:1:21","nodeType":"VariableDeclaration","scope":5581,"src":"691:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5571,"name":"uint8","nodeType":"ElementaryTypeName","src":"691:5:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":5574,"mutability":"mutable","name":"r","nameLocation":"717:1:21","nodeType":"VariableDeclaration","scope":5581,"src":"709:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5573,"name":"bytes32","nodeType":"ElementaryTypeName","src":"709:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5576,"mutability":"mutable","name":"s","nameLocation":"737:1:21","nodeType":"VariableDeclaration","scope":5581,"src":"729:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5575,"name":"bytes32","nodeType":"ElementaryTypeName","src":"729:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"589:155:21"},"returnParameters":{"id":5580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5579,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5581,"src":"762:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5578,"name":"bool","nodeType":"ElementaryTypeName","src":"762:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"761:6:21"},"scope":5688,"src":"562:206:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"642adc28","id":5600,"implemented":false,"kind":"function","modifiers":[],"name":"minusInsuranceAmount","nameLocation":"783:20:21","nodeType":"FunctionDefinition","parameters":{"id":5596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5583,"mutability":"mutable","name":"insuredAmount","nameLocation":"821:13:21","nodeType":"VariableDeclaration","scope":5600,"src":"813:21:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5582,"name":"uint256","nodeType":"ElementaryTypeName","src":"813:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5585,"mutability":"mutable","name":"categoryID","nameLocation":"853:10:21","nodeType":"VariableDeclaration","scope":5600,"src":"845:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5584,"name":"uint256","nodeType":"ElementaryTypeName","src":"845:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5587,"mutability":"mutable","name":"subCategoryID","nameLocation":"882:13:21","nodeType":"VariableDeclaration","scope":5600,"src":"874:21:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5586,"name":"uint256","nodeType":"ElementaryTypeName","src":"874:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5589,"mutability":"mutable","name":"v","nameLocation":"911:1:21","nodeType":"VariableDeclaration","scope":5600,"src":"905:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5588,"name":"uint8","nodeType":"ElementaryTypeName","src":"905:5:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":5591,"mutability":"mutable","name":"r","nameLocation":"931:1:21","nodeType":"VariableDeclaration","scope":5600,"src":"923:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5590,"name":"bytes32","nodeType":"ElementaryTypeName","src":"923:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5593,"mutability":"mutable","name":"s","nameLocation":"951:1:21","nodeType":"VariableDeclaration","scope":5600,"src":"943:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5592,"name":"bytes32","nodeType":"ElementaryTypeName","src":"943:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5595,"mutability":"mutable","name":"closeStream","nameLocation":"967:11:21","nodeType":"VariableDeclaration","scope":5600,"src":"962:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5594,"name":"bool","nodeType":"ElementaryTypeName","src":"962:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:181:21"},"returnParameters":{"id":5599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5598,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5600,"src":"1002:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5597,"name":"bool","nodeType":"ElementaryTypeName","src":"1002:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1001:6:21"},"scope":5688,"src":"774:234:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"1a5c8f28","id":5612,"implemented":false,"kind":"function","modifiers":[],"name":"findActivePremiumCost","nameLocation":"1023:21:21","nodeType":"FunctionDefinition","parameters":{"id":5607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5602,"mutability":"mutable","name":"userAddress","nameLocation":"1062:11:21","nodeType":"VariableDeclaration","scope":5612,"src":"1054:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5601,"name":"address","nodeType":"ElementaryTypeName","src":"1054:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5604,"mutability":"mutable","name":"categoryID","nameLocation":"1092:10:21","nodeType":"VariableDeclaration","scope":5612,"src":"1084:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5603,"name":"uint256","nodeType":"ElementaryTypeName","src":"1084:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5606,"mutability":"mutable","name":"insuranceCount","nameLocation":"1121:14:21","nodeType":"VariableDeclaration","scope":5612,"src":"1113:22:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5605,"name":"uint256","nodeType":"ElementaryTypeName","src":"1113:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1044:97:21"},"returnParameters":{"id":5611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5610,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5612,"src":"1164:16:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5608,"name":"uint256","nodeType":"ElementaryTypeName","src":"1164:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5609,"nodeType":"ArrayTypeName","src":"1164:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1163:18:21"},"scope":5688,"src":"1014:168:21","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"4e94c048","id":5621,"implemented":false,"kind":"function","modifiers":[],"name":"calculateTotalFlowMade","nameLocation":"1197:22:21","nodeType":"FunctionDefinition","parameters":{"id":5617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5614,"mutability":"mutable","name":"userAddress","nameLocation":"1237:11:21","nodeType":"VariableDeclaration","scope":5621,"src":"1229:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5613,"name":"address","nodeType":"ElementaryTypeName","src":"1229:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5616,"mutability":"mutable","name":"categoryID","nameLocation":"1267:10:21","nodeType":"VariableDeclaration","scope":5621,"src":"1259:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5615,"name":"uint256","nodeType":"ElementaryTypeName","src":"1259:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1219:64:21"},"returnParameters":{"id":5620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5619,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5621,"src":"1306:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5618,"name":"uint256","nodeType":"ElementaryTypeName","src":"1306:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1305:9:21"},"scope":5688,"src":"1188:127:21","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"cff5eede","id":5628,"implemented":false,"kind":"function","modifiers":[],"name":"calculateTotalFlowMade","nameLocation":"1332:22:21","nodeType":"FunctionDefinition","parameters":{"id":5624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5623,"mutability":"mutable","name":"userAddress","nameLocation":"1372:11:21","nodeType":"VariableDeclaration","scope":5628,"src":"1364:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5622,"name":"address","nodeType":"ElementaryTypeName","src":"1364:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1354:35:21"},"returnParameters":{"id":5627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5626,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5628,"src":"1412:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5625,"name":"uint256","nodeType":"ElementaryTypeName","src":"1412:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1411:9:21"},"scope":5688,"src":"1323:98:21","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"c392e850","id":5639,"implemented":false,"kind":"function","modifiers":[],"name":"getUserInsuranceValidTillInfo","nameLocation":"1437:29:21","nodeType":"FunctionDefinition","parameters":{"id":5635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5630,"mutability":"mutable","name":"userAddress","nameLocation":"1484:11:21","nodeType":"VariableDeclaration","scope":5639,"src":"1476:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5629,"name":"address","nodeType":"ElementaryTypeName","src":"1476:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5632,"mutability":"mutable","name":"categoryID","nameLocation":"1514:10:21","nodeType":"VariableDeclaration","scope":5639,"src":"1506:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5631,"name":"uint256","nodeType":"ElementaryTypeName","src":"1506:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5634,"mutability":"mutable","name":"subCategoryID","nameLocation":"1543:13:21","nodeType":"VariableDeclaration","scope":5639,"src":"1535:21:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5633,"name":"uint256","nodeType":"ElementaryTypeName","src":"1535:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1466:96:21"},"returnParameters":{"id":5638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5637,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5639,"src":"1585:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5636,"name":"uint256","nodeType":"ElementaryTypeName","src":"1585:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1584:9:21"},"scope":5688,"src":"1428:166:21","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"81280d2b","id":5650,"implemented":false,"kind":"function","modifiers":[],"name":"getUserInsuranceStatus","nameLocation":"1609:22:21","nodeType":"FunctionDefinition","parameters":{"id":5646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5641,"mutability":"mutable","name":"userAddress","nameLocation":"1649:11:21","nodeType":"VariableDeclaration","scope":5650,"src":"1641:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5640,"name":"address","nodeType":"ElementaryTypeName","src":"1641:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5643,"mutability":"mutable","name":"categoryID","nameLocation":"1679:10:21","nodeType":"VariableDeclaration","scope":5650,"src":"1671:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5642,"name":"uint256","nodeType":"ElementaryTypeName","src":"1671:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5645,"mutability":"mutable","name":"subCategoryID","nameLocation":"1708:13:21","nodeType":"VariableDeclaration","scope":5650,"src":"1700:21:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5644,"name":"uint256","nodeType":"ElementaryTypeName","src":"1700:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1631:96:21"},"returnParameters":{"id":5649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5648,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5650,"src":"1750:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5647,"name":"bool","nodeType":"ElementaryTypeName","src":"1750:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1749:6:21"},"scope":5688,"src":"1600:156:21","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"88295fb2","id":5671,"implemented":false,"kind":"function","modifiers":[],"name":"getUserInsuranceInfo","nameLocation":"1771:20:21","nodeType":"FunctionDefinition","parameters":{"id":5657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5652,"mutability":"mutable","name":"userAddress","nameLocation":"1809:11:21","nodeType":"VariableDeclaration","scope":5671,"src":"1801:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5651,"name":"address","nodeType":"ElementaryTypeName","src":"1801:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5654,"mutability":"mutable","name":"categoryID","nameLocation":"1839:10:21","nodeType":"VariableDeclaration","scope":5671,"src":"1831:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5653,"name":"uint256","nodeType":"ElementaryTypeName","src":"1831:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5656,"mutability":"mutable","name":"subCategoryID","nameLocation":"1868:13:21","nodeType":"VariableDeclaration","scope":5671,"src":"1860:21:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5655,"name":"uint256","nodeType":"ElementaryTypeName","src":"1860:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1791:96:21"},"returnParameters":{"id":5670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5659,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5671,"src":"1910:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5658,"name":"uint256","nodeType":"ElementaryTypeName","src":"1910:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5661,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5671,"src":"1919:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5660,"name":"uint256","nodeType":"ElementaryTypeName","src":"1919:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5663,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5671,"src":"1928:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5662,"name":"uint256","nodeType":"ElementaryTypeName","src":"1928:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5665,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5671,"src":"1937:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5664,"name":"uint256","nodeType":"ElementaryTypeName","src":"1937:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5667,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5671,"src":"1946:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5666,"name":"uint256","nodeType":"ElementaryTypeName","src":"1946:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5669,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5671,"src":"1955:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5668,"name":"bool","nodeType":"ElementaryTypeName","src":"1955:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1909:51:21"},"scope":5688,"src":"1762:199:21","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"ec249164","id":5680,"implemented":false,"kind":"function","modifiers":[],"name":"getGlobalUserInsuranceInfo","nameLocation":"1980:26:21","nodeType":"FunctionDefinition","parameters":{"id":5674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5673,"mutability":"mutable","name":"_userAddress","nameLocation":"2024:12:21","nodeType":"VariableDeclaration","scope":5680,"src":"2016:20:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5672,"name":"address","nodeType":"ElementaryTypeName","src":"2016:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2006:36:21"},"returnParameters":{"id":5679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5676,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5680,"src":"2066:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5675,"name":"uint256","nodeType":"ElementaryTypeName","src":"2066:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5678,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5680,"src":"2075:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5677,"name":"uint256","nodeType":"ElementaryTypeName","src":"2075:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2065:18:21"},"scope":5688,"src":"1971:113:21","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"42f6b8a7","id":5687,"implemented":false,"kind":"function","modifiers":[],"name":"getGlobalUserInsurancePremiumCost","nameLocation":"2099:33:21","nodeType":"FunctionDefinition","parameters":{"id":5683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5682,"mutability":"mutable","name":"userAddress","nameLocation":"2150:11:21","nodeType":"VariableDeclaration","scope":5687,"src":"2142:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5681,"name":"address","nodeType":"ElementaryTypeName","src":"2142:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2132:35:21"},"returnParameters":{"id":5686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5685,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5687,"src":"2190:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5684,"name":"uint256","nodeType":"ElementaryTypeName","src":"2190:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2189:9:21"},"scope":5688,"src":"2090:109:21","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5689,"src":"63:2138:21","usedErrors":[5552,5554,5556,5558,5560,5562,5564]}],"src":"37:2164:21"},"id":21},"contracts/interfaces/IERC20Extended.sol":{"ast":{"absolutePath":"contracts/interfaces/IERC20Extended.sol","exportedSymbols":{"IERC20Extended":[5713],"IERC20Upgradeable":[858]},"id":5714,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5690,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"33:23:22"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","id":5691,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5714,"sourceUnit":859,"src":"58:79:22","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5693,"name":"IERC20Upgradeable","nameLocations":["263:17:22"],"nodeType":"IdentifierPath","referencedDeclaration":858,"src":"263:17:22"},"id":5694,"nodeType":"InheritanceSpecifier","src":"263:17:22"}],"canonicalName":"IERC20Extended","contractDependencies":[],"contractKind":"interface","documentation":{"id":5692,"nodeType":"StructuredDocumentation","src":"139:95:22","text":" @dev Interface for the optional mint and burnFrom functions from the ERC20 standard."},"fullyImplemented":false,"id":5713,"linearizedBaseContracts":[5713,858],"name":"IERC20Extended","nameLocation":"245:14:22","nodeType":"ContractDefinition","nodes":[{"functionSelector":"40c10f19","id":5703,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"301:4:22","nodeType":"FunctionDefinition","parameters":{"id":5699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5696,"mutability":"mutable","name":"to","nameLocation":"314:2:22","nodeType":"VariableDeclaration","scope":5703,"src":"306:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5695,"name":"address","nodeType":"ElementaryTypeName","src":"306:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5698,"mutability":"mutable","name":"amount","nameLocation":"326:6:22","nodeType":"VariableDeclaration","scope":5703,"src":"318:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5697,"name":"uint256","nodeType":"ElementaryTypeName","src":"318:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"305:28:22"},"returnParameters":{"id":5702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5701,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5703,"src":"351:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5700,"name":"bool","nodeType":"ElementaryTypeName","src":"351:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"350:6:22"},"scope":5713,"src":"292:65:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"79cc6790","id":5712,"implemented":false,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"372:8:22","nodeType":"FunctionDefinition","parameters":{"id":5708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5705,"mutability":"mutable","name":"account","nameLocation":"389:7:22","nodeType":"VariableDeclaration","scope":5712,"src":"381:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5704,"name":"address","nodeType":"ElementaryTypeName","src":"381:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5707,"mutability":"mutable","name":"amount","nameLocation":"406:6:22","nodeType":"VariableDeclaration","scope":5712,"src":"398:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5706,"name":"uint256","nodeType":"ElementaryTypeName","src":"398:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"380:33:22"},"returnParameters":{"id":5711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5710,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5712,"src":"431:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5709,"name":"bool","nodeType":"ElementaryTypeName","src":"431:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"430:6:22"},"scope":5713,"src":"363:74:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5714,"src":"235:209:22","usedErrors":[]}],"src":"33:411:22"},"id":22},"contracts/interfaces/IGENZStaking.sol":{"ast":{"absolutePath":"contracts/interfaces/IGENZStaking.sol","exportedSymbols":{"IGENZStaking":[5767]},"id":5768,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":5715,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"37:23:23"},{"abstract":false,"baseContracts":[],"canonicalName":"IGENZStaking","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5767,"linearizedBaseContracts":[5767],"name":"IGENZStaking","nameLocation":"72:12:23","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"c43e5db88f387521adfb9f79c0c9efd47004dc3a041358383ecccb1a1509dbf6","id":5719,"name":"UpdatedWithdrawTimer","nameLocation":"98:20:23","nodeType":"EventDefinition","parameters":{"id":5718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5717,"indexed":true,"mutability":"mutable","name":"timeInMinutes","nameLocation":"135:13:23","nodeType":"VariableDeclaration","scope":5719,"src":"119:29:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5716,"name":"uint256","nodeType":"ElementaryTypeName","src":"119:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"118:31:23"},"src":"92:58:23"},{"anonymous":false,"eventSelector":"4e84e59515fa6d59eedd951d065c81f1962f0e5132f2e9120b47d64c7b33a177","id":5723,"name":"UpdatedMinStakingAmount","nameLocation":"162:23:23","nodeType":"EventDefinition","parameters":{"id":5722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5721,"indexed":true,"mutability":"mutable","name":"value","nameLocation":"202:5:23","nodeType":"VariableDeclaration","scope":5723,"src":"186:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5720,"name":"uint256","nodeType":"ElementaryTypeName","src":"186:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"185:23:23"},"src":"156:53:23"},{"anonymous":false,"eventSelector":"f1e64f5ab94083442836ae6ef7e94101f7fcc786c3e761b00d5f4e10c6c20196","id":5729,"name":"StakedGENZ","nameLocation":"221:10:23","nodeType":"EventDefinition","parameters":{"id":5728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5725,"indexed":true,"mutability":"mutable","name":"userAddress","nameLocation":"248:11:23","nodeType":"VariableDeclaration","scope":5729,"src":"232:27:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5724,"name":"address","nodeType":"ElementaryTypeName","src":"232:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5727,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"269:5:23","nodeType":"VariableDeclaration","scope":5729,"src":"261:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5726,"name":"uint256","nodeType":"ElementaryTypeName","src":"261:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"231:44:23"},"src":"215:61:23"},{"anonymous":false,"eventSelector":"33acb29a4ba6d440da1a7ba75e505a000b362f21a991b589437f8f04dd98fd6b","id":5735,"name":"UnstakedGENZ","nameLocation":"288:12:23","nodeType":"EventDefinition","parameters":{"id":5734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5731,"indexed":true,"mutability":"mutable","name":"userAddress","nameLocation":"317:11:23","nodeType":"VariableDeclaration","scope":5735,"src":"301:27:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5730,"name":"address","nodeType":"ElementaryTypeName","src":"301:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5733,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"338:5:23","nodeType":"VariableDeclaration","scope":5735,"src":"330:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5732,"name":"uint256","nodeType":"ElementaryTypeName","src":"330:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"300:44:23"},"src":"282:63:23"},{"functionSelector":"d6fb97a5","id":5742,"implemented":false,"kind":"function","modifiers":[],"name":"stakeGENZ","nameLocation":"360:9:23","nodeType":"FunctionDefinition","parameters":{"id":5738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5737,"mutability":"mutable","name":"_value","nameLocation":"378:6:23","nodeType":"VariableDeclaration","scope":5742,"src":"370:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5736,"name":"uint256","nodeType":"ElementaryTypeName","src":"370:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"369:16:23"},"returnParameters":{"id":5741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5740,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5742,"src":"403:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5739,"name":"bool","nodeType":"ElementaryTypeName","src":"403:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"402:6:23"},"scope":5767,"src":"351:58:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"6c64f0b4","id":5749,"implemented":false,"kind":"function","modifiers":[],"name":"activateWithdrawalTimer","nameLocation":"424:23:23","nodeType":"FunctionDefinition","parameters":{"id":5745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5744,"mutability":"mutable","name":"_value","nameLocation":"456:6:23","nodeType":"VariableDeclaration","scope":5749,"src":"448:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5743,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"447:16:23"},"returnParameters":{"id":5748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5747,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5749,"src":"481:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5746,"name":"bool","nodeType":"ElementaryTypeName","src":"481:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"480:6:23"},"scope":5767,"src":"415:72:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"060e5c6e","id":5756,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawGENZ","nameLocation":"502:12:23","nodeType":"FunctionDefinition","parameters":{"id":5752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5751,"mutability":"mutable","name":"_value","nameLocation":"523:6:23","nodeType":"VariableDeclaration","scope":5756,"src":"515:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5750,"name":"uint256","nodeType":"ElementaryTypeName","src":"515:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"514:16:23"},"returnParameters":{"id":5755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5754,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5756,"src":"548:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5753,"name":"bool","nodeType":"ElementaryTypeName","src":"548:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"547:6:23"},"scope":5767,"src":"493:61:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"b0e31b2d","id":5761,"implemented":false,"kind":"function","modifiers":[],"name":"totalTokensStaked","nameLocation":"569:17:23","nodeType":"FunctionDefinition","parameters":{"id":5757,"nodeType":"ParameterList","parameters":[],"src":"586:2:23"},"returnParameters":{"id":5760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5759,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5761,"src":"611:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5758,"name":"uint256","nodeType":"ElementaryTypeName","src":"611:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"610:9:23"},"scope":5767,"src":"560:60:23","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"ed0cdb1a","id":5766,"implemented":false,"kind":"function","modifiers":[],"name":"getUserStakedGENZBalance","nameLocation":"635:24:23","nodeType":"FunctionDefinition","parameters":{"id":5762,"nodeType":"ParameterList","parameters":[],"src":"659:2:23"},"returnParameters":{"id":5765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5764,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5766,"src":"684:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5763,"name":"uint256","nodeType":"ElementaryTypeName","src":"684:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"683:9:23"},"scope":5767,"src":"626:67:23","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5768,"src":"62:634:23","usedErrors":[]}],"src":"37:659:23"},"id":23},"contracts/interfaces/IGlobalPauseOperation.sol":{"ast":{"absolutePath":"contracts/interfaces/IGlobalPauseOperation.sol","exportedSymbols":{"IGlobalPauseOperation":[5797]},"id":5798,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5769,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"32:23:24"},{"abstract":false,"baseContracts":[],"canonicalName":"IGlobalPauseOperation","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5797,"linearizedBaseContracts":[5797],"name":"IGlobalPauseOperation","nameLocation":"67:21:24","nodeType":"ContractDefinition","nodes":[{"errorSelector":"4806cc9f","id":5771,"name":"GlobalPauseOps__ZeroAddressInputError","nameLocation":"102:37:24","nodeType":"ErrorDefinition","parameters":{"id":5770,"nodeType":"ParameterList","parameters":[],"src":"139:2:24"},"src":"96:46:24"},{"errorSelector":"0dfbbf38","id":5773,"name":"GlobalPauseOperation__ImmutableChangesError","nameLocation":"154:43:24","nodeType":"ErrorDefinition","parameters":{"id":5772,"nodeType":"ParameterList","parameters":[],"src":"197:2:24"},"src":"148:52:24"},{"anonymous":false,"eventSelector":"ced598d6b2f70b0acf8f61670ecfc67f6a33a9615186db06b6f697da4236590c","id":5777,"name":"PausedOperation","nameLocation":"212:15:24","nodeType":"EventDefinition","parameters":{"id":5776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5775,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"236:7:24","nodeType":"VariableDeclaration","scope":5777,"src":"228:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5774,"name":"address","nodeType":"ElementaryTypeName","src":"228:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"227:17:24"},"src":"206:39:24"},{"anonymous":false,"eventSelector":"800fbe4f45115bec6578674f3cdb3bc672a34ec27719b3259f8ee19044904bfc","id":5781,"name":"UnpausedOperation","nameLocation":"257:17:24","nodeType":"EventDefinition","parameters":{"id":5780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5779,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"283:7:24","nodeType":"VariableDeclaration","scope":5781,"src":"275:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5778,"name":"address","nodeType":"ElementaryTypeName","src":"275:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"274:17:24"},"src":"251:41:24"},{"functionSelector":"c9d07020","id":5786,"implemented":false,"kind":"function","modifiers":[],"name":"pauseOperation","nameLocation":"307:14:24","nodeType":"FunctionDefinition","parameters":{"id":5782,"nodeType":"ParameterList","parameters":[],"src":"321:2:24"},"returnParameters":{"id":5785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5784,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5786,"src":"341:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5783,"name":"bool","nodeType":"ElementaryTypeName","src":"341:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"340:6:24"},"scope":5797,"src":"298:49:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"39511e99","id":5791,"implemented":false,"kind":"function","modifiers":[],"name":"unpauseOperation","nameLocation":"362:16:24","nodeType":"FunctionDefinition","parameters":{"id":5787,"nodeType":"ParameterList","parameters":[],"src":"378:2:24"},"returnParameters":{"id":5790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5789,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5791,"src":"398:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5788,"name":"bool","nodeType":"ElementaryTypeName","src":"398:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"397:6:24"},"scope":5797,"src":"353:51:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"b187bd26","id":5796,"implemented":false,"kind":"function","modifiers":[],"name":"isPaused","nameLocation":"423:8:24","nodeType":"FunctionDefinition","parameters":{"id":5792,"nodeType":"ParameterList","parameters":[],"src":"431:2:24"},"returnParameters":{"id":5795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5794,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5796,"src":"456:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5793,"name":"bool","nodeType":"ElementaryTypeName","src":"456:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"455:6:24"},"scope":5797,"src":"414:48:24","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5798,"src":"57:407:24","usedErrors":[5771,5773]}],"src":"32:432:24"},"id":24},"contracts/interfaces/IInsuranceRegistry.sol":{"ast":{"absolutePath":"contracts/interfaces/IInsuranceRegistry.sol","exportedSymbols":{"IInsuranceRegistry":[5916]},"id":5917,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":5799,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"37:23:25"},{"abstract":false,"baseContracts":[],"canonicalName":"IInsuranceRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":5800,"nodeType":"StructuredDocumentation","src":"62:85:25","text":"Report any bug or issues at:\n @custom:security-contact anshik@safezen.finance"},"fullyImplemented":false,"id":5916,"linearizedBaseContracts":[5916],"name":"IInsuranceRegistry","nameLocation":"157:18:25","nodeType":"ContractDefinition","nodes":[{"errorSelector":"f2078a29","id":5802,"name":"InsuranceRegistry__ImmutableChangesError","nameLocation":"189:40:25","nodeType":"ErrorDefinition","parameters":{"id":5801,"nodeType":"ParameterList","parameters":[],"src":"229:2:25"},"src":"183:49:25"},{"errorSelector":"10f9b95e","id":5804,"name":"InsuranceRegistry__TransactionFailedError","nameLocation":"243:41:25","nodeType":"ErrorDefinition","parameters":{"id":5803,"nodeType":"ParameterList","parameters":[],"src":"284:2:25"},"src":"237:50:25"},{"errorSelector":"383d9f80","id":5806,"name":"InsuranceRegistry__NotEnoughLiquidityError","nameLocation":"298:42:25","nodeType":"ErrorDefinition","parameters":{"id":5805,"nodeType":"ParameterList","parameters":[],"src":"340:2:25"},"src":"292:51:25"},{"anonymous":false,"eventSelector":"924ffeb66847f2055efa4c7fd2517bc3b2f48b27f11d1ed963a146980f484db8","id":5808,"name":"UpdatedClaimStakedValue","nameLocation":"355:23:25","nodeType":"EventDefinition","parameters":{"id":5807,"nodeType":"ParameterList","parameters":[],"src":"378:2:25"},"src":"349:32:25"},{"functionSelector":"6ad08f05","id":5819,"implemented":false,"kind":"function","modifiers":[],"name":"addInsuranceLiquidity","nameLocation":"396:21:25","nodeType":"FunctionDefinition","parameters":{"id":5815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5810,"mutability":"mutable","name":"categoryID","nameLocation":"435:10:25","nodeType":"VariableDeclaration","scope":5819,"src":"427:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5809,"name":"uint256","nodeType":"ElementaryTypeName","src":"427:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5812,"mutability":"mutable","name":"subCategoryID_","nameLocation":"463:14:25","nodeType":"VariableDeclaration","scope":5819,"src":"455:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5811,"name":"uint256","nodeType":"ElementaryTypeName","src":"455:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5814,"mutability":"mutable","name":"liquiditySupplied","nameLocation":"495:17:25","nodeType":"VariableDeclaration","scope":5819,"src":"487:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5813,"name":"uint256","nodeType":"ElementaryTypeName","src":"487:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"417:101:25"},"returnParameters":{"id":5818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5817,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5819,"src":"536:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5816,"name":"bool","nodeType":"ElementaryTypeName","src":"536:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"535:6:25"},"scope":5916,"src":"387:155:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"c296d870","id":5830,"implemented":false,"kind":"function","modifiers":[],"name":"removeInsuranceLiquidity","nameLocation":"557:24:25","nodeType":"FunctionDefinition","parameters":{"id":5826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5821,"mutability":"mutable","name":"categoryID","nameLocation":"599:10:25","nodeType":"VariableDeclaration","scope":5830,"src":"591:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5820,"name":"uint256","nodeType":"ElementaryTypeName","src":"591:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5823,"mutability":"mutable","name":"subCategoryID_","nameLocation":"627:14:25","nodeType":"VariableDeclaration","scope":5830,"src":"619:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5822,"name":"uint256","nodeType":"ElementaryTypeName","src":"619:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5825,"mutability":"mutable","name":"liquiditySupplied","nameLocation":"660:17:25","nodeType":"VariableDeclaration","scope":5830,"src":"652:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5824,"name":"uint256","nodeType":"ElementaryTypeName","src":"652:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"581:102:25"},"returnParameters":{"id":5829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5828,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5830,"src":"701:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5827,"name":"bool","nodeType":"ElementaryTypeName","src":"701:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"700:6:25"},"scope":5916,"src":"548:159:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"d9895c70","id":5843,"implemented":false,"kind":"function","modifiers":[],"name":"addCoverageOffered","nameLocation":"722:18:25","nodeType":"FunctionDefinition","parameters":{"id":5839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5832,"mutability":"mutable","name":"categoryID","nameLocation":"758:10:25","nodeType":"VariableDeclaration","scope":5843,"src":"750:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5831,"name":"uint256","nodeType":"ElementaryTypeName","src":"750:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5834,"mutability":"mutable","name":"subCategoryID_","nameLocation":"786:14:25","nodeType":"VariableDeclaration","scope":5843,"src":"778:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5833,"name":"uint256","nodeType":"ElementaryTypeName","src":"778:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5836,"mutability":"mutable","name":"coverageAmount","nameLocation":"819:14:25","nodeType":"VariableDeclaration","scope":5843,"src":"811:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5835,"name":"uint256","nodeType":"ElementaryTypeName","src":"811:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5838,"mutability":"mutable","name":"incomingFlowRate","nameLocation":"851:16:25","nodeType":"VariableDeclaration","scope":5843,"src":"843:24:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5837,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"740:133:25"},"returnParameters":{"id":5842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5841,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5843,"src":"891:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5840,"name":"bool","nodeType":"ElementaryTypeName","src":"891:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"890:6:25"},"scope":5916,"src":"713:184:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"26a6e9eb","id":5856,"implemented":false,"kind":"function","modifiers":[],"name":"removeCoverageOffered","nameLocation":"912:21:25","nodeType":"FunctionDefinition","parameters":{"id":5852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5845,"mutability":"mutable","name":"categoryID","nameLocation":"951:10:25","nodeType":"VariableDeclaration","scope":5856,"src":"943:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5844,"name":"uint256","nodeType":"ElementaryTypeName","src":"943:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5847,"mutability":"mutable","name":"subCategoryID_","nameLocation":"979:14:25","nodeType":"VariableDeclaration","scope":5856,"src":"971:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5846,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5849,"mutability":"mutable","name":"coverageAmount","nameLocation":"1012:14:25","nodeType":"VariableDeclaration","scope":5856,"src":"1004:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5848,"name":"uint256","nodeType":"ElementaryTypeName","src":"1004:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5851,"mutability":"mutable","name":"incomingFlowRate","nameLocation":"1045:16:25","nodeType":"VariableDeclaration","scope":5856,"src":"1037:24:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5850,"name":"uint256","nodeType":"ElementaryTypeName","src":"1037:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"933:134:25"},"returnParameters":{"id":5855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5854,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5856,"src":"1085:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5853,"name":"bool","nodeType":"ElementaryTypeName","src":"1085:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1084:6:25"},"scope":5916,"src":"903:188:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"b9e19fe1","id":5867,"implemented":false,"kind":"function","modifiers":[],"name":"claimAdded","nameLocation":"1106:10:25","nodeType":"FunctionDefinition","parameters":{"id":5863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5858,"mutability":"mutable","name":"stakedTokenID","nameLocation":"1134:13:25","nodeType":"VariableDeclaration","scope":5867,"src":"1126:21:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5857,"name":"uint256","nodeType":"ElementaryTypeName","src":"1126:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5860,"mutability":"mutable","name":"categoryID","nameLocation":"1166:10:25","nodeType":"VariableDeclaration","scope":5867,"src":"1158:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5859,"name":"uint256","nodeType":"ElementaryTypeName","src":"1158:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5862,"mutability":"mutable","name":"subCategoryID_","nameLocation":"1195:14:25","nodeType":"VariableDeclaration","scope":5867,"src":"1187:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5861,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1116:99:25"},"returnParameters":{"id":5866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5865,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5867,"src":"1233:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5864,"name":"bool","nodeType":"ElementaryTypeName","src":"1233:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1232:6:25"},"scope":5916,"src":"1097:142:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"6c12b868","id":5874,"implemented":false,"kind":"function","modifiers":[],"name":"getVersionID","nameLocation":"1254:12:25","nodeType":"FunctionDefinition","parameters":{"id":5870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5869,"mutability":"mutable","name":"categoryID","nameLocation":"1275:10:25","nodeType":"VariableDeclaration","scope":5874,"src":"1267:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5868,"name":"uint256","nodeType":"ElementaryTypeName","src":"1267:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1266:20:25"},"returnParameters":{"id":5873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5872,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5874,"src":"1309:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5871,"name":"uint256","nodeType":"ElementaryTypeName","src":"1309:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1308:9:25"},"scope":5916,"src":"1245:73:25","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"cf3f0fc0","id":5883,"implemented":false,"kind":"function","modifiers":[],"name":"calculateUnderwriterBalance","nameLocation":"1333:27:25","nodeType":"FunctionDefinition","parameters":{"id":5879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5876,"mutability":"mutable","name":"categoryID","nameLocation":"1378:10:25","nodeType":"VariableDeclaration","scope":5883,"src":"1370:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5875,"name":"uint256","nodeType":"ElementaryTypeName","src":"1370:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5878,"mutability":"mutable","name":"subCategoryID_","nameLocation":"1406:14:25","nodeType":"VariableDeclaration","scope":5883,"src":"1398:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5877,"name":"uint256","nodeType":"ElementaryTypeName","src":"1398:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1360:66:25"},"returnParameters":{"id":5882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5881,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5883,"src":"1449:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5880,"name":"uint256","nodeType":"ElementaryTypeName","src":"1449:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1448:9:25"},"scope":5916,"src":"1324:134:25","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"e1d01098","id":5888,"implemented":false,"kind":"function","modifiers":[],"name":"getLatestCategoryID","nameLocation":"1473:19:25","nodeType":"FunctionDefinition","parameters":{"id":5884,"nodeType":"ParameterList","parameters":[],"src":"1492:2:25"},"returnParameters":{"id":5887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5886,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5888,"src":"1517:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5885,"name":"uint256","nodeType":"ElementaryTypeName","src":"1517:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1516:9:25"},"scope":5916,"src":"1464:62:25","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"3bf4c082","id":5895,"implemented":false,"kind":"function","modifiers":[],"name":"getLatestSubCategoryID","nameLocation":"1541:22:25","nodeType":"FunctionDefinition","parameters":{"id":5891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5890,"mutability":"mutable","name":"categoryID","nameLocation":"1572:10:25","nodeType":"VariableDeclaration","scope":5895,"src":"1564:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5889,"name":"uint256","nodeType":"ElementaryTypeName","src":"1564:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1563:20:25"},"returnParameters":{"id":5894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5893,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5895,"src":"1606:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5892,"name":"uint256","nodeType":"ElementaryTypeName","src":"1606:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1605:9:25"},"scope":5916,"src":"1532:83:25","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"5657f79d","id":5906,"implemented":false,"kind":"function","modifiers":[],"name":"ifEnoughLiquidity","nameLocation":"1630:17:25","nodeType":"FunctionDefinition","parameters":{"id":5902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5897,"mutability":"mutable","name":"categoryID","nameLocation":"1656:10:25","nodeType":"VariableDeclaration","scope":5906,"src":"1648:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5896,"name":"uint256","nodeType":"ElementaryTypeName","src":"1648:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5899,"mutability":"mutable","name":"insuredAmount","nameLocation":"1676:13:25","nodeType":"VariableDeclaration","scope":5906,"src":"1668:21:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5898,"name":"uint256","nodeType":"ElementaryTypeName","src":"1668:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5901,"mutability":"mutable","name":"subCategoryID_","nameLocation":"1699:14:25","nodeType":"VariableDeclaration","scope":5906,"src":"1691:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5900,"name":"uint256","nodeType":"ElementaryTypeName","src":"1691:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1647:67:25"},"returnParameters":{"id":5905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5904,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5906,"src":"1737:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5903,"name":"bool","nodeType":"ElementaryTypeName","src":"1737:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1736:6:25"},"scope":5916,"src":"1621:122:25","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"5952a8c6","id":5915,"implemented":false,"kind":"function","modifiers":[],"name":"getStreamFlowRate","nameLocation":"1758:17:25","nodeType":"FunctionDefinition","parameters":{"id":5911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5908,"mutability":"mutable","name":"categoryID","nameLocation":"1784:10:25","nodeType":"VariableDeclaration","scope":5915,"src":"1776:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5907,"name":"uint256","nodeType":"ElementaryTypeName","src":"1776:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5910,"mutability":"mutable","name":"subCategoryID_","nameLocation":"1804:14:25","nodeType":"VariableDeclaration","scope":5915,"src":"1796:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5909,"name":"uint256","nodeType":"ElementaryTypeName","src":"1796:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1775:44:25"},"returnParameters":{"id":5914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5913,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5915,"src":"1842:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5912,"name":"uint256","nodeType":"ElementaryTypeName","src":"1842:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1841:9:25"},"scope":5916,"src":"1749:102:25","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5917,"src":"147:1706:25","usedErrors":[5802,5804,5806]}],"src":"37:1816:25"},"id":25}},"contracts":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"AccessControlUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.","kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":\"AccessControlUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1500,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1719,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":39,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_roles","offset":0,"slot":"101","type":"t_mapping(t_bytes32,t_struct(RoleData)34_storage)"},{"astId":334,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)34_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)34_storage"},"t_struct(RoleData)34_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":31,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":33,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"IAccessControlUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":\"IAccessControlUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"PausableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.","events":{"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"paused()":{"details":"Returns true if the contract is paused, and false otherwise."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":\"PausableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1500,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":601,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":706,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"ReentrancyGuardUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":\"ReentrancyGuardUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":721,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"_status","offset":0,"slot":"1","type":"t_uint256"},{"astId":779,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"__gap","offset":0,"slot":"2","type":"t_array(t_uint256)49_storage"}],"types":{"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"IERC20Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol":{"IERC20PermitUpgradeable":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":\"IERC20PermitUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"SafeERC20Upgradeable":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c25593687f1c52b5df7540c6c02680680cab80cdfffd44f43c0b5726c556f98464736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC2 SSTORE SWAP4 PUSH9 0x7F1C52B5DF7540C6C0 0x26 DUP1 PUSH9 0xCAB80CDFFFD44F43C SIGNEXTEND JUMPI 0x26 0xC5 JUMP 0xF9 DUP5 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"740:3847:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c25593687f1c52b5df7540c6c02680680cab80cdfffd44f43c0b5726c556f98464736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC2 SSTORE SWAP4 PUSH9 0x7F1C52B5DF7540C6C0 0x26 DUP1 PUSH9 0xCAB80CDFFFD44F43C SIGNEXTEND JUMPI 0x26 0xC5 JUMP 0xF9 DUP5 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"740:3847:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_callOptionalReturn(contract IERC20Upgradeable,bytes memory)":"infinite","safeApprove(contract IERC20Upgradeable,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20Upgradeable,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20Upgradeable,address,uint256)":"infinite","safePermit(contract IERC20PermitUpgradeable,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20Upgradeable,address,uint256)":"infinite","safeTransferFrom(contract IERC20Upgradeable,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":\"SafeERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ef4ddf34c8117976bb7512e118a70cfae645d22e067c884e07b9f28a5f13f4bd64736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEF 0x4D 0xDF CALLVALUE 0xC8 GT PUSH26 0x76BB7512E118A70CFAE645D22E067C884E07B9F28A5F13F4BD64 PUSH20 0x6F6C634300081000330000000000000000000000 ","sourceMap":"194:8087:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ef4ddf34c8117976bb7512e118a70cfae645d22e067c884e07b9f28a5f13f4bd64736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEF 0x4D 0xDF CALLVALUE 0xC8 GT PUSH26 0x76BB7512E118A70CFAE645D22E067C884E07B9F28A5F13F4BD64 PUSH20 0x6F6C634300081000330000000000000000000000 ","sourceMap":"194:8087:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1500,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d411ff3ff8a932ddf1702f7c8afec6c5767ac01ad740838c2a8364077866f9e364736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD4 GT SELFDESTRUCT EXTCODEHASH 0xF8 0xA9 ORIGIN 0xDD CALL PUSH17 0x2F7C8AFEC6C5767AC01AD740838C2A8364 SMOD PUSH25 0x66F9E364736F6C634300081000330000000000000000000000 ","sourceMap":"199:2098:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d411ff3ff8a932ddf1702f7c8afec6c5767ac01ad740838c2a8364077866f9e364736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD4 GT SELFDESTRUCT EXTCODEHASH 0xF8 0xA9 ORIGIN 0xDD CALL PUSH17 0x2F7C8AFEC6C5767AC01AD740838C2A8364 SMOD PUSH25 0x66F9E364736F6C634300081000330000000000000000000000 ","sourceMap":"199:2098:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ERC165Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":\"ERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1719,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"IERC165Upgradeable":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":\"IERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"MathUpgradeable":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122066f0cc9ea6df849ca2bbd31fcb6f2d12f06ccb50805015ff7ad82d2286763cb664736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0xF0CC9EA6DF849C LOG2 0xBB 0xD3 0x1F 0xCB PUSH16 0x2D12F06CCB50805015FF7AD82D228676 EXTCODECOPY 0xB6 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"202:12313:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122066f0cc9ea6df849ca2bbd31fcb6f2d12f06ccb50805015ff7ad82d2286763cb664736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0xF0CC9EA6DF849C LOG2 0xBB 0xD3 0x1F 0xCB PUSH16 0x2D12F06CCB50805015FF7AD82D228676 EXTCODECOPY 0xB6 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"202:12313:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum MathUpgradeable.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum MathUpgradeable.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum MathUpgradeable.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum MathUpgradeable.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/BaseUpgradeablePausable.sol":{"BaseUpgradeablePausable":{"abi":[{"inputs":[],"name":"BaseUpgradeablePausable__ZeroAddressError","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"__BaseUpgradeablePausable_init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isAdmin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13BD DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E810B1A GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x1E1 JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x13B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0xD2E JUMP JUMPDEST PUSH2 0x1FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xED PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE8 SWAP2 SWAP1 PUSH2 0xDC7 JUMP JUMPDEST PUSH2 0x277 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFA SWAP2 SWAP1 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x118 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x297 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x139 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x134 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x2B8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x143 PUSH2 0x33B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x150 SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x173 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x16E SWAP2 SWAP1 PUSH2 0xEBC JUMP JUMPDEST PUSH2 0x352 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x18F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18A SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x474 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19C SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AD PUSH2 0x4DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CB PUSH2 0x4E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D8 SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F6 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x505 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x270 JUMPI POP PUSH2 0x26F DUP3 PUSH2 0x526 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2A0 DUP3 PUSH2 0x277 JUMP JUMPDEST PUSH2 0x2A9 DUP2 PUSH2 0x590 JUMP JUMPDEST PUSH2 0x2B3 DUP4 DUP4 PUSH2 0x5A4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x2C0 PUSH2 0x685 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x32D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x324 SWAP1 PUSH2 0xF6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x337 DUP3 DUP3 PUSH2 0x68D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x398 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x407 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x40F PUSH2 0x76F JUMP JUMPDEST PUSH2 0x417 PUSH2 0x7C8 JUMP JUMPDEST PUSH2 0x41F PUSH2 0x819 JUMP JUMPDEST PUSH2 0x430 PUSH2 0x42A PUSH2 0x872 JUMP JUMPDEST DUP3 PUSH2 0x5A4 JUMP JUMPDEST PUSH2 0x441 PUSH2 0x43B PUSH2 0x89A JUMP JUMPDEST DUP3 PUSH2 0x5A4 JUMP JUMPDEST PUSH2 0x459 PUSH2 0x44C PUSH2 0x89A JUMP JUMPDEST PUSH2 0x454 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x8C2 JUMP JUMPDEST PUSH2 0x471 PUSH2 0x464 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x46C PUSH2 0x872 JUMP JUMPDEST PUSH2 0x8C2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x500 PUSH2 0x4F3 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x4FB PUSH2 0x685 JUMP JUMPDEST PUSH2 0x474 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x50E DUP3 PUSH2 0x277 JUMP JUMPDEST PUSH2 0x517 DUP2 PUSH2 0x590 JUMP JUMPDEST PUSH2 0x521 DUP4 DUP4 PUSH2 0x68D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5A1 DUP2 PUSH2 0x59C PUSH2 0x685 JUMP JUMPDEST PUSH2 0x91E JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x5AE DUP3 DUP3 PUSH2 0x474 JUMP JUMPDEST PUSH2 0x681 JUMPI PUSH1 0x1 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x626 PUSH2 0x685 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x697 DUP3 DUP3 PUSH2 0x474 JUMP JUMPDEST ISZERO PUSH2 0x76B JUMPI PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x710 PUSH2 0x685 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x7BE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7B5 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7C6 PUSH2 0x9A3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x817 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x80E SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x868 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x85F SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x870 PUSH2 0xA0F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8CD DUP4 PUSH2 0x277 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x97 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x928 DUP3 DUP3 PUSH2 0x474 JUMP JUMPDEST PUSH2 0x99F JUMPI PUSH2 0x935 DUP2 PUSH2 0xA68 JUMP JUMPDEST PUSH2 0x943 DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0xA95 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x954 SWAP3 SWAP2 SWAP1 PUSH2 0x1127 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x996 SWAP2 SWAP1 PUSH2 0x11AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x9F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9E9 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xA5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA55 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA8E DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0xA95 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0xAA8 SWAP2 SWAP1 PUSH2 0x1206 JUMP JUMPDEST PUSH2 0xAB2 SWAP2 SWAP1 PUSH2 0x1260 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xACB JUMPI PUSH2 0xACA PUSH2 0x1294 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xAFD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB35 JUMPI PUSH2 0xB34 PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xB99 JUMPI PUSH2 0xB98 PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0xBD9 SWAP2 SWAP1 PUSH2 0x1206 JUMP JUMPDEST PUSH2 0xBE3 SWAP2 SWAP1 PUSH2 0x1260 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xC83 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0xC25 JUMPI PUSH2 0xC24 PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xC3C JUMPI PUSH2 0xC3B PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0xC7C SWAP1 PUSH2 0x12F2 JUMP JUMPDEST SWAP1 POP PUSH2 0xBE6 JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0xCC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBE SWAP1 PUSH2 0x1367 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD0B DUP2 PUSH2 0xCD6 JUMP JUMPDEST DUP2 EQ PUSH2 0xD16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xD28 DUP2 PUSH2 0xD02 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD44 JUMPI PUSH2 0xD43 PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD52 DUP5 DUP3 DUP6 ADD PUSH2 0xD19 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD70 DUP2 PUSH2 0xD5B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD8B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD67 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDA4 DUP2 PUSH2 0xD91 JUMP JUMPDEST DUP2 EQ PUSH2 0xDAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xDC1 DUP2 PUSH2 0xD9B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDDD JUMPI PUSH2 0xDDC PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xDEB DUP5 DUP3 DUP6 ADD PUSH2 0xDB2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xDFD DUP2 PUSH2 0xD91 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE18 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xDF4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE49 DUP3 PUSH2 0xE1E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE59 DUP2 PUSH2 0xE3E JUMP JUMPDEST DUP2 EQ PUSH2 0xE64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xE76 DUP2 PUSH2 0xE50 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE93 JUMPI PUSH2 0xE92 PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEA1 DUP6 DUP3 DUP7 ADD PUSH2 0xDB2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xEB2 DUP6 DUP3 DUP7 ADD PUSH2 0xE67 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xED2 JUMPI PUSH2 0xED1 PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEE0 DUP5 DUP3 DUP6 ADD PUSH2 0xE67 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF56 PUSH1 0x2F DUP4 PUSH2 0xEE9 JUMP JUMPDEST SWAP2 POP PUSH2 0xF61 DUP3 PUSH2 0xEFA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF85 DUP2 PUSH2 0xF49 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFE8 PUSH1 0x2B DUP4 PUSH2 0xEE9 JUMP JUMPDEST SWAP2 POP PUSH2 0xFF3 DUP3 PUSH2 0xF8C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1017 DUP2 PUSH2 0xFDB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x105F PUSH1 0x17 DUP4 PUSH2 0x101E JUMP JUMPDEST SWAP2 POP PUSH2 0x106A DUP3 PUSH2 0x1029 JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x109E JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10B5 DUP3 PUSH2 0x1075 JUMP JUMPDEST PUSH2 0x10BF DUP2 DUP6 PUSH2 0x101E JUMP JUMPDEST SWAP4 POP PUSH2 0x10CF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1080 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1111 PUSH1 0x11 DUP4 PUSH2 0x101E JUMP JUMPDEST SWAP2 POP PUSH2 0x111C DUP3 PUSH2 0x10DB JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1132 DUP3 PUSH2 0x1052 JUMP JUMPDEST SWAP2 POP PUSH2 0x113E DUP3 DUP6 PUSH2 0x10AA JUMP JUMPDEST SWAP2 POP PUSH2 0x1149 DUP3 PUSH2 0x1104 JUMP JUMPDEST SWAP2 POP PUSH2 0x1155 DUP3 DUP5 PUSH2 0x10AA JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x117D DUP3 PUSH2 0x1075 JUMP JUMPDEST PUSH2 0x1187 DUP2 DUP6 PUSH2 0xEE9 JUMP JUMPDEST SWAP4 POP PUSH2 0x1197 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1080 JUMP JUMPDEST PUSH2 0x11A0 DUP2 PUSH2 0x1161 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11C5 DUP2 DUP5 PUSH2 0x1172 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1211 DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH2 0x121C DUP4 PUSH2 0x11CD JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1255 JUMPI PUSH2 0x1254 PUSH2 0x11D7 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x126B DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH2 0x1276 DUP4 PUSH2 0x11CD JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x128E JUMPI PUSH2 0x128D PUSH2 0x11D7 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x12FD DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x1310 JUMPI PUSH2 0x130F PUSH2 0x11D7 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1351 PUSH1 0x20 DUP4 PUSH2 0xEE9 JUMP JUMPDEST SWAP2 POP PUSH2 0x135C DUP3 PUSH2 0x131B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1380 DUP2 PUSH2 0x1344 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0x4F KECCAK256 PUSH14 0xCDCDEBF392D7459B2AB1515C54CD SWAP16 0xE4 DUP1 DUP11 RETURNDATACOPY DUP7 SHL DUP1 JUMPI SUB 0xBC 0x1E SWAP11 0x28 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"461:951:15:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEFAULT_ADMIN_ROLE_42":{"entryPoint":1247,"id":42,"parameterSlots":0,"returnSlots":0},"@__AccessControl_init_21":{"entryPoint":1992,"id":21,"parameterSlots":0,"returnSlots":0},"@__BaseUpgradeablePausable_init_2684":{"entryPoint":850,"id":2684,"parameterSlots":1,"returnSlots":0},"@__Pausable_init_611":{"entryPoint":1903,"id":611,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_unchained_621":{"entryPoint":2467,"id":621,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_730":{"entryPoint":2073,"id":730,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_unchained_740":{"entryPoint":2575,"id":740,"parameterSlots":0,"returnSlots":0},"@_checkRole_107":{"entryPoint":1424,"id":107,"parameterSlots":1,"returnSlots":0},"@_checkRole_146":{"entryPoint":2334,"id":146,"parameterSlots":2,"returnSlots":0},"@_grantRole_298":{"entryPoint":1444,"id":298,"parameterSlots":2,"returnSlots":0},"@_msgSender_1486":{"entryPoint":1669,"id":1486,"parameterSlots":0,"returnSlots":1},"@_revokeRole_329":{"entryPoint":1677,"id":329,"parameterSlots":2,"returnSlots":0},"@_setRoleAdmin_266":{"entryPoint":2242,"id":266,"parameterSlots":2,"returnSlots":0},"@getAdminRole_2719":{"entryPoint":2162,"id":2719,"parameterSlots":0,"returnSlots":1},"@getPauserRole_2727":{"entryPoint":2202,"id":2727,"parameterSlots":0,"returnSlots":1},"@getRoleAdmin_161":{"entryPoint":631,"id":161,"parameterSlots":1,"returnSlots":1},"@grantRole_181":{"entryPoint":663,"id":181,"parameterSlots":2,"returnSlots":0},"@hasRole_94":{"entryPoint":1140,"id":94,"parameterSlots":2,"returnSlots":1},"@isAdmin_2698":{"entryPoint":1254,"id":2698,"parameterSlots":0,"returnSlots":1},"@paused_646":{"entryPoint":827,"id":646,"parameterSlots":0,"returnSlots":1},"@renounceRole_224":{"entryPoint":696,"id":224,"parameterSlots":2,"returnSlots":0},"@revokeRole_201":{"entryPoint":1285,"id":201,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1714":{"entryPoint":1318,"id":1714,"parameterSlots":1,"returnSlots":1},"@supportsInterface_75":{"entryPoint":509,"id":75,"parameterSlots":1,"returnSlots":1},"@toHexString_1655":{"entryPoint":2709,"id":1655,"parameterSlots":2,"returnSlots":1},"@toHexString_1675":{"entryPoint":2664,"id":1675,"parameterSlots":1,"returnSlots":1},"abi_decode_t_address":{"entryPoint":3687,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":3506,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":3353,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3772,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":3527,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":3708,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":3374,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":3431,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":3572,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":4466,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":4266,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack":{"entryPoint":4932,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":4059,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":4178,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":4356,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack":{"entryPoint":3913,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":4391,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":3446,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":3587,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4523,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4967,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4094,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3948,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":4213,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":3817,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":4126,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":4704,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":4614,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":3646,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":3419,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":3473,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":3286,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":3614,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":4557,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":4224,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":4850,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":4567,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4803,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":4756,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":3281,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":4449,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2":{"entryPoint":4891,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":3980,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874":{"entryPoint":4137,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69":{"entryPoint":4315,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b":{"entryPoint":3834,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":3664,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":3483,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":3330,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:12337:26","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:26","statements":[{"nodeType":"YulAssignment","src":"57:19:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:26","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:26"},"nodeType":"YulFunctionCall","src":"67:9:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:26"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:26","type":""}],"src":"7:75:26"},{"body":{"nodeType":"YulBlock","src":"177:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:26"},"nodeType":"YulFunctionCall","src":"187:12:26"},"nodeType":"YulExpressionStatement","src":"187:12:26"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:26"},{"body":{"nodeType":"YulBlock","src":"300:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:26"},"nodeType":"YulFunctionCall","src":"310:12:26"},"nodeType":"YulExpressionStatement","src":"310:12:26"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:26"},{"body":{"nodeType":"YulBlock","src":"378:105:26","statements":[{"nodeType":"YulAssignment","src":"388:89:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:26","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:26"},"nodeType":"YulFunctionCall","src":"399:78:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:26"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:26","type":""}],"src":"334:149:26"},{"body":{"nodeType":"YulBlock","src":"531:78:26","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:26"},"nodeType":"YulFunctionCall","src":"589:12:26"},"nodeType":"YulExpressionStatement","src":"589:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:26"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:26"},"nodeType":"YulFunctionCall","src":"561:23:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:26"},"nodeType":"YulFunctionCall","src":"551:34:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:26"},"nodeType":"YulFunctionCall","src":"544:42:26"},"nodeType":"YulIf","src":"541:62:26"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:26","type":""}],"src":"489:120:26"},{"body":{"nodeType":"YulBlock","src":"666:86:26","statements":[{"nodeType":"YulAssignment","src":"676:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:26"},"nodeType":"YulFunctionCall","src":"685:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:26"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:26"},"nodeType":"YulFunctionCall","src":"714:32:26"},"nodeType":"YulExpressionStatement","src":"714:32:26"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:26","type":""}],"src":"615:137:26"},{"body":{"nodeType":"YulBlock","src":"823:262:26","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:26"},"nodeType":"YulFunctionCall","src":"871:79:26"},"nodeType":"YulExpressionStatement","src":"871:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:26"},"nodeType":"YulFunctionCall","src":"840:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:26"},"nodeType":"YulFunctionCall","src":"836:32:26"},"nodeType":"YulIf","src":"833:119:26"},{"nodeType":"YulBlock","src":"962:116:26","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:26","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:26"},"nodeType":"YulFunctionCall","src":"1036:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:26"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:26"},"nodeType":"YulFunctionCall","src":"1016:52:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:26"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:26","type":""}],"src":"758:327:26"},{"body":{"nodeType":"YulBlock","src":"1133:48:26","statements":[{"nodeType":"YulAssignment","src":"1143:32:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:26"},"nodeType":"YulFunctionCall","src":"1161:13:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:26"},"nodeType":"YulFunctionCall","src":"1154:21:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:26"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:26","type":""}],"src":"1091:90:26"},{"body":{"nodeType":"YulBlock","src":"1246:50:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:26"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:26"},"nodeType":"YulFunctionCall","src":"1268:21:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:26"},"nodeType":"YulFunctionCall","src":"1256:34:26"},"nodeType":"YulExpressionStatement","src":"1256:34:26"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:26","type":""}],"src":"1187:109:26"},{"body":{"nodeType":"YulBlock","src":"1394:118:26","statements":[{"nodeType":"YulAssignment","src":"1404:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:26"},"nodeType":"YulFunctionCall","src":"1412:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:26"},"nodeType":"YulFunctionCall","src":"1487:17:26"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:26"},"nodeType":"YulFunctionCall","src":"1440:65:26"},"nodeType":"YulExpressionStatement","src":"1440:65:26"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:26","type":""}],"src":"1302:210:26"},{"body":{"nodeType":"YulBlock","src":"1563:32:26","statements":[{"nodeType":"YulAssignment","src":"1573:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"1584:5:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1573:7:26"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1545:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1555:7:26","type":""}],"src":"1518:77:26"},{"body":{"nodeType":"YulBlock","src":"1644:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"1701:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1710:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1713:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1703:6:26"},"nodeType":"YulFunctionCall","src":"1703:12:26"},"nodeType":"YulExpressionStatement","src":"1703:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1667:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1692:5:26"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"1674:17:26"},"nodeType":"YulFunctionCall","src":"1674:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1664:2:26"},"nodeType":"YulFunctionCall","src":"1664:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1657:6:26"},"nodeType":"YulFunctionCall","src":"1657:43:26"},"nodeType":"YulIf","src":"1654:63:26"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1637:5:26","type":""}],"src":"1601:122:26"},{"body":{"nodeType":"YulBlock","src":"1781:87:26","statements":[{"nodeType":"YulAssignment","src":"1791:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1813:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1800:12:26"},"nodeType":"YulFunctionCall","src":"1800:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1791:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1856:5:26"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"1829:26:26"},"nodeType":"YulFunctionCall","src":"1829:33:26"},"nodeType":"YulExpressionStatement","src":"1829:33:26"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1759:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"1767:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1775:5:26","type":""}],"src":"1729:139:26"},{"body":{"nodeType":"YulBlock","src":"1940:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"1986:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1988:77:26"},"nodeType":"YulFunctionCall","src":"1988:79:26"},"nodeType":"YulExpressionStatement","src":"1988:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1961:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"1970:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1957:3:26"},"nodeType":"YulFunctionCall","src":"1957:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"1982:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1953:3:26"},"nodeType":"YulFunctionCall","src":"1953:32:26"},"nodeType":"YulIf","src":"1950:119:26"},{"nodeType":"YulBlock","src":"2079:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2094:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"2108:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2098:6:26","type":""}]},{"nodeType":"YulAssignment","src":"2123:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2158:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"2169:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2154:3:26"},"nodeType":"YulFunctionCall","src":"2154:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2178:7:26"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"2133:20:26"},"nodeType":"YulFunctionCall","src":"2133:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2123:6:26"}]}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1910:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1921:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1933:6:26","type":""}],"src":"1874:329:26"},{"body":{"nodeType":"YulBlock","src":"2274:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2291:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2314:5:26"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"2296:17:26"},"nodeType":"YulFunctionCall","src":"2296:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2284:6:26"},"nodeType":"YulFunctionCall","src":"2284:37:26"},"nodeType":"YulExpressionStatement","src":"2284:37:26"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2262:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2269:3:26","type":""}],"src":"2209:118:26"},{"body":{"nodeType":"YulBlock","src":"2431:124:26","statements":[{"nodeType":"YulAssignment","src":"2441:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2453:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2464:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2449:3:26"},"nodeType":"YulFunctionCall","src":"2449:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2441:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2521:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2534:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2545:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2530:3:26"},"nodeType":"YulFunctionCall","src":"2530:17:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"2477:43:26"},"nodeType":"YulFunctionCall","src":"2477:71:26"},"nodeType":"YulExpressionStatement","src":"2477:71:26"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2403:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2415:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2426:4:26","type":""}],"src":"2333:222:26"},{"body":{"nodeType":"YulBlock","src":"2606:81:26","statements":[{"nodeType":"YulAssignment","src":"2616:65:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2631:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"2638:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2627:3:26"},"nodeType":"YulFunctionCall","src":"2627:54:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2616:7:26"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2588:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2598:7:26","type":""}],"src":"2561:126:26"},{"body":{"nodeType":"YulBlock","src":"2738:51:26","statements":[{"nodeType":"YulAssignment","src":"2748:35:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2777:5:26"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"2759:17:26"},"nodeType":"YulFunctionCall","src":"2759:24:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2748:7:26"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2720:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2730:7:26","type":""}],"src":"2693:96:26"},{"body":{"nodeType":"YulBlock","src":"2838:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"2895:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2904:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2907:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2897:6:26"},"nodeType":"YulFunctionCall","src":"2897:12:26"},"nodeType":"YulExpressionStatement","src":"2897:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2861:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2886:5:26"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"2868:17:26"},"nodeType":"YulFunctionCall","src":"2868:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2858:2:26"},"nodeType":"YulFunctionCall","src":"2858:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2851:6:26"},"nodeType":"YulFunctionCall","src":"2851:43:26"},"nodeType":"YulIf","src":"2848:63:26"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2831:5:26","type":""}],"src":"2795:122:26"},{"body":{"nodeType":"YulBlock","src":"2975:87:26","statements":[{"nodeType":"YulAssignment","src":"2985:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3007:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2994:12:26"},"nodeType":"YulFunctionCall","src":"2994:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2985:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3050:5:26"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"3023:26:26"},"nodeType":"YulFunctionCall","src":"3023:33:26"},"nodeType":"YulExpressionStatement","src":"3023:33:26"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2953:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"2961:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2969:5:26","type":""}],"src":"2923:139:26"},{"body":{"nodeType":"YulBlock","src":"3151:391:26","statements":[{"body":{"nodeType":"YulBlock","src":"3197:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3199:77:26"},"nodeType":"YulFunctionCall","src":"3199:79:26"},"nodeType":"YulExpressionStatement","src":"3199:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3172:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"3181:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3168:3:26"},"nodeType":"YulFunctionCall","src":"3168:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"3193:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3164:3:26"},"nodeType":"YulFunctionCall","src":"3164:32:26"},"nodeType":"YulIf","src":"3161:119:26"},{"nodeType":"YulBlock","src":"3290:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"3305:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"3319:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3309:6:26","type":""}]},{"nodeType":"YulAssignment","src":"3334:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3369:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3380:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3365:3:26"},"nodeType":"YulFunctionCall","src":"3365:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3389:7:26"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"3344:20:26"},"nodeType":"YulFunctionCall","src":"3344:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3334:6:26"}]}]},{"nodeType":"YulBlock","src":"3417:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"3432:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"3446:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3436:6:26","type":""}]},{"nodeType":"YulAssignment","src":"3462:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3497:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3508:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3493:3:26"},"nodeType":"YulFunctionCall","src":"3493:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3517:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3472:20:26"},"nodeType":"YulFunctionCall","src":"3472:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3462:6:26"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3113:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3124:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3136:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3144:6:26","type":""}],"src":"3068:474:26"},{"body":{"nodeType":"YulBlock","src":"3614:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"3660:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3662:77:26"},"nodeType":"YulFunctionCall","src":"3662:79:26"},"nodeType":"YulExpressionStatement","src":"3662:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3635:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"3644:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3631:3:26"},"nodeType":"YulFunctionCall","src":"3631:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"3656:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3627:3:26"},"nodeType":"YulFunctionCall","src":"3627:32:26"},"nodeType":"YulIf","src":"3624:119:26"},{"nodeType":"YulBlock","src":"3753:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"3768:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"3782:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3772:6:26","type":""}]},{"nodeType":"YulAssignment","src":"3797:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3832:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3843:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3828:3:26"},"nodeType":"YulFunctionCall","src":"3828:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3852:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3807:20:26"},"nodeType":"YulFunctionCall","src":"3807:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3797:6:26"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3584:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3595:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3607:6:26","type":""}],"src":"3548:329:26"},{"body":{"nodeType":"YulBlock","src":"3979:73:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3996:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"4001:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3989:6:26"},"nodeType":"YulFunctionCall","src":"3989:19:26"},"nodeType":"YulExpressionStatement","src":"3989:19:26"},{"nodeType":"YulAssignment","src":"4017:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4036:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"4041:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4032:3:26"},"nodeType":"YulFunctionCall","src":"4032:14:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"4017:11:26"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3951:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"3956:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"3967:11:26","type":""}],"src":"3883:169:26"},{"body":{"nodeType":"YulBlock","src":"4164:128:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4186:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"4194:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4182:3:26"},"nodeType":"YulFunctionCall","src":"4182:14:26"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"4198:34:26","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4175:6:26"},"nodeType":"YulFunctionCall","src":"4175:58:26"},"nodeType":"YulExpressionStatement","src":"4175:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4254:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"4262:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4250:3:26"},"nodeType":"YulFunctionCall","src":"4250:15:26"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"4267:17:26","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4243:6:26"},"nodeType":"YulFunctionCall","src":"4243:42:26"},"nodeType":"YulExpressionStatement","src":"4243:42:26"}]},"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"4156:6:26","type":""}],"src":"4058:234:26"},{"body":{"nodeType":"YulBlock","src":"4444:220:26","statements":[{"nodeType":"YulAssignment","src":"4454:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4520:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"4525:2:26","type":"","value":"47"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4461:58:26"},"nodeType":"YulFunctionCall","src":"4461:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4454:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4626:3:26"}],"functionName":{"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulIdentifier","src":"4537:88:26"},"nodeType":"YulFunctionCall","src":"4537:93:26"},"nodeType":"YulExpressionStatement","src":"4537:93:26"},{"nodeType":"YulAssignment","src":"4639:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4650:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"4655:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4646:3:26"},"nodeType":"YulFunctionCall","src":"4646:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4639:3:26"}]}]},"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4432:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4440:3:26","type":""}],"src":"4298:366:26"},{"body":{"nodeType":"YulBlock","src":"4841:248:26","statements":[{"nodeType":"YulAssignment","src":"4851:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4863:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4874:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4859:3:26"},"nodeType":"YulFunctionCall","src":"4859:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4851:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4898:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4909:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4894:3:26"},"nodeType":"YulFunctionCall","src":"4894:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4917:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"4923:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4913:3:26"},"nodeType":"YulFunctionCall","src":"4913:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4887:6:26"},"nodeType":"YulFunctionCall","src":"4887:47:26"},"nodeType":"YulExpressionStatement","src":"4887:47:26"},{"nodeType":"YulAssignment","src":"4943:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"5077:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4951:124:26"},"nodeType":"YulFunctionCall","src":"4951:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4943:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4821:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4836:4:26","type":""}],"src":"4670:419:26"},{"body":{"nodeType":"YulBlock","src":"5201:124:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5223:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"5231:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5219:3:26"},"nodeType":"YulFunctionCall","src":"5219:14:26"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"5235:34:26","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5212:6:26"},"nodeType":"YulFunctionCall","src":"5212:58:26"},"nodeType":"YulExpressionStatement","src":"5212:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5291:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"5299:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5287:3:26"},"nodeType":"YulFunctionCall","src":"5287:15:26"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"5304:13:26","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5280:6:26"},"nodeType":"YulFunctionCall","src":"5280:38:26"},"nodeType":"YulExpressionStatement","src":"5280:38:26"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"5193:6:26","type":""}],"src":"5095:230:26"},{"body":{"nodeType":"YulBlock","src":"5477:220:26","statements":[{"nodeType":"YulAssignment","src":"5487:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5553:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"5558:2:26","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"5494:58:26"},"nodeType":"YulFunctionCall","src":"5494:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5487:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5659:3:26"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"5570:88:26"},"nodeType":"YulFunctionCall","src":"5570:93:26"},"nodeType":"YulExpressionStatement","src":"5570:93:26"},{"nodeType":"YulAssignment","src":"5672:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5683:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"5688:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5679:3:26"},"nodeType":"YulFunctionCall","src":"5679:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5672:3:26"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5465:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5473:3:26","type":""}],"src":"5331:366:26"},{"body":{"nodeType":"YulBlock","src":"5874:248:26","statements":[{"nodeType":"YulAssignment","src":"5884:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5896:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"5907:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5892:3:26"},"nodeType":"YulFunctionCall","src":"5892:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5884:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5931:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"5942:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5927:3:26"},"nodeType":"YulFunctionCall","src":"5927:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"5950:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"5956:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5946:3:26"},"nodeType":"YulFunctionCall","src":"5946:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5920:6:26"},"nodeType":"YulFunctionCall","src":"5920:47:26"},"nodeType":"YulExpressionStatement","src":"5920:47:26"},{"nodeType":"YulAssignment","src":"5976:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"6110:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"5984:124:26"},"nodeType":"YulFunctionCall","src":"5984:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5976:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5854:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5869:4:26","type":""}],"src":"5703:419:26"},{"body":{"nodeType":"YulBlock","src":"6242:34:26","statements":[{"nodeType":"YulAssignment","src":"6252:18:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"6267:3:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"6252:11:26"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6214:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"6219:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"6230:11:26","type":""}],"src":"6128:148:26"},{"body":{"nodeType":"YulBlock","src":"6388:67:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6410:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"6418:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6406:3:26"},"nodeType":"YulFunctionCall","src":"6406:14:26"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nodeType":"YulLiteral","src":"6422:25:26","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6399:6:26"},"nodeType":"YulFunctionCall","src":"6399:49:26"},"nodeType":"YulExpressionStatement","src":"6399:49:26"}]},"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"6380:6:26","type":""}],"src":"6282:173:26"},{"body":{"nodeType":"YulBlock","src":"6625:238:26","statements":[{"nodeType":"YulAssignment","src":"6635:92:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6719:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"6724:2:26","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"6642:76:26"},"nodeType":"YulFunctionCall","src":"6642:85:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6635:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6825:3:26"}],"functionName":{"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulIdentifier","src":"6736:88:26"},"nodeType":"YulFunctionCall","src":"6736:93:26"},"nodeType":"YulExpressionStatement","src":"6736:93:26"},{"nodeType":"YulAssignment","src":"6838:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6849:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"6854:2:26","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6845:3:26"},"nodeType":"YulFunctionCall","src":"6845:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6838:3:26"}]}]},"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6613:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6621:3:26","type":""}],"src":"6461:402:26"},{"body":{"nodeType":"YulBlock","src":"6928:40:26","statements":[{"nodeType":"YulAssignment","src":"6939:22:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6955:5:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6949:5:26"},"nodeType":"YulFunctionCall","src":"6949:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6939:6:26"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6911:5:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"6921:6:26","type":""}],"src":"6869:99:26"},{"body":{"nodeType":"YulBlock","src":"7036:184:26","statements":[{"nodeType":"YulVariableDeclaration","src":"7046:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"7055:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7050:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"7115:63:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7140:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"7145:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7136:3:26"},"nodeType":"YulFunctionCall","src":"7136:11:26"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7159:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"7164:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7155:3:26"},"nodeType":"YulFunctionCall","src":"7155:11:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7149:5:26"},"nodeType":"YulFunctionCall","src":"7149:18:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7129:6:26"},"nodeType":"YulFunctionCall","src":"7129:39:26"},"nodeType":"YulExpressionStatement","src":"7129:39:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7076:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"7079:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7073:2:26"},"nodeType":"YulFunctionCall","src":"7073:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7087:19:26","statements":[{"nodeType":"YulAssignment","src":"7089:15:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7098:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"7101:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7094:3:26"},"nodeType":"YulFunctionCall","src":"7094:10:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7089:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"7069:3:26","statements":[]},"src":"7065:113:26"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7198:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"7203:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7194:3:26"},"nodeType":"YulFunctionCall","src":"7194:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"7212:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7187:6:26"},"nodeType":"YulFunctionCall","src":"7187:27:26"},"nodeType":"YulExpressionStatement","src":"7187:27:26"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"7018:3:26","type":""},{"name":"dst","nodeType":"YulTypedName","src":"7023:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"7028:6:26","type":""}],"src":"6974:246:26"},{"body":{"nodeType":"YulBlock","src":"7336:280:26","statements":[{"nodeType":"YulVariableDeclaration","src":"7346:53:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7393:5:26"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7360:32:26"},"nodeType":"YulFunctionCall","src":"7360:39:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7350:6:26","type":""}]},{"nodeType":"YulAssignment","src":"7408:96:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7492:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"7497:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"7415:76:26"},"nodeType":"YulFunctionCall","src":"7415:89:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7408:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7552:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"7559:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7548:3:26"},"nodeType":"YulFunctionCall","src":"7548:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"7566:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"7571:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7513:34:26"},"nodeType":"YulFunctionCall","src":"7513:65:26"},"nodeType":"YulExpressionStatement","src":"7513:65:26"},{"nodeType":"YulAssignment","src":"7587:23:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7598:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"7603:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7594:3:26"},"nodeType":"YulFunctionCall","src":"7594:16:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7587:3:26"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7317:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7324:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7332:3:26","type":""}],"src":"7226:390:26"},{"body":{"nodeType":"YulBlock","src":"7728:61:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7750:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"7758:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7746:3:26"},"nodeType":"YulFunctionCall","src":"7746:14:26"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nodeType":"YulLiteral","src":"7762:19:26","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7739:6:26"},"nodeType":"YulFunctionCall","src":"7739:43:26"},"nodeType":"YulExpressionStatement","src":"7739:43:26"}]},"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7720:6:26","type":""}],"src":"7622:167:26"},{"body":{"nodeType":"YulBlock","src":"7959:238:26","statements":[{"nodeType":"YulAssignment","src":"7969:92:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8053:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"8058:2:26","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"7976:76:26"},"nodeType":"YulFunctionCall","src":"7976:85:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7969:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8159:3:26"}],"functionName":{"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulIdentifier","src":"8070:88:26"},"nodeType":"YulFunctionCall","src":"8070:93:26"},"nodeType":"YulExpressionStatement","src":"8070:93:26"},{"nodeType":"YulAssignment","src":"8172:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8183:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"8188:2:26","type":"","value":"17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8179:3:26"},"nodeType":"YulFunctionCall","src":"8179:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8172:3:26"}]}]},"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7947:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7955:3:26","type":""}],"src":"7795:402:26"},{"body":{"nodeType":"YulBlock","src":"8589:581:26","statements":[{"nodeType":"YulAssignment","src":"8600:155:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8751:3:26"}],"functionName":{"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"8607:142:26"},"nodeType":"YulFunctionCall","src":"8607:148:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8600:3:26"}]},{"nodeType":"YulAssignment","src":"8765:102:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8854:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"8863:3:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"8772:81:26"},"nodeType":"YulFunctionCall","src":"8772:95:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8765:3:26"}]},{"nodeType":"YulAssignment","src":"8877:155:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9028:3:26"}],"functionName":{"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"8884:142:26"},"nodeType":"YulFunctionCall","src":"8884:148:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8877:3:26"}]},{"nodeType":"YulAssignment","src":"9042:102:26","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9131:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"9140:3:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"9049:81:26"},"nodeType":"YulFunctionCall","src":"9049:95:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9042:3:26"}]},{"nodeType":"YulAssignment","src":"9154:10:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"9161:3:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9154:3:26"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8560:3:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8566:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8574:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8585:3:26","type":""}],"src":"8203:967:26"},{"body":{"nodeType":"YulBlock","src":"9224:54:26","statements":[{"nodeType":"YulAssignment","src":"9234:38:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9252:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"9259:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9248:3:26"},"nodeType":"YulFunctionCall","src":"9248:14:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9268:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9264:3:26"},"nodeType":"YulFunctionCall","src":"9264:7:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9244:3:26"},"nodeType":"YulFunctionCall","src":"9244:28:26"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"9234:6:26"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9207:5:26","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"9217:6:26","type":""}],"src":"9176:102:26"},{"body":{"nodeType":"YulBlock","src":"9376:285:26","statements":[{"nodeType":"YulVariableDeclaration","src":"9386:53:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9433:5:26"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"9400:32:26"},"nodeType":"YulFunctionCall","src":"9400:39:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9390:6:26","type":""}]},{"nodeType":"YulAssignment","src":"9448:78:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9514:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"9519:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9455:58:26"},"nodeType":"YulFunctionCall","src":"9455:71:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9448:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9574:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"9581:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9570:3:26"},"nodeType":"YulFunctionCall","src":"9570:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"9588:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"9593:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"9535:34:26"},"nodeType":"YulFunctionCall","src":"9535:65:26"},"nodeType":"YulExpressionStatement","src":"9535:65:26"},{"nodeType":"YulAssignment","src":"9609:46:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9620:3:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9647:6:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"9625:21:26"},"nodeType":"YulFunctionCall","src":"9625:29:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9616:3:26"},"nodeType":"YulFunctionCall","src":"9616:39:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9609:3:26"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9357:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9364:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9372:3:26","type":""}],"src":"9284:377:26"},{"body":{"nodeType":"YulBlock","src":"9785:195:26","statements":[{"nodeType":"YulAssignment","src":"9795:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9807:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"9818:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9803:3:26"},"nodeType":"YulFunctionCall","src":"9803:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9795:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9842:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"9853:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9838:3:26"},"nodeType":"YulFunctionCall","src":"9838:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9861:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"9867:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9857:3:26"},"nodeType":"YulFunctionCall","src":"9857:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9831:6:26"},"nodeType":"YulFunctionCall","src":"9831:47:26"},"nodeType":"YulExpressionStatement","src":"9831:47:26"},{"nodeType":"YulAssignment","src":"9887:86:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9959:6:26"},{"name":"tail","nodeType":"YulIdentifier","src":"9968:4:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9895:63:26"},"nodeType":"YulFunctionCall","src":"9895:78:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9887:4:26"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9757:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9769:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9780:4:26","type":""}],"src":"9667:313:26"},{"body":{"nodeType":"YulBlock","src":"10031:32:26","statements":[{"nodeType":"YulAssignment","src":"10041:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"10052:5:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"10041:7:26"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10013:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"10023:7:26","type":""}],"src":"9986:77:26"},{"body":{"nodeType":"YulBlock","src":"10097:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10114:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10117:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10107:6:26"},"nodeType":"YulFunctionCall","src":"10107:88:26"},"nodeType":"YulExpressionStatement","src":"10107:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10211:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10214:4:26","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10204:6:26"},"nodeType":"YulFunctionCall","src":"10204:15:26"},"nodeType":"YulExpressionStatement","src":"10204:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10235:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10238:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10228:6:26"},"nodeType":"YulFunctionCall","src":"10228:15:26"},"nodeType":"YulExpressionStatement","src":"10228:15:26"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"10069:180:26"},{"body":{"nodeType":"YulBlock","src":"10303:300:26","statements":[{"nodeType":"YulAssignment","src":"10313:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10336:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10318:17:26"},"nodeType":"YulFunctionCall","src":"10318:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"10313:1:26"}]},{"nodeType":"YulAssignment","src":"10347:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"10370:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10352:17:26"},"nodeType":"YulFunctionCall","src":"10352:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"10347:1:26"}]},{"body":{"nodeType":"YulBlock","src":"10545:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10547:16:26"},"nodeType":"YulFunctionCall","src":"10547:18:26"},"nodeType":"YulExpressionStatement","src":"10547:18:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10457:1:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10450:6:26"},"nodeType":"YulFunctionCall","src":"10450:9:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10443:6:26"},"nodeType":"YulFunctionCall","src":"10443:17:26"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"10465:1:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10472:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"x","nodeType":"YulIdentifier","src":"10540:1:26"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"10468:3:26"},"nodeType":"YulFunctionCall","src":"10468:74:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10462:2:26"},"nodeType":"YulFunctionCall","src":"10462:81:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10439:3:26"},"nodeType":"YulFunctionCall","src":"10439:105:26"},"nodeType":"YulIf","src":"10436:131:26"},{"nodeType":"YulAssignment","src":"10577:20:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10592:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"10595:1:26"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"10588:3:26"},"nodeType":"YulFunctionCall","src":"10588:9:26"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"10577:7:26"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"10286:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"10289:1:26","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"10295:7:26","type":""}],"src":"10255:348:26"},{"body":{"nodeType":"YulBlock","src":"10653:147:26","statements":[{"nodeType":"YulAssignment","src":"10663:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10686:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10668:17:26"},"nodeType":"YulFunctionCall","src":"10668:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"10663:1:26"}]},{"nodeType":"YulAssignment","src":"10697:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"10720:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10702:17:26"},"nodeType":"YulFunctionCall","src":"10702:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"10697:1:26"}]},{"nodeType":"YulAssignment","src":"10731:16:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10742:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"10745:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10738:3:26"},"nodeType":"YulFunctionCall","src":"10738:9:26"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"10731:3:26"}]},{"body":{"nodeType":"YulBlock","src":"10771:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10773:16:26"},"nodeType":"YulFunctionCall","src":"10773:18:26"},"nodeType":"YulExpressionStatement","src":"10773:18:26"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10763:1:26"},{"name":"sum","nodeType":"YulIdentifier","src":"10766:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10760:2:26"},"nodeType":"YulFunctionCall","src":"10760:10:26"},"nodeType":"YulIf","src":"10757:36:26"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"10640:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"10643:1:26","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"10649:3:26","type":""}],"src":"10609:191:26"},{"body":{"nodeType":"YulBlock","src":"10834:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10851:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10854:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10844:6:26"},"nodeType":"YulFunctionCall","src":"10844:88:26"},"nodeType":"YulExpressionStatement","src":"10844:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10948:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10951:4:26","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10941:6:26"},"nodeType":"YulFunctionCall","src":"10941:15:26"},"nodeType":"YulExpressionStatement","src":"10941:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10972:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10975:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10965:6:26"},"nodeType":"YulFunctionCall","src":"10965:15:26"},"nodeType":"YulExpressionStatement","src":"10965:15:26"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"10806:180:26"},{"body":{"nodeType":"YulBlock","src":"11020:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11037:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11040:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11030:6:26"},"nodeType":"YulFunctionCall","src":"11030:88:26"},"nodeType":"YulExpressionStatement","src":"11030:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11134:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11137:4:26","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11127:6:26"},"nodeType":"YulFunctionCall","src":"11127:15:26"},"nodeType":"YulExpressionStatement","src":"11127:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11158:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11161:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11151:6:26"},"nodeType":"YulFunctionCall","src":"11151:15:26"},"nodeType":"YulExpressionStatement","src":"11151:15:26"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"10992:180:26"},{"body":{"nodeType":"YulBlock","src":"11221:128:26","statements":[{"nodeType":"YulAssignment","src":"11231:33:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11258:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11240:17:26"},"nodeType":"YulFunctionCall","src":"11240:24:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"11231:5:26"}]},{"body":{"nodeType":"YulBlock","src":"11292:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11294:16:26"},"nodeType":"YulFunctionCall","src":"11294:18:26"},"nodeType":"YulExpressionStatement","src":"11294:18:26"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11279:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"11286:4:26","type":"","value":"0x00"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11276:2:26"},"nodeType":"YulFunctionCall","src":"11276:15:26"},"nodeType":"YulIf","src":"11273:41:26"},{"nodeType":"YulAssignment","src":"11323:20:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11334:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"11341:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11330:3:26"},"nodeType":"YulFunctionCall","src":"11330:13:26"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"11323:3:26"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11207:5:26","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"11217:3:26","type":""}],"src":"11178:171:26"},{"body":{"nodeType":"YulBlock","src":"11461:76:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11483:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"11491:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11479:3:26"},"nodeType":"YulFunctionCall","src":"11479:14:26"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"11495:34:26","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11472:6:26"},"nodeType":"YulFunctionCall","src":"11472:58:26"},"nodeType":"YulExpressionStatement","src":"11472:58:26"}]},"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11453:6:26","type":""}],"src":"11355:182:26"},{"body":{"nodeType":"YulBlock","src":"11689:220:26","statements":[{"nodeType":"YulAssignment","src":"11699:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11765:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"11770:2:26","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11706:58:26"},"nodeType":"YulFunctionCall","src":"11706:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11699:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11871:3:26"}],"functionName":{"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulIdentifier","src":"11782:88:26"},"nodeType":"YulFunctionCall","src":"11782:93:26"},"nodeType":"YulExpressionStatement","src":"11782:93:26"},{"nodeType":"YulAssignment","src":"11884:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11895:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"11900:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11891:3:26"},"nodeType":"YulFunctionCall","src":"11891:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11884:3:26"}]}]},"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11677:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11685:3:26","type":""}],"src":"11543:366:26"},{"body":{"nodeType":"YulBlock","src":"12086:248:26","statements":[{"nodeType":"YulAssignment","src":"12096:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12108:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12119:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12104:3:26"},"nodeType":"YulFunctionCall","src":"12104:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12096:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12143:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12154:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12139:3:26"},"nodeType":"YulFunctionCall","src":"12139:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12162:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"12168:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12158:3:26"},"nodeType":"YulFunctionCall","src":"12158:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12132:6:26"},"nodeType":"YulFunctionCall","src":"12132:47:26"},"nodeType":"YulExpressionStatement","src":"12132:47:26"},{"nodeType":"YulAssignment","src":"12188:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12322:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12196:124:26"},"nodeType":"YulFunctionCall","src":"12196:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12188:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12066:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12081:4:26","type":""}],"src":"11915:419:26"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: can only renounce\")\n\n        mstore(add(memPtr, 32), \" roles for self\")\n\n    }\n\n    function abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)\n        store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: account \")\n\n    }\n\n    function abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 23)\n        store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(pos)\n        end := add(pos, 23)\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(memPtr) {\n\n        mstore(add(memPtr, 0), \" is missing role \")\n\n    }\n\n    function abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 17)\n        store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(pos)\n        end := add(pos, 17)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function decrement_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0x00) { panic_error_0x11() }\n        ret := sub(value, 1)\n    }\n\n    function store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Strings: hex length insufficient\")\n\n    }\n\n    function abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":26,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061009e5760003560e01c80636e810b1a116100665780636e810b1a1461015957806391d1485414610175578063a217fddf146101a5578063b6db75a0146101c3578063d547741f146101e15761009e565b806301ffc9a7146100a3578063248a9ca3146100d35780632f2ff15d1461010357806336568abe1461011f5780635c975abb1461013b575b600080fd5b6100bd60048036038101906100b89190610d2e565b6101fd565b6040516100ca9190610d76565b60405180910390f35b6100ed60048036038101906100e89190610dc7565b610277565b6040516100fa9190610e03565b60405180910390f35b61011d60048036038101906101189190610e7c565b610297565b005b61013960048036038101906101349190610e7c565b6102b8565b005b61014361033b565b6040516101509190610d76565b60405180910390f35b610173600480360381019061016e9190610ebc565b610352565b005b61018f600480360381019061018a9190610e7c565b610474565b60405161019c9190610d76565b60405180910390f35b6101ad6104df565b6040516101ba9190610e03565b60405180910390f35b6101cb6104e6565b6040516101d89190610d76565b60405180910390f35b6101fb60048036038101906101f69190610e7c565b610505565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610270575061026f82610526565b5b9050919050565b600060976000838152602001908152602001600020600101549050919050565b6102a082610277565b6102a981610590565b6102b383836105a4565b505050565b6102c0610685565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461032d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032490610f6c565b60405180910390fd5b610337828261068d565b5050565b6000603360009054906101000a900460ff16905090565b600060019054906101000a900460ff166103a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039890610ffe565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610407576040517f5415139400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61040f61076f565b6104176107c8565b61041f610819565b61043061042a610872565b826105a4565b61044161043b61089a565b826105a4565b61045961044c61089a565b610454610872565b6108c2565b610471610464610872565b61046c610872565b6108c2565b50565b60006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b60006105006104f3610872565b6104fb610685565b610474565b905090565b61050e82610277565b61051781610590565b610521838361068d565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6105a18161059c610685565b61091e565b50565b6105ae8282610474565b6106815760016097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610626610685565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6106978282610474565b1561076b5760006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610710610685565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600060019054906101000a900460ff166107be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b590610ffe565b60405180910390fd5b6107c66109a3565b565b600060019054906101000a900460ff16610817576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080e90610ffe565b60405180910390fd5b565b600060019054906101000a900460ff16610868576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085f90610ffe565b60405180910390fd5b610870610a0f565b565b60007fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775905090565b60007f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a905090565b60006108cd83610277565b90508160976000858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b6109288282610474565b61099f5761093581610a68565b6109438360001c6020610a95565b604051602001610954929190611127565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099691906111ab565b60405180910390fd5b5050565b600060019054906101000a900460ff166109f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e990610ffe565b60405180910390fd5b6000603360006101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff16610a5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5590610ffe565b60405180910390fd5b600160c981905550565b6060610a8e8273ffffffffffffffffffffffffffffffffffffffff16601460ff16610a95565b9050919050565b606060006002836002610aa89190611206565b610ab29190611260565b67ffffffffffffffff811115610acb57610aca611294565b5b6040519080825280601f01601f191660200182016040528015610afd5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610b3557610b346112c3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610b9957610b986112c3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002610bd99190611206565b610be39190611260565b90505b6001811115610c83577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110610c2557610c246112c3565b5b1a60f81b828281518110610c3c57610c3b6112c3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080610c7c906112f2565b9050610be6565b5060008414610cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbe90611367565b60405180910390fd5b8091505092915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610d0b81610cd6565b8114610d1657600080fd5b50565b600081359050610d2881610d02565b92915050565b600060208284031215610d4457610d43610cd1565b5b6000610d5284828501610d19565b91505092915050565b60008115159050919050565b610d7081610d5b565b82525050565b6000602082019050610d8b6000830184610d67565b92915050565b6000819050919050565b610da481610d91565b8114610daf57600080fd5b50565b600081359050610dc181610d9b565b92915050565b600060208284031215610ddd57610ddc610cd1565b5b6000610deb84828501610db2565b91505092915050565b610dfd81610d91565b82525050565b6000602082019050610e186000830184610df4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e4982610e1e565b9050919050565b610e5981610e3e565b8114610e6457600080fd5b50565b600081359050610e7681610e50565b92915050565b60008060408385031215610e9357610e92610cd1565b5b6000610ea185828601610db2565b9250506020610eb285828601610e67565b9150509250929050565b600060208284031215610ed257610ed1610cd1565b5b6000610ee084828501610e67565b91505092915050565b600082825260208201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000610f56602f83610ee9565b9150610f6182610efa565b604082019050919050565b60006020820190508181036000830152610f8581610f49565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000610fe8602b83610ee9565b9150610ff382610f8c565b604082019050919050565b6000602082019050818103600083015261101781610fdb565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b600061105f60178361101e565b915061106a82611029565b601782019050919050565b600081519050919050565b60005b8381101561109e578082015181840152602081019050611083565b60008484015250505050565b60006110b582611075565b6110bf818561101e565b93506110cf818560208601611080565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b600061111160118361101e565b915061111c826110db565b601182019050919050565b600061113282611052565b915061113e82856110aa565b915061114982611104565b915061115582846110aa565b91508190509392505050565b6000601f19601f8301169050919050565b600061117d82611075565b6111878185610ee9565b9350611197818560208601611080565b6111a081611161565b840191505092915050565b600060208201905081810360008301526111c58184611172565b905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611211826111cd565b915061121c836111cd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611255576112546111d7565b5b828202905092915050565b600061126b826111cd565b9150611276836111cd565b925082820190508082111561128e5761128d6111d7565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006112fd826111cd565b9150600082036113105761130f6111d7565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000611351602083610ee9565b915061135c8261131b565b602082019050919050565b6000602082019050818103600083015261138081611344565b905091905056fea2646970667358221220b74f206dcdcdebf392d7459b2ab1515c54cd9fe4808a3e861b805703bc1e9a2864736f6c63430008100033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E810B1A GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x1E1 JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x13B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0xD2E JUMP JUMPDEST PUSH2 0x1FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xED PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE8 SWAP2 SWAP1 PUSH2 0xDC7 JUMP JUMPDEST PUSH2 0x277 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFA SWAP2 SWAP1 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x118 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x297 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x139 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x134 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x2B8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x143 PUSH2 0x33B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x150 SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x173 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x16E SWAP2 SWAP1 PUSH2 0xEBC JUMP JUMPDEST PUSH2 0x352 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x18F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18A SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x474 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19C SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AD PUSH2 0x4DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CB PUSH2 0x4E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D8 SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F6 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x505 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x270 JUMPI POP PUSH2 0x26F DUP3 PUSH2 0x526 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2A0 DUP3 PUSH2 0x277 JUMP JUMPDEST PUSH2 0x2A9 DUP2 PUSH2 0x590 JUMP JUMPDEST PUSH2 0x2B3 DUP4 DUP4 PUSH2 0x5A4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x2C0 PUSH2 0x685 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x32D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x324 SWAP1 PUSH2 0xF6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x337 DUP3 DUP3 PUSH2 0x68D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x398 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x407 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x40F PUSH2 0x76F JUMP JUMPDEST PUSH2 0x417 PUSH2 0x7C8 JUMP JUMPDEST PUSH2 0x41F PUSH2 0x819 JUMP JUMPDEST PUSH2 0x430 PUSH2 0x42A PUSH2 0x872 JUMP JUMPDEST DUP3 PUSH2 0x5A4 JUMP JUMPDEST PUSH2 0x441 PUSH2 0x43B PUSH2 0x89A JUMP JUMPDEST DUP3 PUSH2 0x5A4 JUMP JUMPDEST PUSH2 0x459 PUSH2 0x44C PUSH2 0x89A JUMP JUMPDEST PUSH2 0x454 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x8C2 JUMP JUMPDEST PUSH2 0x471 PUSH2 0x464 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x46C PUSH2 0x872 JUMP JUMPDEST PUSH2 0x8C2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x500 PUSH2 0x4F3 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x4FB PUSH2 0x685 JUMP JUMPDEST PUSH2 0x474 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x50E DUP3 PUSH2 0x277 JUMP JUMPDEST PUSH2 0x517 DUP2 PUSH2 0x590 JUMP JUMPDEST PUSH2 0x521 DUP4 DUP4 PUSH2 0x68D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5A1 DUP2 PUSH2 0x59C PUSH2 0x685 JUMP JUMPDEST PUSH2 0x91E JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x5AE DUP3 DUP3 PUSH2 0x474 JUMP JUMPDEST PUSH2 0x681 JUMPI PUSH1 0x1 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x626 PUSH2 0x685 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x697 DUP3 DUP3 PUSH2 0x474 JUMP JUMPDEST ISZERO PUSH2 0x76B JUMPI PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x710 PUSH2 0x685 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x7BE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7B5 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7C6 PUSH2 0x9A3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x817 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x80E SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x868 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x85F SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x870 PUSH2 0xA0F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8CD DUP4 PUSH2 0x277 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x97 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x928 DUP3 DUP3 PUSH2 0x474 JUMP JUMPDEST PUSH2 0x99F JUMPI PUSH2 0x935 DUP2 PUSH2 0xA68 JUMP JUMPDEST PUSH2 0x943 DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0xA95 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x954 SWAP3 SWAP2 SWAP1 PUSH2 0x1127 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x996 SWAP2 SWAP1 PUSH2 0x11AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x9F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9E9 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xA5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA55 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA8E DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0xA95 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0xAA8 SWAP2 SWAP1 PUSH2 0x1206 JUMP JUMPDEST PUSH2 0xAB2 SWAP2 SWAP1 PUSH2 0x1260 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xACB JUMPI PUSH2 0xACA PUSH2 0x1294 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xAFD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB35 JUMPI PUSH2 0xB34 PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xB99 JUMPI PUSH2 0xB98 PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0xBD9 SWAP2 SWAP1 PUSH2 0x1206 JUMP JUMPDEST PUSH2 0xBE3 SWAP2 SWAP1 PUSH2 0x1260 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xC83 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0xC25 JUMPI PUSH2 0xC24 PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xC3C JUMPI PUSH2 0xC3B PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0xC7C SWAP1 PUSH2 0x12F2 JUMP JUMPDEST SWAP1 POP PUSH2 0xBE6 JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0xCC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBE SWAP1 PUSH2 0x1367 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD0B DUP2 PUSH2 0xCD6 JUMP JUMPDEST DUP2 EQ PUSH2 0xD16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xD28 DUP2 PUSH2 0xD02 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD44 JUMPI PUSH2 0xD43 PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD52 DUP5 DUP3 DUP6 ADD PUSH2 0xD19 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD70 DUP2 PUSH2 0xD5B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD8B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD67 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDA4 DUP2 PUSH2 0xD91 JUMP JUMPDEST DUP2 EQ PUSH2 0xDAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xDC1 DUP2 PUSH2 0xD9B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDDD JUMPI PUSH2 0xDDC PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xDEB DUP5 DUP3 DUP6 ADD PUSH2 0xDB2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xDFD DUP2 PUSH2 0xD91 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE18 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xDF4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE49 DUP3 PUSH2 0xE1E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE59 DUP2 PUSH2 0xE3E JUMP JUMPDEST DUP2 EQ PUSH2 0xE64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xE76 DUP2 PUSH2 0xE50 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE93 JUMPI PUSH2 0xE92 PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEA1 DUP6 DUP3 DUP7 ADD PUSH2 0xDB2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xEB2 DUP6 DUP3 DUP7 ADD PUSH2 0xE67 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xED2 JUMPI PUSH2 0xED1 PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEE0 DUP5 DUP3 DUP6 ADD PUSH2 0xE67 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF56 PUSH1 0x2F DUP4 PUSH2 0xEE9 JUMP JUMPDEST SWAP2 POP PUSH2 0xF61 DUP3 PUSH2 0xEFA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF85 DUP2 PUSH2 0xF49 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFE8 PUSH1 0x2B DUP4 PUSH2 0xEE9 JUMP JUMPDEST SWAP2 POP PUSH2 0xFF3 DUP3 PUSH2 0xF8C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1017 DUP2 PUSH2 0xFDB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x105F PUSH1 0x17 DUP4 PUSH2 0x101E JUMP JUMPDEST SWAP2 POP PUSH2 0x106A DUP3 PUSH2 0x1029 JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x109E JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10B5 DUP3 PUSH2 0x1075 JUMP JUMPDEST PUSH2 0x10BF DUP2 DUP6 PUSH2 0x101E JUMP JUMPDEST SWAP4 POP PUSH2 0x10CF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1080 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1111 PUSH1 0x11 DUP4 PUSH2 0x101E JUMP JUMPDEST SWAP2 POP PUSH2 0x111C DUP3 PUSH2 0x10DB JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1132 DUP3 PUSH2 0x1052 JUMP JUMPDEST SWAP2 POP PUSH2 0x113E DUP3 DUP6 PUSH2 0x10AA JUMP JUMPDEST SWAP2 POP PUSH2 0x1149 DUP3 PUSH2 0x1104 JUMP JUMPDEST SWAP2 POP PUSH2 0x1155 DUP3 DUP5 PUSH2 0x10AA JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x117D DUP3 PUSH2 0x1075 JUMP JUMPDEST PUSH2 0x1187 DUP2 DUP6 PUSH2 0xEE9 JUMP JUMPDEST SWAP4 POP PUSH2 0x1197 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1080 JUMP JUMPDEST PUSH2 0x11A0 DUP2 PUSH2 0x1161 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11C5 DUP2 DUP5 PUSH2 0x1172 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1211 DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH2 0x121C DUP4 PUSH2 0x11CD JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1255 JUMPI PUSH2 0x1254 PUSH2 0x11D7 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x126B DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH2 0x1276 DUP4 PUSH2 0x11CD JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x128E JUMPI PUSH2 0x128D PUSH2 0x11D7 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x12FD DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x1310 JUMPI PUSH2 0x130F PUSH2 0x11D7 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1351 PUSH1 0x20 DUP4 PUSH2 0xEE9 JUMP JUMPDEST SWAP2 POP PUSH2 0x135C DUP3 PUSH2 0x131B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1380 DUP2 PUSH2 0x1344 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0x4F KECCAK256 PUSH14 0xCDCDEBF392D7459B2AB1515C54CD SWAP16 0xE4 DUP1 DUP11 RETURNDATACOPY DUP7 SHL DUP1 JUMPI SUB 0xBC 0x1E SWAP11 0x28 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"461:951:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2903:213:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4708:129;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5133:145;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6242:214;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1858:84:4;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;734:549:15;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3203:145:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2324:49;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1289:117:15;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5558:147:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2903:213;2988:4;3026:43;3011:58;;;:11;:58;;;;:98;;;;3073:36;3097:11;3073:23;:36::i;:::-;3011:98;3004:105;;2903:213;;;:::o;4708:129::-;4782:7;4808:6;:12;4815:4;4808:12;;;;;;;;;;;:22;;;4801:29;;4708:129;;;:::o;5133:145::-;5216:18;5229:4;5216:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5246:25:::1;5257:4;5263:7;5246:10;:25::i;:::-;5133:145:::0;;;:::o;6242:214::-;6348:12;:10;:12::i;:::-;6337:23;;:7;:23;;;6329:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;6423:26;6435:4;6441:7;6423:11;:26::i;:::-;6242:214;;:::o;1858:84:4:-;1905:4;1928:7;;;;;;;;;;;1921:14;;1858:84;:::o;734:549:15:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;845:1:15::1;828:19;;:5;:19;;::::0;825:99:::1;;870:43;;;;;;;;;;;;;;825:99;933:17;:15;:17::i;:::-;960:22;:20;:22::i;:::-;992:24;:22;:24::i;:::-;1027:43;1038:24;:22;:24::i;:::-;1064:5;1027:10;:43::i;:::-;1080:44;1091:25;:23;:25::i;:::-;1118:5;1080:10;:44::i;:::-;1135:66;1149:25;:23;:25::i;:::-;1176:24;:22;:24::i;:::-;1135:13;:66::i;:::-;1211:65;1225:24;:22;:24::i;:::-;1251;:22;:24::i;:::-;1211:13;:65::i;:::-;734:549:::0;:::o;3203:145:0:-;3289:4;3312:6;:12;3319:4;3312:12;;;;;;;;;;;:20;;:29;3333:7;3312:29;;;;;;;;;;;;;;;;;;;;;;;;;3305:36;;3203:145;;;;:::o;2324:49::-;2369:4;2324:49;;;:::o;1289:117:15:-;1329:4;1352:47;1360:24;:22;:24::i;:::-;1386:12;:10;:12::i;:::-;1352:7;:47::i;:::-;1345:54;;1289:117;:::o;5558:147:0:-;5642:18;5655:4;5642:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5672:26:::1;5684:4;5690:7;5672:11;:26::i;:::-;5558:147:::0;;;:::o;1060:166:12:-;1145:4;1183:36;1168:51;;;:11;:51;;;;1161:58;;1060:166;;;:::o;3642:103:0:-;3708:30;3719:4;3725:12;:10;:12::i;:::-;3708:10;:30::i;:::-;3642:103;:::o;7791:233::-;7874:22;7882:4;7888:7;7874;:22::i;:::-;7869:149;;7944:4;7912:6;:12;7919:4;7912:12;;;;;;;;;;;:20;;:29;7933:7;7912:29;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;;;;;;7994:12;:10;:12::i;:::-;7967:40;;7985:7;7967:40;;7979:4;7967:40;;;;;;;;;;7869:149;7791:233;;:::o;850:96:10:-;903:7;929:10;922:17;;850:96;:::o;8195:234:0:-;8278:22;8286:4;8292:7;8278;:22::i;:::-;8274:149;;;8348:5;8316:6;:12;8323:4;8316:12;;;;;;;;;;;:20;;:29;8337:7;8316:29;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;8399:12;:10;:12::i;:::-;8372:40;;8390:7;8372:40;;8384:4;8372:40;;;;;;;;;;8274:149;8195:234;;:::o;1063:97:4:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1126:27:4::1;:25;:27::i;:::-;1063:97::o:0;2025:65:0:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2025:65:0:o;1868:111:5:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1938:34:5::1;:32;:34::i;:::-;1868:111::o:0;222:90:16:-;269:7;124:23;288:17;;222:90;:::o;318:92::-;366:7;191:24;385:18;;318:92;:::o;7376:247:0:-;7459:25;7487:18;7500:4;7487:12;:18::i;:::-;7459:46;;7540:9;7515:6;:12;7522:4;7515:12;;;;;;;;;;;:22;;:34;;;;7606:9;7587:17;7581:4;7564:52;;;;;;;;;;7449:174;7376:247;;:::o;4026:501::-;4114:22;4122:4;4128:7;4114;:22::i;:::-;4109:412;;4297:39;4328:7;4297:30;:39::i;:::-;4407:49;4446:4;4438:13;;4453:2;4407:30;:49::i;:::-;4204:274;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4152:358;;;;;;;;;;;:::i;:::-;;;;;;;;4109:412;4026:501;;:::o;1166:95:4:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1249:5:4::1;1239:7;;:15;;;;;;;;;;;;;;;;;;1166:95::o:0;1985:109:5:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1787:1:5::1;2065:7;:22;;;;1985:109::o:0;2146:149:11:-;2204:13;2236:52;2264:4;2248:22;;333:2;2236:52;;:11;:52::i;:::-;2229:59;;2146:149;;;:::o;1557:437::-;1632:13;1657:19;1702:1;1693:6;1689:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1679:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1657:47;;1714:15;:6;1721:1;1714:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1739;:6;1746:1;1739:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1769:9;1794:1;1785:6;1781:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1769:26;;1764:128;1801:1;1797;:5;1764:128;;;1835:8;1852:3;1844:5;:11;1835:21;;;;;;;:::i;:::-;;;;;1823:6;1830:1;1823:9;;;;;;;;:::i;:::-;;;;;:33;;;;;;;;;;;1880:1;1870:11;;;;;1804:3;;;;:::i;:::-;;;1764:128;;;;1918:1;1909:5;:10;1901:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;1980:6;1966:21;;;1557:437;;;;:::o;88:117:26:-;197:1;194;187:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:77::-;1555:7;1584:5;1573:16;;1518:77;;;:::o;1601:122::-;1674:24;1692:5;1674:24;:::i;:::-;1667:5;1664:35;1654:63;;1713:1;1710;1703:12;1654:63;1601:122;:::o;1729:139::-;1775:5;1813:6;1800:20;1791:29;;1829:33;1856:5;1829:33;:::i;:::-;1729:139;;;;:::o;1874:329::-;1933:6;1982:2;1970:9;1961:7;1957:23;1953:32;1950:119;;;1988:79;;:::i;:::-;1950:119;2108:1;2133:53;2178:7;2169:6;2158:9;2154:22;2133:53;:::i;:::-;2123:63;;2079:117;1874:329;;;;:::o;2209:118::-;2296:24;2314:5;2296:24;:::i;:::-;2291:3;2284:37;2209:118;;:::o;2333:222::-;2426:4;2464:2;2453:9;2449:18;2441:26;;2477:71;2545:1;2534:9;2530:17;2521:6;2477:71;:::i;:::-;2333:222;;;;:::o;2561:126::-;2598:7;2638:42;2631:5;2627:54;2616:65;;2561:126;;;:::o;2693:96::-;2730:7;2759:24;2777:5;2759:24;:::i;:::-;2748:35;;2693:96;;;:::o;2795:122::-;2868:24;2886:5;2868:24;:::i;:::-;2861:5;2858:35;2848:63;;2907:1;2904;2897:12;2848:63;2795:122;:::o;2923:139::-;2969:5;3007:6;2994:20;2985:29;;3023:33;3050:5;3023:33;:::i;:::-;2923:139;;;;:::o;3068:474::-;3136:6;3144;3193:2;3181:9;3172:7;3168:23;3164:32;3161:119;;;3199:79;;:::i;:::-;3161:119;3319:1;3344:53;3389:7;3380:6;3369:9;3365:22;3344:53;:::i;:::-;3334:63;;3290:117;3446:2;3472:53;3517:7;3508:6;3497:9;3493:22;3472:53;:::i;:::-;3462:63;;3417:118;3068:474;;;;;:::o;3548:329::-;3607:6;3656:2;3644:9;3635:7;3631:23;3627:32;3624:119;;;3662:79;;:::i;:::-;3624:119;3782:1;3807:53;3852:7;3843:6;3832:9;3828:22;3807:53;:::i;:::-;3797:63;;3753:117;3548:329;;;;:::o;3883:169::-;3967:11;4001:6;3996:3;3989:19;4041:4;4036:3;4032:14;4017:29;;3883:169;;;;:::o;4058:234::-;4198:34;4194:1;4186:6;4182:14;4175:58;4267:17;4262:2;4254:6;4250:15;4243:42;4058:234;:::o;4298:366::-;4440:3;4461:67;4525:2;4520:3;4461:67;:::i;:::-;4454:74;;4537:93;4626:3;4537:93;:::i;:::-;4655:2;4650:3;4646:12;4639:19;;4298:366;;;:::o;4670:419::-;4836:4;4874:2;4863:9;4859:18;4851:26;;4923:9;4917:4;4913:20;4909:1;4898:9;4894:17;4887:47;4951:131;5077:4;4951:131;:::i;:::-;4943:139;;4670:419;;;:::o;5095:230::-;5235:34;5231:1;5223:6;5219:14;5212:58;5304:13;5299:2;5291:6;5287:15;5280:38;5095:230;:::o;5331:366::-;5473:3;5494:67;5558:2;5553:3;5494:67;:::i;:::-;5487:74;;5570:93;5659:3;5570:93;:::i;:::-;5688:2;5683:3;5679:12;5672:19;;5331:366;;;:::o;5703:419::-;5869:4;5907:2;5896:9;5892:18;5884:26;;5956:9;5950:4;5946:20;5942:1;5931:9;5927:17;5920:47;5984:131;6110:4;5984:131;:::i;:::-;5976:139;;5703:419;;;:::o;6128:148::-;6230:11;6267:3;6252:18;;6128:148;;;;:::o;6282:173::-;6422:25;6418:1;6410:6;6406:14;6399:49;6282:173;:::o;6461:402::-;6621:3;6642:85;6724:2;6719:3;6642:85;:::i;:::-;6635:92;;6736:93;6825:3;6736:93;:::i;:::-;6854:2;6849:3;6845:12;6838:19;;6461:402;;;:::o;6869:99::-;6921:6;6955:5;6949:12;6939:22;;6869:99;;;:::o;6974:246::-;7055:1;7065:113;7079:6;7076:1;7073:13;7065:113;;;7164:1;7159:3;7155:11;7149:18;7145:1;7140:3;7136:11;7129:39;7101:2;7098:1;7094:10;7089:15;;7065:113;;;7212:1;7203:6;7198:3;7194:16;7187:27;7036:184;6974:246;;;:::o;7226:390::-;7332:3;7360:39;7393:5;7360:39;:::i;:::-;7415:89;7497:6;7492:3;7415:89;:::i;:::-;7408:96;;7513:65;7571:6;7566:3;7559:4;7552:5;7548:16;7513:65;:::i;:::-;7603:6;7598:3;7594:16;7587:23;;7336:280;7226:390;;;;:::o;7622:167::-;7762:19;7758:1;7750:6;7746:14;7739:43;7622:167;:::o;7795:402::-;7955:3;7976:85;8058:2;8053:3;7976:85;:::i;:::-;7969:92;;8070:93;8159:3;8070:93;:::i;:::-;8188:2;8183:3;8179:12;8172:19;;7795:402;;;:::o;8203:967::-;8585:3;8607:148;8751:3;8607:148;:::i;:::-;8600:155;;8772:95;8863:3;8854:6;8772:95;:::i;:::-;8765:102;;8884:148;9028:3;8884:148;:::i;:::-;8877:155;;9049:95;9140:3;9131:6;9049:95;:::i;:::-;9042:102;;9161:3;9154:10;;8203:967;;;;;:::o;9176:102::-;9217:6;9268:2;9264:7;9259:2;9252:5;9248:14;9244:28;9234:38;;9176:102;;;:::o;9284:377::-;9372:3;9400:39;9433:5;9400:39;:::i;:::-;9455:71;9519:6;9514:3;9455:71;:::i;:::-;9448:78;;9535:65;9593:6;9588:3;9581:4;9574:5;9570:16;9535:65;:::i;:::-;9625:29;9647:6;9625:29;:::i;:::-;9620:3;9616:39;9609:46;;9376:285;9284:377;;;;:::o;9667:313::-;9780:4;9818:2;9807:9;9803:18;9795:26;;9867:9;9861:4;9857:20;9853:1;9842:9;9838:17;9831:47;9895:78;9968:4;9959:6;9895:78;:::i;:::-;9887:86;;9667:313;;;;:::o;9986:77::-;10023:7;10052:5;10041:16;;9986:77;;;:::o;10069:180::-;10117:77;10114:1;10107:88;10214:4;10211:1;10204:15;10238:4;10235:1;10228:15;10255:348;10295:7;10318:20;10336:1;10318:20;:::i;:::-;10313:25;;10352:20;10370:1;10352:20;:::i;:::-;10347:25;;10540:1;10472:66;10468:74;10465:1;10462:81;10457:1;10450:9;10443:17;10439:105;10436:131;;;10547:18;;:::i;:::-;10436:131;10595:1;10592;10588:9;10577:20;;10255:348;;;;:::o;10609:191::-;10649:3;10668:20;10686:1;10668:20;:::i;:::-;10663:25;;10702:20;10720:1;10702:20;:::i;:::-;10697:25;;10745:1;10742;10738:9;10731:16;;10766:3;10763:1;10760:10;10757:36;;;10773:18;;:::i;:::-;10757:36;10609:191;;;;:::o;10806:180::-;10854:77;10851:1;10844:88;10951:4;10948:1;10941:15;10975:4;10972:1;10965:15;10992:180;11040:77;11037:1;11030:88;11137:4;11134:1;11127:15;11161:4;11158:1;11151:15;11178:171;11217:3;11240:24;11258:5;11240:24;:::i;:::-;11231:33;;11286:4;11279:5;11276:15;11273:41;;11294:18;;:::i;:::-;11273:41;11341:1;11334:5;11330:13;11323:20;;11178:171;;;:::o;11355:182::-;11495:34;11491:1;11483:6;11479:14;11472:58;11355:182;:::o;11543:366::-;11685:3;11706:67;11770:2;11765:3;11706:67;:::i;:::-;11699:74;;11782:93;11871:3;11782:93;:::i;:::-;11900:2;11895:3;11891:12;11884:19;;11543:366;;;:::o;11915:419::-;12081:4;12119:2;12108:9;12104:18;12096:26;;12168:9;12162:4;12158:20;12154:1;12143:9;12139:17;12132:47;12196:131;12322:4;12196:131;:::i;:::-;12188:139;;11915:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1010600","executionCost":"1047","totalCost":"1011647"},"external":{"DEFAULT_ADMIN_ROLE()":"379","__BaseUpgradeablePausable_init(address)":"infinite","getRoleAdmin(bytes32)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"3162","isAdmin()":"2836","paused()":"2568","renounceRole(bytes32,address)":"infinite","revokeRole(bytes32,address)":"infinite","supportsInterface(bytes4)":"728"}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","__BaseUpgradeablePausable_init(address)":"6e810b1a","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isAdmin()":"b6db75a0","paused()":"5c975abb","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BaseUpgradeablePausable__ZeroAddressError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BaseUpgradeablePausable.sol\":\"BaseUpgradeablePausable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"contracts/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./Constants.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nerror BaseUpgradeablePausable__ZeroAddressError();\\n\\ncontract BaseUpgradeablePausable is \\n    Initializable, \\n    PausableUpgradeable, \\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable \\n{\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin(), \\\"Must have admin role to perform this action.\\\");\\n        _;\\n    }\\n\\n    function __BaseUpgradeablePausable_init(address owner) public onlyInitializing() {\\n        if(owner == address(0)) {\\n            revert BaseUpgradeablePausable__ZeroAddressError();\\n        }\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        _grantRole(Constants.getAdminRole(), owner);\\n        _grantRole(Constants.getPauserRole(), owner);\\n\\n        _setRoleAdmin(Constants.getPauserRole(), Constants.getAdminRole());\\n        _setRoleAdmin(Constants.getAdminRole(), Constants.getAdminRole());\\n    }\\n\\n    function isAdmin() public view returns (bool) {\\n        return hasRole(Constants.getAdminRole(), _msgSender());\\n    }\\n\\n  \\n}\",\"keccak256\":\"0x29b172c9fffe9bc60c702a071bae35f301b1b5c3824f0ca44b3d2dcabbda5af9\",\"license\":\"MIT\"},\"contracts/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nlibrary Constants {\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    function getAdminRole() internal pure returns (bytes32) {\\n        return ADMIN_ROLE;\\n    }\\n\\n    function getPauserRole() internal pure returns (bytes32) {\\n        return PAUSER_ROLE;\\n    }\\n}\",\"keccak256\":\"0xeae9d870bc2ace9284ae575eb6c534c177ff6f4a60b98f10a0a8156f19f760cf\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1500,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":601,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":706,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":1719,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"__gap","offset":0,"slot":"101","type":"t_array(t_uint256)50_storage"},{"astId":39,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"_roles","offset":0,"slot":"151","type":"t_mapping(t_bytes32,t_struct(RoleData)34_storage)"},{"astId":334,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"__gap","offset":0,"slot":"152","type":"t_array(t_uint256)49_storage"},{"astId":721,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"_status","offset":0,"slot":"201","type":"t_uint256"},{"astId":779,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"__gap","offset":0,"slot":"202","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)34_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)34_storage"},"t_struct(RoleData)34_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":31,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":33,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Constants.sol":{"Constants":{"abi":[{"inputs":[],"name":"ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAUSER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"610124610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610603d5760003560e01c806375b238fc146042578063e63ab1e914605c575b600080fd5b60486076565b6040516053919060d5565b60405180910390f35b6062609a565b604051606d919060d5565b60405180910390f35b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6000819050919050565b60cf8160be565b82525050565b600060208201905060e8600083018460c8565b9291505056fea2646970667358221220d17a2a816b9d6983dde5a1c6dcea24af5ac80304920f481a985b01122e3fa2a464736f6c63430008100033","opcodes":"PUSH2 0x124 PUSH2 0x53 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x46 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x3D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75B238FC EQ PUSH1 0x42 JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH1 0x5C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x48 PUSH1 0x76 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x53 SWAP2 SWAP1 PUSH1 0xD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x62 PUSH1 0x9A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x6D SWAP2 SWAP1 PUSH1 0xD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xCF DUP2 PUSH1 0xBE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0xE8 PUSH1 0x0 DUP4 ADD DUP5 PUSH1 0xC8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD1 PUSH27 0x2A816B9D6983DDE5A1C6DCEA24AF5AC80304920F481A985B01122E EXTCODEHASH LOG2 LOG4 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"62:350:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@ADMIN_ROLE_2706":{"entryPoint":118,"id":2706,"parameterSlots":0,"returnSlots":0},"@PAUSER_ROLE_2711":{"entryPoint":154,"id":2711,"parameterSlots":0,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack_library":{"entryPoint":200,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_library_reversed":{"entryPoint":213,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":190,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:463:26","statements":[{"body":{"nodeType":"YulBlock","src":"52:32:26","statements":[{"nodeType":"YulAssignment","src":"62:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"73:5:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"62:7:26"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"44:7:26","type":""}],"src":"7:77:26"},{"body":{"nodeType":"YulBlock","src":"163:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"180:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"203:5:26"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"185:17:26"},"nodeType":"YulFunctionCall","src":"185:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"173:6:26"},"nodeType":"YulFunctionCall","src":"173:37:26"},"nodeType":"YulExpressionStatement","src":"173:37:26"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack_library","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"151:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"158:3:26","type":""}],"src":"90:126:26"},{"body":{"nodeType":"YulBlock","src":"328:132:26","statements":[{"nodeType":"YulAssignment","src":"338:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"350:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"361:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"346:3:26"},"nodeType":"YulFunctionCall","src":"346:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"338:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"426:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"439:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"450:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"435:3:26"},"nodeType":"YulFunctionCall","src":"435:17:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack_library","nodeType":"YulIdentifier","src":"374:51:26"},"nodeType":"YulFunctionCall","src":"374:79:26"},"nodeType":"YulExpressionStatement","src":"374:79:26"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"300:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"312:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"323:4:26","type":""}],"src":"222:238:26"}]},"contents":"{\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack_library(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_library_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack_library(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":26,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"7300000000000000000000000000000000000000003014608060405260043610603d5760003560e01c806375b238fc146042578063e63ab1e914605c575b600080fd5b60486076565b6040516053919060d5565b60405180910390f35b6062609a565b604051606d919060d5565b60405180910390f35b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6000819050919050565b60cf8160be565b82525050565b600060208201905060e8600083018460c8565b9291505056fea2646970667358221220d17a2a816b9d6983dde5a1c6dcea24af5ac80304920f481a985b01122e3fa2a464736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x3D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75B238FC EQ PUSH1 0x42 JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH1 0x5C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x48 PUSH1 0x76 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x53 SWAP2 SWAP1 PUSH1 0xD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x62 PUSH1 0x9A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x6D SWAP2 SWAP1 PUSH1 0xD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xCF DUP2 PUSH1 0xBE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0xE8 PUSH1 0x0 DUP4 ADD DUP5 PUSH1 0xC8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD1 PUSH27 0x2A816B9D6983DDE5A1C6DCEA24AF5AC80304920F481A985B01122E EXTCODEHASH LOG2 LOG4 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"62:350:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;87:60;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;153:62;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;87:60;124:23;87:60;:::o;153:62::-;191:24;153:62;:::o;7:77:26:-;44:7;73:5;62:16;;7:77;;;:::o;90:126::-;185:24;203:5;185:24;:::i;:::-;180:3;173:37;90:126;;:::o;222:238::-;323:4;361:2;350:9;346:18;338:26;;374:79;450:1;439:9;435:17;426:6;374:79;:::i;:::-;222:238;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"58400","executionCost":"136","totalCost":"58536"},"external":{"ADMIN_ROLE()":"291","PAUSER_ROLE()":"313"},"internal":{"getAdminRole()":"infinite","getPauserRole()":"infinite"}},"methodIdentifiers":{"ADMIN_ROLE()":"75b238fc","PAUSER_ROLE()":"e63ab1e9"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Constants.sol\":\"Constants\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nlibrary Constants {\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    function getAdminRole() internal pure returns (bytes32) {\\n        return ADMIN_ROLE;\\n    }\\n\\n    function getPauserRole() internal pure returns (bytes32) {\\n        return PAUSER_ROLE;\\n    }\\n}\",\"keccak256\":\"0xeae9d870bc2ace9284ae575eb6c534c177ff6f4a60b98f10a0a8156f19f760cf\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/core/buySell/BuyGENZ.sol":{"BuyGENZ":{"abi":[{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"decimals","type":"uint256"},{"internalType":"address","name":"tokenDAI","type":"address"},{"internalType":"address","name":"tokenGENZ","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"BaseUpgradeablePausable__ZeroAddressError","type":"error"},{"inputs":[],"name":"BuyGENZ__TransactionFailedError","type":"error"},{"inputs":[],"name":"BuySellGENZ__GENZBurnFailedError","type":"error"},{"inputs":[],"name":"BuySellGENZ__GENZMintFailedError","type":"error"},{"inputs":[],"name":"BuySellGENZ__ImmutableChangesError","type":"error"},{"inputs":[],"name":"BuySellGENZ__InsufficientBalanceError","type":"error"},{"inputs":[],"name":"BuySellGENZ__LowAmountError","type":"error"},{"inputs":[],"name":"BuySellGENZ__LowSZTBalanceError","type":"error"},{"inputs":[],"name":"BuySellGENZ__PausedError","type":"error"},{"inputs":[],"name":"BuySellGENZ__TransactionFailedError","type":"error"},{"inputs":[],"name":"BuySellGENZ__ZeroAddressTransactionError","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"__BaseUpgradeablePausable_init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"buyGENZToken","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"issuedTokensGENZ","type":"uint256"},{"internalType":"uint256","name":"requiredTokens","type":"uint256"}],"name":"calculatePriceGENZ","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentTokenPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getGENZTokenCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pauseOperationAddress","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isAdmin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenPrice","type":"uint256"}],"name":"updateBaseSalePrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"valueInDays","type":"uint256"}],"name":"updateMinimumWithdrawalPeriod","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawStakedToken","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"custom:security-contact":"anshik@safezen.finance","kind":"dev","methods":{"buyGENZToken(uint256,uint256,uint8,bytes32,bytes32)":{"params":{"value":": amount of SZT tokens user wishes to purchase"}},"constructor":{"custom:oz-upgrades-unsafe-allow-constructor":"","details":"initializing _tokenDAI","params":{"tokenDAI":": address of the DAI token"}},"getGENZTokenCount()":{"details":"returns the token in circulation"},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"initialize(address)":{"details":"one time function to initialize the contract","params":{"pauseOperationAddress":": address of the Global Pause Operation contract"}},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2849":{"entryPoint":null,"id":2849,"parameterSlots":4,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":418,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":317,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256t_addresst_address_fromMemory":{"entryPoint":441,"id":null,"parameterSlots":2,"returnSlots":4},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":1167,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_helper":{"entryPoint":615,"id":null,"parameterSlots":4,"returnSlots":2},"checked_exp_t_uint256_t_uint256":{"entryPoint":942,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_unsigned":{"entryPoint":706,"id":null,"parameterSlots":3,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":1023,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":372,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":340,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":281,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":555,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":1120,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":276,"id":null,"parameterSlots":0,"returnSlots":0},"shift_right_1_unsigned":{"entryPoint":602,"id":null,"parameterSlots":1,"returnSlots":1},"validator_revert_t_address":{"entryPoint":392,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":291,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5277:26","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:26","statements":[{"nodeType":"YulAssignment","src":"57:19:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:26","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:26"},"nodeType":"YulFunctionCall","src":"67:9:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:26"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:26","type":""}],"src":"7:75:26"},{"body":{"nodeType":"YulBlock","src":"177:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:26"},"nodeType":"YulFunctionCall","src":"187:12:26"},"nodeType":"YulExpressionStatement","src":"187:12:26"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:26"},{"body":{"nodeType":"YulBlock","src":"300:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:26"},"nodeType":"YulFunctionCall","src":"310:12:26"},"nodeType":"YulExpressionStatement","src":"310:12:26"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:26"},{"body":{"nodeType":"YulBlock","src":"379:32:26","statements":[{"nodeType":"YulAssignment","src":"389:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:26"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:26","type":""}],"src":"334:77:26"},{"body":{"nodeType":"YulBlock","src":"460:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:26"},"nodeType":"YulFunctionCall","src":"519:12:26"},"nodeType":"YulExpressionStatement","src":"519:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"490:17:26"},"nodeType":"YulFunctionCall","src":"490:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:26"},"nodeType":"YulFunctionCall","src":"480:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:26"},"nodeType":"YulFunctionCall","src":"473:43:26"},"nodeType":"YulIf","src":"470:63:26"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:26","type":""}],"src":"417:122:26"},{"body":{"nodeType":"YulBlock","src":"608:80:26","statements":[{"nodeType":"YulAssignment","src":"618:22:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"633:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"627:5:26"},"nodeType":"YulFunctionCall","src":"627:13:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"618:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:26"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"649:26:26"},"nodeType":"YulFunctionCall","src":"649:33:26"},"nodeType":"YulExpressionStatement","src":"649:33:26"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"586:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"594:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"602:5:26","type":""}],"src":"545:143:26"},{"body":{"nodeType":"YulBlock","src":"739:81:26","statements":[{"nodeType":"YulAssignment","src":"749:65:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"764:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"771:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"760:3:26"},"nodeType":"YulFunctionCall","src":"760:54:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"749:7:26"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"721:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"731:7:26","type":""}],"src":"694:126:26"},{"body":{"nodeType":"YulBlock","src":"871:51:26","statements":[{"nodeType":"YulAssignment","src":"881:35:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"910:5:26"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"892:17:26"},"nodeType":"YulFunctionCall","src":"892:24:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"881:7:26"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"853:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"863:7:26","type":""}],"src":"826:96:26"},{"body":{"nodeType":"YulBlock","src":"971:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"1028:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1037:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1040:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1030:6:26"},"nodeType":"YulFunctionCall","src":"1030:12:26"},"nodeType":"YulExpressionStatement","src":"1030:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"994:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1019:5:26"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1001:17:26"},"nodeType":"YulFunctionCall","src":"1001:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"991:2:26"},"nodeType":"YulFunctionCall","src":"991:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"984:6:26"},"nodeType":"YulFunctionCall","src":"984:43:26"},"nodeType":"YulIf","src":"981:63:26"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"964:5:26","type":""}],"src":"928:122:26"},{"body":{"nodeType":"YulBlock","src":"1119:80:26","statements":[{"nodeType":"YulAssignment","src":"1129:22:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1144:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1138:5:26"},"nodeType":"YulFunctionCall","src":"1138:13:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1129:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1187:5:26"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1160:26:26"},"nodeType":"YulFunctionCall","src":"1160:33:26"},"nodeType":"YulExpressionStatement","src":"1160:33:26"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1097:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"1105:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1113:5:26","type":""}],"src":"1056:143:26"},{"body":{"nodeType":"YulBlock","src":"1333:692:26","statements":[{"body":{"nodeType":"YulBlock","src":"1380:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1382:77:26"},"nodeType":"YulFunctionCall","src":"1382:79:26"},"nodeType":"YulExpressionStatement","src":"1382:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1354:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"1363:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1350:3:26"},"nodeType":"YulFunctionCall","src":"1350:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"1375:3:26","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1346:3:26"},"nodeType":"YulFunctionCall","src":"1346:33:26"},"nodeType":"YulIf","src":"1343:120:26"},{"nodeType":"YulBlock","src":"1473:128:26","statements":[{"nodeType":"YulVariableDeclaration","src":"1488:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"1502:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1492:6:26","type":""}]},{"nodeType":"YulAssignment","src":"1517:74:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1563:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"1574:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1559:3:26"},"nodeType":"YulFunctionCall","src":"1559:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1583:7:26"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"1527:31:26"},"nodeType":"YulFunctionCall","src":"1527:64:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1517:6:26"}]}]},{"nodeType":"YulBlock","src":"1611:129:26","statements":[{"nodeType":"YulVariableDeclaration","src":"1626:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"1640:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1630:6:26","type":""}]},{"nodeType":"YulAssignment","src":"1656:74:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1702:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"1713:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1698:3:26"},"nodeType":"YulFunctionCall","src":"1698:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1722:7:26"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"1666:31:26"},"nodeType":"YulFunctionCall","src":"1666:64:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1656:6:26"}]}]},{"nodeType":"YulBlock","src":"1750:129:26","statements":[{"nodeType":"YulVariableDeclaration","src":"1765:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"1779:2:26","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1769:6:26","type":""}]},{"nodeType":"YulAssignment","src":"1795:74:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1841:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"1852:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1837:3:26"},"nodeType":"YulFunctionCall","src":"1837:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1861:7:26"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1805:31:26"},"nodeType":"YulFunctionCall","src":"1805:64:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1795:6:26"}]}]},{"nodeType":"YulBlock","src":"1889:129:26","statements":[{"nodeType":"YulVariableDeclaration","src":"1904:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"1918:2:26","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1908:6:26","type":""}]},{"nodeType":"YulAssignment","src":"1934:74:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1980:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"1991:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1976:3:26"},"nodeType":"YulFunctionCall","src":"1976:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2000:7:26"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1944:31:26"},"nodeType":"YulFunctionCall","src":"1944:64:26"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1934:6:26"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_addresst_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1279:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1290:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1302:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1310:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1318:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1326:6:26","type":""}],"src":"1205:820:26"},{"body":{"nodeType":"YulBlock","src":"2059:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2076:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2079:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2069:6:26"},"nodeType":"YulFunctionCall","src":"2069:88:26"},"nodeType":"YulExpressionStatement","src":"2069:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2173:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2176:4:26","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2166:6:26"},"nodeType":"YulFunctionCall","src":"2166:15:26"},"nodeType":"YulExpressionStatement","src":"2166:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2197:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2200:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2190:6:26"},"nodeType":"YulFunctionCall","src":"2190:15:26"},"nodeType":"YulExpressionStatement","src":"2190:15:26"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"2031:180:26"},{"body":{"nodeType":"YulBlock","src":"2268:51:26","statements":[{"nodeType":"YulAssignment","src":"2278:34:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2303:1:26","type":"","value":"1"},{"name":"value","nodeType":"YulIdentifier","src":"2306:5:26"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2299:3:26"},"nodeType":"YulFunctionCall","src":"2299:13:26"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"2278:8:26"}]}]},"name":"shift_right_1_unsigned","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2249:5:26","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"2259:8:26","type":""}],"src":"2217:102:26"},{"body":{"nodeType":"YulBlock","src":"2398:775:26","statements":[{"nodeType":"YulAssignment","src":"2408:15:26","value":{"name":"_power","nodeType":"YulIdentifier","src":"2417:6:26"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"2408:5:26"}]},{"nodeType":"YulAssignment","src":"2432:14:26","value":{"name":"_base","nodeType":"YulIdentifier","src":"2441:5:26"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"2432:4:26"}]},{"body":{"nodeType":"YulBlock","src":"2490:677:26","statements":[{"body":{"nodeType":"YulBlock","src":"2578:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"2580:16:26"},"nodeType":"YulFunctionCall","src":"2580:18:26"},"nodeType":"YulExpressionStatement","src":"2580:18:26"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"2556:4:26"},{"arguments":[{"name":"max","nodeType":"YulIdentifier","src":"2566:3:26"},{"name":"base","nodeType":"YulIdentifier","src":"2571:4:26"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2562:3:26"},"nodeType":"YulFunctionCall","src":"2562:14:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2553:2:26"},"nodeType":"YulFunctionCall","src":"2553:24:26"},"nodeType":"YulIf","src":"2550:50:26"},{"body":{"nodeType":"YulBlock","src":"2645:419:26","statements":[{"nodeType":"YulAssignment","src":"3025:25:26","value":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"3038:5:26"},{"name":"base","nodeType":"YulIdentifier","src":"3045:4:26"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3034:3:26"},"nodeType":"YulFunctionCall","src":"3034:16:26"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"3025:5:26"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"2620:8:26"},{"kind":"number","nodeType":"YulLiteral","src":"2630:1:26","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2616:3:26"},"nodeType":"YulFunctionCall","src":"2616:16:26"},"nodeType":"YulIf","src":"2613:451:26"},{"nodeType":"YulAssignment","src":"3077:23:26","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"3089:4:26"},{"name":"base","nodeType":"YulIdentifier","src":"3095:4:26"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3085:3:26"},"nodeType":"YulFunctionCall","src":"3085:15:26"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"3077:4:26"}]},{"nodeType":"YulAssignment","src":"3113:44:26","value":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"3148:8:26"}],"functionName":{"name":"shift_right_1_unsigned","nodeType":"YulIdentifier","src":"3125:22:26"},"nodeType":"YulFunctionCall","src":"3125:32:26"},"variableNames":[{"name":"exponent","nodeType":"YulIdentifier","src":"3113:8:26"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"2466:8:26"},{"kind":"number","nodeType":"YulLiteral","src":"2476:1:26","type":"","value":"1"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2463:2:26"},"nodeType":"YulFunctionCall","src":"2463:15:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2479:2:26","statements":[]},"pre":{"nodeType":"YulBlock","src":"2459:3:26","statements":[]},"src":"2455:712:26"}]},"name":"checked_exp_helper","nodeType":"YulFunctionDefinition","parameters":[{"name":"_power","nodeType":"YulTypedName","src":"2353:6:26","type":""},{"name":"_base","nodeType":"YulTypedName","src":"2361:5:26","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"2368:8:26","type":""},{"name":"max","nodeType":"YulTypedName","src":"2378:3:26","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"2386:5:26","type":""},{"name":"base","nodeType":"YulTypedName","src":"2393:4:26","type":""}],"src":"2325:848:26"},{"body":{"nodeType":"YulBlock","src":"3239:1013:26","statements":[{"body":{"nodeType":"YulBlock","src":"3434:20:26","statements":[{"nodeType":"YulAssignment","src":"3436:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"3445:1:26","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"3436:5:26"}]},{"nodeType":"YulLeave","src":"3447:5:26"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"3424:8:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3417:6:26"},"nodeType":"YulFunctionCall","src":"3417:16:26"},"nodeType":"YulIf","src":"3414:40:26"},{"body":{"nodeType":"YulBlock","src":"3479:20:26","statements":[{"nodeType":"YulAssignment","src":"3481:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"3490:1:26","type":"","value":"0"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"3481:5:26"}]},{"nodeType":"YulLeave","src":"3492:5:26"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"3473:4:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3466:6:26"},"nodeType":"YulFunctionCall","src":"3466:12:26"},"nodeType":"YulIf","src":"3463:36:26"},{"cases":[{"body":{"nodeType":"YulBlock","src":"3609:20:26","statements":[{"nodeType":"YulAssignment","src":"3611:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"3620:1:26","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"3611:5:26"}]},{"nodeType":"YulLeave","src":"3622:5:26"}]},"nodeType":"YulCase","src":"3602:27:26","value":{"kind":"number","nodeType":"YulLiteral","src":"3607:1:26","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"3653:176:26","statements":[{"body":{"nodeType":"YulBlock","src":"3688:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"3690:16:26"},"nodeType":"YulFunctionCall","src":"3690:18:26"},"nodeType":"YulExpressionStatement","src":"3690:18:26"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"3673:8:26"},{"kind":"number","nodeType":"YulLiteral","src":"3683:3:26","type":"","value":"255"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3670:2:26"},"nodeType":"YulFunctionCall","src":"3670:17:26"},"nodeType":"YulIf","src":"3667:43:26"},{"nodeType":"YulAssignment","src":"3723:25:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3736:1:26","type":"","value":"2"},{"name":"exponent","nodeType":"YulIdentifier","src":"3739:8:26"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"3732:3:26"},"nodeType":"YulFunctionCall","src":"3732:16:26"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"3723:5:26"}]},{"body":{"nodeType":"YulBlock","src":"3779:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"3781:16:26"},"nodeType":"YulFunctionCall","src":"3781:18:26"},"nodeType":"YulExpressionStatement","src":"3781:18:26"}]},"condition":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"3767:5:26"},{"name":"max","nodeType":"YulIdentifier","src":"3774:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3764:2:26"},"nodeType":"YulFunctionCall","src":"3764:14:26"},"nodeType":"YulIf","src":"3761:40:26"},{"nodeType":"YulLeave","src":"3814:5:26"}]},"nodeType":"YulCase","src":"3638:191:26","value":{"kind":"number","nodeType":"YulLiteral","src":"3643:1:26","type":"","value":"2"}}],"expression":{"name":"base","nodeType":"YulIdentifier","src":"3559:4:26"},"nodeType":"YulSwitch","src":"3552:277:26"},{"body":{"nodeType":"YulBlock","src":"3961:123:26","statements":[{"nodeType":"YulAssignment","src":"3975:28:26","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"3988:4:26"},{"name":"exponent","nodeType":"YulIdentifier","src":"3994:8:26"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"3984:3:26"},"nodeType":"YulFunctionCall","src":"3984:19:26"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"3975:5:26"}]},{"body":{"nodeType":"YulBlock","src":"4034:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4036:16:26"},"nodeType":"YulFunctionCall","src":"4036:18:26"},"nodeType":"YulExpressionStatement","src":"4036:18:26"}]},"condition":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"4022:5:26"},{"name":"max","nodeType":"YulIdentifier","src":"4029:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4019:2:26"},"nodeType":"YulFunctionCall","src":"4019:14:26"},"nodeType":"YulIf","src":"4016:40:26"},{"nodeType":"YulLeave","src":"4069:5:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"3864:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"3870:2:26","type":"","value":"11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3861:2:26"},"nodeType":"YulFunctionCall","src":"3861:12:26"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"3878:8:26"},{"kind":"number","nodeType":"YulLiteral","src":"3888:2:26","type":"","value":"78"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3875:2:26"},"nodeType":"YulFunctionCall","src":"3875:16:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3857:3:26"},"nodeType":"YulFunctionCall","src":"3857:35:26"},{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"3913:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"3919:3:26","type":"","value":"307"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3910:2:26"},"nodeType":"YulFunctionCall","src":"3910:13:26"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"3928:8:26"},{"kind":"number","nodeType":"YulLiteral","src":"3938:2:26","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3925:2:26"},"nodeType":"YulFunctionCall","src":"3925:16:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3906:3:26"},"nodeType":"YulFunctionCall","src":"3906:36:26"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3841:2:26"},"nodeType":"YulFunctionCall","src":"3841:111:26"},"nodeType":"YulIf","src":"3838:246:26"},{"nodeType":"YulAssignment","src":"4094:57:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4128:1:26","type":"","value":"1"},{"name":"base","nodeType":"YulIdentifier","src":"4131:4:26"},{"name":"exponent","nodeType":"YulIdentifier","src":"4137:8:26"},{"name":"max","nodeType":"YulIdentifier","src":"4147:3:26"}],"functionName":{"name":"checked_exp_helper","nodeType":"YulIdentifier","src":"4109:18:26"},"nodeType":"YulFunctionCall","src":"4109:42:26"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"4094:5:26"},{"name":"base","nodeType":"YulIdentifier","src":"4101:4:26"}]},{"body":{"nodeType":"YulBlock","src":"4190:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4192:16:26"},"nodeType":"YulFunctionCall","src":"4192:18:26"},"nodeType":"YulExpressionStatement","src":"4192:18:26"}]},"condition":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"4167:5:26"},{"arguments":[{"name":"max","nodeType":"YulIdentifier","src":"4178:3:26"},{"name":"base","nodeType":"YulIdentifier","src":"4183:4:26"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4174:3:26"},"nodeType":"YulFunctionCall","src":"4174:14:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4164:2:26"},"nodeType":"YulFunctionCall","src":"4164:25:26"},"nodeType":"YulIf","src":"4161:51:26"},{"nodeType":"YulAssignment","src":"4221:25:26","value":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"4234:5:26"},{"name":"base","nodeType":"YulIdentifier","src":"4241:4:26"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4230:3:26"},"nodeType":"YulFunctionCall","src":"4230:16:26"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"4221:5:26"}]}]},"name":"checked_exp_unsigned","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"3209:4:26","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"3215:8:26","type":""},{"name":"max","nodeType":"YulTypedName","src":"3225:3:26","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"3233:5:26","type":""}],"src":"3179:1073:26"},{"body":{"nodeType":"YulBlock","src":"4324:219:26","statements":[{"nodeType":"YulAssignment","src":"4334:31:26","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"4360:4:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4342:17:26"},"nodeType":"YulFunctionCall","src":"4342:23:26"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"4334:4:26"}]},{"nodeType":"YulAssignment","src":"4374:39:26","value":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"4404:8:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4386:17:26"},"nodeType":"YulFunctionCall","src":"4386:27:26"},"variableNames":[{"name":"exponent","nodeType":"YulIdentifier","src":"4374:8:26"}]},{"nodeType":"YulAssignment","src":"4423:113:26","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"4453:4:26"},{"name":"exponent","nodeType":"YulIdentifier","src":"4459:8:26"},{"kind":"number","nodeType":"YulLiteral","src":"4469:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"checked_exp_unsigned","nodeType":"YulIdentifier","src":"4432:20:26"},"nodeType":"YulFunctionCall","src":"4432:104:26"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"4423:5:26"}]}]},"name":"checked_exp_t_uint256_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"4299:4:26","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"4305:8:26","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"4318:5:26","type":""}],"src":"4258:285:26"},{"body":{"nodeType":"YulBlock","src":"4597:300:26","statements":[{"nodeType":"YulAssignment","src":"4607:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4630:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4612:17:26"},"nodeType":"YulFunctionCall","src":"4612:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"4607:1:26"}]},{"nodeType":"YulAssignment","src":"4641:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"4664:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4646:17:26"},"nodeType":"YulFunctionCall","src":"4646:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"4641:1:26"}]},{"body":{"nodeType":"YulBlock","src":"4839:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4841:16:26"},"nodeType":"YulFunctionCall","src":"4841:18:26"},"nodeType":"YulExpressionStatement","src":"4841:18:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4751:1:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4744:6:26"},"nodeType":"YulFunctionCall","src":"4744:9:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4737:6:26"},"nodeType":"YulFunctionCall","src":"4737:17:26"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"4759:1:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4766:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"x","nodeType":"YulIdentifier","src":"4834:1:26"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4762:3:26"},"nodeType":"YulFunctionCall","src":"4762:74:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4756:2:26"},"nodeType":"YulFunctionCall","src":"4756:81:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4733:3:26"},"nodeType":"YulFunctionCall","src":"4733:105:26"},"nodeType":"YulIf","src":"4730:131:26"},{"nodeType":"YulAssignment","src":"4871:20:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4886:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"4889:1:26"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4882:3:26"},"nodeType":"YulFunctionCall","src":"4882:9:26"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"4871:7:26"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"4580:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"4583:1:26","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"4589:7:26","type":""}],"src":"4549:348:26"},{"body":{"nodeType":"YulBlock","src":"4931:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4948:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4951:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4941:6:26"},"nodeType":"YulFunctionCall","src":"4941:88:26"},"nodeType":"YulExpressionStatement","src":"4941:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5045:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5048:4:26","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5038:6:26"},"nodeType":"YulFunctionCall","src":"5038:15:26"},"nodeType":"YulExpressionStatement","src":"5038:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5069:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5072:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5062:6:26"},"nodeType":"YulFunctionCall","src":"5062:15:26"},"nodeType":"YulExpressionStatement","src":"5062:15:26"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"4903:180:26"},{"body":{"nodeType":"YulBlock","src":"5131:143:26","statements":[{"nodeType":"YulAssignment","src":"5141:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5164:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5146:17:26"},"nodeType":"YulFunctionCall","src":"5146:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"5141:1:26"}]},{"nodeType":"YulAssignment","src":"5175:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"5198:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5180:17:26"},"nodeType":"YulFunctionCall","src":"5180:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"5175:1:26"}]},{"body":{"nodeType":"YulBlock","src":"5222:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"5224:16:26"},"nodeType":"YulFunctionCall","src":"5224:18:26"},"nodeType":"YulExpressionStatement","src":"5224:18:26"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"5219:1:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5212:6:26"},"nodeType":"YulFunctionCall","src":"5212:9:26"},"nodeType":"YulIf","src":"5209:35:26"},{"nodeType":"YulAssignment","src":"5254:14:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5263:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"5266:1:26"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"5259:3:26"},"nodeType":"YulFunctionCall","src":"5259:9:26"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5254:1:26"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5120:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"5123:1:26","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"5129:1:26","type":""}],"src":"5089:185:26"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function shift_right_1_unsigned(value) -> newValue {\n        newValue :=\n\n        shr(1, value)\n\n    }\n\n    function checked_exp_helper(_power, _base, exponent, max) -> power, base {\n        power := _power\n        base  := _base\n        for { } gt(exponent, 1) {}\n        {\n            // overflow check for base * base\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, 1)\n            {\n                // No checks for power := mul(power, base) needed, because the check\n                // for base * base above is sufficient, since:\n                // |power| <= base (proof by induction) and thus:\n                // |power * base| <= base * base <= max <= |min| (for signed)\n                // (this is equally true for signed and unsigned exp)\n                power := mul(power, base)\n            }\n            base := mul(base, base)\n            exponent := shift_right_1_unsigned(exponent)\n        }\n    }\n\n    function checked_exp_unsigned(base, exponent, max) -> power {\n        // This function currently cannot be inlined because of the\n        // \"leave\" statements. We have to improve the optimizer.\n\n        // Note that 0**0 == 1\n        if iszero(exponent) { power := 1 leave }\n        if iszero(base) { power := 0 leave }\n\n        // Specializations for small bases\n        switch base\n        // 0 is handled above\n        case 1 { power := 1 leave }\n        case 2\n        {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := exp(2, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        if or(\n            and(lt(base, 11), lt(exponent, 78)),\n            and(lt(base, 307), lt(exponent, 32))\n        )\n        {\n            power := exp(base, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n\n        power, base := checked_exp_helper(1, base, exponent, max)\n\n        if gt(power, div(max, base)) { panic_error_0x11() }\n        power := mul(power, base)\n    }\n\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power {\n        base := cleanup_t_uint256(base)\n        exponent := cleanup_t_uint256(exponent)\n\n        power := checked_exp_unsigned(base, exponent, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n}\n","id":26,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x347B CODESIZE SUB DUP1 PUSH3 0x347B DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x1B9 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP3 PUSH1 0xA PUSH3 0xE2 SWAP2 SWAP1 PUSH3 0x3AE JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP6 PUSH3 0xF8 SWAP2 SWAP1 PUSH3 0x3FF JUMP JUMPDEST PUSH3 0x104 SWAP2 SWAP1 PUSH3 0x48F JUMP JUMPDEST PUSH1 0xFD DUP2 SWAP1 SSTORE POP POP POP POP POP PUSH3 0x4C7 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x12E DUP2 PUSH3 0x119 JUMP JUMPDEST DUP2 EQ PUSH3 0x13A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x14E DUP2 PUSH3 0x123 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x181 DUP3 PUSH3 0x154 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x193 DUP2 PUSH3 0x174 JUMP JUMPDEST DUP2 EQ PUSH3 0x19F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1B3 DUP2 PUSH3 0x188 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x1D6 JUMPI PUSH3 0x1D5 PUSH3 0x114 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1E6 DUP8 DUP3 DUP9 ADD PUSH3 0x13D JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH3 0x1F9 DUP8 DUP3 DUP9 ADD PUSH3 0x13D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH3 0x20C DUP8 DUP3 DUP9 ADD PUSH3 0x1A2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH3 0x21F DUP8 DUP3 DUP9 ADD PUSH3 0x1A2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH3 0x2B9 JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH3 0x291 JUMPI PUSH3 0x290 PUSH3 0x22B JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH3 0x2A1 JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH3 0x2B1 DUP6 PUSH3 0x25A JUMP JUMPDEST SWAP5 POP PUSH3 0x271 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH3 0x2D4 JUMPI PUSH1 0x1 SWAP1 POP PUSH3 0x3A7 JUMP JUMPDEST DUP2 PUSH3 0x2E4 JUMPI PUSH1 0x0 SWAP1 POP PUSH3 0x3A7 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH3 0x2FD JUMPI PUSH1 0x2 DUP2 EQ PUSH3 0x308 JUMPI PUSH3 0x33E JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH3 0x3A7 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH3 0x31D JUMPI PUSH3 0x31C PUSH3 0x22B JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH3 0x337 JUMPI PUSH3 0x336 PUSH3 0x22B JUMP JUMPDEST JUMPDEST POP PUSH3 0x3A7 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH3 0x378 JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH3 0x372 JUMPI PUSH3 0x371 PUSH3 0x22B JUMP JUMPDEST JUMPDEST PUSH3 0x3A7 JUMP JUMPDEST PUSH3 0x387 DUP5 DUP5 DUP5 PUSH1 0x1 PUSH3 0x267 JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH3 0x3A1 JUMPI PUSH3 0x3A0 PUSH3 0x22B JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3BB DUP3 PUSH3 0x119 JUMP JUMPDEST SWAP2 POP PUSH3 0x3C8 DUP4 PUSH3 0x119 JUMP JUMPDEST SWAP3 POP PUSH3 0x3F7 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH3 0x2C2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x40C DUP3 PUSH3 0x119 JUMP JUMPDEST SWAP2 POP PUSH3 0x419 DUP4 PUSH3 0x119 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH3 0x455 JUMPI PUSH3 0x454 PUSH3 0x22B JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x49C DUP3 PUSH3 0x119 JUMP JUMPDEST SWAP2 POP PUSH3 0x4A9 DUP4 PUSH3 0x119 JUMP JUMPDEST SWAP3 POP DUP3 PUSH3 0x4BC JUMPI PUSH3 0x4BB PUSH3 0x460 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH2 0x2F7D PUSH3 0x4FE PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x835 ADD MSTORE PUSH1 0x0 PUSH2 0xD73 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x6B1 ADD MSTORE PUSH2 0x88D ADD MSTORE PUSH2 0x2F7D PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x74A7DCE5 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xB6DB75A0 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x30A JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x328 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x344 JUMPI DUP1 PUSH4 0xEAEF3999 EQ PUSH2 0x360 JUMPI DUP1 PUSH4 0xF751758B EQ PUSH2 0x37C JUMPI PUSH2 0x12C JUMP JUMPDEST DUP1 PUSH4 0x74A7DCE5 EQ PUSH2 0x28A JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0x869EAC93 EQ PUSH2 0x2B2 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x2BC JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x2EC JUMPI PUSH2 0x12C JUMP JUMPDEST DUP1 PUSH4 0x34D131BF GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x34D131BF EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x246 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x26E JUMPI PUSH2 0x12C JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0x51E6CB1 EQ PUSH2 0x161 JUMPI DUP1 PUSH4 0x6FB46BA EQ PUSH2 0x17D JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x1AE JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1DE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x146 SWAP2 SWAP1 PUSH2 0x1FCF JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x158 SWAP2 SWAP1 PUSH2 0x2017 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x176 SWAP2 SWAP1 PUSH2 0x2068 JUMP JUMPDEST PUSH2 0x414 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x197 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x192 SWAP2 SWAP1 PUSH2 0x2095 JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A5 SWAP3 SWAP2 SWAP1 PUSH2 0x20E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C3 SWAP2 SWAP1 PUSH2 0x2143 JUMP JUMPDEST PUSH2 0x52E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D5 SWAP2 SWAP1 PUSH2 0x217F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0x21F8 JUMP JUMPDEST PUSH2 0x54E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x214 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20F SWAP2 SWAP1 PUSH2 0x2271 JUMP JUMPDEST PUSH2 0x56F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x221 SWAP2 SWAP1 PUSH2 0x2017 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x244 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23F SWAP2 SWAP1 PUSH2 0x21F8 JUMP JUMPDEST PUSH2 0x8E9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x24E PUSH2 0x96C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x258 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x265 SWAP2 SWAP1 PUSH2 0x2017 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x288 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x22EC JUMP JUMPDEST PUSH2 0x9D4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x292 PUSH2 0xAF6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29F SWAP2 SWAP1 PUSH2 0x2319 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B0 PUSH2 0xB00 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2BA PUSH2 0xB51 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D1 SWAP2 SWAP1 PUSH2 0x21F8 JUMP JUMPDEST PUSH2 0xDBA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E3 SWAP2 SWAP1 PUSH2 0x2017 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2F4 PUSH2 0xE25 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x301 SWAP2 SWAP1 PUSH2 0x217F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x312 PUSH2 0xE2C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31F SWAP2 SWAP1 PUSH2 0x2017 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x342 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x33D SWAP2 SWAP1 PUSH2 0x22EC JUMP JUMPDEST PUSH2 0xE4B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x35E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x359 SWAP2 SWAP1 PUSH2 0x21F8 JUMP JUMPDEST PUSH2 0xFEB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x37A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x375 SWAP2 SWAP1 PUSH2 0x2068 JUMP JUMPDEST PUSH2 0x100C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x384 PUSH2 0x1077 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x391 SWAP2 SWAP1 PUSH2 0x2319 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x40D JUMPI POP PUSH2 0x40C DUP3 PUSH2 0x10A5 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x41C PUSH2 0xE2C JUMP JUMPDEST PUSH2 0x45B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x452 SWAP1 PUSH2 0x23B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x15180 DUP2 PUSH2 0x46A SWAP2 SWAP1 PUSH2 0x2406 JUMP JUMPDEST PUSH1 0xFC DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xFE SLOAD PUSH1 0xFD SLOAD PUSH2 0x488 SWAP2 SWAP1 PUSH2 0x2406 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP6 PUSH2 0x4A0 SWAP2 SWAP1 PUSH2 0x2460 JUMP JUMPDEST DUP7 PUSH2 0x4AB SWAP2 SWAP1 PUSH2 0x2494 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 PUSH1 0x2 DUP4 DUP6 PUSH2 0x4C6 SWAP2 SWAP1 PUSH2 0x2406 JUMP JUMPDEST PUSH2 0x4D0 SWAP2 SWAP1 PUSH2 0x24F7 JUMP JUMPDEST PUSH2 0x4DA SWAP2 SWAP1 PUSH2 0x24F7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0xFF SLOAD PUSH2 0x4EC SWAP2 SWAP1 PUSH2 0x2494 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP10 DUP10 PUSH2 0x505 SWAP2 SWAP1 PUSH2 0x2460 JUMP JUMPDEST DUP4 PUSH2 0x510 SWAP2 SWAP1 PUSH2 0x2406 JUMP JUMPDEST PUSH2 0x51A SWAP2 SWAP1 PUSH2 0x24F7 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SWAP7 POP SWAP7 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x557 DUP3 PUSH2 0x52E JUMP JUMPDEST PUSH2 0x560 DUP2 PUSH2 0x110F JUMP JUMPDEST PUSH2 0x56A DUP4 DUP4 PUSH2 0x1123 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x579 PUSH2 0x1204 JUMP JUMPDEST PUSH1 0x1 ISZERO ISZERO PUSH2 0x585 PUSH2 0x9BD JUMP JUMPDEST ISZERO ISZERO EQ ISZERO DUP1 ISZERO PUSH2 0x62B JUMPI POP PUSH1 0x1 ISZERO ISZERO PUSH2 0x100 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB187BD26 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x602 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x626 SWAP2 SWAP1 PUSH2 0x2554 JUMP JUMPDEST ISZERO ISZERO EQ ISZERO JUMPDEST PUSH2 0x634 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP7 LT ISZERO PUSH2 0x676 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8FACB45E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7080 PUSH1 0xFC PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x68A SWAP2 SWAP1 PUSH2 0x2494 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x6AC PUSH1 0xFB SLOAD DUP9 PUSH1 0xFB SLOAD PUSH2 0x6A7 SWAP2 SWAP1 PUSH2 0x2494 JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST SWAP2 POP POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 PUSH2 0x6F3 PUSH2 0x1253 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x70F SWAP2 SWAP1 PUSH2 0x2590 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x72C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x750 SWAP2 SWAP1 PUSH2 0x25C0 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x789 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2B2CCE3F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 PUSH2 0x798 PUSH2 0x1253 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP8 DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x7E8 SWAP2 SWAP1 PUSH2 0x2494 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xFC SLOAD TIMESTAMP PUSH2 0x81A SWAP2 SWAP1 PUSH2 0x2494 JUMP JUMPDEST DUP2 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x87E PUSH2 0x82D PUSH2 0x1253 JUMP JUMPDEST ADDRESS DUP5 DUP11 DUP11 DUP11 DUP11 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x125B SWAP1 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x8D2 PUSH2 0x889 PUSH2 0x1253 JUMP JUMPDEST ADDRESS DUP5 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1428 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP PUSH2 0x8E0 PUSH2 0x14B1 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x8F1 PUSH2 0x1253 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x95E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x955 SWAP1 PUSH2 0x265F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x968 DUP3 DUP3 PUSH2 0x14BB JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x974 PUSH2 0xE2C JUMP JUMPDEST PUSH2 0x9B3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9AA SWAP1 PUSH2 0x23B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9BB PUSH2 0x159D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xA23 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA1A SWAP1 PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA89 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA91 PUSH2 0x1600 JUMP JUMPDEST PUSH2 0xA99 PUSH2 0x1659 JUMP JUMPDEST PUSH2 0xAA1 PUSH2 0x16AA JUMP JUMPDEST PUSH2 0xAB2 PUSH2 0xAAC PUSH2 0x1703 JUMP JUMPDEST DUP3 PUSH2 0x1123 JUMP JUMPDEST PUSH2 0xAC3 PUSH2 0xABD PUSH2 0x172B JUMP JUMPDEST DUP3 PUSH2 0x1123 JUMP JUMPDEST PUSH2 0xADB PUSH2 0xACE PUSH2 0x172B JUMP JUMPDEST PUSH2 0xAD6 PUSH2 0x1703 JUMP JUMPDEST PUSH2 0x1753 JUMP JUMPDEST PUSH2 0xAF3 PUSH2 0xAE6 PUSH2 0x1703 JUMP JUMPDEST PUSH2 0xAEE PUSH2 0x1703 JUMP JUMPDEST PUSH2 0x1753 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFB SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xB08 PUSH2 0xE2C JUMP JUMPDEST PUSH2 0xB47 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB3E SWAP1 PUSH2 0x23B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB4F PUSH2 0x17AF JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x101 PUSH1 0x0 PUSH2 0xB5E PUSH2 0x1253 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xBDF JUMPI PUSH1 0x40 MLOAD PUSH32 0x23D1E2CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP PUSH2 0x101 PUSH1 0x0 PUSH2 0xBED PUSH2 0x1253 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD GT ISZERO PUSH2 0xC63 JUMPI PUSH1 0x40 MLOAD PUSH32 0x23D1E2CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 PUSH2 0xC72 PUSH2 0x1253 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 PUSH2 0xCC1 PUSH2 0x1253 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 PUSH2 0xD24 PUSH2 0x1253 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH2 0xDB7 PUSH2 0xD70 PUSH2 0x1253 JUMP JUMPDEST DUP3 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1812 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE46 PUSH2 0xE39 PUSH2 0x1703 JUMP JUMPDEST PUSH2 0xE41 PUSH2 0x1253 JUMP JUMPDEST PUSH2 0xDBA JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0xE7C JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0xEA9 JUMPI POP PUSH2 0xE8B ADDRESS PUSH2 0x1898 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0xEA8 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0xEE8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEDF SWAP1 PUSH2 0x2783 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0xF25 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0xFE DUP2 SWAP1 SSTORE POP PUSH8 0xDE0B6B3A7640000 PUSH1 0xFF DUP2 SWAP1 SSTORE POP DUP2 PUSH2 0x100 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0xF8E PUSH2 0xF89 PUSH2 0x1253 JUMP JUMPDEST PUSH2 0x9D4 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xFE7 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0xFDE SWAP2 SWAP1 PUSH2 0x27E8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xFF4 DUP3 PUSH2 0x52E JUMP JUMPDEST PUSH2 0xFFD DUP2 PUSH2 0x110F JUMP JUMPDEST PUSH2 0x1007 DUP4 DUP4 PUSH2 0x14BB JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1014 PUSH2 0xE2C JUMP JUMPDEST PUSH2 0x1053 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104A SWAP1 PUSH2 0x23B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xFE DUP2 SWAP1 SSTORE POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x106E SWAP2 SWAP1 PUSH2 0x2406 JUMP JUMPDEST PUSH1 0xFF DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x109B PUSH1 0xFB SLOAD PUSH8 0xDE0B6B3A7640000 PUSH1 0xFB SLOAD PUSH2 0x1096 SWAP2 SWAP1 PUSH2 0x2494 JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST POP SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1120 DUP2 PUSH2 0x111B PUSH2 0x1253 JUMP JUMPDEST PUSH2 0x18BB JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x112D DUP3 DUP3 PUSH2 0xDBA JUMP JUMPDEST PUSH2 0x1200 JUMPI PUSH1 0x1 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x11A5 PUSH2 0x1253 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0xC9 SLOAD SUB PUSH2 0x1249 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1240 SWAP1 PUSH2 0x284F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7ECEBE00 DUP10 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1296 SWAP2 SWAP1 PUSH2 0x2590 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12B3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12D7 SWAP2 SWAP1 PUSH2 0x25C0 JUMP JUMPDEST SWAP1 POP DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD505ACCF DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x131E SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x287E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1338 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x134C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7ECEBE00 DUP11 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x138B SWAP2 SWAP1 PUSH2 0x2590 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x13A8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13CC SWAP2 SWAP1 PUSH2 0x25C0 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP3 PUSH2 0x13DB SWAP2 SWAP1 PUSH2 0x2494 JUMP JUMPDEST DUP2 EQ PUSH2 0x141C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1413 SWAP1 PUSH2 0x295F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x14AB DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1449 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x297F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1940 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x14C5 DUP3 DUP3 PUSH2 0xDBA JUMP JUMPDEST ISZERO PUSH2 0x1599 JUMPI PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x153E PUSH2 0x1253 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x15A5 PUSH2 0x1A07 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x15E9 PUSH2 0x1253 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15F6 SWAP2 SWAP1 PUSH2 0x2590 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x164F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1646 SWAP1 PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1657 PUSH2 0x1A50 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x16A8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x169F SWAP1 PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x16F9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16F0 SWAP1 PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1701 PUSH2 0x1ABC JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x175E DUP4 PUSH2 0x52E JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x97 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x17B7 PUSH2 0x1B15 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x17FB PUSH2 0x1253 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1808 SWAP2 SWAP1 PUSH2 0x2590 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x1893 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1831 SWAP3 SWAP2 SWAP1 PUSH2 0x29B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1940 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18C5 DUP3 DUP3 PUSH2 0xDBA JUMP JUMPDEST PUSH2 0x193C JUMPI PUSH2 0x18D2 DUP2 PUSH2 0x1B5F JUMP JUMPDEST PUSH2 0x18E0 DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0x1B8C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x18F1 SWAP3 SWAP2 SWAP1 PUSH2 0x2AE8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1933 SWAP2 SWAP1 PUSH2 0x2B6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19A2 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1DC8 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x1A02 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x19C2 SWAP2 SWAP1 PUSH2 0x2554 JUMP JUMPDEST PUSH2 0x1A01 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19F8 SWAP1 PUSH2 0x2C00 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1A0F PUSH2 0x9BD JUMP JUMPDEST PUSH2 0x1A4E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A45 SWAP1 PUSH2 0x2C6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1A9F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A96 SWAP1 PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1B0B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B02 SWAP1 PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x1B1D PUSH2 0x9BD JUMP JUMPDEST ISZERO PUSH2 0x1B5D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B54 SWAP1 PUSH2 0x2CD8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1B85 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0x1B8C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0x1B9F SWAP2 SWAP1 PUSH2 0x2406 JUMP JUMPDEST PUSH2 0x1BA9 SWAP2 SWAP1 PUSH2 0x2494 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1BC2 JUMPI PUSH2 0x1BC1 PUSH2 0x2CF8 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1BF4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1C2C JUMPI PUSH2 0x1C2B PUSH2 0x2D27 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1C90 JUMPI PUSH2 0x1C8F PUSH2 0x2D27 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0x1CD0 SWAP2 SWAP1 PUSH2 0x2406 JUMP JUMPDEST PUSH2 0x1CDA SWAP2 SWAP1 PUSH2 0x2494 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1D7A JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0x1D1C JUMPI PUSH2 0x1D1B PUSH2 0x2D27 JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1D33 JUMPI PUSH2 0x1D32 PUSH2 0x2D27 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0x1D73 SWAP1 PUSH2 0x2D56 JUMP JUMPDEST SWAP1 POP PUSH2 0x1CDD JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0x1DBE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DB5 SWAP1 PUSH2 0x2DCB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1DD7 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1DE0 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1E25 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E1C SWAP1 PUSH2 0x2E5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1E4E SWAP2 SWAP1 PUSH2 0x2EC4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1E8B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1E90 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1EA1 DUP8 DUP4 DUP4 DUP8 PUSH2 0x1EAD JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1F0F JUMPI PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x1F07 JUMPI PUSH2 0x1EC7 DUP6 PUSH2 0x1898 JUMP JUMPDEST PUSH2 0x1F06 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1EFD SWAP1 PUSH2 0x2F27 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x1F1A JUMP JUMPDEST PUSH2 0x1F19 DUP4 DUP4 PUSH2 0x1F22 JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x1F35 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F69 SWAP2 SWAP1 PUSH2 0x2B6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1FAC DUP2 PUSH2 0x1F77 JUMP JUMPDEST DUP2 EQ PUSH2 0x1FB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1FC9 DUP2 PUSH2 0x1FA3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1FE5 JUMPI PUSH2 0x1FE4 PUSH2 0x1F72 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1FF3 DUP5 DUP3 DUP6 ADD PUSH2 0x1FBA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2011 DUP2 PUSH2 0x1FFC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x202C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2008 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2045 DUP2 PUSH2 0x2032 JUMP JUMPDEST DUP2 EQ PUSH2 0x2050 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2062 DUP2 PUSH2 0x203C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x207E JUMPI PUSH2 0x207D PUSH2 0x1F72 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x208C DUP5 DUP3 DUP6 ADD PUSH2 0x2053 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x20AC JUMPI PUSH2 0x20AB PUSH2 0x1F72 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x20BA DUP6 DUP3 DUP7 ADD PUSH2 0x2053 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x20CB DUP6 DUP3 DUP7 ADD PUSH2 0x2053 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x20DE DUP2 PUSH2 0x2032 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x20F9 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x20D5 JUMP JUMPDEST PUSH2 0x2106 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x20D5 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2120 DUP2 PUSH2 0x210D JUMP JUMPDEST DUP2 EQ PUSH2 0x212B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x213D DUP2 PUSH2 0x2117 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2159 JUMPI PUSH2 0x2158 PUSH2 0x1F72 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2167 DUP5 DUP3 DUP6 ADD PUSH2 0x212E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2179 DUP2 PUSH2 0x210D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2194 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2170 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21C5 DUP3 PUSH2 0x219A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x21D5 DUP2 PUSH2 0x21BA JUMP JUMPDEST DUP2 EQ PUSH2 0x21E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x21F2 DUP2 PUSH2 0x21CC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x220F JUMPI PUSH2 0x220E PUSH2 0x1F72 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x221D DUP6 DUP3 DUP7 ADD PUSH2 0x212E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x222E DUP6 DUP3 DUP7 ADD PUSH2 0x21E3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x224E DUP2 PUSH2 0x2238 JUMP JUMPDEST DUP2 EQ PUSH2 0x2259 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x226B DUP2 PUSH2 0x2245 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x228D JUMPI PUSH2 0x228C PUSH2 0x1F72 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x229B DUP9 DUP3 DUP10 ADD PUSH2 0x2053 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x22AC DUP9 DUP3 DUP10 ADD PUSH2 0x2053 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x22BD DUP9 DUP3 DUP10 ADD PUSH2 0x225C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x22CE DUP9 DUP3 DUP10 ADD PUSH2 0x212E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x22DF DUP9 DUP3 DUP10 ADD PUSH2 0x212E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2302 JUMPI PUSH2 0x2301 PUSH2 0x1F72 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2310 DUP5 DUP3 DUP6 ADD PUSH2 0x21E3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x232E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x20D5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D75737420686176652061646D696E20726F6C6520746F20706572666F726D20 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7468697320616374696F6E2E0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23A1 PUSH1 0x2C DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP2 POP PUSH2 0x23AC DUP3 PUSH2 0x2345 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x23D0 DUP2 PUSH2 0x2394 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2411 DUP3 PUSH2 0x2032 JUMP JUMPDEST SWAP2 POP PUSH2 0x241C DUP4 PUSH2 0x2032 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2455 JUMPI PUSH2 0x2454 PUSH2 0x23D7 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x246B DUP3 PUSH2 0x2032 JUMP JUMPDEST SWAP2 POP PUSH2 0x2476 DUP4 PUSH2 0x2032 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x248E JUMPI PUSH2 0x248D PUSH2 0x23D7 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x249F DUP3 PUSH2 0x2032 JUMP JUMPDEST SWAP2 POP PUSH2 0x24AA DUP4 PUSH2 0x2032 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x24C2 JUMPI PUSH2 0x24C1 PUSH2 0x23D7 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2502 DUP3 PUSH2 0x2032 JUMP JUMPDEST SWAP2 POP PUSH2 0x250D DUP4 PUSH2 0x2032 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x251D JUMPI PUSH2 0x251C PUSH2 0x24C8 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2531 DUP2 PUSH2 0x1FFC JUMP JUMPDEST DUP2 EQ PUSH2 0x253C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x254E DUP2 PUSH2 0x2528 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x256A JUMPI PUSH2 0x2569 PUSH2 0x1F72 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2578 DUP5 DUP3 DUP6 ADD PUSH2 0x253F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x258A DUP2 PUSH2 0x21BA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x25A5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2581 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x25BA DUP2 PUSH2 0x203C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25D6 JUMPI PUSH2 0x25D5 PUSH2 0x1F72 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x25E4 DUP5 DUP3 DUP6 ADD PUSH2 0x25AB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2649 PUSH1 0x2F DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP2 POP PUSH2 0x2654 DUP3 PUSH2 0x25ED JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2678 DUP2 PUSH2 0x263C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26DB PUSH1 0x2B DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP2 POP PUSH2 0x26E6 DUP3 PUSH2 0x267F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x270A DUP2 PUSH2 0x26CE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x276D PUSH1 0x2E DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP2 POP PUSH2 0x2778 DUP3 PUSH2 0x2711 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x279C DUP2 PUSH2 0x2760 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27D2 PUSH2 0x27CD PUSH2 0x27C8 DUP5 PUSH2 0x27A3 JUMP JUMPDEST PUSH2 0x27AD JUMP JUMPDEST PUSH2 0x2238 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x27E2 DUP2 PUSH2 0x27B7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x27FD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x27D9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2839 PUSH1 0x1F DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP2 POP PUSH2 0x2844 DUP3 PUSH2 0x2803 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2868 DUP2 PUSH2 0x282C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2878 DUP2 PUSH2 0x2238 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH2 0x2893 PUSH1 0x0 DUP4 ADD DUP11 PUSH2 0x2581 JUMP JUMPDEST PUSH2 0x28A0 PUSH1 0x20 DUP4 ADD DUP10 PUSH2 0x2581 JUMP JUMPDEST PUSH2 0x28AD PUSH1 0x40 DUP4 ADD DUP9 PUSH2 0x20D5 JUMP JUMPDEST PUSH2 0x28BA PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x20D5 JUMP JUMPDEST PUSH2 0x28C7 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x286F JUMP JUMPDEST PUSH2 0x28D4 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x2170 JUMP JUMPDEST PUSH2 0x28E1 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x2170 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A207065726D697420646964206E6F7420737563636565 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2949 PUSH1 0x21 DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP2 POP PUSH2 0x2954 DUP3 PUSH2 0x28ED JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2978 DUP2 PUSH2 0x293C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2994 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2581 JUMP JUMPDEST PUSH2 0x29A1 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2581 JUMP JUMPDEST PUSH2 0x29AE PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x20D5 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x29CB PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2581 JUMP JUMPDEST PUSH2 0x29D8 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x20D5 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A20 PUSH1 0x17 DUP4 PUSH2 0x29DF JUMP JUMPDEST SWAP2 POP PUSH2 0x2A2B DUP3 PUSH2 0x29EA JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2A5F JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2A44 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A76 DUP3 PUSH2 0x2A36 JUMP JUMPDEST PUSH2 0x2A80 DUP2 DUP6 PUSH2 0x29DF JUMP JUMPDEST SWAP4 POP PUSH2 0x2A90 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2A41 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AD2 PUSH1 0x11 DUP4 PUSH2 0x29DF JUMP JUMPDEST SWAP2 POP PUSH2 0x2ADD DUP3 PUSH2 0x2A9C JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AF3 DUP3 PUSH2 0x2A13 JUMP JUMPDEST SWAP2 POP PUSH2 0x2AFF DUP3 DUP6 PUSH2 0x2A6B JUMP JUMPDEST SWAP2 POP PUSH2 0x2B0A DUP3 PUSH2 0x2AC5 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B16 DUP3 DUP5 PUSH2 0x2A6B JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B3E DUP3 PUSH2 0x2A36 JUMP JUMPDEST PUSH2 0x2B48 DUP2 DUP6 PUSH2 0x2334 JUMP JUMPDEST SWAP4 POP PUSH2 0x2B58 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2A41 JUMP JUMPDEST PUSH2 0x2B61 DUP2 PUSH2 0x2B22 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B86 DUP2 DUP5 PUSH2 0x2B33 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BEA PUSH1 0x2A DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP2 POP PUSH2 0x2BF5 DUP3 PUSH2 0x2B8E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C19 DUP2 PUSH2 0x2BDD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C56 PUSH1 0x14 DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP2 POP PUSH2 0x2C61 DUP3 PUSH2 0x2C20 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C85 DUP2 PUSH2 0x2C49 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CC2 PUSH1 0x10 DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP2 POP PUSH2 0x2CCD DUP3 PUSH2 0x2C8C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CF1 DUP2 PUSH2 0x2CB5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2D61 DUP3 PUSH2 0x2032 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x2D74 JUMPI PUSH2 0x2D73 PUSH2 0x23D7 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DB5 PUSH1 0x20 DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP2 POP PUSH2 0x2DC0 DUP3 PUSH2 0x2D7F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2DE4 DUP2 PUSH2 0x2DA8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E47 PUSH1 0x26 DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP2 POP PUSH2 0x2E52 DUP3 PUSH2 0x2DEB JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E76 DUP2 PUSH2 0x2E3A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E9E DUP3 PUSH2 0x2E7D JUMP JUMPDEST PUSH2 0x2EA8 DUP2 DUP6 PUSH2 0x2E88 JUMP JUMPDEST SWAP4 POP PUSH2 0x2EB8 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2A41 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2ED0 DUP3 DUP5 PUSH2 0x2E93 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F11 PUSH1 0x1D DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP2 POP PUSH2 0x2F1C DUP3 PUSH2 0x2EDB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F40 DUP2 PUSH2 0x2F04 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP5 OR PUSH17 0x42F27B4A540B9D649902AE28FD3676305B DUP7 PUSH20 0x1396D35037FBDE98239664736F6C634300081000 CALLER ","sourceMap":"2023:5319:17:-:0;;;3381:324;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3503:8;3473:39;;;;;;;;;;3554:9;3523:41;;;;;;;;;;3617:8;3575:51;;;;;;;;;;3676:8;3670:2;:14;;;;:::i;:::-;3660:5;3652;:13;;;;:::i;:::-;3651:34;;;;:::i;:::-;3636:12;:49;;;;3381:324;;;;2023:5319;;88:117:26;197:1;194;187:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:143::-;602:5;633:6;627:13;618:22;;649:33;676:5;649:33;:::i;:::-;545:143;;;;:::o;694:126::-;731:7;771:42;764:5;760:54;749:65;;694:126;;;:::o;826:96::-;863:7;892:24;910:5;892:24;:::i;:::-;881:35;;826:96;;;:::o;928:122::-;1001:24;1019:5;1001:24;:::i;:::-;994:5;991:35;981:63;;1040:1;1037;1030:12;981:63;928:122;:::o;1056:143::-;1113:5;1144:6;1138:13;1129:22;;1160:33;1187:5;1160:33;:::i;:::-;1056:143;;;;:::o;1205:820::-;1302:6;1310;1318;1326;1375:3;1363:9;1354:7;1350:23;1346:33;1343:120;;;1382:79;;:::i;:::-;1343:120;1502:1;1527:64;1583:7;1574:6;1563:9;1559:22;1527:64;:::i;:::-;1517:74;;1473:128;1640:2;1666:64;1722:7;1713:6;1702:9;1698:22;1666:64;:::i;:::-;1656:74;;1611:129;1779:2;1805:64;1861:7;1852:6;1841:9;1837:22;1805:64;:::i;:::-;1795:74;;1750:129;1918:2;1944:64;2000:7;1991:6;1980:9;1976:22;1944:64;:::i;:::-;1934:74;;1889:129;1205:820;;;;;;;:::o;2031:180::-;2079:77;2076:1;2069:88;2176:4;2173:1;2166:15;2200:4;2197:1;2190:15;2217:102;2259:8;2306:5;2303:1;2299:13;2278:34;;2217:102;;;:::o;2325:848::-;2386:5;2393:4;2417:6;2408:15;;2441:5;2432:14;;2455:712;2476:1;2466:8;2463:15;2455:712;;;2571:4;2566:3;2562:14;2556:4;2553:24;2550:50;;;2580:18;;:::i;:::-;2550:50;2630:1;2620:8;2616:16;2613:451;;;3045:4;3038:5;3034:16;3025:25;;2613:451;3095:4;3089;3085:15;3077:23;;3125:32;3148:8;3125:32;:::i;:::-;3113:44;;2455:712;;;2325:848;;;;;;;:::o;3179:1073::-;3233:5;3424:8;3414:40;;3445:1;3436:10;;3447:5;;3414:40;3473:4;3463:36;;3490:1;3481:10;;3492:5;;3463:36;3559:4;3607:1;3602:27;;;;3643:1;3638:191;;;;3552:277;;3602:27;3620:1;3611:10;;3622:5;;;3638:191;3683:3;3673:8;3670:17;3667:43;;;3690:18;;:::i;:::-;3667:43;3739:8;3736:1;3732:16;3723:25;;3774:3;3767:5;3764:14;3761:40;;;3781:18;;:::i;:::-;3761:40;3814:5;;;3552:277;;3938:2;3928:8;3925:16;3919:3;3913:4;3910:13;3906:36;3888:2;3878:8;3875:16;3870:2;3864:4;3861:12;3857:35;3841:111;3838:246;;;3994:8;3988:4;3984:19;3975:28;;4029:3;4022:5;4019:14;4016:40;;;4036:18;;:::i;:::-;4016:40;4069:5;;3838:246;4109:42;4147:3;4137:8;4131:4;4128:1;4109:42;:::i;:::-;4094:57;;;;4183:4;4178:3;4174:14;4167:5;4164:25;4161:51;;;4192:18;;:::i;:::-;4161:51;4241:4;4234:5;4230:16;4221:25;;3179:1073;;;;;;:::o;4258:285::-;4318:5;4342:23;4360:4;4342:23;:::i;:::-;4334:31;;4386:27;4404:8;4386:27;:::i;:::-;4374:39;;4432:104;4469:66;4459:8;4453:4;4432:104;:::i;:::-;4423:113;;4258:285;;;;:::o;4549:348::-;4589:7;4612:20;4630:1;4612:20;:::i;:::-;4607:25;;4646:20;4664:1;4646:20;:::i;:::-;4641:25;;4834:1;4766:66;4762:74;4759:1;4756:81;4751:1;4744:9;4737:17;4733:105;4730:131;;;4841:18;;:::i;:::-;4730:131;4889:1;4886;4882:9;4871:20;;4549:348;;;;:::o;4903:180::-;4951:77;4948:1;4941:88;5048:4;5045:1;5038:15;5072:4;5069:1;5062:15;5089:185;5129:1;5146:20;5164:1;5146:20;:::i;:::-;5141:25;;5180:20;5198:1;5180:20;:::i;:::-;5175:25;;5219:1;5209:35;;5224:18;;:::i;:::-;5209:35;5266:1;5263;5259:9;5254:14;;5089:185;;;;:::o;2023:5319:17:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEFAULT_ADMIN_ROLE_42":{"entryPoint":3621,"id":42,"parameterSlots":0,"returnSlots":0},"@__AccessControl_init_21":{"entryPoint":5721,"id":21,"parameterSlots":0,"returnSlots":0},"@__BaseUpgradeablePausable_init_2684":{"entryPoint":2516,"id":2684,"parameterSlots":1,"returnSlots":0},"@__Pausable_init_611":{"entryPoint":5632,"id":611,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_unchained_621":{"entryPoint":6736,"id":621,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_730":{"entryPoint":5802,"id":730,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_unchained_740":{"entryPoint":6844,"id":740,"parameterSlots":0,"returnSlots":0},"@_callOptionalReturn_1174":{"entryPoint":6464,"id":1174,"parameterSlots":2,"returnSlots":0},"@_checkRole_107":{"entryPoint":4367,"id":107,"parameterSlots":1,"returnSlots":0},"@_checkRole_146":{"entryPoint":6331,"id":146,"parameterSlots":2,"returnSlots":0},"@_grantRole_298":{"entryPoint":4387,"id":298,"parameterSlots":2,"returnSlots":0},"@_msgSender_1486":{"entryPoint":4691,"id":1486,"parameterSlots":0,"returnSlots":1},"@_nonReentrantAfter_774":{"entryPoint":5297,"id":774,"parameterSlots":0,"returnSlots":0},"@_nonReentrantBefore_766":{"entryPoint":4612,"id":766,"parameterSlots":0,"returnSlots":0},"@_pause_685":{"entryPoint":6063,"id":685,"parameterSlots":0,"returnSlots":0},"@_requireNotPaused_658":{"entryPoint":6933,"id":658,"parameterSlots":0,"returnSlots":0},"@_requirePaused_669":{"entryPoint":6663,"id":669,"parameterSlots":0,"returnSlots":0},"@_revert_1458":{"entryPoint":7970,"id":1458,"parameterSlots":2,"returnSlots":0},"@_revokeRole_329":{"entryPoint":5307,"id":329,"parameterSlots":2,"returnSlots":0},"@_setRoleAdmin_266":{"entryPoint":5971,"id":266,"parameterSlots":2,"returnSlots":0},"@_unpause_701":{"entryPoint":5533,"id":701,"parameterSlots":0,"returnSlots":0},"@buyGENZToken_3040":{"entryPoint":1391,"id":3040,"parameterSlots":5,"returnSlots":1},"@calculatePriceGENZ_3102":{"entryPoint":1139,"id":3102,"parameterSlots":2,"returnSlots":2},"@functionCallWithValue_1329":{"entryPoint":7648,"id":1329,"parameterSlots":4,"returnSlots":1},"@functionCall_1265":{"entryPoint":7624,"id":1265,"parameterSlots":3,"returnSlots":1},"@getAdminRole_2719":{"entryPoint":5891,"id":2719,"parameterSlots":0,"returnSlots":1},"@getCurrentTokenPrice_3181":{"entryPoint":4215,"id":3181,"parameterSlots":0,"returnSlots":1},"@getGENZTokenCount_3190":{"entryPoint":2806,"id":3190,"parameterSlots":0,"returnSlots":1},"@getPauserRole_2727":{"entryPoint":5931,"id":2727,"parameterSlots":0,"returnSlots":1},"@getRoleAdmin_161":{"entryPoint":1326,"id":161,"parameterSlots":1,"returnSlots":1},"@grantRole_181":{"entryPoint":1358,"id":181,"parameterSlots":2,"returnSlots":0},"@hasRole_94":{"entryPoint":3514,"id":94,"parameterSlots":2,"returnSlots":1},"@initialize_2877":{"entryPoint":3659,"id":2877,"parameterSlots":1,"returnSlots":0},"@isAdmin_2698":{"entryPoint":3628,"id":2698,"parameterSlots":0,"returnSlots":1},"@isContract_1193":{"entryPoint":6296,"id":1193,"parameterSlots":1,"returnSlots":1},"@pause_2918":{"entryPoint":2816,"id":2918,"parameterSlots":0,"returnSlots":0},"@paused_646":{"entryPoint":2493,"id":646,"parameterSlots":0,"returnSlots":1},"@renounceRole_224":{"entryPoint":2281,"id":224,"parameterSlots":2,"returnSlots":0},"@revokeRole_201":{"entryPoint":4075,"id":201,"parameterSlots":2,"returnSlots":0},"@safePermit_1136":{"entryPoint":4699,"id":1136,"parameterSlots":8,"returnSlots":0},"@safeTransferFrom_952":{"entryPoint":5160,"id":952,"parameterSlots":4,"returnSlots":0},"@safeTransfer_926":{"entryPoint":6162,"id":926,"parameterSlots":3,"returnSlots":0},"@supportsInterface_1714":{"entryPoint":4261,"id":1714,"parameterSlots":1,"returnSlots":1},"@supportsInterface_75":{"entryPoint":922,"id":75,"parameterSlots":1,"returnSlots":1},"@toHexString_1655":{"entryPoint":7052,"id":1655,"parameterSlots":2,"returnSlots":1},"@toHexString_1675":{"entryPoint":7007,"id":1675,"parameterSlots":1,"returnSlots":1},"@unpause_2927":{"entryPoint":2412,"id":2927,"parameterSlots":0,"returnSlots":0},"@updateBaseSalePrice_2895":{"entryPoint":4108,"id":2895,"parameterSlots":1,"returnSlots":0},"@updateMinimumWithdrawalPeriod_2909":{"entryPoint":1044,"id":2909,"parameterSlots":1,"returnSlots":0},"@verifyCallResultFromTarget_1414":{"entryPoint":7853,"id":1414,"parameterSlots":4,"returnSlots":1},"@withdrawStakedToken_3164":{"entryPoint":2897,"id":3164,"parameterSlots":0,"returnSlots":0},"abi_decode_t_address":{"entryPoint":8675,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":9535,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":8494,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":8122,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":8275,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":9643,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint8":{"entryPoint":8796,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":8940,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":9556,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":8515,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":8696,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":8143,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":8296,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":9664,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":8341,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_uint256t_uint8t_bytes32t_bytes32":{"entryPoint":8817,"id":null,"parameterSlots":2,"returnSlots":5},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":9601,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":8200,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":8560,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":11923,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack":{"entryPoint":10201,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":11059,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":10859,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack":{"entryPoint":11688,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack":{"entryPoint":11337,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack":{"entryPoint":11834,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack":{"entryPoint":11445,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack":{"entryPoint":10080,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack":{"entryPoint":9108,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack":{"entryPoint":12036,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack":{"entryPoint":10556,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":9934,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":10771,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack":{"entryPoint":11229,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack":{"entryPoint":10284,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":10949,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack":{"entryPoint":9788,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":8405,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":10351,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":11972,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":10984,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":9616,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":10623,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":10366,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":10678,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":8215,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":8575,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":10216,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11116,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11723,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11372,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11869,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11480,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10115,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9143,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12071,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10591,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9969,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11264,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10319,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9823,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":8985,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":8420,"id":null,"parameterSlots":3,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":11901,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":10806,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":11912,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":9012,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":10719,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":9364,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":9463,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":9222,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":9312,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":8634,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":8188,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":8461,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":8055,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_1_by_1":{"entryPoint":10147,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":8602,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":8242,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":8760,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_rational_1_by_1_to_t_uint8":{"entryPoint":10167,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":10817,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":11606,"id":null,"parameterSlots":1,"returnSlots":1},"identity":{"entryPoint":10157,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":9175,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":9416,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":11559,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":11512,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":8050,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":11042,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2":{"entryPoint":11647,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a":{"entryPoint":11296,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c":{"entryPoint":11755,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a":{"entryPoint":11404,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759":{"entryPoint":10001,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513":{"entryPoint":9029,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad":{"entryPoint":11995,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d":{"entryPoint":10477,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":9855,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874":{"entryPoint":10730,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd":{"entryPoint":11150,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619":{"entryPoint":10243,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69":{"entryPoint":10908,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b":{"entryPoint":9709,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":8652,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":9512,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":8471,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":8099,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":8252,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint8":{"entryPoint":8773,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:29917:26","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:26","statements":[{"nodeType":"YulAssignment","src":"57:19:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:26","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:26"},"nodeType":"YulFunctionCall","src":"67:9:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:26"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:26","type":""}],"src":"7:75:26"},{"body":{"nodeType":"YulBlock","src":"177:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:26"},"nodeType":"YulFunctionCall","src":"187:12:26"},"nodeType":"YulExpressionStatement","src":"187:12:26"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:26"},{"body":{"nodeType":"YulBlock","src":"300:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:26"},"nodeType":"YulFunctionCall","src":"310:12:26"},"nodeType":"YulExpressionStatement","src":"310:12:26"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:26"},{"body":{"nodeType":"YulBlock","src":"378:105:26","statements":[{"nodeType":"YulAssignment","src":"388:89:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:26","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:26"},"nodeType":"YulFunctionCall","src":"399:78:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:26"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:26","type":""}],"src":"334:149:26"},{"body":{"nodeType":"YulBlock","src":"531:78:26","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:26"},"nodeType":"YulFunctionCall","src":"589:12:26"},"nodeType":"YulExpressionStatement","src":"589:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:26"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:26"},"nodeType":"YulFunctionCall","src":"561:23:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:26"},"nodeType":"YulFunctionCall","src":"551:34:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:26"},"nodeType":"YulFunctionCall","src":"544:42:26"},"nodeType":"YulIf","src":"541:62:26"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:26","type":""}],"src":"489:120:26"},{"body":{"nodeType":"YulBlock","src":"666:86:26","statements":[{"nodeType":"YulAssignment","src":"676:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:26"},"nodeType":"YulFunctionCall","src":"685:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:26"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:26"},"nodeType":"YulFunctionCall","src":"714:32:26"},"nodeType":"YulExpressionStatement","src":"714:32:26"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:26","type":""}],"src":"615:137:26"},{"body":{"nodeType":"YulBlock","src":"823:262:26","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:26"},"nodeType":"YulFunctionCall","src":"871:79:26"},"nodeType":"YulExpressionStatement","src":"871:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:26"},"nodeType":"YulFunctionCall","src":"840:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:26"},"nodeType":"YulFunctionCall","src":"836:32:26"},"nodeType":"YulIf","src":"833:119:26"},{"nodeType":"YulBlock","src":"962:116:26","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:26","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:26"},"nodeType":"YulFunctionCall","src":"1036:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:26"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:26"},"nodeType":"YulFunctionCall","src":"1016:52:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:26"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:26","type":""}],"src":"758:327:26"},{"body":{"nodeType":"YulBlock","src":"1133:48:26","statements":[{"nodeType":"YulAssignment","src":"1143:32:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:26"},"nodeType":"YulFunctionCall","src":"1161:13:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:26"},"nodeType":"YulFunctionCall","src":"1154:21:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:26"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:26","type":""}],"src":"1091:90:26"},{"body":{"nodeType":"YulBlock","src":"1246:50:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:26"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:26"},"nodeType":"YulFunctionCall","src":"1268:21:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:26"},"nodeType":"YulFunctionCall","src":"1256:34:26"},"nodeType":"YulExpressionStatement","src":"1256:34:26"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:26","type":""}],"src":"1187:109:26"},{"body":{"nodeType":"YulBlock","src":"1394:118:26","statements":[{"nodeType":"YulAssignment","src":"1404:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:26"},"nodeType":"YulFunctionCall","src":"1412:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:26"},"nodeType":"YulFunctionCall","src":"1487:17:26"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:26"},"nodeType":"YulFunctionCall","src":"1440:65:26"},"nodeType":"YulExpressionStatement","src":"1440:65:26"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:26","type":""}],"src":"1302:210:26"},{"body":{"nodeType":"YulBlock","src":"1563:32:26","statements":[{"nodeType":"YulAssignment","src":"1573:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"1584:5:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1573:7:26"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1545:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1555:7:26","type":""}],"src":"1518:77:26"},{"body":{"nodeType":"YulBlock","src":"1644:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"1701:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1710:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1713:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1703:6:26"},"nodeType":"YulFunctionCall","src":"1703:12:26"},"nodeType":"YulExpressionStatement","src":"1703:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1667:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1692:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1674:17:26"},"nodeType":"YulFunctionCall","src":"1674:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1664:2:26"},"nodeType":"YulFunctionCall","src":"1664:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1657:6:26"},"nodeType":"YulFunctionCall","src":"1657:43:26"},"nodeType":"YulIf","src":"1654:63:26"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1637:5:26","type":""}],"src":"1601:122:26"},{"body":{"nodeType":"YulBlock","src":"1781:87:26","statements":[{"nodeType":"YulAssignment","src":"1791:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1813:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1800:12:26"},"nodeType":"YulFunctionCall","src":"1800:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1791:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1856:5:26"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1829:26:26"},"nodeType":"YulFunctionCall","src":"1829:33:26"},"nodeType":"YulExpressionStatement","src":"1829:33:26"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1759:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"1767:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1775:5:26","type":""}],"src":"1729:139:26"},{"body":{"nodeType":"YulBlock","src":"1940:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"1986:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1988:77:26"},"nodeType":"YulFunctionCall","src":"1988:79:26"},"nodeType":"YulExpressionStatement","src":"1988:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1961:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"1970:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1957:3:26"},"nodeType":"YulFunctionCall","src":"1957:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"1982:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1953:3:26"},"nodeType":"YulFunctionCall","src":"1953:32:26"},"nodeType":"YulIf","src":"1950:119:26"},{"nodeType":"YulBlock","src":"2079:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2094:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"2108:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2098:6:26","type":""}]},{"nodeType":"YulAssignment","src":"2123:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2158:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"2169:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2154:3:26"},"nodeType":"YulFunctionCall","src":"2154:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2178:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2133:20:26"},"nodeType":"YulFunctionCall","src":"2133:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2123:6:26"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1910:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1921:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1933:6:26","type":""}],"src":"1874:329:26"},{"body":{"nodeType":"YulBlock","src":"2292:391:26","statements":[{"body":{"nodeType":"YulBlock","src":"2338:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2340:77:26"},"nodeType":"YulFunctionCall","src":"2340:79:26"},"nodeType":"YulExpressionStatement","src":"2340:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2313:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"2322:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2309:3:26"},"nodeType":"YulFunctionCall","src":"2309:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"2334:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2305:3:26"},"nodeType":"YulFunctionCall","src":"2305:32:26"},"nodeType":"YulIf","src":"2302:119:26"},{"nodeType":"YulBlock","src":"2431:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2446:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"2460:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2450:6:26","type":""}]},{"nodeType":"YulAssignment","src":"2475:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2510:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"2521:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2506:3:26"},"nodeType":"YulFunctionCall","src":"2506:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2530:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2485:20:26"},"nodeType":"YulFunctionCall","src":"2485:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2475:6:26"}]}]},{"nodeType":"YulBlock","src":"2558:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2573:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"2587:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2577:6:26","type":""}]},{"nodeType":"YulAssignment","src":"2603:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2638:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"2649:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2634:3:26"},"nodeType":"YulFunctionCall","src":"2634:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2658:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2613:20:26"},"nodeType":"YulFunctionCall","src":"2613:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2603:6:26"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2254:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2265:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2277:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2285:6:26","type":""}],"src":"2209:474:26"},{"body":{"nodeType":"YulBlock","src":"2754:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2771:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2794:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2776:17:26"},"nodeType":"YulFunctionCall","src":"2776:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2764:6:26"},"nodeType":"YulFunctionCall","src":"2764:37:26"},"nodeType":"YulExpressionStatement","src":"2764:37:26"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2742:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2749:3:26","type":""}],"src":"2689:118:26"},{"body":{"nodeType":"YulBlock","src":"2939:206:26","statements":[{"nodeType":"YulAssignment","src":"2949:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2961:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2972:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2957:3:26"},"nodeType":"YulFunctionCall","src":"2957:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2949:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3029:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3042:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3053:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3038:3:26"},"nodeType":"YulFunctionCall","src":"3038:17:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"2985:43:26"},"nodeType":"YulFunctionCall","src":"2985:71:26"},"nodeType":"YulExpressionStatement","src":"2985:71:26"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"3110:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3123:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3134:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3119:3:26"},"nodeType":"YulFunctionCall","src":"3119:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"3066:43:26"},"nodeType":"YulFunctionCall","src":"3066:72:26"},"nodeType":"YulExpressionStatement","src":"3066:72:26"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2903:9:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2915:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2923:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2934:4:26","type":""}],"src":"2813:332:26"},{"body":{"nodeType":"YulBlock","src":"3196:32:26","statements":[{"nodeType":"YulAssignment","src":"3206:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"3217:5:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3206:7:26"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3178:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3188:7:26","type":""}],"src":"3151:77:26"},{"body":{"nodeType":"YulBlock","src":"3277:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"3334:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3343:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3346:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3336:6:26"},"nodeType":"YulFunctionCall","src":"3336:12:26"},"nodeType":"YulExpressionStatement","src":"3336:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3300:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3325:5:26"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"3307:17:26"},"nodeType":"YulFunctionCall","src":"3307:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3297:2:26"},"nodeType":"YulFunctionCall","src":"3297:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3290:6:26"},"nodeType":"YulFunctionCall","src":"3290:43:26"},"nodeType":"YulIf","src":"3287:63:26"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3270:5:26","type":""}],"src":"3234:122:26"},{"body":{"nodeType":"YulBlock","src":"3414:87:26","statements":[{"nodeType":"YulAssignment","src":"3424:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3446:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3433:12:26"},"nodeType":"YulFunctionCall","src":"3433:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3424:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3489:5:26"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"3462:26:26"},"nodeType":"YulFunctionCall","src":"3462:33:26"},"nodeType":"YulExpressionStatement","src":"3462:33:26"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3392:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"3400:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3408:5:26","type":""}],"src":"3362:139:26"},{"body":{"nodeType":"YulBlock","src":"3573:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"3619:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3621:77:26"},"nodeType":"YulFunctionCall","src":"3621:79:26"},"nodeType":"YulExpressionStatement","src":"3621:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3594:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"3603:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3590:3:26"},"nodeType":"YulFunctionCall","src":"3590:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"3615:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3586:3:26"},"nodeType":"YulFunctionCall","src":"3586:32:26"},"nodeType":"YulIf","src":"3583:119:26"},{"nodeType":"YulBlock","src":"3712:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"3727:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"3741:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3731:6:26","type":""}]},{"nodeType":"YulAssignment","src":"3756:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3791:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3802:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3787:3:26"},"nodeType":"YulFunctionCall","src":"3787:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3811:7:26"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"3766:20:26"},"nodeType":"YulFunctionCall","src":"3766:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3756:6:26"}]}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3543:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3554:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3566:6:26","type":""}],"src":"3507:329:26"},{"body":{"nodeType":"YulBlock","src":"3907:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3924:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3947:5:26"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"3929:17:26"},"nodeType":"YulFunctionCall","src":"3929:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3917:6:26"},"nodeType":"YulFunctionCall","src":"3917:37:26"},"nodeType":"YulExpressionStatement","src":"3917:37:26"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3895:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3902:3:26","type":""}],"src":"3842:118:26"},{"body":{"nodeType":"YulBlock","src":"4064:124:26","statements":[{"nodeType":"YulAssignment","src":"4074:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4086:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4097:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4082:3:26"},"nodeType":"YulFunctionCall","src":"4082:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4074:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4154:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4167:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4178:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4163:3:26"},"nodeType":"YulFunctionCall","src":"4163:17:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"4110:43:26"},"nodeType":"YulFunctionCall","src":"4110:71:26"},"nodeType":"YulExpressionStatement","src":"4110:71:26"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4036:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4048:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4059:4:26","type":""}],"src":"3966:222:26"},{"body":{"nodeType":"YulBlock","src":"4239:81:26","statements":[{"nodeType":"YulAssignment","src":"4249:65:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4264:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"4271:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4260:3:26"},"nodeType":"YulFunctionCall","src":"4260:54:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4249:7:26"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4221:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4231:7:26","type":""}],"src":"4194:126:26"},{"body":{"nodeType":"YulBlock","src":"4371:51:26","statements":[{"nodeType":"YulAssignment","src":"4381:35:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4410:5:26"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"4392:17:26"},"nodeType":"YulFunctionCall","src":"4392:24:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4381:7:26"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4353:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4363:7:26","type":""}],"src":"4326:96:26"},{"body":{"nodeType":"YulBlock","src":"4471:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"4528:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4537:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4540:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4530:6:26"},"nodeType":"YulFunctionCall","src":"4530:12:26"},"nodeType":"YulExpressionStatement","src":"4530:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4494:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4519:5:26"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4501:17:26"},"nodeType":"YulFunctionCall","src":"4501:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4491:2:26"},"nodeType":"YulFunctionCall","src":"4491:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4484:6:26"},"nodeType":"YulFunctionCall","src":"4484:43:26"},"nodeType":"YulIf","src":"4481:63:26"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4464:5:26","type":""}],"src":"4428:122:26"},{"body":{"nodeType":"YulBlock","src":"4608:87:26","statements":[{"nodeType":"YulAssignment","src":"4618:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4640:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4627:12:26"},"nodeType":"YulFunctionCall","src":"4627:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4618:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4683:5:26"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"4656:26:26"},"nodeType":"YulFunctionCall","src":"4656:33:26"},"nodeType":"YulExpressionStatement","src":"4656:33:26"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4586:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"4594:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4602:5:26","type":""}],"src":"4556:139:26"},{"body":{"nodeType":"YulBlock","src":"4784:391:26","statements":[{"body":{"nodeType":"YulBlock","src":"4830:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4832:77:26"},"nodeType":"YulFunctionCall","src":"4832:79:26"},"nodeType":"YulExpressionStatement","src":"4832:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4805:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"4814:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4801:3:26"},"nodeType":"YulFunctionCall","src":"4801:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"4826:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4797:3:26"},"nodeType":"YulFunctionCall","src":"4797:32:26"},"nodeType":"YulIf","src":"4794:119:26"},{"nodeType":"YulBlock","src":"4923:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"4938:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"4952:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4942:6:26","type":""}]},{"nodeType":"YulAssignment","src":"4967:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5002:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"5013:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4998:3:26"},"nodeType":"YulFunctionCall","src":"4998:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5022:7:26"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"4977:20:26"},"nodeType":"YulFunctionCall","src":"4977:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4967:6:26"}]}]},{"nodeType":"YulBlock","src":"5050:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"5065:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5079:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5069:6:26","type":""}]},{"nodeType":"YulAssignment","src":"5095:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5130:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"5141:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5126:3:26"},"nodeType":"YulFunctionCall","src":"5126:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5150:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5105:20:26"},"nodeType":"YulFunctionCall","src":"5105:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5095:6:26"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4746:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4757:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4769:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4777:6:26","type":""}],"src":"4701:474:26"},{"body":{"nodeType":"YulBlock","src":"5224:43:26","statements":[{"nodeType":"YulAssignment","src":"5234:27:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5249:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"5256:4:26","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5245:3:26"},"nodeType":"YulFunctionCall","src":"5245:16:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5234:7:26"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5206:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5216:7:26","type":""}],"src":"5181:86:26"},{"body":{"nodeType":"YulBlock","src":"5314:77:26","statements":[{"body":{"nodeType":"YulBlock","src":"5369:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5378:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5381:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5371:6:26"},"nodeType":"YulFunctionCall","src":"5371:12:26"},"nodeType":"YulExpressionStatement","src":"5371:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5337:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5360:5:26"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"5344:15:26"},"nodeType":"YulFunctionCall","src":"5344:22:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5334:2:26"},"nodeType":"YulFunctionCall","src":"5334:33:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5327:6:26"},"nodeType":"YulFunctionCall","src":"5327:41:26"},"nodeType":"YulIf","src":"5324:61:26"}]},"name":"validator_revert_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5307:5:26","type":""}],"src":"5273:118:26"},{"body":{"nodeType":"YulBlock","src":"5447:85:26","statements":[{"nodeType":"YulAssignment","src":"5457:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5479:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5466:12:26"},"nodeType":"YulFunctionCall","src":"5466:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5457:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5520:5:26"}],"functionName":{"name":"validator_revert_t_uint8","nodeType":"YulIdentifier","src":"5495:24:26"},"nodeType":"YulFunctionCall","src":"5495:31:26"},"nodeType":"YulExpressionStatement","src":"5495:31:26"}]},"name":"abi_decode_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5425:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"5433:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5441:5:26","type":""}],"src":"5397:135:26"},{"body":{"nodeType":"YulBlock","src":"5670:775:26","statements":[{"body":{"nodeType":"YulBlock","src":"5717:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5719:77:26"},"nodeType":"YulFunctionCall","src":"5719:79:26"},"nodeType":"YulExpressionStatement","src":"5719:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5691:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"5700:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5687:3:26"},"nodeType":"YulFunctionCall","src":"5687:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"5712:3:26","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5683:3:26"},"nodeType":"YulFunctionCall","src":"5683:33:26"},"nodeType":"YulIf","src":"5680:120:26"},{"nodeType":"YulBlock","src":"5810:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"5825:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5839:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5829:6:26","type":""}]},{"nodeType":"YulAssignment","src":"5854:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5889:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"5900:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5885:3:26"},"nodeType":"YulFunctionCall","src":"5885:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5909:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5864:20:26"},"nodeType":"YulFunctionCall","src":"5864:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5854:6:26"}]}]},{"nodeType":"YulBlock","src":"5937:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"5952:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5966:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5956:6:26","type":""}]},{"nodeType":"YulAssignment","src":"5982:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6017:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"6028:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6013:3:26"},"nodeType":"YulFunctionCall","src":"6013:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6037:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5992:20:26"},"nodeType":"YulFunctionCall","src":"5992:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5982:6:26"}]}]},{"nodeType":"YulBlock","src":"6065:116:26","statements":[{"nodeType":"YulVariableDeclaration","src":"6080:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"6094:2:26","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6084:6:26","type":""}]},{"nodeType":"YulAssignment","src":"6110:61:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6143:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"6154:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6139:3:26"},"nodeType":"YulFunctionCall","src":"6139:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6163:7:26"}],"functionName":{"name":"abi_decode_t_uint8","nodeType":"YulIdentifier","src":"6120:18:26"},"nodeType":"YulFunctionCall","src":"6120:51:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6110:6:26"}]}]},{"nodeType":"YulBlock","src":"6191:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"6206:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"6220:2:26","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6210:6:26","type":""}]},{"nodeType":"YulAssignment","src":"6236:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6271:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"6282:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6267:3:26"},"nodeType":"YulFunctionCall","src":"6267:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6291:7:26"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"6246:20:26"},"nodeType":"YulFunctionCall","src":"6246:53:26"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"6236:6:26"}]}]},{"nodeType":"YulBlock","src":"6319:119:26","statements":[{"nodeType":"YulVariableDeclaration","src":"6334:17:26","value":{"kind":"number","nodeType":"YulLiteral","src":"6348:3:26","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6338:6:26","type":""}]},{"nodeType":"YulAssignment","src":"6365:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6400:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"6411:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6396:3:26"},"nodeType":"YulFunctionCall","src":"6396:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6420:7:26"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"6375:20:26"},"nodeType":"YulFunctionCall","src":"6375:53:26"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"6365:6:26"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint8t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5608:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5619:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5631:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5639:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5647:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5655:6:26","type":""},{"name":"value4","nodeType":"YulTypedName","src":"5663:6:26","type":""}],"src":"5538:907:26"},{"body":{"nodeType":"YulBlock","src":"6517:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"6563:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6565:77:26"},"nodeType":"YulFunctionCall","src":"6565:79:26"},"nodeType":"YulExpressionStatement","src":"6565:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6538:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"6547:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6534:3:26"},"nodeType":"YulFunctionCall","src":"6534:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"6559:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6530:3:26"},"nodeType":"YulFunctionCall","src":"6530:32:26"},"nodeType":"YulIf","src":"6527:119:26"},{"nodeType":"YulBlock","src":"6656:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"6671:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"6685:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6675:6:26","type":""}]},{"nodeType":"YulAssignment","src":"6700:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6735:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"6746:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6731:3:26"},"nodeType":"YulFunctionCall","src":"6731:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6755:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6710:20:26"},"nodeType":"YulFunctionCall","src":"6710:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6700:6:26"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6487:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6498:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6510:6:26","type":""}],"src":"6451:329:26"},{"body":{"nodeType":"YulBlock","src":"6884:124:26","statements":[{"nodeType":"YulAssignment","src":"6894:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6906:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"6917:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6902:3:26"},"nodeType":"YulFunctionCall","src":"6902:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6894:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6974:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6987:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"6998:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6983:3:26"},"nodeType":"YulFunctionCall","src":"6983:17:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"6930:43:26"},"nodeType":"YulFunctionCall","src":"6930:71:26"},"nodeType":"YulExpressionStatement","src":"6930:71:26"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6856:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6868:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6879:4:26","type":""}],"src":"6786:222:26"},{"body":{"nodeType":"YulBlock","src":"7110:73:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7127:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"7132:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7120:6:26"},"nodeType":"YulFunctionCall","src":"7120:19:26"},"nodeType":"YulExpressionStatement","src":"7120:19:26"},{"nodeType":"YulAssignment","src":"7148:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7167:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"7172:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7163:3:26"},"nodeType":"YulFunctionCall","src":"7163:14:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"7148:11:26"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7082:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"7087:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"7098:11:26","type":""}],"src":"7014:169:26"},{"body":{"nodeType":"YulBlock","src":"7295:125:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7317:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"7325:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7313:3:26"},"nodeType":"YulFunctionCall","src":"7313:14:26"},{"hexValue":"4d75737420686176652061646d696e20726f6c6520746f20706572666f726d20","kind":"string","nodeType":"YulLiteral","src":"7329:34:26","type":"","value":"Must have admin role to perform "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7306:6:26"},"nodeType":"YulFunctionCall","src":"7306:58:26"},"nodeType":"YulExpressionStatement","src":"7306:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7385:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"7393:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7381:3:26"},"nodeType":"YulFunctionCall","src":"7381:15:26"},{"hexValue":"7468697320616374696f6e2e","kind":"string","nodeType":"YulLiteral","src":"7398:14:26","type":"","value":"this action."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7374:6:26"},"nodeType":"YulFunctionCall","src":"7374:39:26"},"nodeType":"YulExpressionStatement","src":"7374:39:26"}]},"name":"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7287:6:26","type":""}],"src":"7189:231:26"},{"body":{"nodeType":"YulBlock","src":"7572:220:26","statements":[{"nodeType":"YulAssignment","src":"7582:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7648:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"7653:2:26","type":"","value":"44"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7589:58:26"},"nodeType":"YulFunctionCall","src":"7589:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7582:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7754:3:26"}],"functionName":{"name":"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","nodeType":"YulIdentifier","src":"7665:88:26"},"nodeType":"YulFunctionCall","src":"7665:93:26"},"nodeType":"YulExpressionStatement","src":"7665:93:26"},{"nodeType":"YulAssignment","src":"7767:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7778:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"7783:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7774:3:26"},"nodeType":"YulFunctionCall","src":"7774:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7767:3:26"}]}]},"name":"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7560:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7568:3:26","type":""}],"src":"7426:366:26"},{"body":{"nodeType":"YulBlock","src":"7969:248:26","statements":[{"nodeType":"YulAssignment","src":"7979:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7991:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"8002:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7987:3:26"},"nodeType":"YulFunctionCall","src":"7987:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7979:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8026:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"8037:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8022:3:26"},"nodeType":"YulFunctionCall","src":"8022:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8045:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"8051:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8041:3:26"},"nodeType":"YulFunctionCall","src":"8041:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8015:6:26"},"nodeType":"YulFunctionCall","src":"8015:47:26"},"nodeType":"YulExpressionStatement","src":"8015:47:26"},{"nodeType":"YulAssignment","src":"8071:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8205:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8079:124:26"},"nodeType":"YulFunctionCall","src":"8079:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8071:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7949:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7964:4:26","type":""}],"src":"7798:419:26"},{"body":{"nodeType":"YulBlock","src":"8251:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8268:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8271:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8261:6:26"},"nodeType":"YulFunctionCall","src":"8261:88:26"},"nodeType":"YulExpressionStatement","src":"8261:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8365:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8368:4:26","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8358:6:26"},"nodeType":"YulFunctionCall","src":"8358:15:26"},"nodeType":"YulExpressionStatement","src":"8358:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8389:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8392:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8382:6:26"},"nodeType":"YulFunctionCall","src":"8382:15:26"},"nodeType":"YulExpressionStatement","src":"8382:15:26"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"8223:180:26"},{"body":{"nodeType":"YulBlock","src":"8457:300:26","statements":[{"nodeType":"YulAssignment","src":"8467:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8490:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8472:17:26"},"nodeType":"YulFunctionCall","src":"8472:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"8467:1:26"}]},{"nodeType":"YulAssignment","src":"8501:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"8524:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8506:17:26"},"nodeType":"YulFunctionCall","src":"8506:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"8501:1:26"}]},{"body":{"nodeType":"YulBlock","src":"8699:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"8701:16:26"},"nodeType":"YulFunctionCall","src":"8701:18:26"},"nodeType":"YulExpressionStatement","src":"8701:18:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8611:1:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8604:6:26"},"nodeType":"YulFunctionCall","src":"8604:9:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8597:6:26"},"nodeType":"YulFunctionCall","src":"8597:17:26"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"8619:1:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8626:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"x","nodeType":"YulIdentifier","src":"8694:1:26"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"8622:3:26"},"nodeType":"YulFunctionCall","src":"8622:74:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8616:2:26"},"nodeType":"YulFunctionCall","src":"8616:81:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8593:3:26"},"nodeType":"YulFunctionCall","src":"8593:105:26"},"nodeType":"YulIf","src":"8590:131:26"},{"nodeType":"YulAssignment","src":"8731:20:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8746:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"8749:1:26"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8742:3:26"},"nodeType":"YulFunctionCall","src":"8742:9:26"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"8731:7:26"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"8440:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"8443:1:26","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"8449:7:26","type":""}],"src":"8409:348:26"},{"body":{"nodeType":"YulBlock","src":"8808:149:26","statements":[{"nodeType":"YulAssignment","src":"8818:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8841:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8823:17:26"},"nodeType":"YulFunctionCall","src":"8823:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"8818:1:26"}]},{"nodeType":"YulAssignment","src":"8852:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"8875:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8857:17:26"},"nodeType":"YulFunctionCall","src":"8857:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"8852:1:26"}]},{"nodeType":"YulAssignment","src":"8886:17:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8898:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"8901:1:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8894:3:26"},"nodeType":"YulFunctionCall","src":"8894:9:26"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"8886:4:26"}]},{"body":{"nodeType":"YulBlock","src":"8928:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"8930:16:26"},"nodeType":"YulFunctionCall","src":"8930:18:26"},"nodeType":"YulExpressionStatement","src":"8930:18:26"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"8919:4:26"},{"name":"x","nodeType":"YulIdentifier","src":"8925:1:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8916:2:26"},"nodeType":"YulFunctionCall","src":"8916:11:26"},"nodeType":"YulIf","src":"8913:37:26"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"8794:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"8797:1:26","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"8803:4:26","type":""}],"src":"8763:194:26"},{"body":{"nodeType":"YulBlock","src":"9007:147:26","statements":[{"nodeType":"YulAssignment","src":"9017:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9040:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9022:17:26"},"nodeType":"YulFunctionCall","src":"9022:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"9017:1:26"}]},{"nodeType":"YulAssignment","src":"9051:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9074:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9056:17:26"},"nodeType":"YulFunctionCall","src":"9056:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"9051:1:26"}]},{"nodeType":"YulAssignment","src":"9085:16:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9096:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"9099:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9092:3:26"},"nodeType":"YulFunctionCall","src":"9092:9:26"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"9085:3:26"}]},{"body":{"nodeType":"YulBlock","src":"9125:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9127:16:26"},"nodeType":"YulFunctionCall","src":"9127:18:26"},"nodeType":"YulExpressionStatement","src":"9127:18:26"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9117:1:26"},{"name":"sum","nodeType":"YulIdentifier","src":"9120:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9114:2:26"},"nodeType":"YulFunctionCall","src":"9114:10:26"},"nodeType":"YulIf","src":"9111:36:26"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"8994:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"8997:1:26","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"9003:3:26","type":""}],"src":"8963:191:26"},{"body":{"nodeType":"YulBlock","src":"9188:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9205:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9208:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9198:6:26"},"nodeType":"YulFunctionCall","src":"9198:88:26"},"nodeType":"YulExpressionStatement","src":"9198:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9302:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9305:4:26","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9295:6:26"},"nodeType":"YulFunctionCall","src":"9295:15:26"},"nodeType":"YulExpressionStatement","src":"9295:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9326:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9329:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9319:6:26"},"nodeType":"YulFunctionCall","src":"9319:15:26"},"nodeType":"YulExpressionStatement","src":"9319:15:26"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"9160:180:26"},{"body":{"nodeType":"YulBlock","src":"9388:143:26","statements":[{"nodeType":"YulAssignment","src":"9398:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9421:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9403:17:26"},"nodeType":"YulFunctionCall","src":"9403:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"9398:1:26"}]},{"nodeType":"YulAssignment","src":"9432:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9455:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9437:17:26"},"nodeType":"YulFunctionCall","src":"9437:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"9432:1:26"}]},{"body":{"nodeType":"YulBlock","src":"9479:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"9481:16:26"},"nodeType":"YulFunctionCall","src":"9481:18:26"},"nodeType":"YulExpressionStatement","src":"9481:18:26"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9476:1:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9469:6:26"},"nodeType":"YulFunctionCall","src":"9469:9:26"},"nodeType":"YulIf","src":"9466:35:26"},{"nodeType":"YulAssignment","src":"9511:14:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9520:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"9523:1:26"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"9516:3:26"},"nodeType":"YulFunctionCall","src":"9516:9:26"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"9511:1:26"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"9377:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"9380:1:26","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"9386:1:26","type":""}],"src":"9346:185:26"},{"body":{"nodeType":"YulBlock","src":"9577:76:26","statements":[{"body":{"nodeType":"YulBlock","src":"9631:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9640:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9643:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9633:6:26"},"nodeType":"YulFunctionCall","src":"9633:12:26"},"nodeType":"YulExpressionStatement","src":"9633:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9600:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9622:5:26"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"9607:14:26"},"nodeType":"YulFunctionCall","src":"9607:21:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9597:2:26"},"nodeType":"YulFunctionCall","src":"9597:32:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9590:6:26"},"nodeType":"YulFunctionCall","src":"9590:40:26"},"nodeType":"YulIf","src":"9587:60:26"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9570:5:26","type":""}],"src":"9537:116:26"},{"body":{"nodeType":"YulBlock","src":"9719:77:26","statements":[{"nodeType":"YulAssignment","src":"9729:22:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9744:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9738:5:26"},"nodeType":"YulFunctionCall","src":"9738:13:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9729:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9784:5:26"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"9760:23:26"},"nodeType":"YulFunctionCall","src":"9760:30:26"},"nodeType":"YulExpressionStatement","src":"9760:30:26"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"9697:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"9705:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"9713:5:26","type":""}],"src":"9659:137:26"},{"body":{"nodeType":"YulBlock","src":"9876:271:26","statements":[{"body":{"nodeType":"YulBlock","src":"9922:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9924:77:26"},"nodeType":"YulFunctionCall","src":"9924:79:26"},"nodeType":"YulExpressionStatement","src":"9924:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9897:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"9906:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9893:3:26"},"nodeType":"YulFunctionCall","src":"9893:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"9918:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9889:3:26"},"nodeType":"YulFunctionCall","src":"9889:32:26"},"nodeType":"YulIf","src":"9886:119:26"},{"nodeType":"YulBlock","src":"10015:125:26","statements":[{"nodeType":"YulVariableDeclaration","src":"10030:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"10044:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10034:6:26","type":""}]},{"nodeType":"YulAssignment","src":"10059:71:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10102:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"10113:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10098:3:26"},"nodeType":"YulFunctionCall","src":"10098:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10122:7:26"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"10069:28:26"},"nodeType":"YulFunctionCall","src":"10069:61:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10059:6:26"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9846:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9857:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9869:6:26","type":""}],"src":"9802:345:26"},{"body":{"nodeType":"YulBlock","src":"10218:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10235:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10258:5:26"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"10240:17:26"},"nodeType":"YulFunctionCall","src":"10240:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10228:6:26"},"nodeType":"YulFunctionCall","src":"10228:37:26"},"nodeType":"YulExpressionStatement","src":"10228:37:26"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10206:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10213:3:26","type":""}],"src":"10153:118:26"},{"body":{"nodeType":"YulBlock","src":"10375:124:26","statements":[{"nodeType":"YulAssignment","src":"10385:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10397:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"10408:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10393:3:26"},"nodeType":"YulFunctionCall","src":"10393:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10385:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10465:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10478:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"10489:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10474:3:26"},"nodeType":"YulFunctionCall","src":"10474:17:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"10421:43:26"},"nodeType":"YulFunctionCall","src":"10421:71:26"},"nodeType":"YulExpressionStatement","src":"10421:71:26"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10347:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10359:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10370:4:26","type":""}],"src":"10277:222:26"},{"body":{"nodeType":"YulBlock","src":"10568:80:26","statements":[{"nodeType":"YulAssignment","src":"10578:22:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10593:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10587:5:26"},"nodeType":"YulFunctionCall","src":"10587:13:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"10578:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10636:5:26"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"10609:26:26"},"nodeType":"YulFunctionCall","src":"10609:33:26"},"nodeType":"YulExpressionStatement","src":"10609:33:26"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"10546:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"10554:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"10562:5:26","type":""}],"src":"10505:143:26"},{"body":{"nodeType":"YulBlock","src":"10731:274:26","statements":[{"body":{"nodeType":"YulBlock","src":"10777:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10779:77:26"},"nodeType":"YulFunctionCall","src":"10779:79:26"},"nodeType":"YulExpressionStatement","src":"10779:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10752:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"10761:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10748:3:26"},"nodeType":"YulFunctionCall","src":"10748:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"10773:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10744:3:26"},"nodeType":"YulFunctionCall","src":"10744:32:26"},"nodeType":"YulIf","src":"10741:119:26"},{"nodeType":"YulBlock","src":"10870:128:26","statements":[{"nodeType":"YulVariableDeclaration","src":"10885:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"10899:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10889:6:26","type":""}]},{"nodeType":"YulAssignment","src":"10914:74:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10960:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"10971:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10956:3:26"},"nodeType":"YulFunctionCall","src":"10956:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10980:7:26"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"10924:31:26"},"nodeType":"YulFunctionCall","src":"10924:64:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10914:6:26"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10701:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10712:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10724:6:26","type":""}],"src":"10654:351:26"},{"body":{"nodeType":"YulBlock","src":"11117:128:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11139:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"11147:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11135:3:26"},"nodeType":"YulFunctionCall","src":"11135:14:26"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"11151:34:26","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11128:6:26"},"nodeType":"YulFunctionCall","src":"11128:58:26"},"nodeType":"YulExpressionStatement","src":"11128:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11207:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"11215:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11203:3:26"},"nodeType":"YulFunctionCall","src":"11203:15:26"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"11220:17:26","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11196:6:26"},"nodeType":"YulFunctionCall","src":"11196:42:26"},"nodeType":"YulExpressionStatement","src":"11196:42:26"}]},"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11109:6:26","type":""}],"src":"11011:234:26"},{"body":{"nodeType":"YulBlock","src":"11397:220:26","statements":[{"nodeType":"YulAssignment","src":"11407:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11473:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"11478:2:26","type":"","value":"47"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11414:58:26"},"nodeType":"YulFunctionCall","src":"11414:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11407:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11579:3:26"}],"functionName":{"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulIdentifier","src":"11490:88:26"},"nodeType":"YulFunctionCall","src":"11490:93:26"},"nodeType":"YulExpressionStatement","src":"11490:93:26"},{"nodeType":"YulAssignment","src":"11592:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11603:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"11608:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11599:3:26"},"nodeType":"YulFunctionCall","src":"11599:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11592:3:26"}]}]},"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11385:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11393:3:26","type":""}],"src":"11251:366:26"},{"body":{"nodeType":"YulBlock","src":"11794:248:26","statements":[{"nodeType":"YulAssignment","src":"11804:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11816:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"11827:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11812:3:26"},"nodeType":"YulFunctionCall","src":"11812:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11804:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11851:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"11862:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11847:3:26"},"nodeType":"YulFunctionCall","src":"11847:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11870:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"11876:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11866:3:26"},"nodeType":"YulFunctionCall","src":"11866:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11840:6:26"},"nodeType":"YulFunctionCall","src":"11840:47:26"},"nodeType":"YulExpressionStatement","src":"11840:47:26"},{"nodeType":"YulAssignment","src":"11896:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12030:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11904:124:26"},"nodeType":"YulFunctionCall","src":"11904:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11896:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11774:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11789:4:26","type":""}],"src":"11623:419:26"},{"body":{"nodeType":"YulBlock","src":"12154:124:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12176:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"12184:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12172:3:26"},"nodeType":"YulFunctionCall","src":"12172:14:26"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"12188:34:26","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12165:6:26"},"nodeType":"YulFunctionCall","src":"12165:58:26"},"nodeType":"YulExpressionStatement","src":"12165:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12244:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"12252:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12240:3:26"},"nodeType":"YulFunctionCall","src":"12240:15:26"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"12257:13:26","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12233:6:26"},"nodeType":"YulFunctionCall","src":"12233:38:26"},"nodeType":"YulExpressionStatement","src":"12233:38:26"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12146:6:26","type":""}],"src":"12048:230:26"},{"body":{"nodeType":"YulBlock","src":"12430:220:26","statements":[{"nodeType":"YulAssignment","src":"12440:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12506:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"12511:2:26","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12447:58:26"},"nodeType":"YulFunctionCall","src":"12447:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12440:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12612:3:26"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"12523:88:26"},"nodeType":"YulFunctionCall","src":"12523:93:26"},"nodeType":"YulExpressionStatement","src":"12523:93:26"},{"nodeType":"YulAssignment","src":"12625:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12636:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"12641:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12632:3:26"},"nodeType":"YulFunctionCall","src":"12632:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12625:3:26"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12418:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12426:3:26","type":""}],"src":"12284:366:26"},{"body":{"nodeType":"YulBlock","src":"12827:248:26","statements":[{"nodeType":"YulAssignment","src":"12837:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12849:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12860:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12845:3:26"},"nodeType":"YulFunctionCall","src":"12845:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12837:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12884:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12895:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12880:3:26"},"nodeType":"YulFunctionCall","src":"12880:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12903:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"12909:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12899:3:26"},"nodeType":"YulFunctionCall","src":"12899:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12873:6:26"},"nodeType":"YulFunctionCall","src":"12873:47:26"},"nodeType":"YulExpressionStatement","src":"12873:47:26"},{"nodeType":"YulAssignment","src":"12929:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13063:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12937:124:26"},"nodeType":"YulFunctionCall","src":"12937:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12929:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12807:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12822:4:26","type":""}],"src":"12656:419:26"},{"body":{"nodeType":"YulBlock","src":"13187:127:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13209:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"13217:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13205:3:26"},"nodeType":"YulFunctionCall","src":"13205:14:26"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"13221:34:26","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13198:6:26"},"nodeType":"YulFunctionCall","src":"13198:58:26"},"nodeType":"YulExpressionStatement","src":"13198:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13277:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"13285:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13273:3:26"},"nodeType":"YulFunctionCall","src":"13273:15:26"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"13290:16:26","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13266:6:26"},"nodeType":"YulFunctionCall","src":"13266:41:26"},"nodeType":"YulExpressionStatement","src":"13266:41:26"}]},"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13179:6:26","type":""}],"src":"13081:233:26"},{"body":{"nodeType":"YulBlock","src":"13466:220:26","statements":[{"nodeType":"YulAssignment","src":"13476:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13542:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"13547:2:26","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13483:58:26"},"nodeType":"YulFunctionCall","src":"13483:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13476:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13648:3:26"}],"functionName":{"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulIdentifier","src":"13559:88:26"},"nodeType":"YulFunctionCall","src":"13559:93:26"},"nodeType":"YulExpressionStatement","src":"13559:93:26"},{"nodeType":"YulAssignment","src":"13661:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13672:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"13677:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13668:3:26"},"nodeType":"YulFunctionCall","src":"13668:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13661:3:26"}]}]},"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13454:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13462:3:26","type":""}],"src":"13320:366:26"},{"body":{"nodeType":"YulBlock","src":"13863:248:26","statements":[{"nodeType":"YulAssignment","src":"13873:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13885:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"13896:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13881:3:26"},"nodeType":"YulFunctionCall","src":"13881:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13873:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13920:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"13931:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13916:3:26"},"nodeType":"YulFunctionCall","src":"13916:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13939:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"13945:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13935:3:26"},"nodeType":"YulFunctionCall","src":"13935:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13909:6:26"},"nodeType":"YulFunctionCall","src":"13909:47:26"},"nodeType":"YulExpressionStatement","src":"13909:47:26"},{"nodeType":"YulAssignment","src":"13965:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14099:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13973:124:26"},"nodeType":"YulFunctionCall","src":"13973:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13965:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13843:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13858:4:26","type":""}],"src":"13692:419:26"},{"body":{"nodeType":"YulBlock","src":"14170:32:26","statements":[{"nodeType":"YulAssignment","src":"14180:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"14191:5:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"14180:7:26"}]}]},"name":"cleanup_t_rational_1_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14152:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"14162:7:26","type":""}],"src":"14117:85:26"},{"body":{"nodeType":"YulBlock","src":"14240:28:26","statements":[{"nodeType":"YulAssignment","src":"14250:12:26","value":{"name":"value","nodeType":"YulIdentifier","src":"14257:5:26"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"14250:3:26"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14226:5:26","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"14236:3:26","type":""}],"src":"14208:60:26"},{"body":{"nodeType":"YulBlock","src":"14340:88:26","statements":[{"nodeType":"YulAssignment","src":"14350:72:26","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14414:5:26"}],"functionName":{"name":"cleanup_t_rational_1_by_1","nodeType":"YulIdentifier","src":"14388:25:26"},"nodeType":"YulFunctionCall","src":"14388:32:26"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"14379:8:26"},"nodeType":"YulFunctionCall","src":"14379:42:26"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"14363:15:26"},"nodeType":"YulFunctionCall","src":"14363:59:26"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"14350:9:26"}]}]},"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14320:5:26","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"14330:9:26","type":""}],"src":"14274:154:26"},{"body":{"nodeType":"YulBlock","src":"14505:72:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14522:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14564:5:26"}],"functionName":{"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulIdentifier","src":"14527:36:26"},"nodeType":"YulFunctionCall","src":"14527:43:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14515:6:26"},"nodeType":"YulFunctionCall","src":"14515:56:26"},"nodeType":"YulExpressionStatement","src":"14515:56:26"}]},"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14493:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"14500:3:26","type":""}],"src":"14434:143:26"},{"body":{"nodeType":"YulBlock","src":"14687:130:26","statements":[{"nodeType":"YulAssignment","src":"14697:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14709:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"14720:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14705:3:26"},"nodeType":"YulFunctionCall","src":"14705:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14697:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14783:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14796:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"14807:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14792:3:26"},"nodeType":"YulFunctionCall","src":"14792:17:26"}],"functionName":{"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"14733:49:26"},"nodeType":"YulFunctionCall","src":"14733:77:26"},"nodeType":"YulExpressionStatement","src":"14733:77:26"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14659:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14671:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14682:4:26","type":""}],"src":"14583:234:26"},{"body":{"nodeType":"YulBlock","src":"14929:75:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14951:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"14959:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14947:3:26"},"nodeType":"YulFunctionCall","src":"14947:14:26"},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","kind":"string","nodeType":"YulLiteral","src":"14963:33:26","type":"","value":"ReentrancyGuard: reentrant call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14940:6:26"},"nodeType":"YulFunctionCall","src":"14940:57:26"},"nodeType":"YulExpressionStatement","src":"14940:57:26"}]},"name":"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14921:6:26","type":""}],"src":"14823:181:26"},{"body":{"nodeType":"YulBlock","src":"15156:220:26","statements":[{"nodeType":"YulAssignment","src":"15166:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15232:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"15237:2:26","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15173:58:26"},"nodeType":"YulFunctionCall","src":"15173:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15166:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15338:3:26"}],"functionName":{"name":"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","nodeType":"YulIdentifier","src":"15249:88:26"},"nodeType":"YulFunctionCall","src":"15249:93:26"},"nodeType":"YulExpressionStatement","src":"15249:93:26"},{"nodeType":"YulAssignment","src":"15351:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15362:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"15367:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15358:3:26"},"nodeType":"YulFunctionCall","src":"15358:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15351:3:26"}]}]},"name":"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15144:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15152:3:26","type":""}],"src":"15010:366:26"},{"body":{"nodeType":"YulBlock","src":"15553:248:26","statements":[{"nodeType":"YulAssignment","src":"15563:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15575:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"15586:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15571:3:26"},"nodeType":"YulFunctionCall","src":"15571:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15563:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15610:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"15621:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15606:3:26"},"nodeType":"YulFunctionCall","src":"15606:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15629:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"15635:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15625:3:26"},"nodeType":"YulFunctionCall","src":"15625:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15599:6:26"},"nodeType":"YulFunctionCall","src":"15599:47:26"},"nodeType":"YulExpressionStatement","src":"15599:47:26"},{"nodeType":"YulAssignment","src":"15655:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15789:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15663:124:26"},"nodeType":"YulFunctionCall","src":"15663:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15655:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15533:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15548:4:26","type":""}],"src":"15382:419:26"},{"body":{"nodeType":"YulBlock","src":"15868:51:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15885:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15906:5:26"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"15890:15:26"},"nodeType":"YulFunctionCall","src":"15890:22:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15878:6:26"},"nodeType":"YulFunctionCall","src":"15878:35:26"},"nodeType":"YulExpressionStatement","src":"15878:35:26"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15856:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15863:3:26","type":""}],"src":"15807:112:26"},{"body":{"nodeType":"YulBlock","src":"16187:616:26","statements":[{"nodeType":"YulAssignment","src":"16197:27:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16209:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"16220:3:26","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16205:3:26"},"nodeType":"YulFunctionCall","src":"16205:19:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16197:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16278:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16291:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"16302:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16287:3:26"},"nodeType":"YulFunctionCall","src":"16287:17:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"16234:43:26"},"nodeType":"YulFunctionCall","src":"16234:71:26"},"nodeType":"YulExpressionStatement","src":"16234:71:26"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16359:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16372:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"16383:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16368:3:26"},"nodeType":"YulFunctionCall","src":"16368:18:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"16315:43:26"},"nodeType":"YulFunctionCall","src":"16315:72:26"},"nodeType":"YulExpressionStatement","src":"16315:72:26"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"16441:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16454:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"16465:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16450:3:26"},"nodeType":"YulFunctionCall","src":"16450:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"16397:43:26"},"nodeType":"YulFunctionCall","src":"16397:72:26"},"nodeType":"YulExpressionStatement","src":"16397:72:26"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"16523:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16536:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"16547:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16532:3:26"},"nodeType":"YulFunctionCall","src":"16532:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"16479:43:26"},"nodeType":"YulFunctionCall","src":"16479:72:26"},"nodeType":"YulExpressionStatement","src":"16479:72:26"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"16601:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16614:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"16625:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16610:3:26"},"nodeType":"YulFunctionCall","src":"16610:19:26"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"16561:39:26"},"nodeType":"YulFunctionCall","src":"16561:69:26"},"nodeType":"YulExpressionStatement","src":"16561:69:26"},{"expression":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"16684:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16697:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"16708:3:26","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16693:3:26"},"nodeType":"YulFunctionCall","src":"16693:19:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"16640:43:26"},"nodeType":"YulFunctionCall","src":"16640:73:26"},"nodeType":"YulExpressionStatement","src":"16640:73:26"},{"expression":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"16767:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16780:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"16791:3:26","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16776:3:26"},"nodeType":"YulFunctionCall","src":"16776:19:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"16723:43:26"},"nodeType":"YulFunctionCall","src":"16723:73:26"},"nodeType":"YulExpressionStatement","src":"16723:73:26"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16111:9:26","type":""},{"name":"value6","nodeType":"YulTypedName","src":"16123:6:26","type":""},{"name":"value5","nodeType":"YulTypedName","src":"16131:6:26","type":""},{"name":"value4","nodeType":"YulTypedName","src":"16139:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"16147:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"16155:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16163:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16171:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16182:4:26","type":""}],"src":"15925:878:26"},{"body":{"nodeType":"YulBlock","src":"16915:114:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16937:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"16945:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16933:3:26"},"nodeType":"YulFunctionCall","src":"16933:14:26"},{"hexValue":"5361666545524332303a207065726d697420646964206e6f7420737563636565","kind":"string","nodeType":"YulLiteral","src":"16949:34:26","type":"","value":"SafeERC20: permit did not succee"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16926:6:26"},"nodeType":"YulFunctionCall","src":"16926:58:26"},"nodeType":"YulExpressionStatement","src":"16926:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17005:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"17013:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17001:3:26"},"nodeType":"YulFunctionCall","src":"17001:15:26"},{"hexValue":"64","kind":"string","nodeType":"YulLiteral","src":"17018:3:26","type":"","value":"d"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16994:6:26"},"nodeType":"YulFunctionCall","src":"16994:28:26"},"nodeType":"YulExpressionStatement","src":"16994:28:26"}]},"name":"store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"16907:6:26","type":""}],"src":"16809:220:26"},{"body":{"nodeType":"YulBlock","src":"17181:220:26","statements":[{"nodeType":"YulAssignment","src":"17191:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17257:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"17262:2:26","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17198:58:26"},"nodeType":"YulFunctionCall","src":"17198:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17191:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17363:3:26"}],"functionName":{"name":"store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","nodeType":"YulIdentifier","src":"17274:88:26"},"nodeType":"YulFunctionCall","src":"17274:93:26"},"nodeType":"YulExpressionStatement","src":"17274:93:26"},{"nodeType":"YulAssignment","src":"17376:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17387:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"17392:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17383:3:26"},"nodeType":"YulFunctionCall","src":"17383:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17376:3:26"}]}]},"name":"abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17169:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17177:3:26","type":""}],"src":"17035:366:26"},{"body":{"nodeType":"YulBlock","src":"17578:248:26","statements":[{"nodeType":"YulAssignment","src":"17588:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17600:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"17611:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17596:3:26"},"nodeType":"YulFunctionCall","src":"17596:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17588:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17635:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"17646:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17631:3:26"},"nodeType":"YulFunctionCall","src":"17631:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17654:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"17660:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17650:3:26"},"nodeType":"YulFunctionCall","src":"17650:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17624:6:26"},"nodeType":"YulFunctionCall","src":"17624:47:26"},"nodeType":"YulExpressionStatement","src":"17624:47:26"},{"nodeType":"YulAssignment","src":"17680:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17814:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17688:124:26"},"nodeType":"YulFunctionCall","src":"17688:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17680:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17558:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17573:4:26","type":""}],"src":"17407:419:26"},{"body":{"nodeType":"YulBlock","src":"17986:288:26","statements":[{"nodeType":"YulAssignment","src":"17996:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18008:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"18019:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18004:3:26"},"nodeType":"YulFunctionCall","src":"18004:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17996:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18076:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18089:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"18100:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18085:3:26"},"nodeType":"YulFunctionCall","src":"18085:17:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"18032:43:26"},"nodeType":"YulFunctionCall","src":"18032:71:26"},"nodeType":"YulExpressionStatement","src":"18032:71:26"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"18157:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18170:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"18181:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18166:3:26"},"nodeType":"YulFunctionCall","src":"18166:18:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"18113:43:26"},"nodeType":"YulFunctionCall","src":"18113:72:26"},"nodeType":"YulExpressionStatement","src":"18113:72:26"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"18239:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18252:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"18263:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18248:3:26"},"nodeType":"YulFunctionCall","src":"18248:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"18195:43:26"},"nodeType":"YulFunctionCall","src":"18195:72:26"},"nodeType":"YulExpressionStatement","src":"18195:72:26"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17942:9:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"17954:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17962:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17970:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17981:4:26","type":""}],"src":"17832:442:26"},{"body":{"nodeType":"YulBlock","src":"18406:206:26","statements":[{"nodeType":"YulAssignment","src":"18416:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18428:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"18439:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18424:3:26"},"nodeType":"YulFunctionCall","src":"18424:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18416:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18496:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18509:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"18520:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18505:3:26"},"nodeType":"YulFunctionCall","src":"18505:17:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"18452:43:26"},"nodeType":"YulFunctionCall","src":"18452:71:26"},"nodeType":"YulExpressionStatement","src":"18452:71:26"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"18577:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18590:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"18601:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18586:3:26"},"nodeType":"YulFunctionCall","src":"18586:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"18533:43:26"},"nodeType":"YulFunctionCall","src":"18533:72:26"},"nodeType":"YulExpressionStatement","src":"18533:72:26"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18370:9:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18382:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18390:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18401:4:26","type":""}],"src":"18280:332:26"},{"body":{"nodeType":"YulBlock","src":"18732:34:26","statements":[{"nodeType":"YulAssignment","src":"18742:18:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"18757:3:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"18742:11:26"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18704:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"18709:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"18720:11:26","type":""}],"src":"18618:148:26"},{"body":{"nodeType":"YulBlock","src":"18878:67:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18900:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"18908:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18896:3:26"},"nodeType":"YulFunctionCall","src":"18896:14:26"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nodeType":"YulLiteral","src":"18912:25:26","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18889:6:26"},"nodeType":"YulFunctionCall","src":"18889:49:26"},"nodeType":"YulExpressionStatement","src":"18889:49:26"}]},"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18870:6:26","type":""}],"src":"18772:173:26"},{"body":{"nodeType":"YulBlock","src":"19115:238:26","statements":[{"nodeType":"YulAssignment","src":"19125:92:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19209:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"19214:2:26","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"19132:76:26"},"nodeType":"YulFunctionCall","src":"19132:85:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19125:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19315:3:26"}],"functionName":{"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulIdentifier","src":"19226:88:26"},"nodeType":"YulFunctionCall","src":"19226:93:26"},"nodeType":"YulExpressionStatement","src":"19226:93:26"},{"nodeType":"YulAssignment","src":"19328:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19339:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"19344:2:26","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19335:3:26"},"nodeType":"YulFunctionCall","src":"19335:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19328:3:26"}]}]},"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19103:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19111:3:26","type":""}],"src":"18951:402:26"},{"body":{"nodeType":"YulBlock","src":"19418:40:26","statements":[{"nodeType":"YulAssignment","src":"19429:22:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19445:5:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19439:5:26"},"nodeType":"YulFunctionCall","src":"19439:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"19429:6:26"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19401:5:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"19411:6:26","type":""}],"src":"19359:99:26"},{"body":{"nodeType":"YulBlock","src":"19526:184:26","statements":[{"nodeType":"YulVariableDeclaration","src":"19536:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"19545:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"19540:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"19605:63:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"19630:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"19635:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19626:3:26"},"nodeType":"YulFunctionCall","src":"19626:11:26"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"19649:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"19654:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19645:3:26"},"nodeType":"YulFunctionCall","src":"19645:11:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19639:5:26"},"nodeType":"YulFunctionCall","src":"19639:18:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19619:6:26"},"nodeType":"YulFunctionCall","src":"19619:39:26"},"nodeType":"YulExpressionStatement","src":"19619:39:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"19566:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"19569:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"19563:2:26"},"nodeType":"YulFunctionCall","src":"19563:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"19577:19:26","statements":[{"nodeType":"YulAssignment","src":"19579:15:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"19588:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"19591:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19584:3:26"},"nodeType":"YulFunctionCall","src":"19584:10:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"19579:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"19559:3:26","statements":[]},"src":"19555:113:26"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"19688:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"19693:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19684:3:26"},"nodeType":"YulFunctionCall","src":"19684:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"19702:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19677:6:26"},"nodeType":"YulFunctionCall","src":"19677:27:26"},"nodeType":"YulExpressionStatement","src":"19677:27:26"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"19508:3:26","type":""},{"name":"dst","nodeType":"YulTypedName","src":"19513:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"19518:6:26","type":""}],"src":"19464:246:26"},{"body":{"nodeType":"YulBlock","src":"19826:280:26","statements":[{"nodeType":"YulVariableDeclaration","src":"19836:53:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19883:5:26"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"19850:32:26"},"nodeType":"YulFunctionCall","src":"19850:39:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"19840:6:26","type":""}]},{"nodeType":"YulAssignment","src":"19898:96:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19982:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"19987:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"19905:76:26"},"nodeType":"YulFunctionCall","src":"19905:89:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19898:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20042:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"20049:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20038:3:26"},"nodeType":"YulFunctionCall","src":"20038:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"20056:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"20061:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"20003:34:26"},"nodeType":"YulFunctionCall","src":"20003:65:26"},"nodeType":"YulExpressionStatement","src":"20003:65:26"},{"nodeType":"YulAssignment","src":"20077:23:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20088:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"20093:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20084:3:26"},"nodeType":"YulFunctionCall","src":"20084:16:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20077:3:26"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19807:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"19814:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19822:3:26","type":""}],"src":"19716:390:26"},{"body":{"nodeType":"YulBlock","src":"20218:61:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20240:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"20248:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20236:3:26"},"nodeType":"YulFunctionCall","src":"20236:14:26"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nodeType":"YulLiteral","src":"20252:19:26","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20229:6:26"},"nodeType":"YulFunctionCall","src":"20229:43:26"},"nodeType":"YulExpressionStatement","src":"20229:43:26"}]},"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20210:6:26","type":""}],"src":"20112:167:26"},{"body":{"nodeType":"YulBlock","src":"20449:238:26","statements":[{"nodeType":"YulAssignment","src":"20459:92:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20543:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"20548:2:26","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"20466:76:26"},"nodeType":"YulFunctionCall","src":"20466:85:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20459:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20649:3:26"}],"functionName":{"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulIdentifier","src":"20560:88:26"},"nodeType":"YulFunctionCall","src":"20560:93:26"},"nodeType":"YulExpressionStatement","src":"20560:93:26"},{"nodeType":"YulAssignment","src":"20662:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20673:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"20678:2:26","type":"","value":"17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20669:3:26"},"nodeType":"YulFunctionCall","src":"20669:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20662:3:26"}]}]},"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20437:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20445:3:26","type":""}],"src":"20285:402:26"},{"body":{"nodeType":"YulBlock","src":"21079:581:26","statements":[{"nodeType":"YulAssignment","src":"21090:155:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21241:3:26"}],"functionName":{"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"21097:142:26"},"nodeType":"YulFunctionCall","src":"21097:148:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21090:3:26"}]},{"nodeType":"YulAssignment","src":"21255:102:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21344:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"21353:3:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"21262:81:26"},"nodeType":"YulFunctionCall","src":"21262:95:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21255:3:26"}]},{"nodeType":"YulAssignment","src":"21367:155:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21518:3:26"}],"functionName":{"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"21374:142:26"},"nodeType":"YulFunctionCall","src":"21374:148:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21367:3:26"}]},{"nodeType":"YulAssignment","src":"21532:102:26","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"21621:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"21630:3:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"21539:81:26"},"nodeType":"YulFunctionCall","src":"21539:95:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21532:3:26"}]},{"nodeType":"YulAssignment","src":"21644:10:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"21651:3:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21644:3:26"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21050:3:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21056:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21064:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21075:3:26","type":""}],"src":"20693:967:26"},{"body":{"nodeType":"YulBlock","src":"21714:54:26","statements":[{"nodeType":"YulAssignment","src":"21724:38:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21742:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"21749:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21738:3:26"},"nodeType":"YulFunctionCall","src":"21738:14:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21758:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"21754:3:26"},"nodeType":"YulFunctionCall","src":"21754:7:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21734:3:26"},"nodeType":"YulFunctionCall","src":"21734:28:26"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"21724:6:26"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21697:5:26","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"21707:6:26","type":""}],"src":"21666:102:26"},{"body":{"nodeType":"YulBlock","src":"21866:285:26","statements":[{"nodeType":"YulVariableDeclaration","src":"21876:53:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21923:5:26"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"21890:32:26"},"nodeType":"YulFunctionCall","src":"21890:39:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"21880:6:26","type":""}]},{"nodeType":"YulAssignment","src":"21938:78:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22004:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"22009:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21945:58:26"},"nodeType":"YulFunctionCall","src":"21945:71:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21938:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22064:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"22071:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22060:3:26"},"nodeType":"YulFunctionCall","src":"22060:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"22078:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"22083:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"22025:34:26"},"nodeType":"YulFunctionCall","src":"22025:65:26"},"nodeType":"YulExpressionStatement","src":"22025:65:26"},{"nodeType":"YulAssignment","src":"22099:46:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22110:3:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"22137:6:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"22115:21:26"},"nodeType":"YulFunctionCall","src":"22115:29:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22106:3:26"},"nodeType":"YulFunctionCall","src":"22106:39:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22099:3:26"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21847:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"21854:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21862:3:26","type":""}],"src":"21774:377:26"},{"body":{"nodeType":"YulBlock","src":"22275:195:26","statements":[{"nodeType":"YulAssignment","src":"22285:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22297:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"22308:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22293:3:26"},"nodeType":"YulFunctionCall","src":"22293:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22285:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22332:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"22343:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22328:3:26"},"nodeType":"YulFunctionCall","src":"22328:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22351:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"22357:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22347:3:26"},"nodeType":"YulFunctionCall","src":"22347:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22321:6:26"},"nodeType":"YulFunctionCall","src":"22321:47:26"},"nodeType":"YulExpressionStatement","src":"22321:47:26"},{"nodeType":"YulAssignment","src":"22377:86:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22449:6:26"},{"name":"tail","nodeType":"YulIdentifier","src":"22458:4:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22385:63:26"},"nodeType":"YulFunctionCall","src":"22385:78:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22377:4:26"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22247:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22259:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22270:4:26","type":""}],"src":"22157:313:26"},{"body":{"nodeType":"YulBlock","src":"22582:123:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22604:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"22612:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22600:3:26"},"nodeType":"YulFunctionCall","src":"22600:14:26"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nodeType":"YulLiteral","src":"22616:34:26","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22593:6:26"},"nodeType":"YulFunctionCall","src":"22593:58:26"},"nodeType":"YulExpressionStatement","src":"22593:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22672:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"22680:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22668:3:26"},"nodeType":"YulFunctionCall","src":"22668:15:26"},{"hexValue":"6f742073756363656564","kind":"string","nodeType":"YulLiteral","src":"22685:12:26","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22661:6:26"},"nodeType":"YulFunctionCall","src":"22661:37:26"},"nodeType":"YulExpressionStatement","src":"22661:37:26"}]},"name":"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22574:6:26","type":""}],"src":"22476:229:26"},{"body":{"nodeType":"YulBlock","src":"22857:220:26","statements":[{"nodeType":"YulAssignment","src":"22867:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22933:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"22938:2:26","type":"","value":"42"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22874:58:26"},"nodeType":"YulFunctionCall","src":"22874:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22867:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23039:3:26"}],"functionName":{"name":"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","nodeType":"YulIdentifier","src":"22950:88:26"},"nodeType":"YulFunctionCall","src":"22950:93:26"},"nodeType":"YulExpressionStatement","src":"22950:93:26"},{"nodeType":"YulAssignment","src":"23052:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23063:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"23068:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23059:3:26"},"nodeType":"YulFunctionCall","src":"23059:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"23052:3:26"}]}]},"name":"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22845:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22853:3:26","type":""}],"src":"22711:366:26"},{"body":{"nodeType":"YulBlock","src":"23254:248:26","statements":[{"nodeType":"YulAssignment","src":"23264:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23276:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"23287:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23272:3:26"},"nodeType":"YulFunctionCall","src":"23272:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23264:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23311:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"23322:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23307:3:26"},"nodeType":"YulFunctionCall","src":"23307:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23330:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"23336:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23326:3:26"},"nodeType":"YulFunctionCall","src":"23326:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23300:6:26"},"nodeType":"YulFunctionCall","src":"23300:47:26"},"nodeType":"YulExpressionStatement","src":"23300:47:26"},{"nodeType":"YulAssignment","src":"23356:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23490:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23364:124:26"},"nodeType":"YulFunctionCall","src":"23364:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23356:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23234:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23249:4:26","type":""}],"src":"23083:419:26"},{"body":{"nodeType":"YulBlock","src":"23614:64:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23636:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"23644:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23632:3:26"},"nodeType":"YulFunctionCall","src":"23632:14:26"},{"hexValue":"5061757361626c653a206e6f7420706175736564","kind":"string","nodeType":"YulLiteral","src":"23648:22:26","type":"","value":"Pausable: not paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23625:6:26"},"nodeType":"YulFunctionCall","src":"23625:46:26"},"nodeType":"YulExpressionStatement","src":"23625:46:26"}]},"name":"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"23606:6:26","type":""}],"src":"23508:170:26"},{"body":{"nodeType":"YulBlock","src":"23830:220:26","statements":[{"nodeType":"YulAssignment","src":"23840:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23906:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"23911:2:26","type":"","value":"20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23847:58:26"},"nodeType":"YulFunctionCall","src":"23847:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23840:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24012:3:26"}],"functionName":{"name":"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","nodeType":"YulIdentifier","src":"23923:88:26"},"nodeType":"YulFunctionCall","src":"23923:93:26"},"nodeType":"YulExpressionStatement","src":"23923:93:26"},{"nodeType":"YulAssignment","src":"24025:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24036:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"24041:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24032:3:26"},"nodeType":"YulFunctionCall","src":"24032:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24025:3:26"}]}]},"name":"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23818:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"23826:3:26","type":""}],"src":"23684:366:26"},{"body":{"nodeType":"YulBlock","src":"24227:248:26","statements":[{"nodeType":"YulAssignment","src":"24237:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24249:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"24260:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24245:3:26"},"nodeType":"YulFunctionCall","src":"24245:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24237:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24284:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"24295:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24280:3:26"},"nodeType":"YulFunctionCall","src":"24280:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24303:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"24309:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24299:3:26"},"nodeType":"YulFunctionCall","src":"24299:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24273:6:26"},"nodeType":"YulFunctionCall","src":"24273:47:26"},"nodeType":"YulExpressionStatement","src":"24273:47:26"},{"nodeType":"YulAssignment","src":"24329:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24463:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24337:124:26"},"nodeType":"YulFunctionCall","src":"24337:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24329:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24207:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24222:4:26","type":""}],"src":"24056:419:26"},{"body":{"nodeType":"YulBlock","src":"24587:60:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24609:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"24617:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24605:3:26"},"nodeType":"YulFunctionCall","src":"24605:14:26"},{"hexValue":"5061757361626c653a20706175736564","kind":"string","nodeType":"YulLiteral","src":"24621:18:26","type":"","value":"Pausable: paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24598:6:26"},"nodeType":"YulFunctionCall","src":"24598:42:26"},"nodeType":"YulExpressionStatement","src":"24598:42:26"}]},"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24579:6:26","type":""}],"src":"24481:166:26"},{"body":{"nodeType":"YulBlock","src":"24799:220:26","statements":[{"nodeType":"YulAssignment","src":"24809:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24875:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"24880:2:26","type":"","value":"16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24816:58:26"},"nodeType":"YulFunctionCall","src":"24816:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24809:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24981:3:26"}],"functionName":{"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulIdentifier","src":"24892:88:26"},"nodeType":"YulFunctionCall","src":"24892:93:26"},"nodeType":"YulExpressionStatement","src":"24892:93:26"},{"nodeType":"YulAssignment","src":"24994:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25005:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"25010:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25001:3:26"},"nodeType":"YulFunctionCall","src":"25001:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24994:3:26"}]}]},"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24787:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24795:3:26","type":""}],"src":"24653:366:26"},{"body":{"nodeType":"YulBlock","src":"25196:248:26","statements":[{"nodeType":"YulAssignment","src":"25206:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25218:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"25229:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25214:3:26"},"nodeType":"YulFunctionCall","src":"25214:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25206:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25253:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"25264:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25249:3:26"},"nodeType":"YulFunctionCall","src":"25249:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25272:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"25278:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25268:3:26"},"nodeType":"YulFunctionCall","src":"25268:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25242:6:26"},"nodeType":"YulFunctionCall","src":"25242:47:26"},"nodeType":"YulExpressionStatement","src":"25242:47:26"},{"nodeType":"YulAssignment","src":"25298:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25432:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25306:124:26"},"nodeType":"YulFunctionCall","src":"25306:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25298:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25176:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25191:4:26","type":""}],"src":"25025:419:26"},{"body":{"nodeType":"YulBlock","src":"25478:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25495:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25498:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25488:6:26"},"nodeType":"YulFunctionCall","src":"25488:88:26"},"nodeType":"YulExpressionStatement","src":"25488:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25592:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"25595:4:26","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25585:6:26"},"nodeType":"YulFunctionCall","src":"25585:15:26"},"nodeType":"YulExpressionStatement","src":"25585:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25616:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25619:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25609:6:26"},"nodeType":"YulFunctionCall","src":"25609:15:26"},"nodeType":"YulExpressionStatement","src":"25609:15:26"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"25450:180:26"},{"body":{"nodeType":"YulBlock","src":"25664:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25681:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25684:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25674:6:26"},"nodeType":"YulFunctionCall","src":"25674:88:26"},"nodeType":"YulExpressionStatement","src":"25674:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25778:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"25781:4:26","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25771:6:26"},"nodeType":"YulFunctionCall","src":"25771:15:26"},"nodeType":"YulExpressionStatement","src":"25771:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25802:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25805:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25795:6:26"},"nodeType":"YulFunctionCall","src":"25795:15:26"},"nodeType":"YulExpressionStatement","src":"25795:15:26"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"25636:180:26"},{"body":{"nodeType":"YulBlock","src":"25865:128:26","statements":[{"nodeType":"YulAssignment","src":"25875:33:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25902:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25884:17:26"},"nodeType":"YulFunctionCall","src":"25884:24:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"25875:5:26"}]},{"body":{"nodeType":"YulBlock","src":"25936:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"25938:16:26"},"nodeType":"YulFunctionCall","src":"25938:18:26"},"nodeType":"YulExpressionStatement","src":"25938:18:26"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25923:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"25930:4:26","type":"","value":"0x00"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"25920:2:26"},"nodeType":"YulFunctionCall","src":"25920:15:26"},"nodeType":"YulIf","src":"25917:41:26"},{"nodeType":"YulAssignment","src":"25967:20:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25978:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"25985:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25974:3:26"},"nodeType":"YulFunctionCall","src":"25974:13:26"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"25967:3:26"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25851:5:26","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"25861:3:26","type":""}],"src":"25822:171:26"},{"body":{"nodeType":"YulBlock","src":"26105:76:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26127:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"26135:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26123:3:26"},"nodeType":"YulFunctionCall","src":"26123:14:26"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"26139:34:26","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26116:6:26"},"nodeType":"YulFunctionCall","src":"26116:58:26"},"nodeType":"YulExpressionStatement","src":"26116:58:26"}]},"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26097:6:26","type":""}],"src":"25999:182:26"},{"body":{"nodeType":"YulBlock","src":"26333:220:26","statements":[{"nodeType":"YulAssignment","src":"26343:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26409:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"26414:2:26","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26350:58:26"},"nodeType":"YulFunctionCall","src":"26350:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26343:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26515:3:26"}],"functionName":{"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulIdentifier","src":"26426:88:26"},"nodeType":"YulFunctionCall","src":"26426:93:26"},"nodeType":"YulExpressionStatement","src":"26426:93:26"},{"nodeType":"YulAssignment","src":"26528:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26539:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"26544:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26535:3:26"},"nodeType":"YulFunctionCall","src":"26535:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26528:3:26"}]}]},"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26321:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26329:3:26","type":""}],"src":"26187:366:26"},{"body":{"nodeType":"YulBlock","src":"26730:248:26","statements":[{"nodeType":"YulAssignment","src":"26740:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26752:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"26763:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26748:3:26"},"nodeType":"YulFunctionCall","src":"26748:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26740:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26787:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"26798:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26783:3:26"},"nodeType":"YulFunctionCall","src":"26783:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26806:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"26812:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26802:3:26"},"nodeType":"YulFunctionCall","src":"26802:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26776:6:26"},"nodeType":"YulFunctionCall","src":"26776:47:26"},"nodeType":"YulExpressionStatement","src":"26776:47:26"},{"nodeType":"YulAssignment","src":"26832:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26966:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26840:124:26"},"nodeType":"YulFunctionCall","src":"26840:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26832:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26710:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26725:4:26","type":""}],"src":"26559:419:26"},{"body":{"nodeType":"YulBlock","src":"27090:119:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27112:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"27120:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27108:3:26"},"nodeType":"YulFunctionCall","src":"27108:14:26"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"27124:34:26","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27101:6:26"},"nodeType":"YulFunctionCall","src":"27101:58:26"},"nodeType":"YulExpressionStatement","src":"27101:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27180:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"27188:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27176:3:26"},"nodeType":"YulFunctionCall","src":"27176:15:26"},{"hexValue":"722063616c6c","kind":"string","nodeType":"YulLiteral","src":"27193:8:26","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27169:6:26"},"nodeType":"YulFunctionCall","src":"27169:33:26"},"nodeType":"YulExpressionStatement","src":"27169:33:26"}]},"name":"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"27082:6:26","type":""}],"src":"26984:225:26"},{"body":{"nodeType":"YulBlock","src":"27361:220:26","statements":[{"nodeType":"YulAssignment","src":"27371:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27437:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"27442:2:26","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27378:58:26"},"nodeType":"YulFunctionCall","src":"27378:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27371:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27543:3:26"}],"functionName":{"name":"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","nodeType":"YulIdentifier","src":"27454:88:26"},"nodeType":"YulFunctionCall","src":"27454:93:26"},"nodeType":"YulExpressionStatement","src":"27454:93:26"},{"nodeType":"YulAssignment","src":"27556:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27567:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"27572:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27563:3:26"},"nodeType":"YulFunctionCall","src":"27563:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27556:3:26"}]}]},"name":"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"27349:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27357:3:26","type":""}],"src":"27215:366:26"},{"body":{"nodeType":"YulBlock","src":"27758:248:26","statements":[{"nodeType":"YulAssignment","src":"27768:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27780:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"27791:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27776:3:26"},"nodeType":"YulFunctionCall","src":"27776:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27768:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27815:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"27826:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27811:3:26"},"nodeType":"YulFunctionCall","src":"27811:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27834:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"27840:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27830:3:26"},"nodeType":"YulFunctionCall","src":"27830:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27804:6:26"},"nodeType":"YulFunctionCall","src":"27804:47:26"},"nodeType":"YulExpressionStatement","src":"27804:47:26"},{"nodeType":"YulAssignment","src":"27860:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27994:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27868:124:26"},"nodeType":"YulFunctionCall","src":"27868:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27860:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27738:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27753:4:26","type":""}],"src":"27587:419:26"},{"body":{"nodeType":"YulBlock","src":"28070:40:26","statements":[{"nodeType":"YulAssignment","src":"28081:22:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28097:5:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"28091:5:26"},"nodeType":"YulFunctionCall","src":"28091:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"28081:6:26"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28053:5:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"28063:6:26","type":""}],"src":"28012:98:26"},{"body":{"nodeType":"YulBlock","src":"28229:34:26","statements":[{"nodeType":"YulAssignment","src":"28239:18:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"28254:3:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"28239:11:26"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28201:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"28206:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"28217:11:26","type":""}],"src":"28116:147:26"},{"body":{"nodeType":"YulBlock","src":"28377:278:26","statements":[{"nodeType":"YulVariableDeclaration","src":"28387:52:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28433:5:26"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"28401:31:26"},"nodeType":"YulFunctionCall","src":"28401:38:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"28391:6:26","type":""}]},{"nodeType":"YulAssignment","src":"28448:95:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28531:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"28536:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"28455:75:26"},"nodeType":"YulFunctionCall","src":"28455:88:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28448:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28591:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"28598:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28587:3:26"},"nodeType":"YulFunctionCall","src":"28587:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"28605:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"28610:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"28552:34:26"},"nodeType":"YulFunctionCall","src":"28552:65:26"},"nodeType":"YulExpressionStatement","src":"28552:65:26"},{"nodeType":"YulAssignment","src":"28626:23:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28637:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"28642:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28633:3:26"},"nodeType":"YulFunctionCall","src":"28633:16:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28626:3:26"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28358:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"28365:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28373:3:26","type":""}],"src":"28269:386:26"},{"body":{"nodeType":"YulBlock","src":"28795:137:26","statements":[{"nodeType":"YulAssignment","src":"28806:100:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28893:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"28902:3:26"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"28813:79:26"},"nodeType":"YulFunctionCall","src":"28813:93:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28806:3:26"}]},{"nodeType":"YulAssignment","src":"28916:10:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"28923:3:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28916:3:26"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28774:3:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28780:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28791:3:26","type":""}],"src":"28661:271:26"},{"body":{"nodeType":"YulBlock","src":"29044:73:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29066:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"29074:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29062:3:26"},"nodeType":"YulFunctionCall","src":"29062:14:26"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"29078:31:26","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29055:6:26"},"nodeType":"YulFunctionCall","src":"29055:55:26"},"nodeType":"YulExpressionStatement","src":"29055:55:26"}]},"name":"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"29036:6:26","type":""}],"src":"28938:179:26"},{"body":{"nodeType":"YulBlock","src":"29269:220:26","statements":[{"nodeType":"YulAssignment","src":"29279:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29345:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"29350:2:26","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29286:58:26"},"nodeType":"YulFunctionCall","src":"29286:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29279:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29451:3:26"}],"functionName":{"name":"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","nodeType":"YulIdentifier","src":"29362:88:26"},"nodeType":"YulFunctionCall","src":"29362:93:26"},"nodeType":"YulExpressionStatement","src":"29362:93:26"},{"nodeType":"YulAssignment","src":"29464:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29475:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"29480:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29471:3:26"},"nodeType":"YulFunctionCall","src":"29471:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29464:3:26"}]}]},"name":"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29257:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29265:3:26","type":""}],"src":"29123:366:26"},{"body":{"nodeType":"YulBlock","src":"29666:248:26","statements":[{"nodeType":"YulAssignment","src":"29676:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29688:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"29699:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29684:3:26"},"nodeType":"YulFunctionCall","src":"29684:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29676:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29723:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"29734:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29719:3:26"},"nodeType":"YulFunctionCall","src":"29719:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29742:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"29748:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29738:3:26"},"nodeType":"YulFunctionCall","src":"29738:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29712:6:26"},"nodeType":"YulFunctionCall","src":"29712:47:26"},"nodeType":"YulExpressionStatement","src":"29712:47:26"},{"nodeType":"YulAssignment","src":"29768:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29902:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29776:124:26"},"nodeType":"YulFunctionCall","src":"29776:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29768:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29646:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29661:4:26","type":""}],"src":"29495:419:26"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function validator_revert_t_uint8(value) {\n        if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint8(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint8(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint8(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513(memPtr) {\n\n        mstore(add(memPtr, 0), \"Must have admin role to perform \")\n\n        mstore(add(memPtr, 32), \"this action.\")\n\n    }\n\n    function abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 44)\n        store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: can only renounce\")\n\n        mstore(add(memPtr, 32), \" roles for self\")\n\n    }\n\n    function abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)\n        store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is alrea\")\n\n        mstore(add(memPtr, 32), \"dy initialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {\n        converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(memPtr) {\n\n        mstore(add(memPtr, 0), \"ReentrancyGuard: reentrant call\")\n\n    }\n\n    function abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart , value6, value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 224)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value5,  add(headStart, 160))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value6,  add(headStart, 192))\n\n    }\n\n    function store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: permit did not succee\")\n\n        mstore(add(memPtr, 32), \"d\")\n\n    }\n\n    function abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: account \")\n\n    }\n\n    function abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 23)\n        store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(pos)\n        end := add(pos, 23)\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(memPtr) {\n\n        mstore(add(memPtr, 0), \" is missing role \")\n\n    }\n\n    function abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 17)\n        store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(pos)\n        end := add(pos, 17)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: ERC20 operation did n\")\n\n        mstore(add(memPtr, 32), \"ot succeed\")\n\n    }\n\n    function abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: not paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n        store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function decrement_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0x00) { panic_error_0x11() }\n        ret := sub(value, 1)\n    }\n\n    function store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Strings: hex length insufficient\")\n\n    }\n\n    function abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: insufficient balance fo\")\n\n        mstore(add(memPtr, 32), \"r call\")\n\n    }\n\n    function abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: call to non-contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":26,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"2766":[{"length":32,"start":1713},{"length":32,"start":2189}],"2769":[{"length":32,"start":3443}],"2775":[{"length":32,"start":2101}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061012c5760003560e01c806374a7dce5116100ad578063b6db75a011610071578063b6db75a01461030a578063c4d66de814610328578063d547741f14610344578063eaef399914610360578063f751758b1461037c5761012c565b806374a7dce51461028a5780638456cb59146102a8578063869eac93146102b257806391d14854146102bc578063a217fddf146102ec5761012c565b806334d131bf116100f457806334d131bf146101fa57806336568abe1461022a5780633f4ba83a146102465780635c975abb146102505780636e810b1a1461026e5761012c565b806301ffc9a714610131578063051e6cb11461016157806306fb46ba1461017d578063248a9ca3146101ae5780632f2ff15d146101de575b600080fd5b61014b60048036038101906101469190611fcf565b61039a565b6040516101589190612017565b60405180910390f35b61017b60048036038101906101769190612068565b610414565b005b61019760048036038101906101929190612095565b610473565b6040516101a59291906120e4565b60405180910390f35b6101c860048036038101906101c39190612143565b61052e565b6040516101d5919061217f565b60405180910390f35b6101f860048036038101906101f391906121f8565b61054e565b005b610214600480360381019061020f9190612271565b61056f565b6040516102219190612017565b60405180910390f35b610244600480360381019061023f91906121f8565b6108e9565b005b61024e61096c565b005b6102586109bd565b6040516102659190612017565b60405180910390f35b610288600480360381019061028391906122ec565b6109d4565b005b610292610af6565b60405161029f9190612319565b60405180910390f35b6102b0610b00565b005b6102ba610b51565b005b6102d660048036038101906102d191906121f8565b610dba565b6040516102e39190612017565b60405180910390f35b6102f4610e25565b604051610301919061217f565b60405180910390f35b610312610e2c565b60405161031f9190612017565b60405180910390f35b610342600480360381019061033d91906122ec565b610e4b565b005b61035e600480360381019061035991906121f8565b610feb565b005b61037a60048036038101906103759190612068565b61100c565b005b610384611077565b6040516103919190612319565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061040d575061040c826110a5565b5b9050919050565b61041c610e2c565b61045b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610452906123b7565b60405180910390fd5b620151808161046a9190612406565b60fc8190555050565b600080600060fe5460fd546104889190612406565b90506000670de0b6b3a7640000856104a09190612460565b866104ab9190612494565b90506000670de0b6b3a7640000600283856104c69190612406565b6104d091906124f7565b6104da91906124f7565b905060008160ff546104ec9190612494565b90506000670de0b6b3a764000089896105059190612460565b836105109190612406565b61051a91906124f7565b905081819650965050505050509250929050565b600060976000838152602001908152602001600020600101549050919050565b6105578261052e565b6105608161110f565b61056a8383611123565b505050565b6000610579611204565b600115156105856109bd565b15151415801561062b57506001151561010060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b187bd266040518163ffffffff1660e01b8152600401602060405180830381865afa158015610602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106269190612554565b151514155b61063457600080fd5b670de0b6b3a7640000861015610676576040517f8facb45e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61708060fc600082825461068a9190612494565b9250508190555060006106ac60fb548860fb546106a79190612494565b610473565b9150507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a082316106f3611253565b6040518263ffffffff1660e01b815260040161070f9190612590565b602060405180830381865afa15801561072c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075091906125c0565b811115610789576040517f2b2cce3f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006101016000610798611253565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050878160010160008282546107e89190612494565b9250508190555060018160000160006101000a81548160ff02191690831515021790555060fc544261081a9190612494565b816002018190555061087e61082d611253565b30848a8a8a8a7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661125b90979695949392919063ffffffff16565b6108d2610889611253565b30847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611428909392919063ffffffff16565b6001925050506108e06114b1565b95945050505050565b6108f1611253565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461095e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109559061265f565b60405180910390fd5b61096882826114bb565b5050565b610974610e2c565b6109b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109aa906123b7565b60405180910390fd5b6109bb61159d565b565b6000603360009054906101000a900460ff16905090565b600060019054906101000a900460ff16610a23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1a906126f1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a89576040517f5415139400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a91611600565b610a99611659565b610aa16116aa565b610ab2610aac611703565b82611123565b610ac3610abd61172b565b82611123565b610adb610ace61172b565b610ad6611703565b611753565b610af3610ae6611703565b610aee611703565b611753565b50565b600060fb54905090565b610b08610e2c565b610b47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3e906123b7565b60405180910390fd5b610b4f6117af565b565b6101016000610b5e611253565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610bdf576040517f23d1e2cb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b426101016000610bed611253565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201541115610c63576040517f23d1e2cb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006101016000610c72611253565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905060006101016000610cc1611253565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555060006101016000610d24611253565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550610db7610d70611253565b827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166118129092919063ffffffff16565b50565b60006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b6000610e46610e39611703565b610e41611253565b610dba565b905090565b60008060019054906101000a900460ff16159050808015610e7c5750600160008054906101000a900460ff1660ff16105b80610ea95750610e8b30611898565b158015610ea85750600160008054906101000a900460ff1660ff16145b5b610ee8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edf90612783565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610f25576001600060016101000a81548160ff0219169083151502179055505b600160fe81905550670de0b6b3a764000060ff819055508161010060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610f8e610f89611253565b6109d4565b8015610fe75760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610fde91906127e8565b60405180910390a15b5050565b610ff48261052e565b610ffd8161110f565b61100783836114bb565b505050565b611014610e2c565b611053576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104a906123b7565b60405180910390fd5b8060fe81905550670de0b6b3a76400008161106e9190612406565b60ff8190555050565b60008061109b60fb54670de0b6b3a764000060fb546110969190612494565b610473565b5090508091505090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6111208161111b611253565b6118bb565b50565b61112d8282610dba565b6112005760016097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506111a5611253565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600260c95403611249576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112409061284f565b60405180910390fd5b600260c981905550565b600033905090565b60008873ffffffffffffffffffffffffffffffffffffffff16637ecebe00896040518263ffffffff1660e01b81526004016112969190612590565b602060405180830381865afa1580156112b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d791906125c0565b90508873ffffffffffffffffffffffffffffffffffffffff1663d505accf898989898989896040518863ffffffff1660e01b815260040161131e979695949392919061287e565b600060405180830381600087803b15801561133857600080fd5b505af115801561134c573d6000803e3d6000fd5b5050505060008973ffffffffffffffffffffffffffffffffffffffff16637ecebe008a6040518263ffffffff1660e01b815260040161138b9190612590565b602060405180830381865afa1580156113a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cc91906125c0565b90506001826113db9190612494565b811461141c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114139061295f565b60405180910390fd5b50505050505050505050565b6114ab846323b872dd60e01b8585856040516024016114499392919061297f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611940565b50505050565b600160c981905550565b6114c58282610dba565b156115995760006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061153e611253565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6115a5611a07565b6000603360006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6115e9611253565b6040516115f69190612590565b60405180910390a1565b600060019054906101000a900460ff1661164f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611646906126f1565b60405180910390fd5b611657611a50565b565b600060019054906101000a900460ff166116a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169f906126f1565b60405180910390fd5b565b600060019054906101000a900460ff166116f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f0906126f1565b60405180910390fd5b611701611abc565b565b60007fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775905090565b60007f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a905090565b600061175e8361052e565b90508160976000858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b6117b7611b15565b6001603360006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117fb611253565b6040516118089190612590565b60405180910390a1565b6118938363a9059cbb60e01b84846040516024016118319291906129b6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611940565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6118c58282610dba565b61193c576118d281611b5f565b6118e08360001c6020611b8c565b6040516020016118f1929190612ae8565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119339190612b6c565b60405180910390fd5b5050565b60006119a2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611dc89092919063ffffffff16565b9050600081511115611a0257808060200190518101906119c29190612554565b611a01576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f890612c00565b60405180910390fd5b5b505050565b611a0f6109bd565b611a4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4590612c6c565b60405180910390fd5b565b600060019054906101000a900460ff16611a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a96906126f1565b60405180910390fd5b6000603360006101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff16611b0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b02906126f1565b60405180910390fd5b600160c981905550565b611b1d6109bd565b15611b5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5490612cd8565b60405180910390fd5b565b6060611b858273ffffffffffffffffffffffffffffffffffffffff16601460ff16611b8c565b9050919050565b606060006002836002611b9f9190612406565b611ba99190612494565b67ffffffffffffffff811115611bc257611bc1612cf8565b5b6040519080825280601f01601f191660200182016040528015611bf45781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611c2c57611c2b612d27565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611c9057611c8f612d27565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611cd09190612406565b611cda9190612494565b90505b6001811115611d7a577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611d1c57611d1b612d27565b5b1a60f81b828281518110611d3357611d32612d27565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611d7390612d56565b9050611cdd565b5060008414611dbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db590612dcb565b60405180910390fd5b8091505092915050565b6060611dd78484600085611de0565b90509392505050565b606082471015611e25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1c90612e5d565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611e4e9190612ec4565b60006040518083038185875af1925050503d8060008114611e8b576040519150601f19603f3d011682016040523d82523d6000602084013e611e90565b606091505b5091509150611ea187838387611ead565b92505050949350505050565b60608315611f0f576000835103611f0757611ec785611898565b611f06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611efd90612f27565b60405180910390fd5b5b829050611f1a565b611f198383611f22565b5b949350505050565b600082511115611f355781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f699190612b6c565b60405180910390fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611fac81611f77565b8114611fb757600080fd5b50565b600081359050611fc981611fa3565b92915050565b600060208284031215611fe557611fe4611f72565b5b6000611ff384828501611fba565b91505092915050565b60008115159050919050565b61201181611ffc565b82525050565b600060208201905061202c6000830184612008565b92915050565b6000819050919050565b61204581612032565b811461205057600080fd5b50565b6000813590506120628161203c565b92915050565b60006020828403121561207e5761207d611f72565b5b600061208c84828501612053565b91505092915050565b600080604083850312156120ac576120ab611f72565b5b60006120ba85828601612053565b92505060206120cb85828601612053565b9150509250929050565b6120de81612032565b82525050565b60006040820190506120f960008301856120d5565b61210660208301846120d5565b9392505050565b6000819050919050565b6121208161210d565b811461212b57600080fd5b50565b60008135905061213d81612117565b92915050565b60006020828403121561215957612158611f72565b5b60006121678482850161212e565b91505092915050565b6121798161210d565b82525050565b60006020820190506121946000830184612170565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121c58261219a565b9050919050565b6121d5816121ba565b81146121e057600080fd5b50565b6000813590506121f2816121cc565b92915050565b6000806040838503121561220f5761220e611f72565b5b600061221d8582860161212e565b925050602061222e858286016121e3565b9150509250929050565b600060ff82169050919050565b61224e81612238565b811461225957600080fd5b50565b60008135905061226b81612245565b92915050565b600080600080600060a0868803121561228d5761228c611f72565b5b600061229b88828901612053565b95505060206122ac88828901612053565b94505060406122bd8882890161225c565b93505060606122ce8882890161212e565b92505060806122df8882890161212e565b9150509295509295909350565b60006020828403121561230257612301611f72565b5b6000612310848285016121e3565b91505092915050565b600060208201905061232e60008301846120d5565b92915050565b600082825260208201905092915050565b7f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060008201527f7468697320616374696f6e2e0000000000000000000000000000000000000000602082015250565b60006123a1602c83612334565b91506123ac82612345565b604082019050919050565b600060208201905081810360008301526123d081612394565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061241182612032565b915061241c83612032565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612455576124546123d7565b5b828202905092915050565b600061246b82612032565b915061247683612032565b925082820390508181111561248e5761248d6123d7565b5b92915050565b600061249f82612032565b91506124aa83612032565b92508282019050808211156124c2576124c16123d7565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061250282612032565b915061250d83612032565b92508261251d5761251c6124c8565b5b828204905092915050565b61253181611ffc565b811461253c57600080fd5b50565b60008151905061254e81612528565b92915050565b60006020828403121561256a57612569611f72565b5b60006125788482850161253f565b91505092915050565b61258a816121ba565b82525050565b60006020820190506125a56000830184612581565b92915050565b6000815190506125ba8161203c565b92915050565b6000602082840312156125d6576125d5611f72565b5b60006125e4848285016125ab565b91505092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000612649602f83612334565b9150612654826125ed565b604082019050919050565b600060208201905081810360008301526126788161263c565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006126db602b83612334565b91506126e68261267f565b604082019050919050565b6000602082019050818103600083015261270a816126ce565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061276d602e83612334565b915061277882612711565b604082019050919050565b6000602082019050818103600083015261279c81612760565b9050919050565b6000819050919050565b6000819050919050565b60006127d26127cd6127c8846127a3565b6127ad565b612238565b9050919050565b6127e2816127b7565b82525050565b60006020820190506127fd60008301846127d9565b92915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612839601f83612334565b915061284482612803565b602082019050919050565b600060208201905081810360008301526128688161282c565b9050919050565b61287881612238565b82525050565b600060e082019050612893600083018a612581565b6128a06020830189612581565b6128ad60408301886120d5565b6128ba60608301876120d5565b6128c7608083018661286f565b6128d460a0830185612170565b6128e160c0830184612170565b98975050505050505050565b7f5361666545524332303a207065726d697420646964206e6f742073756363656560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6000612949602183612334565b9150612954826128ed565b604082019050919050565b600060208201905081810360008301526129788161293c565b9050919050565b60006060820190506129946000830186612581565b6129a16020830185612581565b6129ae60408301846120d5565b949350505050565b60006040820190506129cb6000830185612581565b6129d860208301846120d5565b9392505050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000612a206017836129df565b9150612a2b826129ea565b601782019050919050565b600081519050919050565b60005b83811015612a5f578082015181840152602081019050612a44565b60008484015250505050565b6000612a7682612a36565b612a8081856129df565b9350612a90818560208601612a41565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000612ad26011836129df565b9150612add82612a9c565b601182019050919050565b6000612af382612a13565b9150612aff8285612a6b565b9150612b0a82612ac5565b9150612b168284612a6b565b91508190509392505050565b6000601f19601f8301169050919050565b6000612b3e82612a36565b612b488185612334565b9350612b58818560208601612a41565b612b6181612b22565b840191505092915050565b60006020820190508181036000830152612b868184612b33565b905092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612bea602a83612334565b9150612bf582612b8e565b604082019050919050565b60006020820190508181036000830152612c1981612bdd565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000612c56601483612334565b9150612c6182612c20565b602082019050919050565b60006020820190508181036000830152612c8581612c49565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000612cc2601083612334565b9150612ccd82612c8c565b602082019050919050565b60006020820190508181036000830152612cf181612cb5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612d6182612032565b915060008203612d7457612d736123d7565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000612db5602083612334565b9150612dc082612d7f565b602082019050919050565b60006020820190508181036000830152612de481612da8565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612e47602683612334565b9150612e5282612deb565b604082019050919050565b60006020820190508181036000830152612e7681612e3a565b9050919050565b600081519050919050565b600081905092915050565b6000612e9e82612e7d565b612ea88185612e88565b9350612eb8818560208601612a41565b80840191505092915050565b6000612ed08284612e93565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612f11601d83612334565b9150612f1c82612edb565b602082019050919050565b60006020820190508181036000830152612f4081612f04565b905091905056fea264697066735822122094177042f27b4a540b9d649902ae28fd3676305b86731396d35037fbde98239664736f6c63430008100033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x74A7DCE5 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xB6DB75A0 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x30A JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x328 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x344 JUMPI DUP1 PUSH4 0xEAEF3999 EQ PUSH2 0x360 JUMPI DUP1 PUSH4 0xF751758B EQ PUSH2 0x37C JUMPI PUSH2 0x12C JUMP JUMPDEST DUP1 PUSH4 0x74A7DCE5 EQ PUSH2 0x28A JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0x869EAC93 EQ PUSH2 0x2B2 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x2BC JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x2EC JUMPI PUSH2 0x12C JUMP JUMPDEST DUP1 PUSH4 0x34D131BF GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x34D131BF EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x246 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x26E JUMPI PUSH2 0x12C JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0x51E6CB1 EQ PUSH2 0x161 JUMPI DUP1 PUSH4 0x6FB46BA EQ PUSH2 0x17D JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x1AE JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1DE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x146 SWAP2 SWAP1 PUSH2 0x1FCF JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x158 SWAP2 SWAP1 PUSH2 0x2017 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x176 SWAP2 SWAP1 PUSH2 0x2068 JUMP JUMPDEST PUSH2 0x414 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x197 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x192 SWAP2 SWAP1 PUSH2 0x2095 JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A5 SWAP3 SWAP2 SWAP1 PUSH2 0x20E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C3 SWAP2 SWAP1 PUSH2 0x2143 JUMP JUMPDEST PUSH2 0x52E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D5 SWAP2 SWAP1 PUSH2 0x217F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0x21F8 JUMP JUMPDEST PUSH2 0x54E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x214 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20F SWAP2 SWAP1 PUSH2 0x2271 JUMP JUMPDEST PUSH2 0x56F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x221 SWAP2 SWAP1 PUSH2 0x2017 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x244 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23F SWAP2 SWAP1 PUSH2 0x21F8 JUMP JUMPDEST PUSH2 0x8E9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x24E PUSH2 0x96C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x258 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x265 SWAP2 SWAP1 PUSH2 0x2017 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x288 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x22EC JUMP JUMPDEST PUSH2 0x9D4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x292 PUSH2 0xAF6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29F SWAP2 SWAP1 PUSH2 0x2319 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B0 PUSH2 0xB00 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2BA PUSH2 0xB51 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D1 SWAP2 SWAP1 PUSH2 0x21F8 JUMP JUMPDEST PUSH2 0xDBA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E3 SWAP2 SWAP1 PUSH2 0x2017 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2F4 PUSH2 0xE25 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x301 SWAP2 SWAP1 PUSH2 0x217F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x312 PUSH2 0xE2C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31F SWAP2 SWAP1 PUSH2 0x2017 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x342 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x33D SWAP2 SWAP1 PUSH2 0x22EC JUMP JUMPDEST PUSH2 0xE4B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x35E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x359 SWAP2 SWAP1 PUSH2 0x21F8 JUMP JUMPDEST PUSH2 0xFEB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x37A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x375 SWAP2 SWAP1 PUSH2 0x2068 JUMP JUMPDEST PUSH2 0x100C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x384 PUSH2 0x1077 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x391 SWAP2 SWAP1 PUSH2 0x2319 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x40D JUMPI POP PUSH2 0x40C DUP3 PUSH2 0x10A5 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x41C PUSH2 0xE2C JUMP JUMPDEST PUSH2 0x45B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x452 SWAP1 PUSH2 0x23B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x15180 DUP2 PUSH2 0x46A SWAP2 SWAP1 PUSH2 0x2406 JUMP JUMPDEST PUSH1 0xFC DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xFE SLOAD PUSH1 0xFD SLOAD PUSH2 0x488 SWAP2 SWAP1 PUSH2 0x2406 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP6 PUSH2 0x4A0 SWAP2 SWAP1 PUSH2 0x2460 JUMP JUMPDEST DUP7 PUSH2 0x4AB SWAP2 SWAP1 PUSH2 0x2494 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 PUSH1 0x2 DUP4 DUP6 PUSH2 0x4C6 SWAP2 SWAP1 PUSH2 0x2406 JUMP JUMPDEST PUSH2 0x4D0 SWAP2 SWAP1 PUSH2 0x24F7 JUMP JUMPDEST PUSH2 0x4DA SWAP2 SWAP1 PUSH2 0x24F7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0xFF SLOAD PUSH2 0x4EC SWAP2 SWAP1 PUSH2 0x2494 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP10 DUP10 PUSH2 0x505 SWAP2 SWAP1 PUSH2 0x2460 JUMP JUMPDEST DUP4 PUSH2 0x510 SWAP2 SWAP1 PUSH2 0x2406 JUMP JUMPDEST PUSH2 0x51A SWAP2 SWAP1 PUSH2 0x24F7 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SWAP7 POP SWAP7 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x557 DUP3 PUSH2 0x52E JUMP JUMPDEST PUSH2 0x560 DUP2 PUSH2 0x110F JUMP JUMPDEST PUSH2 0x56A DUP4 DUP4 PUSH2 0x1123 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x579 PUSH2 0x1204 JUMP JUMPDEST PUSH1 0x1 ISZERO ISZERO PUSH2 0x585 PUSH2 0x9BD JUMP JUMPDEST ISZERO ISZERO EQ ISZERO DUP1 ISZERO PUSH2 0x62B JUMPI POP PUSH1 0x1 ISZERO ISZERO PUSH2 0x100 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB187BD26 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x602 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x626 SWAP2 SWAP1 PUSH2 0x2554 JUMP JUMPDEST ISZERO ISZERO EQ ISZERO JUMPDEST PUSH2 0x634 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP7 LT ISZERO PUSH2 0x676 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8FACB45E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7080 PUSH1 0xFC PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x68A SWAP2 SWAP1 PUSH2 0x2494 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x6AC PUSH1 0xFB SLOAD DUP9 PUSH1 0xFB SLOAD PUSH2 0x6A7 SWAP2 SWAP1 PUSH2 0x2494 JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST SWAP2 POP POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 PUSH2 0x6F3 PUSH2 0x1253 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x70F SWAP2 SWAP1 PUSH2 0x2590 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x72C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x750 SWAP2 SWAP1 PUSH2 0x25C0 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x789 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2B2CCE3F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 PUSH2 0x798 PUSH2 0x1253 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP8 DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x7E8 SWAP2 SWAP1 PUSH2 0x2494 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xFC SLOAD TIMESTAMP PUSH2 0x81A SWAP2 SWAP1 PUSH2 0x2494 JUMP JUMPDEST DUP2 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x87E PUSH2 0x82D PUSH2 0x1253 JUMP JUMPDEST ADDRESS DUP5 DUP11 DUP11 DUP11 DUP11 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x125B SWAP1 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x8D2 PUSH2 0x889 PUSH2 0x1253 JUMP JUMPDEST ADDRESS DUP5 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1428 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP PUSH2 0x8E0 PUSH2 0x14B1 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x8F1 PUSH2 0x1253 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x95E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x955 SWAP1 PUSH2 0x265F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x968 DUP3 DUP3 PUSH2 0x14BB JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x974 PUSH2 0xE2C JUMP JUMPDEST PUSH2 0x9B3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9AA SWAP1 PUSH2 0x23B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9BB PUSH2 0x159D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xA23 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA1A SWAP1 PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA89 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA91 PUSH2 0x1600 JUMP JUMPDEST PUSH2 0xA99 PUSH2 0x1659 JUMP JUMPDEST PUSH2 0xAA1 PUSH2 0x16AA JUMP JUMPDEST PUSH2 0xAB2 PUSH2 0xAAC PUSH2 0x1703 JUMP JUMPDEST DUP3 PUSH2 0x1123 JUMP JUMPDEST PUSH2 0xAC3 PUSH2 0xABD PUSH2 0x172B JUMP JUMPDEST DUP3 PUSH2 0x1123 JUMP JUMPDEST PUSH2 0xADB PUSH2 0xACE PUSH2 0x172B JUMP JUMPDEST PUSH2 0xAD6 PUSH2 0x1703 JUMP JUMPDEST PUSH2 0x1753 JUMP JUMPDEST PUSH2 0xAF3 PUSH2 0xAE6 PUSH2 0x1703 JUMP JUMPDEST PUSH2 0xAEE PUSH2 0x1703 JUMP JUMPDEST PUSH2 0x1753 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFB SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xB08 PUSH2 0xE2C JUMP JUMPDEST PUSH2 0xB47 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB3E SWAP1 PUSH2 0x23B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB4F PUSH2 0x17AF JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x101 PUSH1 0x0 PUSH2 0xB5E PUSH2 0x1253 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xBDF JUMPI PUSH1 0x40 MLOAD PUSH32 0x23D1E2CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP PUSH2 0x101 PUSH1 0x0 PUSH2 0xBED PUSH2 0x1253 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD GT ISZERO PUSH2 0xC63 JUMPI PUSH1 0x40 MLOAD PUSH32 0x23D1E2CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 PUSH2 0xC72 PUSH2 0x1253 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 PUSH2 0xCC1 PUSH2 0x1253 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 PUSH2 0xD24 PUSH2 0x1253 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH2 0xDB7 PUSH2 0xD70 PUSH2 0x1253 JUMP JUMPDEST DUP3 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1812 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE46 PUSH2 0xE39 PUSH2 0x1703 JUMP JUMPDEST PUSH2 0xE41 PUSH2 0x1253 JUMP JUMPDEST PUSH2 0xDBA JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0xE7C JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0xEA9 JUMPI POP PUSH2 0xE8B ADDRESS PUSH2 0x1898 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0xEA8 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0xEE8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEDF SWAP1 PUSH2 0x2783 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0xF25 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0xFE DUP2 SWAP1 SSTORE POP PUSH8 0xDE0B6B3A7640000 PUSH1 0xFF DUP2 SWAP1 SSTORE POP DUP2 PUSH2 0x100 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0xF8E PUSH2 0xF89 PUSH2 0x1253 JUMP JUMPDEST PUSH2 0x9D4 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xFE7 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0xFDE SWAP2 SWAP1 PUSH2 0x27E8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xFF4 DUP3 PUSH2 0x52E JUMP JUMPDEST PUSH2 0xFFD DUP2 PUSH2 0x110F JUMP JUMPDEST PUSH2 0x1007 DUP4 DUP4 PUSH2 0x14BB JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1014 PUSH2 0xE2C JUMP JUMPDEST PUSH2 0x1053 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104A SWAP1 PUSH2 0x23B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xFE DUP2 SWAP1 SSTORE POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x106E SWAP2 SWAP1 PUSH2 0x2406 JUMP JUMPDEST PUSH1 0xFF DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x109B PUSH1 0xFB SLOAD PUSH8 0xDE0B6B3A7640000 PUSH1 0xFB SLOAD PUSH2 0x1096 SWAP2 SWAP1 PUSH2 0x2494 JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST POP SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1120 DUP2 PUSH2 0x111B PUSH2 0x1253 JUMP JUMPDEST PUSH2 0x18BB JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x112D DUP3 DUP3 PUSH2 0xDBA JUMP JUMPDEST PUSH2 0x1200 JUMPI PUSH1 0x1 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x11A5 PUSH2 0x1253 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0xC9 SLOAD SUB PUSH2 0x1249 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1240 SWAP1 PUSH2 0x284F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7ECEBE00 DUP10 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1296 SWAP2 SWAP1 PUSH2 0x2590 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12B3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12D7 SWAP2 SWAP1 PUSH2 0x25C0 JUMP JUMPDEST SWAP1 POP DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD505ACCF DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x131E SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x287E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1338 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x134C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7ECEBE00 DUP11 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x138B SWAP2 SWAP1 PUSH2 0x2590 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x13A8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13CC SWAP2 SWAP1 PUSH2 0x25C0 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP3 PUSH2 0x13DB SWAP2 SWAP1 PUSH2 0x2494 JUMP JUMPDEST DUP2 EQ PUSH2 0x141C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1413 SWAP1 PUSH2 0x295F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x14AB DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1449 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x297F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1940 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x14C5 DUP3 DUP3 PUSH2 0xDBA JUMP JUMPDEST ISZERO PUSH2 0x1599 JUMPI PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x153E PUSH2 0x1253 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x15A5 PUSH2 0x1A07 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x15E9 PUSH2 0x1253 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15F6 SWAP2 SWAP1 PUSH2 0x2590 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x164F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1646 SWAP1 PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1657 PUSH2 0x1A50 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x16A8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x169F SWAP1 PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x16F9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16F0 SWAP1 PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1701 PUSH2 0x1ABC JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x175E DUP4 PUSH2 0x52E JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x97 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x17B7 PUSH2 0x1B15 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x17FB PUSH2 0x1253 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1808 SWAP2 SWAP1 PUSH2 0x2590 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x1893 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1831 SWAP3 SWAP2 SWAP1 PUSH2 0x29B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1940 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18C5 DUP3 DUP3 PUSH2 0xDBA JUMP JUMPDEST PUSH2 0x193C JUMPI PUSH2 0x18D2 DUP2 PUSH2 0x1B5F JUMP JUMPDEST PUSH2 0x18E0 DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0x1B8C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x18F1 SWAP3 SWAP2 SWAP1 PUSH2 0x2AE8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1933 SWAP2 SWAP1 PUSH2 0x2B6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19A2 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1DC8 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x1A02 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x19C2 SWAP2 SWAP1 PUSH2 0x2554 JUMP JUMPDEST PUSH2 0x1A01 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19F8 SWAP1 PUSH2 0x2C00 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1A0F PUSH2 0x9BD JUMP JUMPDEST PUSH2 0x1A4E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A45 SWAP1 PUSH2 0x2C6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1A9F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A96 SWAP1 PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1B0B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B02 SWAP1 PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x1B1D PUSH2 0x9BD JUMP JUMPDEST ISZERO PUSH2 0x1B5D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B54 SWAP1 PUSH2 0x2CD8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1B85 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0x1B8C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0x1B9F SWAP2 SWAP1 PUSH2 0x2406 JUMP JUMPDEST PUSH2 0x1BA9 SWAP2 SWAP1 PUSH2 0x2494 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1BC2 JUMPI PUSH2 0x1BC1 PUSH2 0x2CF8 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1BF4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1C2C JUMPI PUSH2 0x1C2B PUSH2 0x2D27 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1C90 JUMPI PUSH2 0x1C8F PUSH2 0x2D27 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0x1CD0 SWAP2 SWAP1 PUSH2 0x2406 JUMP JUMPDEST PUSH2 0x1CDA SWAP2 SWAP1 PUSH2 0x2494 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1D7A JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0x1D1C JUMPI PUSH2 0x1D1B PUSH2 0x2D27 JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1D33 JUMPI PUSH2 0x1D32 PUSH2 0x2D27 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0x1D73 SWAP1 PUSH2 0x2D56 JUMP JUMPDEST SWAP1 POP PUSH2 0x1CDD JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0x1DBE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DB5 SWAP1 PUSH2 0x2DCB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1DD7 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1DE0 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1E25 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E1C SWAP1 PUSH2 0x2E5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1E4E SWAP2 SWAP1 PUSH2 0x2EC4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1E8B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1E90 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1EA1 DUP8 DUP4 DUP4 DUP8 PUSH2 0x1EAD JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1F0F JUMPI PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x1F07 JUMPI PUSH2 0x1EC7 DUP6 PUSH2 0x1898 JUMP JUMPDEST PUSH2 0x1F06 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1EFD SWAP1 PUSH2 0x2F27 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x1F1A JUMP JUMPDEST PUSH2 0x1F19 DUP4 DUP4 PUSH2 0x1F22 JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x1F35 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F69 SWAP2 SWAP1 PUSH2 0x2B6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1FAC DUP2 PUSH2 0x1F77 JUMP JUMPDEST DUP2 EQ PUSH2 0x1FB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1FC9 DUP2 PUSH2 0x1FA3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1FE5 JUMPI PUSH2 0x1FE4 PUSH2 0x1F72 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1FF3 DUP5 DUP3 DUP6 ADD PUSH2 0x1FBA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2011 DUP2 PUSH2 0x1FFC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x202C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2008 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2045 DUP2 PUSH2 0x2032 JUMP JUMPDEST DUP2 EQ PUSH2 0x2050 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2062 DUP2 PUSH2 0x203C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x207E JUMPI PUSH2 0x207D PUSH2 0x1F72 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x208C DUP5 DUP3 DUP6 ADD PUSH2 0x2053 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x20AC JUMPI PUSH2 0x20AB PUSH2 0x1F72 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x20BA DUP6 DUP3 DUP7 ADD PUSH2 0x2053 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x20CB DUP6 DUP3 DUP7 ADD PUSH2 0x2053 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x20DE DUP2 PUSH2 0x2032 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x20F9 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x20D5 JUMP JUMPDEST PUSH2 0x2106 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x20D5 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2120 DUP2 PUSH2 0x210D JUMP JUMPDEST DUP2 EQ PUSH2 0x212B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x213D DUP2 PUSH2 0x2117 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2159 JUMPI PUSH2 0x2158 PUSH2 0x1F72 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2167 DUP5 DUP3 DUP6 ADD PUSH2 0x212E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2179 DUP2 PUSH2 0x210D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2194 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2170 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21C5 DUP3 PUSH2 0x219A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x21D5 DUP2 PUSH2 0x21BA JUMP JUMPDEST DUP2 EQ PUSH2 0x21E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x21F2 DUP2 PUSH2 0x21CC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x220F JUMPI PUSH2 0x220E PUSH2 0x1F72 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x221D DUP6 DUP3 DUP7 ADD PUSH2 0x212E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x222E DUP6 DUP3 DUP7 ADD PUSH2 0x21E3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x224E DUP2 PUSH2 0x2238 JUMP JUMPDEST DUP2 EQ PUSH2 0x2259 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x226B DUP2 PUSH2 0x2245 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x228D JUMPI PUSH2 0x228C PUSH2 0x1F72 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x229B DUP9 DUP3 DUP10 ADD PUSH2 0x2053 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x22AC DUP9 DUP3 DUP10 ADD PUSH2 0x2053 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x22BD DUP9 DUP3 DUP10 ADD PUSH2 0x225C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x22CE DUP9 DUP3 DUP10 ADD PUSH2 0x212E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x22DF DUP9 DUP3 DUP10 ADD PUSH2 0x212E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2302 JUMPI PUSH2 0x2301 PUSH2 0x1F72 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2310 DUP5 DUP3 DUP6 ADD PUSH2 0x21E3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x232E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x20D5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D75737420686176652061646D696E20726F6C6520746F20706572666F726D20 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7468697320616374696F6E2E0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23A1 PUSH1 0x2C DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP2 POP PUSH2 0x23AC DUP3 PUSH2 0x2345 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x23D0 DUP2 PUSH2 0x2394 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2411 DUP3 PUSH2 0x2032 JUMP JUMPDEST SWAP2 POP PUSH2 0x241C DUP4 PUSH2 0x2032 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2455 JUMPI PUSH2 0x2454 PUSH2 0x23D7 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x246B DUP3 PUSH2 0x2032 JUMP JUMPDEST SWAP2 POP PUSH2 0x2476 DUP4 PUSH2 0x2032 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x248E JUMPI PUSH2 0x248D PUSH2 0x23D7 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x249F DUP3 PUSH2 0x2032 JUMP JUMPDEST SWAP2 POP PUSH2 0x24AA DUP4 PUSH2 0x2032 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x24C2 JUMPI PUSH2 0x24C1 PUSH2 0x23D7 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2502 DUP3 PUSH2 0x2032 JUMP JUMPDEST SWAP2 POP PUSH2 0x250D DUP4 PUSH2 0x2032 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x251D JUMPI PUSH2 0x251C PUSH2 0x24C8 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2531 DUP2 PUSH2 0x1FFC JUMP JUMPDEST DUP2 EQ PUSH2 0x253C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x254E DUP2 PUSH2 0x2528 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x256A JUMPI PUSH2 0x2569 PUSH2 0x1F72 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2578 DUP5 DUP3 DUP6 ADD PUSH2 0x253F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x258A DUP2 PUSH2 0x21BA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x25A5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2581 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x25BA DUP2 PUSH2 0x203C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25D6 JUMPI PUSH2 0x25D5 PUSH2 0x1F72 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x25E4 DUP5 DUP3 DUP6 ADD PUSH2 0x25AB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2649 PUSH1 0x2F DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP2 POP PUSH2 0x2654 DUP3 PUSH2 0x25ED JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2678 DUP2 PUSH2 0x263C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26DB PUSH1 0x2B DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP2 POP PUSH2 0x26E6 DUP3 PUSH2 0x267F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x270A DUP2 PUSH2 0x26CE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x276D PUSH1 0x2E DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP2 POP PUSH2 0x2778 DUP3 PUSH2 0x2711 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x279C DUP2 PUSH2 0x2760 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27D2 PUSH2 0x27CD PUSH2 0x27C8 DUP5 PUSH2 0x27A3 JUMP JUMPDEST PUSH2 0x27AD JUMP JUMPDEST PUSH2 0x2238 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x27E2 DUP2 PUSH2 0x27B7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x27FD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x27D9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2839 PUSH1 0x1F DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP2 POP PUSH2 0x2844 DUP3 PUSH2 0x2803 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2868 DUP2 PUSH2 0x282C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2878 DUP2 PUSH2 0x2238 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH2 0x2893 PUSH1 0x0 DUP4 ADD DUP11 PUSH2 0x2581 JUMP JUMPDEST PUSH2 0x28A0 PUSH1 0x20 DUP4 ADD DUP10 PUSH2 0x2581 JUMP JUMPDEST PUSH2 0x28AD PUSH1 0x40 DUP4 ADD DUP9 PUSH2 0x20D5 JUMP JUMPDEST PUSH2 0x28BA PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x20D5 JUMP JUMPDEST PUSH2 0x28C7 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x286F JUMP JUMPDEST PUSH2 0x28D4 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x2170 JUMP JUMPDEST PUSH2 0x28E1 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x2170 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A207065726D697420646964206E6F7420737563636565 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2949 PUSH1 0x21 DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP2 POP PUSH2 0x2954 DUP3 PUSH2 0x28ED JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2978 DUP2 PUSH2 0x293C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2994 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2581 JUMP JUMPDEST PUSH2 0x29A1 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2581 JUMP JUMPDEST PUSH2 0x29AE PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x20D5 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x29CB PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2581 JUMP JUMPDEST PUSH2 0x29D8 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x20D5 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A20 PUSH1 0x17 DUP4 PUSH2 0x29DF JUMP JUMPDEST SWAP2 POP PUSH2 0x2A2B DUP3 PUSH2 0x29EA JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2A5F JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2A44 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A76 DUP3 PUSH2 0x2A36 JUMP JUMPDEST PUSH2 0x2A80 DUP2 DUP6 PUSH2 0x29DF JUMP JUMPDEST SWAP4 POP PUSH2 0x2A90 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2A41 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AD2 PUSH1 0x11 DUP4 PUSH2 0x29DF JUMP JUMPDEST SWAP2 POP PUSH2 0x2ADD DUP3 PUSH2 0x2A9C JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AF3 DUP3 PUSH2 0x2A13 JUMP JUMPDEST SWAP2 POP PUSH2 0x2AFF DUP3 DUP6 PUSH2 0x2A6B JUMP JUMPDEST SWAP2 POP PUSH2 0x2B0A DUP3 PUSH2 0x2AC5 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B16 DUP3 DUP5 PUSH2 0x2A6B JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B3E DUP3 PUSH2 0x2A36 JUMP JUMPDEST PUSH2 0x2B48 DUP2 DUP6 PUSH2 0x2334 JUMP JUMPDEST SWAP4 POP PUSH2 0x2B58 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2A41 JUMP JUMPDEST PUSH2 0x2B61 DUP2 PUSH2 0x2B22 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B86 DUP2 DUP5 PUSH2 0x2B33 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BEA PUSH1 0x2A DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP2 POP PUSH2 0x2BF5 DUP3 PUSH2 0x2B8E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C19 DUP2 PUSH2 0x2BDD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C56 PUSH1 0x14 DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP2 POP PUSH2 0x2C61 DUP3 PUSH2 0x2C20 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C85 DUP2 PUSH2 0x2C49 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CC2 PUSH1 0x10 DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP2 POP PUSH2 0x2CCD DUP3 PUSH2 0x2C8C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CF1 DUP2 PUSH2 0x2CB5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2D61 DUP3 PUSH2 0x2032 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x2D74 JUMPI PUSH2 0x2D73 PUSH2 0x23D7 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DB5 PUSH1 0x20 DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP2 POP PUSH2 0x2DC0 DUP3 PUSH2 0x2D7F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2DE4 DUP2 PUSH2 0x2DA8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E47 PUSH1 0x26 DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP2 POP PUSH2 0x2E52 DUP3 PUSH2 0x2DEB JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E76 DUP2 PUSH2 0x2E3A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E9E DUP3 PUSH2 0x2E7D JUMP JUMPDEST PUSH2 0x2EA8 DUP2 DUP6 PUSH2 0x2E88 JUMP JUMPDEST SWAP4 POP PUSH2 0x2EB8 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2A41 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2ED0 DUP3 DUP5 PUSH2 0x2E93 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F11 PUSH1 0x1D DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP2 POP PUSH2 0x2F1C DUP3 PUSH2 0x2EDB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F40 DUP2 PUSH2 0x2F04 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP5 OR PUSH17 0x42F27B4A540B9D649902AE28FD3676305B DUP7 PUSH20 0x1396D35037FBDE98239664736F6C634300081000 CALLER ","sourceMap":"2023:5319:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2903:213:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4312:139:17;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5761:580;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;4708:129:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5133:145;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4676:1079:17;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6242:214:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4524:65:17;;;:::i;:::-;;1858:84:4;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;734:549:15;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;7245:95:17;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4457:61;;;:::i;:::-;;6392:563;;;:::i;:::-;;3203:145:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2324:49;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1289:117:15;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3854:287:17;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5558:147:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4147:159:17;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6961:232;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2903:213:0;2988:4;3026:43;3011:58;;;:11;:58;;;;:98;;;;3073:36;3097:11;3073:23;:36::i;:::-;3011:98;3004:105;;2903:213;;;:::o;4312:139:17:-;652:9:15;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;4438:6:17::1;4424:11;:20;;;;:::i;:::-;4401;:43;;;;4312:139:::0;:::o;5761:580::-;5882:7;5891;5910:23;5951:14;;5936:12;;:29;;;;:::i;:::-;5910:55;;5975:23;6039:4;6022:14;:21;;;;:::i;:::-;6002:16;:42;;;;:::i;:::-;5975:70;;6055:19;6121:4;6116:1;6097:15;6079;:33;;;;:::i;:::-;6078:39;;;;:::i;:::-;6077:48;;;;:::i;:::-;6055:70;;6135:22;6180:11;6160:17;;:31;;;;:::i;:::-;6135:56;;6201:22;6281:4;6262:16;6245:14;:33;;;;:::i;:::-;6227:14;:52;;;;:::i;:::-;6226:59;;;;:::i;:::-;6201:84;;6303:14;6319;6295:39;;;;;;;;;5761:580;;;;;:::o;4708:129:0:-;4782:7;4808:6;:12;4815:4;4808:12;;;;;;;;;;;:22;;;4801:29;;4708:129;;;:::o;5133:145::-;5216:18;5229:4;5216:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5246:25:::1;5257:4;5263:7;5246:10;:25::i;:::-;5133:145:::0;;;:::o;4676:1079:17:-;4848:4;2505:21:5;:19;:21::i;:::-;3153:4:17::1;3141:16;;:8;:6;:8::i;:::-;:16;;;;3140:77;;;;;3212:4;3176:40;;:21;;;;;;;;;;;:30;;;:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:40;;;;3140:77;3119:99;;;::::0;::::1;;4876:4:::2;4868:5;:12;4864:79;;;4903:29;;;;;;;;;;;;;;4864:79;2411:7;4952:20;;:52;;;;;;;:::i;:::-;;;;;;;;5045:22;5071:69;5103:13;;5134:5;5118:13;;:21;;;;:::i;:::-;5071:18;:69::i;:::-;5014:126;;;5171:9;:19;;;5191:12;:10;:12::i;:::-;5171:33;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5154:14;:50;5150:127;;;5227:39;;;;;;;;;;;;;;5150:127;5286:45;5334:18;:32;5353:12;:10;:12::i;:::-;5334:32;;;;;;;;;;;;;;;5286:80;;5407:5;5376:20;:27;;;:36;;;;;;;:::i;:::-;;;;;;;;5455:4;5422:20;:30;;;:37;;;;;;;;;;;;;;;;;;5526:20;;5508:15;:38;;;;:::i;:::-;5469:20;:36;;:77;;;;5556:90;5583:12;:10;:12::i;:::-;5605:4;5612:14;5628:8;5638:1;5641;5644;5556:15;:26;;;;:90;;;;;;;;;;:::i;:::-;5656:71;5683:12;:10;:12::i;:::-;5705:4;5712:14;5656:9;:26;;;;:71;;;;;;:::i;:::-;5744:4;5737:11;;;;2547:20:5::0;:18;:20::i;:::-;4676:1079:17;;;;;;;:::o;6242:214:0:-;6348:12;:10;:12::i;:::-;6337:23;;:7;:23;;;6329:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;6423:26;6435:4;6441:7;6423:11;:26::i;:::-;6242:214;;:::o;4524:65:17:-;652:9:15;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;4572:10:17::1;:8;:10::i;:::-;4524:65::o:0;1858:84:4:-;1905:4;1928:7;;;;;;;;;;;1921:14;;1858:84;:::o;734:549:15:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;845:1:15::1;828:19;;:5;:19;;::::0;825:99:::1;;870:43;;;;;;;;;;;;;;825:99;933:17;:15;:17::i;:::-;960:22;:20;:22::i;:::-;992:24;:22;:24::i;:::-;1027:43;1038:24;:22;:24::i;:::-;1064:5;1027:10;:43::i;:::-;1080:44;1091:25;:23;:25::i;:::-;1118:5;1080:10;:44::i;:::-;1135:66;1149:25;:23;:25::i;:::-;1176:24;:22;:24::i;:::-;1135:13;:66::i;:::-;1211:65;1225:24;:22;:24::i;:::-;1251;:22;:24::i;:::-;1211:13;:65::i;:::-;734:549:::0;:::o;7245:95:17:-;7294:7;7320:13;;7313:20;;7245:95;:::o;4457:61::-;652:9:15;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;4503:8:17::1;:6;:8::i;:::-;4457:61::o:0;6392:563::-;6447:18;:32;6466:12;:10;:12::i;:::-;6447:32;;;;;;;;;;;;;;;:42;;;;;;;;;;;;6442:114;;6512:33;;;;;;;;;;;;;;6442:114;6620:15;6569:18;:32;6588:12;:10;:12::i;:::-;6569:32;;;;;;;;;;;;;;;:48;;;:66;6565:138;;;6659:33;;;;;;;;;;;;;;6565:138;6712:20;6735:18;:32;6754:12;:10;:12::i;:::-;6735:32;;;;;;;;;;;;;;;:39;;;6712:62;;6829:5;6784:18;:32;6803:12;:10;:12::i;:::-;6784:32;;;;;;;;;;;;;;;:42;;;:50;;;;;;;;;;;;;;;;;;6886:1;6844:18;:32;6863:12;:10;:12::i;:::-;6844:32;;;;;;;;;;;;;;;:39;;:43;;;;6897:51;6921:12;:10;:12::i;:::-;6935;6897:10;:23;;;;:51;;;;;:::i;:::-;6432:523;6392:563::o;3203:145:0:-;3289:4;3312:6;:12;3319:4;3312:12;;;;;;;;;;;:20;;:29;3333:7;3312:29;;;;;;;;;;;;;;;;;;;;;;;;;3305:36;;3203:145;;;;:::o;2324:49::-;2369:4;2324:49;;;:::o;1289:117:15:-;1329:4;1352:47;1360:24;:22;:24::i;:::-;1386:12;:10;:12::i;:::-;1352:7;:47::i;:::-;1345:54;;1289:117;:::o;3854:287:17:-;3268:19:3;3291:13;;;;;;;;;;;3290:14;3268:36;;3336:14;:34;;;;;3369:1;3354:12;;;;;;;;;;:16;;;3336:34;3335:108;;;;3377:44;3415:4;3377:29;:44::i;:::-;3376:45;:66;;;;;3441:1;3425:12;;;;;;;;;;:17;;;3376:66;3335:108;3314:201;;;;;;;;;;;;:::i;:::-;;;;;;;;;3540:1;3525:12;;:16;;;;;;;;;;;;;;;;;;3555:14;3551:65;;;3601:4;3585:13;;:20;;;;;;;;;;;;;;;;;;3551:65;3967:1:17::1;3950:14;:18;;;;3998:4;3978:17;:24;;;;4058:21;4012;;:68;;;;;;;;;;;;;;;;;;4090:44;4121:12;:10;:12::i;:::-;4090:30;:44::i;:::-;3640:14:3::0;3636:99;;;3686:5;3670:13;;:21;;;;;;;;;;;;;;;;;;3710:14;3722:1;3710:14;;;;;;:::i;:::-;;;;;;;;3636:99;3258:483;3854:287:17;:::o;5558:147:0:-;5642:18;5655:4;5642:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5672:26:::1;5684:4;5690:7;5672:11;:26::i;:::-;5558:147:::0;;;:::o;4147:159:17:-;652:9:15;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;4242:10:17::1;4225:14;:27;;;;4295:4;4282:10;:17;;;;:::i;:::-;4262;:37;;;;4147:159:::0;:::o;6961:232::-;7013:7;7033:22;7087:68;7119:13;;7150:4;7134:13;;:20;;;;:::i;:::-;7087:18;:68::i;:::-;7032:123;;;7172:14;7165:21;;;6961:232;:::o;1060:166:12:-;1145:4;1183:36;1168:51;;;:11;:51;;;;1161:58;;1060:166;;;:::o;3642:103:0:-;3708:30;3719:4;3725:12;:10;:12::i;:::-;3708:10;:30::i;:::-;3642:103;:::o;7791:233::-;7874:22;7882:4;7888:7;7874;:22::i;:::-;7869:149;;7944:4;7912:6;:12;7919:4;7912:12;;;;;;;;;;;:20;;:29;7933:7;7912:29;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;;;;;;7994:12;:10;:12::i;:::-;7967:40;;7985:7;7967:40;;7979:4;7967:40;;;;;;;;;;7869:149;7791:233;;:::o;2580:287:5:-;1830:1;2712:7;;:19;2704:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1830:1;2842:7;:18;;;;2580:287::o;850:96:10:-;903:7;929:10;922:17;;850:96;:::o;3002:483:8:-;3238:19;3260:5;:12;;;3273:5;3260:19;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3238:41;;3289:5;:12;;;3302:5;3309:7;3318:5;3325:8;3335:1;3338;3341;3289:54;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3353:18;3374:5;:12;;;3387:5;3374:19;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3353:40;;3439:1;3425:11;:15;;;;:::i;:::-;3411:10;:29;3403:75;;;;;;;;;;;;:::i;:::-;;;;;;;;;3228:257;;3002:483;;;;;;;;:::o;1040:252::-;1189:96;1209:5;1239:27;;;1268:4;1274:2;1278:5;1216:68;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1189:19;:96::i;:::-;1040:252;;;;:::o;2873:209:5:-;1787:1;3053:7;:22;;;;2873:209::o;8195:234:0:-;8278:22;8286:4;8292:7;8278;:22::i;:::-;8274:149;;;8348:5;8316:6;:12;8323:4;8316:12;;;;;;;;;;;:20;;:29;8337:7;8316:29;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;8399:12;:10;:12::i;:::-;8372:40;;8390:7;8372:40;;8384:4;8372:40;;;;;;;;;;8274:149;8195:234;;:::o;2676:117:4:-;1729:16;:14;:16::i;:::-;2744:5:::1;2734:7;;:15;;;;;;;;;;;;;;;;;;2764:22;2773:12;:10;:12::i;:::-;2764:22;;;;;;:::i;:::-;;;;;;;;2676:117::o:0;1063:97::-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1126:27:4::1;:25;:27::i;:::-;1063:97::o:0;2025:65:0:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2025:65:0:o;1868:111:5:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1938:34:5::1;:32;:34::i;:::-;1868:111::o:0;222:90:16:-;269:7;124:23;288:17;;222:90;:::o;318:92::-;366:7;191:24;385:18;;318:92;:::o;7376:247:0:-;7459:25;7487:18;7500:4;7487:12;:18::i;:::-;7459:46;;7540:9;7515:6;:12;7522:4;7515:12;;;;;;;;;;;:22;;:34;;;;7606:9;7587:17;7581:4;7564:52;;;;;;;;;;7449:174;7376:247;;:::o;2429:115:4:-;1482:19;:17;:19::i;:::-;2498:4:::1;2488:7;;:14;;;;;;;;;;;;;;;;;;2517:20;2524:12;:10;:12::i;:::-;2517:20;;;;;;:::i;:::-;;;;;;;;2429:115::o:0;818:216:8:-;941:86;961:5;991:23;;;1016:2;1020:5;968:58;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;941:19;:86::i;:::-;818:216;;;:::o;1186:320:9:-;1246:4;1498:1;1476:7;:19;;;:23;1469:30;;1186:320;;;:::o;4026:501:0:-;4114:22;4122:4;4128:7;4114;:22::i;:::-;4109:412;;4297:39;4328:7;4297:30;:39::i;:::-;4407:49;4446:4;4438:13;;4453:2;4407:30;:49::i;:::-;4204:274;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4152:358;;;;;;;;;;;:::i;:::-;;;;;;;;4109:412;4026:501;;:::o;3868:717:8:-;4298:23;4324:69;4352:4;4324:69;;;;;;;;;;;;;;;;;4332:5;4324:27;;;;:69;;;;;:::i;:::-;4298:95;;4427:1;4407:10;:17;:21;4403:176;;;4502:10;4491:30;;;;;;;;;;;;:::i;:::-;4483:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;4403:176;3949:636;3868:717;;:::o;2188:106:4:-;2254:8;:6;:8::i;:::-;2246:41;;;;;;;;;;;;:::i;:::-;;;;;;;;;2188:106::o;1166:95::-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1249:5:4::1;1239:7;;:15;;;;;;;;;;;;;;;;;;1166:95::o:0;1985:109:5:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1787:1:5::1;2065:7;:22;;;;1985:109::o:0;2010:106:4:-;2080:8;:6;:8::i;:::-;2079:9;2071:38;;;;;;;;;;;;:::i;:::-;;;;;;;;;2010:106::o;2146:149:11:-;2204:13;2236:52;2264:4;2248:22;;333:2;2236:52;;:11;:52::i;:::-;2229:59;;2146:149;;;:::o;1557:437::-;1632:13;1657:19;1702:1;1693:6;1689:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1679:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1657:47;;1714:15;:6;1721:1;1714:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1739;:6;1746:1;1739:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1769:9;1794:1;1785:6;1781:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1769:26;;1764:128;1801:1;1797;:5;1764:128;;;1835:8;1852:3;1844:5;:11;1835:21;;;;;;;:::i;:::-;;;;;1823:6;1830:1;1823:9;;;;;;;;:::i;:::-;;;;;:33;;;;;;;;;;;1880:1;1870:11;;;;;1804:3;;;;:::i;:::-;;;1764:128;;;;1918:1;1909:5;:10;1901:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;1980:6;1966:21;;;1557:437;;;;:::o;3884:223:9:-;4017:12;4048:52;4070:6;4078:4;4084:1;4087:12;4048:21;:52::i;:::-;4041:59;;3884:223;;;;;:::o;4971:446::-;5136:12;5193:5;5168:21;:30;;5160:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;5252:12;5266:23;5293:6;:11;;5312:5;5319:4;5293:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5251:73;;;;5341:69;5368:6;5376:7;5385:10;5397:12;5341:26;:69::i;:::-;5334:76;;;;4971:446;;;;;;:::o;6589:628::-;6769:12;6797:7;6793:418;;;6845:1;6824:10;:17;:22;6820:286;;7039:18;7050:6;7039:10;:18::i;:::-;7031:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;6820:286;7126:10;7119:17;;;;6793:418;7167:33;7175:10;7187:12;7167:7;:33::i;:::-;6589:628;;;;;;;:::o;7739:540::-;7918:1;7898:10;:17;:21;7894:379;;;8126:10;8120:17;8182:15;8169:10;8165:2;8161:19;8154:44;7894:379;8249:12;8242:20;;;;;;;;;;;:::i;:::-;;;;;;;;88:117:26;197:1;194;187:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:77::-;1555:7;1584:5;1573:16;;1518:77;;;:::o;1601:122::-;1674:24;1692:5;1674:24;:::i;:::-;1667:5;1664:35;1654:63;;1713:1;1710;1703:12;1654:63;1601:122;:::o;1729:139::-;1775:5;1813:6;1800:20;1791:29;;1829:33;1856:5;1829:33;:::i;:::-;1729:139;;;;:::o;1874:329::-;1933:6;1982:2;1970:9;1961:7;1957:23;1953:32;1950:119;;;1988:79;;:::i;:::-;1950:119;2108:1;2133:53;2178:7;2169:6;2158:9;2154:22;2133:53;:::i;:::-;2123:63;;2079:117;1874:329;;;;:::o;2209:474::-;2277:6;2285;2334:2;2322:9;2313:7;2309:23;2305:32;2302:119;;;2340:79;;:::i;:::-;2302:119;2460:1;2485:53;2530:7;2521:6;2510:9;2506:22;2485:53;:::i;:::-;2475:63;;2431:117;2587:2;2613:53;2658:7;2649:6;2638:9;2634:22;2613:53;:::i;:::-;2603:63;;2558:118;2209:474;;;;;:::o;2689:118::-;2776:24;2794:5;2776:24;:::i;:::-;2771:3;2764:37;2689:118;;:::o;2813:332::-;2934:4;2972:2;2961:9;2957:18;2949:26;;2985:71;3053:1;3042:9;3038:17;3029:6;2985:71;:::i;:::-;3066:72;3134:2;3123:9;3119:18;3110:6;3066:72;:::i;:::-;2813:332;;;;;:::o;3151:77::-;3188:7;3217:5;3206:16;;3151:77;;;:::o;3234:122::-;3307:24;3325:5;3307:24;:::i;:::-;3300:5;3297:35;3287:63;;3346:1;3343;3336:12;3287:63;3234:122;:::o;3362:139::-;3408:5;3446:6;3433:20;3424:29;;3462:33;3489:5;3462:33;:::i;:::-;3362:139;;;;:::o;3507:329::-;3566:6;3615:2;3603:9;3594:7;3590:23;3586:32;3583:119;;;3621:79;;:::i;:::-;3583:119;3741:1;3766:53;3811:7;3802:6;3791:9;3787:22;3766:53;:::i;:::-;3756:63;;3712:117;3507:329;;;;:::o;3842:118::-;3929:24;3947:5;3929:24;:::i;:::-;3924:3;3917:37;3842:118;;:::o;3966:222::-;4059:4;4097:2;4086:9;4082:18;4074:26;;4110:71;4178:1;4167:9;4163:17;4154:6;4110:71;:::i;:::-;3966:222;;;;:::o;4194:126::-;4231:7;4271:42;4264:5;4260:54;4249:65;;4194:126;;;:::o;4326:96::-;4363:7;4392:24;4410:5;4392:24;:::i;:::-;4381:35;;4326:96;;;:::o;4428:122::-;4501:24;4519:5;4501:24;:::i;:::-;4494:5;4491:35;4481:63;;4540:1;4537;4530:12;4481:63;4428:122;:::o;4556:139::-;4602:5;4640:6;4627:20;4618:29;;4656:33;4683:5;4656:33;:::i;:::-;4556:139;;;;:::o;4701:474::-;4769:6;4777;4826:2;4814:9;4805:7;4801:23;4797:32;4794:119;;;4832:79;;:::i;:::-;4794:119;4952:1;4977:53;5022:7;5013:6;5002:9;4998:22;4977:53;:::i;:::-;4967:63;;4923:117;5079:2;5105:53;5150:7;5141:6;5130:9;5126:22;5105:53;:::i;:::-;5095:63;;5050:118;4701:474;;;;;:::o;5181:86::-;5216:7;5256:4;5249:5;5245:16;5234:27;;5181:86;;;:::o;5273:118::-;5344:22;5360:5;5344:22;:::i;:::-;5337:5;5334:33;5324:61;;5381:1;5378;5371:12;5324:61;5273:118;:::o;5397:135::-;5441:5;5479:6;5466:20;5457:29;;5495:31;5520:5;5495:31;:::i;:::-;5397:135;;;;:::o;5538:907::-;5631:6;5639;5647;5655;5663;5712:3;5700:9;5691:7;5687:23;5683:33;5680:120;;;5719:79;;:::i;:::-;5680:120;5839:1;5864:53;5909:7;5900:6;5889:9;5885:22;5864:53;:::i;:::-;5854:63;;5810:117;5966:2;5992:53;6037:7;6028:6;6017:9;6013:22;5992:53;:::i;:::-;5982:63;;5937:118;6094:2;6120:51;6163:7;6154:6;6143:9;6139:22;6120:51;:::i;:::-;6110:61;;6065:116;6220:2;6246:53;6291:7;6282:6;6271:9;6267:22;6246:53;:::i;:::-;6236:63;;6191:118;6348:3;6375:53;6420:7;6411:6;6400:9;6396:22;6375:53;:::i;:::-;6365:63;;6319:119;5538:907;;;;;;;;:::o;6451:329::-;6510:6;6559:2;6547:9;6538:7;6534:23;6530:32;6527:119;;;6565:79;;:::i;:::-;6527:119;6685:1;6710:53;6755:7;6746:6;6735:9;6731:22;6710:53;:::i;:::-;6700:63;;6656:117;6451:329;;;;:::o;6786:222::-;6879:4;6917:2;6906:9;6902:18;6894:26;;6930:71;6998:1;6987:9;6983:17;6974:6;6930:71;:::i;:::-;6786:222;;;;:::o;7014:169::-;7098:11;7132:6;7127:3;7120:19;7172:4;7167:3;7163:14;7148:29;;7014:169;;;;:::o;7189:231::-;7329:34;7325:1;7317:6;7313:14;7306:58;7398:14;7393:2;7385:6;7381:15;7374:39;7189:231;:::o;7426:366::-;7568:3;7589:67;7653:2;7648:3;7589:67;:::i;:::-;7582:74;;7665:93;7754:3;7665:93;:::i;:::-;7783:2;7778:3;7774:12;7767:19;;7426:366;;;:::o;7798:419::-;7964:4;8002:2;7991:9;7987:18;7979:26;;8051:9;8045:4;8041:20;8037:1;8026:9;8022:17;8015:47;8079:131;8205:4;8079:131;:::i;:::-;8071:139;;7798:419;;;:::o;8223:180::-;8271:77;8268:1;8261:88;8368:4;8365:1;8358:15;8392:4;8389:1;8382:15;8409:348;8449:7;8472:20;8490:1;8472:20;:::i;:::-;8467:25;;8506:20;8524:1;8506:20;:::i;:::-;8501:25;;8694:1;8626:66;8622:74;8619:1;8616:81;8611:1;8604:9;8597:17;8593:105;8590:131;;;8701:18;;:::i;:::-;8590:131;8749:1;8746;8742:9;8731:20;;8409:348;;;;:::o;8763:194::-;8803:4;8823:20;8841:1;8823:20;:::i;:::-;8818:25;;8857:20;8875:1;8857:20;:::i;:::-;8852:25;;8901:1;8898;8894:9;8886:17;;8925:1;8919:4;8916:11;8913:37;;;8930:18;;:::i;:::-;8913:37;8763:194;;;;:::o;8963:191::-;9003:3;9022:20;9040:1;9022:20;:::i;:::-;9017:25;;9056:20;9074:1;9056:20;:::i;:::-;9051:25;;9099:1;9096;9092:9;9085:16;;9120:3;9117:1;9114:10;9111:36;;;9127:18;;:::i;:::-;9111:36;8963:191;;;;:::o;9160:180::-;9208:77;9205:1;9198:88;9305:4;9302:1;9295:15;9329:4;9326:1;9319:15;9346:185;9386:1;9403:20;9421:1;9403:20;:::i;:::-;9398:25;;9437:20;9455:1;9437:20;:::i;:::-;9432:25;;9476:1;9466:35;;9481:18;;:::i;:::-;9466:35;9523:1;9520;9516:9;9511:14;;9346:185;;;;:::o;9537:116::-;9607:21;9622:5;9607:21;:::i;:::-;9600:5;9597:32;9587:60;;9643:1;9640;9633:12;9587:60;9537:116;:::o;9659:137::-;9713:5;9744:6;9738:13;9729:22;;9760:30;9784:5;9760:30;:::i;:::-;9659:137;;;;:::o;9802:345::-;9869:6;9918:2;9906:9;9897:7;9893:23;9889:32;9886:119;;;9924:79;;:::i;:::-;9886:119;10044:1;10069:61;10122:7;10113:6;10102:9;10098:22;10069:61;:::i;:::-;10059:71;;10015:125;9802:345;;;;:::o;10153:118::-;10240:24;10258:5;10240:24;:::i;:::-;10235:3;10228:37;10153:118;;:::o;10277:222::-;10370:4;10408:2;10397:9;10393:18;10385:26;;10421:71;10489:1;10478:9;10474:17;10465:6;10421:71;:::i;:::-;10277:222;;;;:::o;10505:143::-;10562:5;10593:6;10587:13;10578:22;;10609:33;10636:5;10609:33;:::i;:::-;10505:143;;;;:::o;10654:351::-;10724:6;10773:2;10761:9;10752:7;10748:23;10744:32;10741:119;;;10779:79;;:::i;:::-;10741:119;10899:1;10924:64;10980:7;10971:6;10960:9;10956:22;10924:64;:::i;:::-;10914:74;;10870:128;10654:351;;;;:::o;11011:234::-;11151:34;11147:1;11139:6;11135:14;11128:58;11220:17;11215:2;11207:6;11203:15;11196:42;11011:234;:::o;11251:366::-;11393:3;11414:67;11478:2;11473:3;11414:67;:::i;:::-;11407:74;;11490:93;11579:3;11490:93;:::i;:::-;11608:2;11603:3;11599:12;11592:19;;11251:366;;;:::o;11623:419::-;11789:4;11827:2;11816:9;11812:18;11804:26;;11876:9;11870:4;11866:20;11862:1;11851:9;11847:17;11840:47;11904:131;12030:4;11904:131;:::i;:::-;11896:139;;11623:419;;;:::o;12048:230::-;12188:34;12184:1;12176:6;12172:14;12165:58;12257:13;12252:2;12244:6;12240:15;12233:38;12048:230;:::o;12284:366::-;12426:3;12447:67;12511:2;12506:3;12447:67;:::i;:::-;12440:74;;12523:93;12612:3;12523:93;:::i;:::-;12641:2;12636:3;12632:12;12625:19;;12284:366;;;:::o;12656:419::-;12822:4;12860:2;12849:9;12845:18;12837:26;;12909:9;12903:4;12899:20;12895:1;12884:9;12880:17;12873:47;12937:131;13063:4;12937:131;:::i;:::-;12929:139;;12656:419;;;:::o;13081:233::-;13221:34;13217:1;13209:6;13205:14;13198:58;13290:16;13285:2;13277:6;13273:15;13266:41;13081:233;:::o;13320:366::-;13462:3;13483:67;13547:2;13542:3;13483:67;:::i;:::-;13476:74;;13559:93;13648:3;13559:93;:::i;:::-;13677:2;13672:3;13668:12;13661:19;;13320:366;;;:::o;13692:419::-;13858:4;13896:2;13885:9;13881:18;13873:26;;13945:9;13939:4;13935:20;13931:1;13920:9;13916:17;13909:47;13973:131;14099:4;13973:131;:::i;:::-;13965:139;;13692:419;;;:::o;14117:85::-;14162:7;14191:5;14180:16;;14117:85;;;:::o;14208:60::-;14236:3;14257:5;14250:12;;14208:60;;;:::o;14274:154::-;14330:9;14363:59;14379:42;14388:32;14414:5;14388:32;:::i;:::-;14379:42;:::i;:::-;14363:59;:::i;:::-;14350:72;;14274:154;;;:::o;14434:143::-;14527:43;14564:5;14527:43;:::i;:::-;14522:3;14515:56;14434:143;;:::o;14583:234::-;14682:4;14720:2;14709:9;14705:18;14697:26;;14733:77;14807:1;14796:9;14792:17;14783:6;14733:77;:::i;:::-;14583:234;;;;:::o;14823:181::-;14963:33;14959:1;14951:6;14947:14;14940:57;14823:181;:::o;15010:366::-;15152:3;15173:67;15237:2;15232:3;15173:67;:::i;:::-;15166:74;;15249:93;15338:3;15249:93;:::i;:::-;15367:2;15362:3;15358:12;15351:19;;15010:366;;;:::o;15382:419::-;15548:4;15586:2;15575:9;15571:18;15563:26;;15635:9;15629:4;15625:20;15621:1;15610:9;15606:17;15599:47;15663:131;15789:4;15663:131;:::i;:::-;15655:139;;15382:419;;;:::o;15807:112::-;15890:22;15906:5;15890:22;:::i;:::-;15885:3;15878:35;15807:112;;:::o;15925:878::-;16182:4;16220:3;16209:9;16205:19;16197:27;;16234:71;16302:1;16291:9;16287:17;16278:6;16234:71;:::i;:::-;16315:72;16383:2;16372:9;16368:18;16359:6;16315:72;:::i;:::-;16397;16465:2;16454:9;16450:18;16441:6;16397:72;:::i;:::-;16479;16547:2;16536:9;16532:18;16523:6;16479:72;:::i;:::-;16561:69;16625:3;16614:9;16610:19;16601:6;16561:69;:::i;:::-;16640:73;16708:3;16697:9;16693:19;16684:6;16640:73;:::i;:::-;16723;16791:3;16780:9;16776:19;16767:6;16723:73;:::i;:::-;15925:878;;;;;;;;;;:::o;16809:220::-;16949:34;16945:1;16937:6;16933:14;16926:58;17018:3;17013:2;17005:6;17001:15;16994:28;16809:220;:::o;17035:366::-;17177:3;17198:67;17262:2;17257:3;17198:67;:::i;:::-;17191:74;;17274:93;17363:3;17274:93;:::i;:::-;17392:2;17387:3;17383:12;17376:19;;17035:366;;;:::o;17407:419::-;17573:4;17611:2;17600:9;17596:18;17588:26;;17660:9;17654:4;17650:20;17646:1;17635:9;17631:17;17624:47;17688:131;17814:4;17688:131;:::i;:::-;17680:139;;17407:419;;;:::o;17832:442::-;17981:4;18019:2;18008:9;18004:18;17996:26;;18032:71;18100:1;18089:9;18085:17;18076:6;18032:71;:::i;:::-;18113:72;18181:2;18170:9;18166:18;18157:6;18113:72;:::i;:::-;18195;18263:2;18252:9;18248:18;18239:6;18195:72;:::i;:::-;17832:442;;;;;;:::o;18280:332::-;18401:4;18439:2;18428:9;18424:18;18416:26;;18452:71;18520:1;18509:9;18505:17;18496:6;18452:71;:::i;:::-;18533:72;18601:2;18590:9;18586:18;18577:6;18533:72;:::i;:::-;18280:332;;;;;:::o;18618:148::-;18720:11;18757:3;18742:18;;18618:148;;;;:::o;18772:173::-;18912:25;18908:1;18900:6;18896:14;18889:49;18772:173;:::o;18951:402::-;19111:3;19132:85;19214:2;19209:3;19132:85;:::i;:::-;19125:92;;19226:93;19315:3;19226:93;:::i;:::-;19344:2;19339:3;19335:12;19328:19;;18951:402;;;:::o;19359:99::-;19411:6;19445:5;19439:12;19429:22;;19359:99;;;:::o;19464:246::-;19545:1;19555:113;19569:6;19566:1;19563:13;19555:113;;;19654:1;19649:3;19645:11;19639:18;19635:1;19630:3;19626:11;19619:39;19591:2;19588:1;19584:10;19579:15;;19555:113;;;19702:1;19693:6;19688:3;19684:16;19677:27;19526:184;19464:246;;;:::o;19716:390::-;19822:3;19850:39;19883:5;19850:39;:::i;:::-;19905:89;19987:6;19982:3;19905:89;:::i;:::-;19898:96;;20003:65;20061:6;20056:3;20049:4;20042:5;20038:16;20003:65;:::i;:::-;20093:6;20088:3;20084:16;20077:23;;19826:280;19716:390;;;;:::o;20112:167::-;20252:19;20248:1;20240:6;20236:14;20229:43;20112:167;:::o;20285:402::-;20445:3;20466:85;20548:2;20543:3;20466:85;:::i;:::-;20459:92;;20560:93;20649:3;20560:93;:::i;:::-;20678:2;20673:3;20669:12;20662:19;;20285:402;;;:::o;20693:967::-;21075:3;21097:148;21241:3;21097:148;:::i;:::-;21090:155;;21262:95;21353:3;21344:6;21262:95;:::i;:::-;21255:102;;21374:148;21518:3;21374:148;:::i;:::-;21367:155;;21539:95;21630:3;21621:6;21539:95;:::i;:::-;21532:102;;21651:3;21644:10;;20693:967;;;;;:::o;21666:102::-;21707:6;21758:2;21754:7;21749:2;21742:5;21738:14;21734:28;21724:38;;21666:102;;;:::o;21774:377::-;21862:3;21890:39;21923:5;21890:39;:::i;:::-;21945:71;22009:6;22004:3;21945:71;:::i;:::-;21938:78;;22025:65;22083:6;22078:3;22071:4;22064:5;22060:16;22025:65;:::i;:::-;22115:29;22137:6;22115:29;:::i;:::-;22110:3;22106:39;22099:46;;21866:285;21774:377;;;;:::o;22157:313::-;22270:4;22308:2;22297:9;22293:18;22285:26;;22357:9;22351:4;22347:20;22343:1;22332:9;22328:17;22321:47;22385:78;22458:4;22449:6;22385:78;:::i;:::-;22377:86;;22157:313;;;;:::o;22476:229::-;22616:34;22612:1;22604:6;22600:14;22593:58;22685:12;22680:2;22672:6;22668:15;22661:37;22476:229;:::o;22711:366::-;22853:3;22874:67;22938:2;22933:3;22874:67;:::i;:::-;22867:74;;22950:93;23039:3;22950:93;:::i;:::-;23068:2;23063:3;23059:12;23052:19;;22711:366;;;:::o;23083:419::-;23249:4;23287:2;23276:9;23272:18;23264:26;;23336:9;23330:4;23326:20;23322:1;23311:9;23307:17;23300:47;23364:131;23490:4;23364:131;:::i;:::-;23356:139;;23083:419;;;:::o;23508:170::-;23648:22;23644:1;23636:6;23632:14;23625:46;23508:170;:::o;23684:366::-;23826:3;23847:67;23911:2;23906:3;23847:67;:::i;:::-;23840:74;;23923:93;24012:3;23923:93;:::i;:::-;24041:2;24036:3;24032:12;24025:19;;23684:366;;;:::o;24056:419::-;24222:4;24260:2;24249:9;24245:18;24237:26;;24309:9;24303:4;24299:20;24295:1;24284:9;24280:17;24273:47;24337:131;24463:4;24337:131;:::i;:::-;24329:139;;24056:419;;;:::o;24481:166::-;24621:18;24617:1;24609:6;24605:14;24598:42;24481:166;:::o;24653:366::-;24795:3;24816:67;24880:2;24875:3;24816:67;:::i;:::-;24809:74;;24892:93;24981:3;24892:93;:::i;:::-;25010:2;25005:3;25001:12;24994:19;;24653:366;;;:::o;25025:419::-;25191:4;25229:2;25218:9;25214:18;25206:26;;25278:9;25272:4;25268:20;25264:1;25253:9;25249:17;25242:47;25306:131;25432:4;25306:131;:::i;:::-;25298:139;;25025:419;;;:::o;25450:180::-;25498:77;25495:1;25488:88;25595:4;25592:1;25585:15;25619:4;25616:1;25609:15;25636:180;25684:77;25681:1;25674:88;25781:4;25778:1;25771:15;25805:4;25802:1;25795:15;25822:171;25861:3;25884:24;25902:5;25884:24;:::i;:::-;25875:33;;25930:4;25923:5;25920:15;25917:41;;25938:18;;:::i;:::-;25917:41;25985:1;25978:5;25974:13;25967:20;;25822:171;;;:::o;25999:182::-;26139:34;26135:1;26127:6;26123:14;26116:58;25999:182;:::o;26187:366::-;26329:3;26350:67;26414:2;26409:3;26350:67;:::i;:::-;26343:74;;26426:93;26515:3;26426:93;:::i;:::-;26544:2;26539:3;26535:12;26528:19;;26187:366;;;:::o;26559:419::-;26725:4;26763:2;26752:9;26748:18;26740:26;;26812:9;26806:4;26802:20;26798:1;26787:9;26783:17;26776:47;26840:131;26966:4;26840:131;:::i;:::-;26832:139;;26559:419;;;:::o;26984:225::-;27124:34;27120:1;27112:6;27108:14;27101:58;27193:8;27188:2;27180:6;27176:15;27169:33;26984:225;:::o;27215:366::-;27357:3;27378:67;27442:2;27437:3;27378:67;:::i;:::-;27371:74;;27454:93;27543:3;27454:93;:::i;:::-;27572:2;27567:3;27563:12;27556:19;;27215:366;;;:::o;27587:419::-;27753:4;27791:2;27780:9;27776:18;27768:26;;27840:9;27834:4;27830:20;27826:1;27815:9;27811:17;27804:47;27868:131;27994:4;27868:131;:::i;:::-;27860:139;;27587:419;;;:::o;28012:98::-;28063:6;28097:5;28091:12;28081:22;;28012:98;;;:::o;28116:147::-;28217:11;28254:3;28239:18;;28116:147;;;;:::o;28269:386::-;28373:3;28401:38;28433:5;28401:38;:::i;:::-;28455:88;28536:6;28531:3;28455:88;:::i;:::-;28448:95;;28552:65;28610:6;28605:3;28598:4;28591:5;28587:16;28552:65;:::i;:::-;28642:6;28637:3;28633:16;28626:23;;28377:278;28269:386;;;;:::o;28661:271::-;28791:3;28813:93;28902:3;28893:6;28813:93;:::i;:::-;28806:100;;28923:3;28916:10;;28661:271;;;;:::o;28938:179::-;29078:31;29074:1;29066:6;29062:14;29055:55;28938:179;:::o;29123:366::-;29265:3;29286:67;29350:2;29345:3;29286:67;:::i;:::-;29279:74;;29362:93;29451:3;29362:93;:::i;:::-;29480:2;29475:3;29471:12;29464:19;;29123:366;;;:::o;29495:419::-;29661:4;29699:2;29688:9;29684:18;29676:26;;29748:9;29742:4;29738:20;29734:1;29723:9;29719:17;29712:47;29776:131;29902:4;29776:131;:::i;:::-;29768:139;;29495:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"2431400","executionCost":"infinite","totalCost":"infinite"},"external":{"DEFAULT_ADMIN_ROLE()":"446","__BaseUpgradeablePausable_init(address)":"infinite","buyGENZToken(uint256,uint256,uint8,bytes32,bytes32)":"infinite","calculatePriceGENZ(uint256,uint256)":"infinite","getCurrentTokenPrice()":"infinite","getGENZTokenCount()":"2460","getRoleAdmin(bytes32)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"3229","initialize(address)":"infinite","isAdmin()":"2792","pause()":"infinite","paused()":"2568","renounceRole(bytes32,address)":"infinite","revokeRole(bytes32,address)":"infinite","supportsInterface(bytes4)":"751","unpause()":"infinite","updateBaseSalePrice(uint256)":"infinite","updateMinimumWithdrawalPeriod(uint256)":"infinite","withdrawStakedToken()":"infinite"}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","__BaseUpgradeablePausable_init(address)":"6e810b1a","buyGENZToken(uint256,uint256,uint8,bytes32,bytes32)":"34d131bf","calculatePriceGENZ(uint256,uint256)":"06fb46ba","getCurrentTokenPrice()":"f751758b","getGENZTokenCount()":"74a7dce5","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","initialize(address)":"c4d66de8","isAdmin()":"b6db75a0","pause()":"8456cb59","paused()":"5c975abb","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7","unpause()":"3f4ba83a","updateBaseSalePrice(uint256)":"eaef3999","updateMinimumWithdrawalPeriod(uint256)":"051e6cb1","withdrawStakedToken()":"869eac93"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenDAI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenGENZ\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BaseUpgradeablePausable__ZeroAddressError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuyGENZ__TransactionFailedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__GENZBurnFailedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__GENZMintFailedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__ImmutableChangesError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__InsufficientBalanceError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__LowAmountError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__LowSZTBalanceError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__PausedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__TransactionFailedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__ZeroAddressTransactionError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"buyGENZToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"issuedTokensGENZ\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredTokens\",\"type\":\"uint256\"}],\"name\":\"calculatePriceGENZ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGENZTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pauseOperationAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"name\":\"updateBaseSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"valueInDays\",\"type\":\"uint256\"}],\"name\":\"updateMinimumWithdrawalPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"anshik@safezen.finance\",\"kind\":\"dev\",\"methods\":{\"buyGENZToken(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"value\":\": amount of SZT tokens user wishes to purchase\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow-constructor\":\"\",\"details\":\"initializing _tokenDAI\",\"params\":{\"tokenDAI\":\": address of the DAI token\"}},\"getGENZTokenCount()\":{\"details\":\"returns the token in circulation\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address)\":{\"details\":\"one time function to initialize the contract\",\"params\":{\"pauseOperationAddress\":\": address of the Global Pause Operation contract\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"BuySellGENZ__PausedError()\":[{\"notice\":\"Custom Error Codes\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"Report any bug or issues at:\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/buySell/BuyGENZ.sol\":\"BuyGENZ\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"contracts/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./Constants.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nerror BaseUpgradeablePausable__ZeroAddressError();\\n\\ncontract BaseUpgradeablePausable is \\n    Initializable, \\n    PausableUpgradeable, \\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable \\n{\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin(), \\\"Must have admin role to perform this action.\\\");\\n        _;\\n    }\\n\\n    function __BaseUpgradeablePausable_init(address owner) public onlyInitializing() {\\n        if(owner == address(0)) {\\n            revert BaseUpgradeablePausable__ZeroAddressError();\\n        }\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        _grantRole(Constants.getAdminRole(), owner);\\n        _grantRole(Constants.getPauserRole(), owner);\\n\\n        _setRoleAdmin(Constants.getPauserRole(), Constants.getAdminRole());\\n        _setRoleAdmin(Constants.getAdminRole(), Constants.getAdminRole());\\n    }\\n\\n    function isAdmin() public view returns (bool) {\\n        return hasRole(Constants.getAdminRole(), _msgSender());\\n    }\\n\\n  \\n}\",\"keccak256\":\"0x29b172c9fffe9bc60c702a071bae35f301b1b5c3824f0ca44b3d2dcabbda5af9\",\"license\":\"MIT\"},\"contracts/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nlibrary Constants {\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    function getAdminRole() internal pure returns (bytes32) {\\n        return ADMIN_ROLE;\\n    }\\n\\n    function getPauserRole() internal pure returns (bytes32) {\\n        return PAUSER_ROLE;\\n    }\\n}\",\"keccak256\":\"0xeae9d870bc2ace9284ae575eb6c534c177ff6f4a60b98f10a0a8156f19f760cf\",\"license\":\"BUSL-1.1\"},\"contracts/core/buySell/BuyGENZ.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// @title Buy GENZ Contract\\n/// @author Anshik Bansal <anshik@safezen.finance>\\n\\n/*\\n\\n100M GENZ tokens will be minted in supply, fixed capped.\\nInitial round tokens will be raised at $10M valuation for a sale of /\\n/ 2M token to raise 200k.\\nToken sale will be made live on multiple EVM chains including Ethereum, Polygon, Avalanche,\\nArbitrum and Optimism.\\nToken sale for now will not be made on BNB chain.\\n400k tokens will be offered for sale on each of the EVM chain to raise 40k on each of the chain.\\n\\nGENZ Token Utilities:\\n    1. Similar to traditional markets, earn dividend just by holding GENZ token every second.\\n    2. Similar to traditional markets, there is no need to stake GENZ tokens to ripe the dividend rewards.\\n    3. It will derive its value from the project's operation and profit generation.\\n    4. It will be used to reward the bug bounty hunters.\\n    5. It will also be awarded during the claim governance, so as users participating in the /\\n       / claim settlement process will earn free GENZ tokens as participation rewards.\\n    6. At the same time, GSZT tokens will be awarded to participants to close insured user's  /\\n       / pay-as-you-go insurance streams after the insurance period gets over.\\n\\n100M GENZ token supply will be as:\\n    - 20M on each of the following chain: Ethereum, Polygon, Avalanche, Arbitrum and Optimism.\\n    - In the later stages, when we'll integrate more chains, then GENZ tokens will be burned /\\n      accordingly to ensure capped 100M GENZ token supply. \\n\\n*/\\n\\n// Importing interfaces\\nimport \\\"./../../interfaces/IBuyGENZ.sol\\\";\\nimport \\\"./../../interfaces/IERC20Extended.sol\\\";\\nimport \\\"./../../interfaces/IGlobalPauseOperation.sol\\\";\\n\\n/// Importing required libraries\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n// Importing contracts\\nimport \\\"./../../BaseUpgradeablePausable.sol\\\";\\n\\n/// Report any bug or issues at:\\n/// @custom:security-contact anshik@safezen.finance\\ncontract BuyGENZ is IBuyGENZ, BaseUpgradeablePausable {\\n\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeERC20Upgradeable for IERC20PermitUpgradeable;\\n\\n    /// _tokenCounter: GENZ ERC20 tokens in circulation\\n    /// _currVersion: \\n    uint256 private _tokenCounter;\\n    uint256 private _minWithdrawalPeriod;\\n    uint256 private constant WITHDRAWAL_PERIOD_MULTIPLIER = 8 hours;\\n    uint256 private _commonRatio;\\n    uint256 private _baseSalePrice;\\n    uint256 private _basePriceWithDec;\\n\\n    /// _tokenDAI: DAI ERC20 token\\n    /// _tokenUSDC: USDC ERC20 token\\n    /// _globalPauseOperation: Global Pause Operations Contract\\n    IERC20Upgradeable private immutable _tokenDAI;\\n    IERC20Upgradeable private immutable _tokenGENZ;\\n    IGlobalPauseOperation private _globalPauseOperation;\\n    IERC20PermitUpgradeable private immutable _tokenPermitDAI;\\n\\n    struct StakeInformation {\\n        bool hasStaked;\\n        uint256 amount;\\n        uint256 minWithdrawTime;\\n    }\\n\\n    mapping(address => StakeInformation) private stakingInformation;\\n    \\n    modifier ifNotPaused() {\\n        require(\\n            (paused() != true) && \\n            (_globalPauseOperation.isPaused() != true));\\n        _;\\n    }\\n\\n    /// @dev initializing _tokenDAI\\n    /// @param tokenDAI: address of the DAI token\\n    /// @custom:oz-upgrades-unsafe-allow-constructor\\n    constructor(uint256 value, uint256 decimals, address tokenDAI, address tokenGENZ) {\\n        _tokenDAI = IERC20Upgradeable(tokenDAI); \\n        _tokenGENZ = IERC20Upgradeable(tokenGENZ); \\n        _tokenPermitDAI = IERC20PermitUpgradeable(tokenDAI);\\n        _commonRatio = (value * 10e17) / (10 ** decimals); // Immutable\\n    }\\n\\n    /// @dev one time function to initialize the contract\\n    /// @param pauseOperationAddress: address of the Global Pause Operation contract\\n    function initialize(\\n        address pauseOperationAddress\\n    ) external initializer {\\n        _baseSalePrice = 1;\\n        _basePriceWithDec = 1e18;\\n        _globalPauseOperation = IGlobalPauseOperation(pauseOperationAddress);\\n        __BaseUpgradeablePausable_init(_msgSender());\\n    }\\n\\n    function updateBaseSalePrice(uint256 tokenPrice) external onlyAdmin {\\n        _baseSalePrice = tokenPrice;\\n        _basePriceWithDec = tokenPrice * 1e18;\\n    }\\n\\n    function updateMinimumWithdrawalPeriod(uint256 valueInDays) external onlyAdmin {\\n        _minWithdrawalPeriod = valueInDays * 1 days;\\n    }\\n\\n    function pause() external onlyAdmin {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyAdmin {\\n        _unpause();\\n    }\\n\\n    /// @dev \\n    /// @param value: amount of SZT tokens user wishes to purchase\\n    function buyGENZToken(\\n        uint256 value,\\n        uint deadline, \\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external nonReentrant ifNotPaused returns(bool) {\\n        if (value < 1e18) {\\n            revert BuySellGENZ__LowAmountError();\\n        }\\n        _minWithdrawalPeriod += WITHDRAWAL_PERIOD_MULTIPLIER;\\n        (/* uint256 amountPerToken */, uint256 amountToBePaid) = calculatePriceGENZ(\\n            _tokenCounter, _tokenCounter + value);\\n        if (amountToBePaid > _tokenDAI.balanceOf(_msgSender())) {\\n            revert BuySellGENZ__InsufficientBalanceError();\\n        }\\n        StakeInformation storage userStakeInformation = stakingInformation[_msgSender()];\\n        userStakeInformation.amount += value;\\n        userStakeInformation.hasStaked = true;\\n        userStakeInformation.minWithdrawTime = block.timestamp + _minWithdrawalPeriod;\\n        _tokenPermitDAI.safePermit(_msgSender(), address(this), amountToBePaid, deadline, v, r, s);\\n        _tokenDAI.safeTransferFrom(_msgSender(), address(this), amountToBePaid);\\n        return true;\\n    }\\n\\n    function calculatePriceGENZ(\\n        uint256 issuedTokensGENZ, \\n        uint256 requiredTokens\\n    ) public view returns(uint256, uint256) {\\n        uint256 commonRatioGENZ = _commonRatio * _baseSalePrice;\\n        uint256 tokenDifference = (issuedTokensGENZ + (requiredTokens - 1e18));\\n        uint256 averageDiff = ((commonRatioGENZ * tokenDifference) / 2) / 1e18;\\n        uint256 amountPerToken = _basePriceWithDec + averageDiff;\\n        uint256 amountToBePaid = (amountPerToken * (requiredTokens - issuedTokensGENZ))/1e18;\\n        return (amountPerToken, amountToBePaid);\\n    }\\n\\n    error BuyGENZ__TransactionFailedError();\\n    function withdrawStakedToken() external {\\n        if (!stakingInformation[_msgSender()].hasStaked) {\\n            revert BuyGENZ__TransactionFailedError();\\n        }\\n        if (stakingInformation[_msgSender()].minWithdrawTime > block.timestamp ) {\\n            revert BuyGENZ__TransactionFailedError();\\n        }\\n        uint256 amountStaked = stakingInformation[_msgSender()].amount;\\n        stakingInformation[_msgSender()].hasStaked = false;\\n        stakingInformation[_msgSender()].amount = 0;\\n        _tokenGENZ.safeTransfer(_msgSender(), amountStaked);\\n    }\\n\\n    function getCurrentTokenPrice() public view returns(uint256) {\\n        (uint256 amountPerToken, /*uint256 amountToBePaid*/) = calculatePriceGENZ(\\n            _tokenCounter, _tokenCounter + 1e18);\\n        return amountPerToken;\\n    }\\n\\n    /// @dev returns the token in circulation\\n    function getGENZTokenCount() public view returns(uint256) {\\n        return _tokenCounter;\\n    }\\n}\",\"keccak256\":\"0xcf9809b86542ccd9d0b1712b7eae3b0d1501f6c795c9d5c06c68accc49dca22b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBuyGENZ.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IBuyGENZ {\\n    \\n    /// Custom Error Codes\\n    error BuySellGENZ__PausedError();\\n    error BuySellGENZ__LowAmountError();\\n    error BuySellGENZ__LowSZTBalanceError();\\n    error BuySellGENZ__GENZBurnFailedError();\\n    error BuySellGENZ__GENZMintFailedError();\\n    error BuySellGENZ__ImmutableChangesError();\\n    error BuySellGENZ__TransactionFailedError();\\n    error BuySellGENZ__InsufficientBalanceError();\\n    error BuySellGENZ__ZeroAddressTransactionError();\\n\\n}\",\"keccak256\":\"0x74d79d87e23c822d6044d2489608ddbeb5ccc83b4db663c7bb509f46803da0ee\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional mint and burnFrom functions from the ERC20 standard.\\n */\\ninterface IERC20Extended is IERC20Upgradeable {\\n    \\n    function mint(address to, uint256 amount) external returns(bool);\\n\\n    function burnFrom(address account, uint256 amount) external returns(bool);\\n    \\n}\",\"keccak256\":\"0x77d287ad89310c9c5b7acef41830a116628435e9f209b78088282a3e9d683213\",\"license\":\"MIT\"},\"contracts/interfaces/IGlobalPauseOperation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IGlobalPauseOperation {\\n\\n    error GlobalPauseOps__ZeroAddressInputError();\\n\\n    error GlobalPauseOperation__ImmutableChangesError();\\n\\n    event PausedOperation(address account);\\n\\n    event UnpausedOperation(address account);\\n\\n    function pauseOperation() external returns(bool);\\n\\n    function unpauseOperation() external returns(bool);\\n    \\n    function isPaused() external view returns(bool);\\n}\",\"keccak256\":\"0x79586f955f8b52af0e350004f608462d4af71c872ea75ce1b633239c5d00fc29\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1500,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":601,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":706,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":1719,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"__gap","offset":0,"slot":"101","type":"t_array(t_uint256)50_storage"},{"astId":39,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"_roles","offset":0,"slot":"151","type":"t_mapping(t_bytes32,t_struct(RoleData)34_storage)"},{"astId":334,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"__gap","offset":0,"slot":"152","type":"t_array(t_uint256)49_storage"},{"astId":721,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"_status","offset":0,"slot":"201","type":"t_uint256"},{"astId":779,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"__gap","offset":0,"slot":"202","type":"t_array(t_uint256)49_storage"},{"astId":2751,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"_tokenCounter","offset":0,"slot":"251","type":"t_uint256"},{"astId":2753,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"_minWithdrawalPeriod","offset":0,"slot":"252","type":"t_uint256"},{"astId":2758,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"_commonRatio","offset":0,"slot":"253","type":"t_uint256"},{"astId":2760,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"_baseSalePrice","offset":0,"slot":"254","type":"t_uint256"},{"astId":2762,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"_basePriceWithDec","offset":0,"slot":"255","type":"t_uint256"},{"astId":2772,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"_globalPauseOperation","offset":0,"slot":"256","type":"t_contract(IGlobalPauseOperation)5797"},{"astId":2787,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"stakingInformation","offset":0,"slot":"257","type":"t_mapping(t_address,t_struct(StakeInformation)2782_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(IGlobalPauseOperation)5797":{"encoding":"inplace","label":"contract IGlobalPauseOperation","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_struct(StakeInformation)2782_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct BuyGENZ.StakeInformation)","numberOfBytes":"32","value":"t_struct(StakeInformation)2782_storage"},"t_mapping(t_bytes32,t_struct(RoleData)34_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)34_storage"},"t_struct(RoleData)34_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":31,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":33,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(StakeInformation)2782_storage":{"encoding":"inplace","label":"struct BuyGENZ.StakeInformation","members":[{"astId":2777,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"hasStaked","offset":0,"slot":"0","type":"t_bool"},{"astId":2779,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"amount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2781,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"minWithdrawTime","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"errors":{"BuySellGENZ__PausedError()":[{"notice":"Custom Error Codes"}]},"kind":"user","methods":{},"notice":"Report any bug or issues at:","version":1}}},"contracts/core/payAsYouGo/ConstantFlowAgreement.sol":{"ConstantFlowAgreement":{"abi":[{"inputs":[],"name":"BaseUpgradeablePausable__ZeroAddressError","type":"error"},{"inputs":[],"name":"CFA__ActiveInsuranceExistError","type":"error"},{"inputs":[],"name":"CFA__ImmutableChangesError","type":"error"},{"inputs":[],"name":"CFA__InactiveInsuranceError","type":"error"},{"inputs":[],"name":"CFA__InsuranceCoverNotAvailableError","type":"error"},{"inputs":[],"name":"CFA__NotEvenMinimumInsurancePeriodAmount","type":"error"},{"inputs":[],"name":"CFA__SubCategoryNotActiveError","type":"error"},{"inputs":[],"name":"CFA__TransactionFailedError","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[],"name":"UpdatedMaxInsuredDays","type":"event"},{"anonymous":false,"inputs":[],"name":"UpdatedMinimumInsurancePeriod","type":"event"},{"anonymous":false,"inputs":[],"name":"UpdatedStartWaitingTime","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"__BaseUpgradeablePausable_init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"insuredAmount","type":"uint256"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"addInsuranceAmount","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"}],"name":"calculateTotalFlowMade","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"calculateTotalFlowMade","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"}],"name":"claimPremium","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"}],"name":"claimPremium","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryCount","type":"uint256"}],"name":"findActivePremiumCost","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"}],"name":"getGlobalUserInsuranceInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getGlobalUserInsurancePremiumCost","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"}],"name":"getUserInsuranceInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"}],"name":"getUserInsuranceStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"}],"name":"getUserInsuranceValidTillInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"}],"name":"getUserInsuredAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenDAIaddress","type":"address"},{"internalType":"address","name":"sztDAIAddress","type":"address"},{"internalType":"address","name":"insuranceRegistryCA","type":"address"},{"internalType":"uint256","name":"minimumInsurancePeriod","type":"uint256"},{"internalType":"uint256","name":"startWaitingTime","type":"uint256"},{"internalType":"uint256","name":"maxInsuredDays","type":"uint256"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isAdmin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"insuredAmount","type":"uint256"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"},{"internalType":"bool","name":"closeStream","type":"bool"}],"name":"minusInsuranceAmount","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"timeInDays","type":"uint256"}],"name":"updateMaxInsuredDays","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"timeInMinutes","type":"uint256"}],"name":"updateMinimumInsurancePeriod","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"timeInHours","type":"uint256"}],"name":"updateStartWaitingTime","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"custom:security-contact":"anshik@safezen.finance","kind":"dev","methods":{"addInsuranceAmount(uint256,uint256,uint256,uint8,bytes32,bytes32)":{"details":"this function aims to create or top-up user insurance coverage amount.","params":{"categoryID":": insurance category, e.g., stablecoin depeg insurance.","insuredAmount":": maximum user coverage amount","subCategoryID":": insurance sub-category, e.g., USDC depeg coverage, DAI depeg coverage."},"returns":{"_0":"bool: true if the function executues successfully else false."}},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"initialize(address,address,address,uint256,uint256,uint256)":{"details":"one-time function aims to initialize the contractMUST revert if called more than once.","params":{"insuranceRegistryCA":": address of the Protocol Registry contract","minimumInsurancePeriod":": minimum insurance period","sztDAIAddress":"address of the sztDAI ERC20 token","tokenDAIaddress":": address of the DAI ERC20 token"},"returns":{"_0":"bool: true if the function executues successfully else false. [PRODUCTION TODO: _startWaitingTime =  startWaitingTime * 1 hours;] [PRODUCTION TODO: _maxInsuredDays = maxInsuredDays * 1 days;]"}},"minusInsuranceAmount(uint256,uint256,uint256,uint8,bytes32,bytes32,bool)":{"details":"this function aims to close or reduce user insurance coverage amount.","params":{"categoryID":": insurance category, e.g., stablecoin depeg insurance.","closeStream":": checks whether user initiate to deactivate its insurance or not.","insuredAmount":": maximum user coverage amount","subCategoryID":": insurance sub-category, e.g., USDC depeg coverage, DAI depeg coverage."},"returns":{"_0":"bool: true if the function executues successfully else false."}},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"updateMaxInsuredDays(uint256)":{"details":"this function aims to update the maximum insurance period","params":{"timeInDays":": 90 days will be kept as default."}},"updateMinimumInsurancePeriod(uint256)":{"details":"this function aims to updates minimum insurance period","params":{"timeInMinutes":": 120 minutes will be kept as default."}},"updateStartWaitingTime(uint256)":{"details":"this function aims to update the insurance activation waiting period","params":{"timeInHours":": 4-8 hours will be kept as default. "}}},"stateVariables":{"usersGlobalInsuranceInfo":{"details":"mapping to store UserGlobalInsuranceInfo maps: userAddress => UserGlobalInsuranceInfo"},"usersInsuranceInfo":{"details":"mapping to store UserInsurance Info maps: userAddress => categoryID => subCategoryID => UserInsuranceInfo"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50614396806100206000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636e8847bd11610104578063a217fddf116100a2578063cff5eede11610071578063cff5eede1461058f578063d547741f146105bf578063ec249164146105db578063f099dd501461060c576101cf565b8063a217fddf14610507578063b470626814610525578063b6db75a014610541578063c392e8501461055f576101cf565b806381280d2b116100de57806381280d2b146104685780638456cb591461049857806388295fb2146104a257806391d14854146104d7576101cf565b80636e8847bd146103d8578063728cdbca1461040857806377bd35fc14610438576101cf565b806342f6b8a7116101715780635c975abb1161014b5780635c975abb1461033e578063642adc281461035c5780636b6d105e1461038c5780636e810b1a146103bc576101cf565b806342f6b8a7146102c25780634e94c048146102f257806356eb66bb14610322576101cf565b806324b7ab24116101ad57806324b7ab24146102645780632f2ff15d1461028057806336568abe1461029c5780633f4ba83a146102b8576101cf565b806301ffc9a7146101d45780631a5c8f2814610204578063248a9ca314610234575b600080fd5b6101ee60048036038101906101e9919061325f565b61063c565b6040516101fb91906132a7565b60405180910390f35b61021e60048036038101906102199190613356565b6106b6565b60405161022b9190613467565b60405180910390f35b61024e600480360381019061024991906134bf565b6108d9565b60405161025b91906134fb565b60405180910390f35b61027e60048036038101906102799190613516565b6108f9565b005b61029a60048036038101906102959190613543565b610983565b005b6102b660048036038101906102b19190613543565b6109a4565b005b6102c0610a27565b005b6102dc60048036038101906102d79190613583565b610a78565b6040516102e991906135bf565b60405180910390f35b61030c600480360381019061030791906135da565b610af3565b60405161031991906135bf565b60405180910390f35b61033c60048036038101906103379190613516565b610caa565b005b610346610d32565b60405161035391906132a7565b60405180910390f35b6103766004803603810190610371919061367f565b610d49565b60405161038391906132a7565b60405180910390f35b6103a660048036038101906103a19190613356565b610d7d565b6040516103b391906135bf565b60405180910390f35b6103d660048036038101906103d19190613583565b610dee565b005b6103f260048036038101906103ed9190613721565b610f10565b6040516103ff91906132a7565b60405180910390f35b610422600480360381019061041d91906137ae565b610f42565b60405161042f91906132a7565b60405180910390f35b610452600480360381019061044d91906135da565b6111de565b60405161045f91906132a7565b60405180910390f35b610482600480360381019061047d9190613356565b6111e6565b60405161048f91906132a7565b60405180910390f35b6104a0611264565b005b6104bc60048036038101906104b79190613356565b6112b5565b6040516104ce9695949392919061383b565b60405180910390f35b6104f160048036038101906104ec9190613543565b6113bd565b6040516104fe91906132a7565b60405180910390f35b61050f611428565b60405161051c91906134fb565b60405180910390f35b61053f600480360381019061053a9190613516565b61142f565b005b6105496114ba565b60405161055691906132a7565b60405180910390f35b61057960048036038101906105749190613356565b6114d9565b60405161058691906135bf565b60405180910390f35b6105a960048036038101906105a49190613583565b61154a565b6040516105b691906135bf565b60405180910390f35b6105d960048036038101906105d49190613543565b61172f565b005b6105f560048036038101906105f09190613583565b611750565b60405161060392919061389c565b60405180910390f35b61062660048036038101906106219190613356565b6117d4565b60405161063391906132a7565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106af57506106ae8261186c565b5b9050919050565b60606000805b838110156107b557600061010460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060008381526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff16151515158152505090508060c00151156107a357826107a0906138f4565b92505b816107ad906138f4565b9150506106bc565b5060008167ffffffffffffffff8111156107d2576107d161393c565b5b6040519080825280602002602001820160405280156108005781602001602082028036833780820191505090505b5090506000805b858110156108cb57600061010460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000898152602001908152602001600020600083815260200190815260200160002090508060060160009054906101000a900460ff16156108b957818484815181106108a05761089f61396b565b5b602002602001018181525050826108b6906138f4565b92505b816108c3906138f4565b915050610807565b508193505050509392505050565b600060976000838152602001908152602001600020600101549050919050565b6109016114ba565b610940576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093790613a1d565b60405180910390fd5b610e108161094e9190613a3d565b60fd819055507f75c07eb064b8ccf959bcc601b55315ca198e67b597dc0a7b93e130f8ca779a6760405160405180910390a150565b61098c826108d9565b610995816118d6565b61099f83836118ea565b505050565b6109ac6119cb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1090613b09565b60405180910390fd5b610a2382826119d3565b5050565b610a2f6114ba565b610a6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6590613a1d565b60405180910390fd5b610a76611ab5565b565b60008061010360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201548152505090508060400151915050919050565b600080600090506000610ba3858561010260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633bf4c082886040518263ffffffff1660e01b8152600401610b5d91906135bf565b602060405180830381865afa158015610b7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9e9190613b3e565b6106b6565b905060005b8151811015610c9e57600061010460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000206000848481518110610c1957610c1861396b565b5b602002602001015181526020019081526020016000209050600081600001544211610c45576000610c6c565b81600101544211610c6557816000015442610c609190613b6b565b610c6b565b81600101545b5b9050808260040154610c7e9190613a3d565b85610c899190613b9f565b945082610c95906138f4565b92505050610ba8565b50819250505092915050565b610cb26114ba565b610cf1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce890613a1d565b60405180910390fd5b603c81610cfe9190613a3d565b60fe819055507e3a5a2424463bb22c8fc4c0f2422b7a18712b7713f9619caa313f499fad615e60405160405180910390a150565b6000603360009054906101000a900460ff16905090565b6000610d53611b18565b6000610d6489898989898989611b67565b905080915050610d72611dc4565b979650505050505050565b600061010460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060008381526020019081526020016000206002015490509392505050565b600060019054906101000a900460ff16610e3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3490613c45565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ea3576040517f5415139400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610eab611dce565b610eb3611e27565b610ebb611e78565b610ecc610ec6611ed1565b826118ea565b610edd610ed7611ef9565b826118ea565b610ef5610ee8611ef9565b610ef0611ed1565b611f21565b610f0d610f00611ed1565b610f08611ed1565b611f21565b50565b6000610f1a611b18565b6000610f2a888888888888611f7d565b905080915050610f38611dc4565b9695505050505050565b600080600060019054906101000a900460ff16159050808015610f755750600160008054906101000a900460ff1660ff16105b80610fa25750610f84306121a2565b158015610fa15750600160008054906101000a900460ff1660ff16145b5b610fe1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd890613cd7565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561101e576001600060016101000a81548160ff0219169083151502179055505b600060fb81905550603c836110339190613a3d565b60fc81905550603c846110469190613a3d565b60fd81905550603c856110599190613a3d565b60fe819055508760ff60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508761010060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508661010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508561010260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506111766111716119cb565b610dee565b6001915080156111d35760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516111ca9190613d3c565b60405180910390a15b509695505050505050565b600092915050565b600061010460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060060160009054906101000a900460ff1690509392505050565b61126c6114ba565b6112ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a290613a1d565b60405180910390fd5b6112b36121c5565b565b600080600080600080600061010460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a815260200190815260200160002060008981526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff1615151515815250509050806040015181608001518260600151836000015184602001518560c001519650965096509650965096505093975093979195509350565b60006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b6114376114ba565b611476576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146d90613a1d565b60405180910390fd5b62015180816114859190613a3d565b60fc819055507fdb4fb2fd6b8b90f67bda8671842d5cab4eb4b7eba9683f5bcec9aba9473cc95760405160405180910390a150565b60006114d46114c7611ed1565b6114cf6119cb565b6113bd565b905090565b600061010460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060008381526020019081526020016000206001015490509392505050565b6000806000905060005b60fb5481101561172557600080611608868461010260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633bf4c082876040518263ffffffff1660e01b81526004016115c291906135bf565b602060405180830381865afa1580156115df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116039190613b3e565b6106b6565b905060005b815181101561170357600061010460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020600084848151811061167e5761167d61396b565b5b6020026020010151815260200190815260200160002090506000816000015442116116aa5760006116d1565b816001015442116116ca578160000154426116c59190613b6b565b6116d0565b81600101545b5b90508082600401546116e39190613a3d565b856116ee9190613b9f565b9450826116fa906138f4565b9250505061160d565b5081846117109190613b9f565b93508261171c906138f4565b92505050611554565b5080915050919050565b611738826108d9565b611741816118d6565b61174b83836119d3565b505050565b600080600061010360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050806020015181600001519250925050915091565b6000426117e28585856114d9565b111561181a576040517f707001b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611827858585612228565b905080611860576040517fb00fcb1e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60019150509392505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6118e7816118e26119cb565b6125ca565b50565b6118f482826113bd565b6119c75760016097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061196c6119cb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6119dd82826113bd565b15611ab15760006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611a566119cb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b611abd61264f565b6000603360006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611b016119cb565b604051611b0e9190613d66565b60405180910390a1565b600260c95403611b5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5490613dcd565b60405180910390fd5b600260c981905550565b60006101046000611b766119cb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000888152602001908152602001600020600087815260200190815260200160002060060160009054906101000a900460ff16611c19576040517f96ae3e8200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611c2d611c266119cb565b8989612228565b905080611c66576040517fb00fcb1e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82611db4576000896101046000611c7b6119cb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b815260200190815260200160002060008a815260200190815260200160002060020154611ce59190613b6b565b9050600062278d0060fc5442611cfb9190613b9f565b611d059190613b9f565b9050600080611d15848d8d612698565b9150915081611d50576040517fb00fcb1e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611daf611d5b6119cb565b3083868e8e8e61010060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612cbd90979695949392919063ffffffff16565b505050505b6001915050979650505050505050565b600160c981905550565b600060019054906101000a900460ff16611e1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1490613c45565b60405180910390fd5b611e25612e8a565b565b600060019054906101000a900460ff16611e76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6d90613c45565b60405180910390fd5b565b600060019054906101000a900460ff16611ec7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ebe90613c45565b60405180910390fd5b611ecf612ef6565b565b60007fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775905090565b60007f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a905090565b6000611f2c836108d9565b90508160976000858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b600080876101046000611f8e6119cb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000898152602001908152602001600020600088815260200190815260200160002060020154611ff89190613b9f565b905061010460006120076119cb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000888152602001908152602001600020600087815260200190815260200160002060060160009054906101000a900460ff16156120c857600061208d6120866119cb565b8989612228565b9050806120c6576040517fb00fcb1e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b600062278d0060fc54426120dc9190613b9f565b6120e69190613b9f565b90506000806120f6848b8b612698565b9150915081612131576040517fb00fcb1e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61219061213c6119cb565b3083868c8c8c61010060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612cbd90979695949392919063ffffffff16565b60019450505050509695505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6121cd612f4f565b6001603360006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586122116119cb565b60405161221e9190613d66565b60405180910390a1565b60008061010460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020600084815260200190815260200160002090508060060160009054906101000a900460ff166122d7576040517f96ae3e8200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160060160006101000a81548160ff02191690831515021790555060008160000154421161230857600061232f565b81600101544211612328578160000154426123239190613b6b565b61232e565b81600101545b5b905060008260040154826123439190613a3d565b90506000810361235957600193505050506125c3565b826004015461010360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546123b09190613b6b565b92505081905550826005015461010360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600082825461240e9190613b6b565b92505081905550600083600401549050600084600201549050600061010260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166326a6e9eb8a8a85876040518563ffffffff1660e01b815260040161248b9493929190613ded565b6020604051808303816000875af11580156124aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ce9190613e47565b9050600061010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379cc67908c876040518363ffffffff1660e01b8152600401612530929190613e74565b6020604051808303816000875af115801561254f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125739190613e47565b9050811580612580575080155b156125b7576040517fb00fcb1e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60019750505050505050505b9392505050565b6125d482826113bd565b61264b576125e181612f99565b6125ef8360001c6020612fc6565b604051602001612600929190613fa6565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612642919061402a565b60405180910390fd5b5050565b612657610d32565b612696576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161268d90614098565b60405180910390fd5b565b600080670de0b6b3a76400008510156126dc576040517ecd474300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61010260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635657f79d8587866040518463ffffffff1660e01b815260040161273c939291906140b8565b602060405180830381865afa158015612759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277d9190613e47565b6127b3576040517f1e45d1b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61010460006127c06119cb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020600084815260200190815260200160002060060160009054906101000a900460ff1615612864576040517f707001b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061010460006128736119cb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060008581526020019081526020016000209050600061010360006128e06119cb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816002015461010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a0823161296a6119cb565b6040518263ffffffff1660e01b81526004016129869190613d66565b602060405180830381865afa1580156129a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129c79190613b3e565b6129d19190613b6b565b90506000670de0b6b3a76400008961010260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635952a8c68b8b6040518363ffffffff1660e01b8152600401612a3d92919061389c565b602060405180830381865afa158015612a5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a7e9190613b3e565b612a889190613a3d565b612a92919061411e565b90506000818460010154612aa69190613b9f565b90508260fe5482612ab79190613a3d565b1115612aef576040517fe4b581a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008284612afd919061411e565b905082856001016000828254612b139190613b9f565b925050819055508a866002018190555082866004018190555042866003018190555060fd5442612b439190613b9f565b866000018190555060fc548110612b6b5760fc548660000154612b669190613b9f565b612b7c565b808660000154612b7b9190613b9f565b5b86600101819055508281612b909190613a3d565b866005018190555060018660060160006101000a81548160ff0219169083151502179055508560050154856002016000828254612bcd9190613b9f565b925050819055508460000154866001015410612bed578560010154612bf3565b84600001545b8560000181905550600061010260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d9895c708c8c8f886040518563ffffffff1660e01b8152600401612c5f9493929190613ded565b6020604051808303816000875af1158015612c7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca29190613e47565b90508087600501549850985050505050505050935093915050565b60008873ffffffffffffffffffffffffffffffffffffffff16637ecebe00896040518263ffffffff1660e01b8152600401612cf89190613d66565b602060405180830381865afa158015612d15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d399190613b3e565b90508873ffffffffffffffffffffffffffffffffffffffff1663d505accf898989898989896040518863ffffffff1660e01b8152600401612d80979695949392919061415e565b600060405180830381600087803b158015612d9a57600080fd5b505af1158015612dae573d6000803e3d6000fd5b5050505060008973ffffffffffffffffffffffffffffffffffffffff16637ecebe008a6040518263ffffffff1660e01b8152600401612ded9190613d66565b602060405180830381865afa158015612e0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2e9190613b3e565b9050600182612e3d9190613b9f565b8114612e7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e759061423f565b60405180910390fd5b50505050505050505050565b600060019054906101000a900460ff16612ed9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ed090613c45565b60405180910390fd5b6000603360006101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff16612f45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f3c90613c45565b60405180910390fd5b600160c981905550565b612f57610d32565b15612f97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f8e906142ab565b60405180910390fd5b565b6060612fbf8273ffffffffffffffffffffffffffffffffffffffff16601460ff16612fc6565b9050919050565b606060006002836002612fd99190613a3d565b612fe39190613b9f565b67ffffffffffffffff811115612ffc57612ffb61393c565b5b6040519080825280601f01601f19166020018201604052801561302e5781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106130665761306561396b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106130ca576130c961396b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261310a9190613a3d565b6131149190613b9f565b90505b60018111156131b4577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106131565761315561396b565b5b1a60f81b82828151811061316d5761316c61396b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806131ad906142cb565b9050613117565b50600084146131f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131ef90614340565b60405180910390fd5b8091505092915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61323c81613207565b811461324757600080fd5b50565b60008135905061325981613233565b92915050565b60006020828403121561327557613274613202565b5b60006132838482850161324a565b91505092915050565b60008115159050919050565b6132a18161328c565b82525050565b60006020820190506132bc6000830184613298565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006132ed826132c2565b9050919050565b6132fd816132e2565b811461330857600080fd5b50565b60008135905061331a816132f4565b92915050565b6000819050919050565b61333381613320565b811461333e57600080fd5b50565b6000813590506133508161332a565b92915050565b60008060006060848603121561336f5761336e613202565b5b600061337d8682870161330b565b935050602061338e86828701613341565b925050604061339f86828701613341565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6133de81613320565b82525050565b60006133f083836133d5565b60208301905092915050565b6000602082019050919050565b6000613414826133a9565b61341e81856133b4565b9350613429836133c5565b8060005b8381101561345a57815161344188826133e4565b975061344c836133fc565b92505060018101905061342d565b5085935050505092915050565b600060208201905081810360008301526134818184613409565b905092915050565b6000819050919050565b61349c81613489565b81146134a757600080fd5b50565b6000813590506134b981613493565b92915050565b6000602082840312156134d5576134d4613202565b5b60006134e3848285016134aa565b91505092915050565b6134f581613489565b82525050565b600060208201905061351060008301846134ec565b92915050565b60006020828403121561352c5761352b613202565b5b600061353a84828501613341565b91505092915050565b6000806040838503121561355a57613559613202565b5b6000613568858286016134aa565b92505060206135798582860161330b565b9150509250929050565b60006020828403121561359957613598613202565b5b60006135a78482850161330b565b91505092915050565b6135b981613320565b82525050565b60006020820190506135d460008301846135b0565b92915050565b600080604083850312156135f1576135f0613202565b5b60006135ff8582860161330b565b925050602061361085828601613341565b9150509250929050565b600060ff82169050919050565b6136308161361a565b811461363b57600080fd5b50565b60008135905061364d81613627565b92915050565b61365c8161328c565b811461366757600080fd5b50565b60008135905061367981613653565b92915050565b600080600080600080600060e0888a03121561369e5761369d613202565b5b60006136ac8a828b01613341565b97505060206136bd8a828b01613341565b96505060406136ce8a828b01613341565b95505060606136df8a828b0161363e565b94505060806136f08a828b016134aa565b93505060a06137018a828b016134aa565b92505060c06137128a828b0161366a565b91505092959891949750929550565b60008060008060008060c0878903121561373e5761373d613202565b5b600061374c89828a01613341565b965050602061375d89828a01613341565b955050604061376e89828a01613341565b945050606061377f89828a0161363e565b935050608061379089828a016134aa565b92505060a06137a189828a016134aa565b9150509295509295509295565b60008060008060008060c087890312156137cb576137ca613202565b5b60006137d989828a0161330b565b96505060206137ea89828a0161330b565b95505060406137fb89828a0161330b565b945050606061380c89828a01613341565b935050608061381d89828a01613341565b92505060a061382e89828a01613341565b9150509295509295509295565b600060c08201905061385060008301896135b0565b61385d60208301886135b0565b61386a60408301876135b0565b61387760608301866135b0565b61388460808301856135b0565b61389160a0830184613298565b979650505050505050565b60006040820190506138b160008301856135b0565b6138be60208301846135b0565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006138ff82613320565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613931576139306138c5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060008201527f7468697320616374696f6e2e0000000000000000000000000000000000000000602082015250565b6000613a07602c8361399a565b9150613a12826139ab565b604082019050919050565b60006020820190508181036000830152613a36816139fa565b9050919050565b6000613a4882613320565b9150613a5383613320565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613a8c57613a8b6138c5565b5b828202905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000613af3602f8361399a565b9150613afe82613a97565b604082019050919050565b60006020820190508181036000830152613b2281613ae6565b9050919050565b600081519050613b388161332a565b92915050565b600060208284031215613b5457613b53613202565b5b6000613b6284828501613b29565b91505092915050565b6000613b7682613320565b9150613b8183613320565b9250828203905081811115613b9957613b986138c5565b5b92915050565b6000613baa82613320565b9150613bb583613320565b9250828201905080821115613bcd57613bcc6138c5565b5b92915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000613c2f602b8361399a565b9150613c3a82613bd3565b604082019050919050565b60006020820190508181036000830152613c5e81613c22565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613cc1602e8361399a565b9150613ccc82613c65565b604082019050919050565b60006020820190508181036000830152613cf081613cb4565b9050919050565b6000819050919050565b6000819050919050565b6000613d26613d21613d1c84613cf7565b613d01565b61361a565b9050919050565b613d3681613d0b565b82525050565b6000602082019050613d516000830184613d2d565b92915050565b613d60816132e2565b82525050565b6000602082019050613d7b6000830184613d57565b92915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613db7601f8361399a565b9150613dc282613d81565b602082019050919050565b60006020820190508181036000830152613de681613daa565b9050919050565b6000608082019050613e0260008301876135b0565b613e0f60208301866135b0565b613e1c60408301856135b0565b613e2960608301846135b0565b95945050505050565b600081519050613e4181613653565b92915050565b600060208284031215613e5d57613e5c613202565b5b6000613e6b84828501613e32565b91505092915050565b6000604082019050613e896000830185613d57565b613e9660208301846135b0565b9392505050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000613ede601783613e9d565b9150613ee982613ea8565b601782019050919050565b600081519050919050565b60005b83811015613f1d578082015181840152602081019050613f02565b60008484015250505050565b6000613f3482613ef4565b613f3e8185613e9d565b9350613f4e818560208601613eff565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000613f90601183613e9d565b9150613f9b82613f5a565b601182019050919050565b6000613fb182613ed1565b9150613fbd8285613f29565b9150613fc882613f83565b9150613fd48284613f29565b91508190509392505050565b6000601f19601f8301169050919050565b6000613ffc82613ef4565b614006818561399a565b9350614016818560208601613eff565b61401f81613fe0565b840191505092915050565b600060208201905081810360008301526140448184613ff1565b905092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b600061408260148361399a565b915061408d8261404c565b602082019050919050565b600060208201905081810360008301526140b181614075565b9050919050565b60006060820190506140cd60008301866135b0565b6140da60208301856135b0565b6140e760408301846135b0565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061412982613320565b915061413483613320565b925082614144576141436140ef565b5b828204905092915050565b6141588161361a565b82525050565b600060e082019050614173600083018a613d57565b6141806020830189613d57565b61418d60408301886135b0565b61419a60608301876135b0565b6141a7608083018661414f565b6141b460a08301856134ec565b6141c160c08301846134ec565b98975050505050505050565b7f5361666545524332303a207065726d697420646964206e6f742073756363656560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b600061422960218361399a565b9150614234826141cd565b604082019050919050565b600060208201905081810360008301526142588161421c565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b600061429560108361399a565b91506142a08261425f565b602082019050919050565b600060208201905081810360008301526142c481614288565b9050919050565b60006142d682613320565b9150600082036142e9576142e86138c5565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b600061432a60208361399a565b9150614335826142f4565b602082019050919050565b600060208201905081810360008301526143598161431d565b905091905056fea2646970667358221220b6dd0a9ead9dd2af36e35ca196795dbce265ae5257ec9529513441bafa0bc2b964736f6c63430008100033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4396 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E8847BD GT PUSH2 0x104 JUMPI DUP1 PUSH4 0xA217FDDF GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xCFF5EEDE GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xCFF5EEDE EQ PUSH2 0x58F JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x5BF JUMPI DUP1 PUSH4 0xEC249164 EQ PUSH2 0x5DB JUMPI DUP1 PUSH4 0xF099DD50 EQ PUSH2 0x60C JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x507 JUMPI DUP1 PUSH4 0xB4706268 EQ PUSH2 0x525 JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x541 JUMPI DUP1 PUSH4 0xC392E850 EQ PUSH2 0x55F JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x81280D2B GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x81280D2B EQ PUSH2 0x468 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x498 JUMPI DUP1 PUSH4 0x88295FB2 EQ PUSH2 0x4A2 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x4D7 JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x6E8847BD EQ PUSH2 0x3D8 JUMPI DUP1 PUSH4 0x728CDBCA EQ PUSH2 0x408 JUMPI DUP1 PUSH4 0x77BD35FC EQ PUSH2 0x438 JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x42F6B8A7 GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x5C975ABB GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x33E JUMPI DUP1 PUSH4 0x642ADC28 EQ PUSH2 0x35C JUMPI DUP1 PUSH4 0x6B6D105E EQ PUSH2 0x38C JUMPI DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x3BC JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x42F6B8A7 EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0x4E94C048 EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0x56EB66BB EQ PUSH2 0x322 JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x24B7AB24 GT PUSH2 0x1AD JUMPI DUP1 PUSH4 0x24B7AB24 EQ PUSH2 0x264 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x280 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x2B8 JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x1A5C8F28 EQ PUSH2 0x204 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x234 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E9 SWAP2 SWAP1 PUSH2 0x325F JUMP JUMPDEST PUSH2 0x63C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0x32A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x219 SWAP2 SWAP1 PUSH2 0x3356 JUMP JUMPDEST PUSH2 0x6B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x22B SWAP2 SWAP1 PUSH2 0x3467 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x24E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x249 SWAP2 SWAP1 PUSH2 0x34BF JUMP JUMPDEST PUSH2 0x8D9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25B SWAP2 SWAP1 PUSH2 0x34FB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x279 SWAP2 SWAP1 PUSH2 0x3516 JUMP JUMPDEST PUSH2 0x8F9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x295 SWAP2 SWAP1 PUSH2 0x3543 JUMP JUMPDEST PUSH2 0x983 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2B6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2B1 SWAP2 SWAP1 PUSH2 0x3543 JUMP JUMPDEST PUSH2 0x9A4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C0 PUSH2 0xA27 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2DC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D7 SWAP2 SWAP1 PUSH2 0x3583 JUMP JUMPDEST PUSH2 0xA78 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E9 SWAP2 SWAP1 PUSH2 0x35BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x30C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x307 SWAP2 SWAP1 PUSH2 0x35DA JUMP JUMPDEST PUSH2 0xAF3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x319 SWAP2 SWAP1 PUSH2 0x35BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x33C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x337 SWAP2 SWAP1 PUSH2 0x3516 JUMP JUMPDEST PUSH2 0xCAA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x346 PUSH2 0xD32 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x353 SWAP2 SWAP1 PUSH2 0x32A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x376 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x371 SWAP2 SWAP1 PUSH2 0x367F JUMP JUMPDEST PUSH2 0xD49 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x383 SWAP2 SWAP1 PUSH2 0x32A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3A1 SWAP2 SWAP1 PUSH2 0x3356 JUMP JUMPDEST PUSH2 0xD7D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3B3 SWAP2 SWAP1 PUSH2 0x35BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3D6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3D1 SWAP2 SWAP1 PUSH2 0x3583 JUMP JUMPDEST PUSH2 0xDEE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3F2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3ED SWAP2 SWAP1 PUSH2 0x3721 JUMP JUMPDEST PUSH2 0xF10 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3FF SWAP2 SWAP1 PUSH2 0x32A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x422 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x41D SWAP2 SWAP1 PUSH2 0x37AE JUMP JUMPDEST PUSH2 0xF42 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x42F SWAP2 SWAP1 PUSH2 0x32A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x452 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x44D SWAP2 SWAP1 PUSH2 0x35DA JUMP JUMPDEST PUSH2 0x11DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45F SWAP2 SWAP1 PUSH2 0x32A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x482 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x47D SWAP2 SWAP1 PUSH2 0x3356 JUMP JUMPDEST PUSH2 0x11E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x48F SWAP2 SWAP1 PUSH2 0x32A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4A0 PUSH2 0x1264 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4BC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4B7 SWAP2 SWAP1 PUSH2 0x3356 JUMP JUMPDEST PUSH2 0x12B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4CE SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x383B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4F1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4EC SWAP2 SWAP1 PUSH2 0x3543 JUMP JUMPDEST PUSH2 0x13BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4FE SWAP2 SWAP1 PUSH2 0x32A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x50F PUSH2 0x1428 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x51C SWAP2 SWAP1 PUSH2 0x34FB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x53F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x53A SWAP2 SWAP1 PUSH2 0x3516 JUMP JUMPDEST PUSH2 0x142F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x549 PUSH2 0x14BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x556 SWAP2 SWAP1 PUSH2 0x32A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x579 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x574 SWAP2 SWAP1 PUSH2 0x3356 JUMP JUMPDEST PUSH2 0x14D9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x586 SWAP2 SWAP1 PUSH2 0x35BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5A9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5A4 SWAP2 SWAP1 PUSH2 0x3583 JUMP JUMPDEST PUSH2 0x154A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B6 SWAP2 SWAP1 PUSH2 0x35BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5D9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5D4 SWAP2 SWAP1 PUSH2 0x3543 JUMP JUMPDEST PUSH2 0x172F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5F5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5F0 SWAP2 SWAP1 PUSH2 0x3583 JUMP JUMPDEST PUSH2 0x1750 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x603 SWAP3 SWAP2 SWAP1 PUSH2 0x389C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x626 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x621 SWAP2 SWAP1 PUSH2 0x3356 JUMP JUMPDEST PUSH2 0x17D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x633 SWAP2 SWAP1 PUSH2 0x32A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x6AF JUMPI POP PUSH2 0x6AE DUP3 PUSH2 0x186C JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7B5 JUMPI PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0xC0 ADD MLOAD ISZERO PUSH2 0x7A3 JUMPI DUP3 PUSH2 0x7A0 SWAP1 PUSH2 0x38F4 JUMP JUMPDEST SWAP3 POP JUMPDEST DUP2 PUSH2 0x7AD SWAP1 PUSH2 0x38F4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x6BC JUMP JUMPDEST POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7D2 JUMPI PUSH2 0x7D1 PUSH2 0x393C JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x800 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x8CB JUMPI PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x8B9 JUMPI DUP2 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x8A0 JUMPI PUSH2 0x89F PUSH2 0x396B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH2 0x8B6 SWAP1 PUSH2 0x38F4 JUMP JUMPDEST SWAP3 POP JUMPDEST DUP2 PUSH2 0x8C3 SWAP1 PUSH2 0x38F4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x807 JUMP JUMPDEST POP DUP2 SWAP4 POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x901 PUSH2 0x14BA JUMP JUMPDEST PUSH2 0x940 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x937 SWAP1 PUSH2 0x3A1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE10 DUP2 PUSH2 0x94E SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST PUSH1 0xFD DUP2 SWAP1 SSTORE POP PUSH32 0x75C07EB064B8CCF959BCC601B55315CA198E67B597DC0A7B93E130F8CA779A67 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x98C DUP3 PUSH2 0x8D9 JUMP JUMPDEST PUSH2 0x995 DUP2 PUSH2 0x18D6 JUMP JUMPDEST PUSH2 0x99F DUP4 DUP4 PUSH2 0x18EA JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x9AC PUSH2 0x19CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xA19 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA10 SWAP1 PUSH2 0x3B09 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA23 DUP3 DUP3 PUSH2 0x19D3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xA2F PUSH2 0x14BA JUMP JUMPDEST PUSH2 0xA6E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA65 SWAP1 PUSH2 0x3A1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA76 PUSH2 0x1AB5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x103 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x40 ADD MLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x0 PUSH2 0xBA3 DUP6 DUP6 PUSH2 0x102 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3BF4C082 DUP9 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB5D SWAP2 SWAP1 PUSH2 0x35BF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB7A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB9E SWAP2 SWAP1 PUSH2 0x3B3E JUMP JUMPDEST PUSH2 0x6B6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xC9E JUMPI PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xC19 JUMPI PUSH2 0xC18 PUSH2 0x396B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD TIMESTAMP GT PUSH2 0xC45 JUMPI PUSH1 0x0 PUSH2 0xC6C JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD TIMESTAMP GT PUSH2 0xC65 JUMPI DUP2 PUSH1 0x0 ADD SLOAD TIMESTAMP PUSH2 0xC60 SWAP2 SWAP1 PUSH2 0x3B6B JUMP JUMPDEST PUSH2 0xC6B JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD JUMPDEST JUMPDEST SWAP1 POP DUP1 DUP3 PUSH1 0x4 ADD SLOAD PUSH2 0xC7E SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST DUP6 PUSH2 0xC89 SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST SWAP5 POP DUP3 PUSH2 0xC95 SWAP1 PUSH2 0x38F4 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0xBA8 JUMP JUMPDEST POP DUP2 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xCB2 PUSH2 0x14BA JUMP JUMPDEST PUSH2 0xCF1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCE8 SWAP1 PUSH2 0x3A1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3C DUP2 PUSH2 0xCFE SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST PUSH1 0xFE DUP2 SWAP1 SSTORE POP PUSH31 0x3A5A2424463BB22C8FC4C0F2422B7A18712B7713F9619CAA313F499FAD615E PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD53 PUSH2 0x1B18 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD64 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x1B67 JUMP JUMPDEST SWAP1 POP DUP1 SWAP2 POP POP PUSH2 0xD72 PUSH2 0x1DC4 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xE3D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE34 SWAP1 PUSH2 0x3C45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xEA3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xEAB PUSH2 0x1DCE JUMP JUMPDEST PUSH2 0xEB3 PUSH2 0x1E27 JUMP JUMPDEST PUSH2 0xEBB PUSH2 0x1E78 JUMP JUMPDEST PUSH2 0xECC PUSH2 0xEC6 PUSH2 0x1ED1 JUMP JUMPDEST DUP3 PUSH2 0x18EA JUMP JUMPDEST PUSH2 0xEDD PUSH2 0xED7 PUSH2 0x1EF9 JUMP JUMPDEST DUP3 PUSH2 0x18EA JUMP JUMPDEST PUSH2 0xEF5 PUSH2 0xEE8 PUSH2 0x1EF9 JUMP JUMPDEST PUSH2 0xEF0 PUSH2 0x1ED1 JUMP JUMPDEST PUSH2 0x1F21 JUMP JUMPDEST PUSH2 0xF0D PUSH2 0xF00 PUSH2 0x1ED1 JUMP JUMPDEST PUSH2 0xF08 PUSH2 0x1ED1 JUMP JUMPDEST PUSH2 0x1F21 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF1A PUSH2 0x1B18 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF2A DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH2 0x1F7D JUMP JUMPDEST SWAP1 POP DUP1 SWAP2 POP POP PUSH2 0xF38 PUSH2 0x1DC4 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0xF75 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0xFA2 JUMPI POP PUSH2 0xF84 ADDRESS PUSH2 0x21A2 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0xFA1 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0xFE1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFD8 SWAP1 PUSH2 0x3CD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x101E JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH1 0xFB DUP2 SWAP1 SSTORE POP PUSH1 0x3C DUP4 PUSH2 0x1033 SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST PUSH1 0xFC DUP2 SWAP1 SSTORE POP PUSH1 0x3C DUP5 PUSH2 0x1046 SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST PUSH1 0xFD DUP2 SWAP1 SSTORE POP PUSH1 0x3C DUP6 PUSH2 0x1059 SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST PUSH1 0xFE DUP2 SWAP1 SSTORE POP DUP8 PUSH1 0xFF PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP8 PUSH2 0x100 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP7 PUSH2 0x101 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP6 PUSH2 0x102 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1176 PUSH2 0x1171 PUSH2 0x19CB JUMP JUMPDEST PUSH2 0xDEE JUMP JUMPDEST PUSH1 0x1 SWAP2 POP DUP1 ISZERO PUSH2 0x11D3 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x11CA SWAP2 SWAP1 PUSH2 0x3D3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x126C PUSH2 0x14BA JUMP JUMPDEST PUSH2 0x12AB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A2 SWAP1 PUSH2 0x3A1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x12B3 PUSH2 0x21C5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x40 ADD MLOAD DUP2 PUSH1 0x80 ADD MLOAD DUP3 PUSH1 0x60 ADD MLOAD DUP4 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0xC0 ADD MLOAD SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP POP SWAP4 SWAP8 POP SWAP4 SWAP8 SWAP2 SWAP6 POP SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH2 0x1437 PUSH2 0x14BA JUMP JUMPDEST PUSH2 0x1476 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x146D SWAP1 PUSH2 0x3A1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x15180 DUP2 PUSH2 0x1485 SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST PUSH1 0xFC DUP2 SWAP1 SSTORE POP PUSH32 0xDB4FB2FD6B8B90F67BDA8671842D5CAB4EB4B7EBA9683F5BCEC9ABA9473CC957 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14D4 PUSH2 0x14C7 PUSH2 0x1ED1 JUMP JUMPDEST PUSH2 0x14CF PUSH2 0x19CB JUMP JUMPDEST PUSH2 0x13BD JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0xFB SLOAD DUP2 LT ISZERO PUSH2 0x1725 JUMPI PUSH1 0x0 DUP1 PUSH2 0x1608 DUP7 DUP5 PUSH2 0x102 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3BF4C082 DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15C2 SWAP2 SWAP1 PUSH2 0x35BF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x15DF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1603 SWAP2 SWAP1 PUSH2 0x3B3E JUMP JUMPDEST PUSH2 0x6B6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x1703 JUMPI PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x167E JUMPI PUSH2 0x167D PUSH2 0x396B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD TIMESTAMP GT PUSH2 0x16AA JUMPI PUSH1 0x0 PUSH2 0x16D1 JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD TIMESTAMP GT PUSH2 0x16CA JUMPI DUP2 PUSH1 0x0 ADD SLOAD TIMESTAMP PUSH2 0x16C5 SWAP2 SWAP1 PUSH2 0x3B6B JUMP JUMPDEST PUSH2 0x16D0 JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD JUMPDEST JUMPDEST SWAP1 POP DUP1 DUP3 PUSH1 0x4 ADD SLOAD PUSH2 0x16E3 SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST DUP6 PUSH2 0x16EE SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST SWAP5 POP DUP3 PUSH2 0x16FA SWAP1 PUSH2 0x38F4 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x160D JUMP JUMPDEST POP DUP2 DUP5 PUSH2 0x1710 SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST SWAP4 POP DUP3 PUSH2 0x171C SWAP1 PUSH2 0x38F4 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x1554 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1738 DUP3 PUSH2 0x8D9 JUMP JUMPDEST PUSH2 0x1741 DUP2 PUSH2 0x18D6 JUMP JUMPDEST PUSH2 0x174B DUP4 DUP4 PUSH2 0x19D3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x103 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD DUP2 PUSH1 0x0 ADD MLOAD SWAP3 POP SWAP3 POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 TIMESTAMP PUSH2 0x17E2 DUP6 DUP6 DUP6 PUSH2 0x14D9 JUMP JUMPDEST GT ISZERO PUSH2 0x181A JUMPI PUSH1 0x40 MLOAD PUSH32 0x707001B500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1827 DUP6 DUP6 DUP6 PUSH2 0x2228 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1860 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB00FCB1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18E7 DUP2 PUSH2 0x18E2 PUSH2 0x19CB JUMP JUMPDEST PUSH2 0x25CA JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x18F4 DUP3 DUP3 PUSH2 0x13BD JUMP JUMPDEST PUSH2 0x19C7 JUMPI PUSH1 0x1 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x196C PUSH2 0x19CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x19DD DUP3 DUP3 PUSH2 0x13BD JUMP JUMPDEST ISZERO PUSH2 0x1AB1 JUMPI PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x1A56 PUSH2 0x19CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1ABD PUSH2 0x264F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x1B01 PUSH2 0x19CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B0E SWAP2 SWAP1 PUSH2 0x3D66 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0xC9 SLOAD SUB PUSH2 0x1B5D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B54 SWAP1 PUSH2 0x3DCD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 PUSH2 0x1B76 PUSH2 0x19CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1C19 JUMPI PUSH1 0x40 MLOAD PUSH32 0x96AE3E8200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1C2D PUSH2 0x1C26 PUSH2 0x19CB JUMP JUMPDEST DUP10 DUP10 PUSH2 0x2228 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1C66 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB00FCB1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH2 0x1DB4 JUMPI PUSH1 0x0 DUP10 PUSH2 0x104 PUSH1 0x0 PUSH2 0x1C7B PUSH2 0x19CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x1CE5 SWAP2 SWAP1 PUSH2 0x3B6B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0x278D00 PUSH1 0xFC SLOAD TIMESTAMP PUSH2 0x1CFB SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST PUSH2 0x1D05 SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x1D15 DUP5 DUP14 DUP14 PUSH2 0x2698 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1D50 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB00FCB1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1DAF PUSH2 0x1D5B PUSH2 0x19CB JUMP JUMPDEST ADDRESS DUP4 DUP7 DUP15 DUP15 DUP15 PUSH2 0x100 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2CBD SWAP1 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1E1D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E14 SWAP1 PUSH2 0x3C45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1E25 PUSH2 0x2E8A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1E76 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E6D SWAP1 PUSH2 0x3C45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1EC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1EBE SWAP1 PUSH2 0x3C45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1ECF PUSH2 0x2EF6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F2C DUP4 PUSH2 0x8D9 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x97 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP8 PUSH2 0x104 PUSH1 0x0 PUSH2 0x1F8E PUSH2 0x19CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x1FF8 SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST SWAP1 POP PUSH2 0x104 PUSH1 0x0 PUSH2 0x2007 PUSH2 0x19CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x20C8 JUMPI PUSH1 0x0 PUSH2 0x208D PUSH2 0x2086 PUSH2 0x19CB JUMP JUMPDEST DUP10 DUP10 PUSH2 0x2228 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x20C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB00FCB1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST PUSH1 0x0 PUSH3 0x278D00 PUSH1 0xFC SLOAD TIMESTAMP PUSH2 0x20DC SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST PUSH2 0x20E6 SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x20F6 DUP5 DUP12 DUP12 PUSH2 0x2698 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x2131 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB00FCB1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2190 PUSH2 0x213C PUSH2 0x19CB JUMP JUMPDEST ADDRESS DUP4 DUP7 DUP13 DUP13 DUP13 PUSH2 0x100 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2CBD SWAP1 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 SWAP5 POP POP POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x21CD PUSH2 0x2F4F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x2211 PUSH2 0x19CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x221E SWAP2 SWAP1 PUSH2 0x3D66 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x104 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x22D7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x96AE3E8200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x6 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD TIMESTAMP GT PUSH2 0x2308 JUMPI PUSH1 0x0 PUSH2 0x232F JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD TIMESTAMP GT PUSH2 0x2328 JUMPI DUP2 PUSH1 0x0 ADD SLOAD TIMESTAMP PUSH2 0x2323 SWAP2 SWAP1 PUSH2 0x3B6B JUMP JUMPDEST PUSH2 0x232E JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x4 ADD SLOAD DUP3 PUSH2 0x2343 SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SUB PUSH2 0x2359 JUMPI PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x25C3 JUMP JUMPDEST DUP3 PUSH1 0x4 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x23B0 SWAP2 SWAP1 PUSH2 0x3B6B JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x5 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x240E SWAP2 SWAP1 PUSH2 0x3B6B JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP4 PUSH1 0x4 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0x2 ADD SLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x102 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x26A6E9EB DUP11 DUP11 DUP6 DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x248B SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3DED JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x24AA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x24CE SWAP2 SWAP1 PUSH2 0x3E47 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x79CC6790 DUP13 DUP8 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2530 SWAP3 SWAP2 SWAP1 PUSH2 0x3E74 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x254F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2573 SWAP2 SWAP1 PUSH2 0x3E47 JUMP JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 PUSH2 0x2580 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x25B7 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB00FCB1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP8 POP POP POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x25D4 DUP3 DUP3 PUSH2 0x13BD JUMP JUMPDEST PUSH2 0x264B JUMPI PUSH2 0x25E1 DUP2 PUSH2 0x2F99 JUMP JUMPDEST PUSH2 0x25EF DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0x2FC6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2600 SWAP3 SWAP2 SWAP1 PUSH2 0x3FA6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2642 SWAP2 SWAP1 PUSH2 0x402A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x2657 PUSH2 0xD32 JUMP JUMPDEST PUSH2 0x2696 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x268D SWAP1 PUSH2 0x4098 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH8 0xDE0B6B3A7640000 DUP6 LT ISZERO PUSH2 0x26DC JUMPI PUSH1 0x40 MLOAD PUSH31 0xCD474300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x102 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5657F79D DUP6 DUP8 DUP7 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x273C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x40B8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2759 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x277D SWAP2 SWAP1 PUSH2 0x3E47 JUMP JUMPDEST PUSH2 0x27B3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1E45D1B400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x104 PUSH1 0x0 PUSH2 0x27C0 PUSH2 0x19CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x2864 JUMPI PUSH1 0x40 MLOAD PUSH32 0x707001B500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 PUSH2 0x2873 PUSH2 0x19CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x103 PUSH1 0x0 PUSH2 0x28E0 PUSH2 0x19CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x2 ADD SLOAD PUSH2 0x101 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 PUSH2 0x296A PUSH2 0x19CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2986 SWAP2 SWAP1 PUSH2 0x3D66 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x29A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x29C7 SWAP2 SWAP1 PUSH2 0x3B3E JUMP JUMPDEST PUSH2 0x29D1 SWAP2 SWAP1 PUSH2 0x3B6B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP10 PUSH2 0x102 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5952A8C6 DUP12 DUP12 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A3D SWAP3 SWAP2 SWAP1 PUSH2 0x389C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A5A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2A7E SWAP2 SWAP1 PUSH2 0x3B3E JUMP JUMPDEST PUSH2 0x2A88 SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST PUSH2 0x2A92 SWAP2 SWAP1 PUSH2 0x411E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 DUP5 PUSH1 0x1 ADD SLOAD PUSH2 0x2AA6 SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0xFE SLOAD DUP3 PUSH2 0x2AB7 SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST GT ISZERO PUSH2 0x2AEF JUMPI PUSH1 0x40 MLOAD PUSH32 0xE4B581A500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 PUSH2 0x2AFD SWAP2 SWAP1 PUSH2 0x411E JUMP JUMPDEST SWAP1 POP DUP3 DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2B13 SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP11 DUP7 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP DUP3 DUP7 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP TIMESTAMP DUP7 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP PUSH1 0xFD SLOAD TIMESTAMP PUSH2 0x2B43 SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST DUP7 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH1 0xFC SLOAD DUP2 LT PUSH2 0x2B6B JUMPI PUSH1 0xFC SLOAD DUP7 PUSH1 0x0 ADD SLOAD PUSH2 0x2B66 SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST PUSH2 0x2B7C JUMP JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD SLOAD PUSH2 0x2B7B SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST JUMPDEST DUP7 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP3 DUP2 PUSH2 0x2B90 SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST DUP7 PUSH1 0x5 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP7 PUSH1 0x6 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP6 PUSH1 0x5 ADD SLOAD DUP6 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2BCD SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x0 ADD SLOAD DUP7 PUSH1 0x1 ADD SLOAD LT PUSH2 0x2BED JUMPI DUP6 PUSH1 0x1 ADD SLOAD PUSH2 0x2BF3 JUMP JUMPDEST DUP5 PUSH1 0x0 ADD SLOAD JUMPDEST DUP6 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x102 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD9895C70 DUP13 DUP13 DUP16 DUP9 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C5F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3DED JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2C7E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2CA2 SWAP2 SWAP1 PUSH2 0x3E47 JUMP JUMPDEST SWAP1 POP DUP1 DUP8 PUSH1 0x5 ADD SLOAD SWAP9 POP SWAP9 POP POP POP POP POP POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7ECEBE00 DUP10 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2CF8 SWAP2 SWAP1 PUSH2 0x3D66 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2D15 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2D39 SWAP2 SWAP1 PUSH2 0x3B3E JUMP JUMPDEST SWAP1 POP DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD505ACCF DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D80 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x415E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2DAE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7ECEBE00 DUP11 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DED SWAP2 SWAP1 PUSH2 0x3D66 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E0A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2E2E SWAP2 SWAP1 PUSH2 0x3B3E JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP3 PUSH2 0x2E3D SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST DUP2 EQ PUSH2 0x2E7E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E75 SWAP1 PUSH2 0x423F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2ED9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2ED0 SWAP1 PUSH2 0x3C45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2F45 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F3C SWAP1 PUSH2 0x3C45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x2F57 PUSH2 0xD32 JUMP JUMPDEST ISZERO PUSH2 0x2F97 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F8E SWAP1 PUSH2 0x42AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2FBF DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0x2FC6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0x2FD9 SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST PUSH2 0x2FE3 SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2FFC JUMPI PUSH2 0x2FFB PUSH2 0x393C JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x302E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3066 JUMPI PUSH2 0x3065 PUSH2 0x396B JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x30CA JUMPI PUSH2 0x30C9 PUSH2 0x396B JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0x310A SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST PUSH2 0x3114 SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x31B4 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0x3156 JUMPI PUSH2 0x3155 PUSH2 0x396B JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x316D JUMPI PUSH2 0x316C PUSH2 0x396B JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0x31AD SWAP1 PUSH2 0x42CB JUMP JUMPDEST SWAP1 POP PUSH2 0x3117 JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0x31F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x31EF SWAP1 PUSH2 0x4340 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x323C DUP2 PUSH2 0x3207 JUMP JUMPDEST DUP2 EQ PUSH2 0x3247 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3259 DUP2 PUSH2 0x3233 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3275 JUMPI PUSH2 0x3274 PUSH2 0x3202 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3283 DUP5 DUP3 DUP6 ADD PUSH2 0x324A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x32A1 DUP2 PUSH2 0x328C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x32BC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3298 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32ED DUP3 PUSH2 0x32C2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x32FD DUP2 PUSH2 0x32E2 JUMP JUMPDEST DUP2 EQ PUSH2 0x3308 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x331A DUP2 PUSH2 0x32F4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3333 DUP2 PUSH2 0x3320 JUMP JUMPDEST DUP2 EQ PUSH2 0x333E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3350 DUP2 PUSH2 0x332A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x336F JUMPI PUSH2 0x336E PUSH2 0x3202 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x337D DUP7 DUP3 DUP8 ADD PUSH2 0x330B JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x338E DUP7 DUP3 DUP8 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x339F DUP7 DUP3 DUP8 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x33DE DUP2 PUSH2 0x3320 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33F0 DUP4 DUP4 PUSH2 0x33D5 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3414 DUP3 PUSH2 0x33A9 JUMP JUMPDEST PUSH2 0x341E DUP2 DUP6 PUSH2 0x33B4 JUMP JUMPDEST SWAP4 POP PUSH2 0x3429 DUP4 PUSH2 0x33C5 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x345A JUMPI DUP2 MLOAD PUSH2 0x3441 DUP9 DUP3 PUSH2 0x33E4 JUMP JUMPDEST SWAP8 POP PUSH2 0x344C DUP4 PUSH2 0x33FC JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x342D JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3481 DUP2 DUP5 PUSH2 0x3409 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x349C DUP2 PUSH2 0x3489 JUMP JUMPDEST DUP2 EQ PUSH2 0x34A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x34B9 DUP2 PUSH2 0x3493 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x34D5 JUMPI PUSH2 0x34D4 PUSH2 0x3202 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x34E3 DUP5 DUP3 DUP6 ADD PUSH2 0x34AA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x34F5 DUP2 PUSH2 0x3489 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3510 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x34EC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x352C JUMPI PUSH2 0x352B PUSH2 0x3202 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x353A DUP5 DUP3 DUP6 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x355A JUMPI PUSH2 0x3559 PUSH2 0x3202 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3568 DUP6 DUP3 DUP7 ADD PUSH2 0x34AA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3579 DUP6 DUP3 DUP7 ADD PUSH2 0x330B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3599 JUMPI PUSH2 0x3598 PUSH2 0x3202 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x35A7 DUP5 DUP3 DUP6 ADD PUSH2 0x330B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x35B9 DUP2 PUSH2 0x3320 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x35D4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x35B0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x35F1 JUMPI PUSH2 0x35F0 PUSH2 0x3202 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x35FF DUP6 DUP3 DUP7 ADD PUSH2 0x330B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3610 DUP6 DUP3 DUP7 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3630 DUP2 PUSH2 0x361A JUMP JUMPDEST DUP2 EQ PUSH2 0x363B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x364D DUP2 PUSH2 0x3627 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x365C DUP2 PUSH2 0x328C JUMP JUMPDEST DUP2 EQ PUSH2 0x3667 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3679 DUP2 PUSH2 0x3653 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x369E JUMPI PUSH2 0x369D PUSH2 0x3202 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x36AC DUP11 DUP3 DUP12 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x36BD DUP11 DUP3 DUP12 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x36CE DUP11 DUP3 DUP12 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x36DF DUP11 DUP3 DUP12 ADD PUSH2 0x363E JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x36F0 DUP11 DUP3 DUP12 ADD PUSH2 0x34AA JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x3701 DUP11 DUP3 DUP12 ADD PUSH2 0x34AA JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x3712 DUP11 DUP3 DUP12 ADD PUSH2 0x366A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x373E JUMPI PUSH2 0x373D PUSH2 0x3202 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x374C DUP10 DUP3 DUP11 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x375D DUP10 DUP3 DUP11 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0x376E DUP10 DUP3 DUP11 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0x377F DUP10 DUP3 DUP11 ADD PUSH2 0x363E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0x3790 DUP10 DUP3 DUP11 ADD PUSH2 0x34AA JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH2 0x37A1 DUP10 DUP3 DUP11 ADD PUSH2 0x34AA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x37CB JUMPI PUSH2 0x37CA PUSH2 0x3202 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x37D9 DUP10 DUP3 DUP11 ADD PUSH2 0x330B JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x37EA DUP10 DUP3 DUP11 ADD PUSH2 0x330B JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0x37FB DUP10 DUP3 DUP11 ADD PUSH2 0x330B JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0x380C DUP10 DUP3 DUP11 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0x381D DUP10 DUP3 DUP11 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH2 0x382E DUP10 DUP3 DUP11 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x3850 PUSH1 0x0 DUP4 ADD DUP10 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x385D PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x386A PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x3877 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x3884 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x3891 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x3298 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x38B1 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x38BE PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x35B0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x38FF DUP3 PUSH2 0x3320 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x3931 JUMPI PUSH2 0x3930 PUSH2 0x38C5 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D75737420686176652061646D696E20726F6C6520746F20706572666F726D20 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7468697320616374696F6E2E0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A07 PUSH1 0x2C DUP4 PUSH2 0x399A JUMP JUMPDEST SWAP2 POP PUSH2 0x3A12 DUP3 PUSH2 0x39AB JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A36 DUP2 PUSH2 0x39FA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A48 DUP3 PUSH2 0x3320 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A53 DUP4 PUSH2 0x3320 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3A8C JUMPI PUSH2 0x3A8B PUSH2 0x38C5 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AF3 PUSH1 0x2F DUP4 PUSH2 0x399A JUMP JUMPDEST SWAP2 POP PUSH2 0x3AFE DUP3 PUSH2 0x3A97 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3B22 DUP2 PUSH2 0x3AE6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3B38 DUP2 PUSH2 0x332A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3B54 JUMPI PUSH2 0x3B53 PUSH2 0x3202 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3B62 DUP5 DUP3 DUP6 ADD PUSH2 0x3B29 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B76 DUP3 PUSH2 0x3320 JUMP JUMPDEST SWAP2 POP PUSH2 0x3B81 DUP4 PUSH2 0x3320 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x3B99 JUMPI PUSH2 0x3B98 PUSH2 0x38C5 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BAA DUP3 PUSH2 0x3320 JUMP JUMPDEST SWAP2 POP PUSH2 0x3BB5 DUP4 PUSH2 0x3320 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x3BCD JUMPI PUSH2 0x3BCC PUSH2 0x38C5 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C2F PUSH1 0x2B DUP4 PUSH2 0x399A JUMP JUMPDEST SWAP2 POP PUSH2 0x3C3A DUP3 PUSH2 0x3BD3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3C5E DUP2 PUSH2 0x3C22 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CC1 PUSH1 0x2E DUP4 PUSH2 0x399A JUMP JUMPDEST SWAP2 POP PUSH2 0x3CCC DUP3 PUSH2 0x3C65 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3CF0 DUP2 PUSH2 0x3CB4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D26 PUSH2 0x3D21 PUSH2 0x3D1C DUP5 PUSH2 0x3CF7 JUMP JUMPDEST PUSH2 0x3D01 JUMP JUMPDEST PUSH2 0x361A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3D36 DUP2 PUSH2 0x3D0B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3D51 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3D2D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3D60 DUP2 PUSH2 0x32E2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3D7B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3D57 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DB7 PUSH1 0x1F DUP4 PUSH2 0x399A JUMP JUMPDEST SWAP2 POP PUSH2 0x3DC2 DUP3 PUSH2 0x3D81 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3DE6 DUP2 PUSH2 0x3DAA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x3E02 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x3E0F PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x3E1C PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x3E29 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x35B0 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3E41 DUP2 PUSH2 0x3653 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3E5D JUMPI PUSH2 0x3E5C PUSH2 0x3202 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3E6B DUP5 DUP3 DUP6 ADD PUSH2 0x3E32 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3E89 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3D57 JUMP JUMPDEST PUSH2 0x3E96 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x35B0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3EDE PUSH1 0x17 DUP4 PUSH2 0x3E9D JUMP JUMPDEST SWAP2 POP PUSH2 0x3EE9 DUP3 PUSH2 0x3EA8 JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3F1D JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3F02 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F34 DUP3 PUSH2 0x3EF4 JUMP JUMPDEST PUSH2 0x3F3E DUP2 DUP6 PUSH2 0x3E9D JUMP JUMPDEST SWAP4 POP PUSH2 0x3F4E DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3EFF JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F90 PUSH1 0x11 DUP4 PUSH2 0x3E9D JUMP JUMPDEST SWAP2 POP PUSH2 0x3F9B DUP3 PUSH2 0x3F5A JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FB1 DUP3 PUSH2 0x3ED1 JUMP JUMPDEST SWAP2 POP PUSH2 0x3FBD DUP3 DUP6 PUSH2 0x3F29 JUMP JUMPDEST SWAP2 POP PUSH2 0x3FC8 DUP3 PUSH2 0x3F83 JUMP JUMPDEST SWAP2 POP PUSH2 0x3FD4 DUP3 DUP5 PUSH2 0x3F29 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FFC DUP3 PUSH2 0x3EF4 JUMP JUMPDEST PUSH2 0x4006 DUP2 DUP6 PUSH2 0x399A JUMP JUMPDEST SWAP4 POP PUSH2 0x4016 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3EFF JUMP JUMPDEST PUSH2 0x401F DUP2 PUSH2 0x3FE0 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4044 DUP2 DUP5 PUSH2 0x3FF1 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4082 PUSH1 0x14 DUP4 PUSH2 0x399A JUMP JUMPDEST SWAP2 POP PUSH2 0x408D DUP3 PUSH2 0x404C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x40B1 DUP2 PUSH2 0x4075 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x40CD PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x40DA PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x40E7 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x35B0 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4129 DUP3 PUSH2 0x3320 JUMP JUMPDEST SWAP2 POP PUSH2 0x4134 DUP4 PUSH2 0x3320 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x4144 JUMPI PUSH2 0x4143 PUSH2 0x40EF JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x4158 DUP2 PUSH2 0x361A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH2 0x4173 PUSH1 0x0 DUP4 ADD DUP11 PUSH2 0x3D57 JUMP JUMPDEST PUSH2 0x4180 PUSH1 0x20 DUP4 ADD DUP10 PUSH2 0x3D57 JUMP JUMPDEST PUSH2 0x418D PUSH1 0x40 DUP4 ADD DUP9 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x419A PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x41A7 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x414F JUMP JUMPDEST PUSH2 0x41B4 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x34EC JUMP JUMPDEST PUSH2 0x41C1 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x34EC JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A207065726D697420646964206E6F7420737563636565 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4229 PUSH1 0x21 DUP4 PUSH2 0x399A JUMP JUMPDEST SWAP2 POP PUSH2 0x4234 DUP3 PUSH2 0x41CD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4258 DUP2 PUSH2 0x421C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4295 PUSH1 0x10 DUP4 PUSH2 0x399A JUMP JUMPDEST SWAP2 POP PUSH2 0x42A0 DUP3 PUSH2 0x425F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x42C4 DUP2 PUSH2 0x4288 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42D6 DUP3 PUSH2 0x3320 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x42E9 JUMPI PUSH2 0x42E8 PUSH2 0x38C5 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x432A PUSH1 0x20 DUP4 PUSH2 0x399A JUMP JUMPDEST SWAP2 POP PUSH2 0x4335 DUP3 PUSH2 0x42F4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4359 DUP2 PUSH2 0x431D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB6 0xDD EXP SWAP15 0xAD SWAP14 0xD2 0xAF CALLDATASIZE 0xE3 0x5C LOG1 SWAP7 PUSH26 0x5DBCE265AE5257EC9529513441BAFA0BC2B964736F6C63430008 LT STOP CALLER ","sourceMap":"620:21935:18:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEFAULT_ADMIN_ROLE_42":{"entryPoint":5160,"id":42,"parameterSlots":0,"returnSlots":0},"@__AccessControl_init_21":{"entryPoint":7719,"id":21,"parameterSlots":0,"returnSlots":0},"@__BaseUpgradeablePausable_init_2684":{"entryPoint":3566,"id":2684,"parameterSlots":1,"returnSlots":0},"@__Pausable_init_611":{"entryPoint":7630,"id":611,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_unchained_621":{"entryPoint":11914,"id":621,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_730":{"entryPoint":7800,"id":730,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_unchained_740":{"entryPoint":12022,"id":740,"parameterSlots":0,"returnSlots":0},"@_addInsuranceAmount_3555":{"entryPoint":8061,"id":3555,"parameterSlots":6,"returnSlots":1},"@_checkRole_107":{"entryPoint":6358,"id":107,"parameterSlots":1,"returnSlots":0},"@_checkRole_146":{"entryPoint":9674,"id":146,"parameterSlots":2,"returnSlots":0},"@_grantRole_298":{"entryPoint":6378,"id":298,"parameterSlots":2,"returnSlots":0},"@_minusInsuranceAmount_3706":{"entryPoint":7015,"id":3706,"parameterSlots":7,"returnSlots":1},"@_msgSender_1486":{"entryPoint":6603,"id":1486,"parameterSlots":0,"returnSlots":1},"@_nonReentrantAfter_774":{"entryPoint":7620,"id":774,"parameterSlots":0,"returnSlots":0},"@_nonReentrantBefore_766":{"entryPoint":6936,"id":766,"parameterSlots":0,"returnSlots":0},"@_pause_685":{"entryPoint":8645,"id":685,"parameterSlots":0,"returnSlots":0},"@_requireNotPaused_658":{"entryPoint":12111,"id":658,"parameterSlots":0,"returnSlots":0},"@_requirePaused_669":{"entryPoint":9807,"id":669,"parameterSlots":0,"returnSlots":0},"@_revokeRole_329":{"entryPoint":6611,"id":329,"parameterSlots":2,"returnSlots":0},"@_setRoleAdmin_266":{"entryPoint":7969,"id":266,"parameterSlots":2,"returnSlots":0},"@_unpause_701":{"entryPoint":6837,"id":701,"parameterSlots":0,"returnSlots":0},"@activateInsurance_3981":{"entryPoint":9880,"id":3981,"parameterSlots":3,"returnSlots":2},"@addInsuranceAmount_3452":{"entryPoint":3856,"id":3452,"parameterSlots":6,"returnSlots":1},"@calculateTotalFlowMade_4477":{"entryPoint":5450,"id":4477,"parameterSlots":1,"returnSlots":1},"@calculateTotalFlowMade_4652":{"entryPoint":2803,"id":4652,"parameterSlots":2,"returnSlots":1},"@claimPremium_3748":{"entryPoint":6100,"id":3748,"parameterSlots":3,"returnSlots":1},"@claimPremium_3758":{"entryPoint":4574,"id":3758,"parameterSlots":2,"returnSlots":1},"@deactivateInsurance_4120":{"entryPoint":8744,"id":4120,"parameterSlots":3,"returnSlots":1},"@findActivePremiumCost_4366":{"entryPoint":1718,"id":4366,"parameterSlots":3,"returnSlots":1},"@getAdminRole_2719":{"entryPoint":7889,"id":2719,"parameterSlots":0,"returnSlots":1},"@getGlobalUserInsuranceInfo_4768":{"entryPoint":5968,"id":4768,"parameterSlots":1,"returnSlots":2},"@getGlobalUserInsurancePremiumCost_4787":{"entryPoint":2680,"id":4787,"parameterSlots":1,"returnSlots":1},"@getPauserRole_2727":{"entryPoint":7929,"id":2727,"parameterSlots":0,"returnSlots":1},"@getRoleAdmin_161":{"entryPoint":2265,"id":161,"parameterSlots":1,"returnSlots":1},"@getUserInsuranceInfo_4744":{"entryPoint":4789,"id":4744,"parameterSlots":3,"returnSlots":6},"@getUserInsuranceStatus_4696":{"entryPoint":4582,"id":4696,"parameterSlots":3,"returnSlots":1},"@getUserInsuranceValidTillInfo_4674":{"entryPoint":5337,"id":4674,"parameterSlots":3,"returnSlots":1},"@getUserInsuredAmount_4808":{"entryPoint":3453,"id":4808,"parameterSlots":3,"returnSlots":1},"@grantRole_181":{"entryPoint":2435,"id":181,"parameterSlots":2,"returnSlots":0},"@hasRole_94":{"entryPoint":5053,"id":94,"parameterSlots":2,"returnSlots":1},"@initialize_3345":{"entryPoint":3906,"id":3345,"parameterSlots":6,"returnSlots":1},"@isAdmin_2698":{"entryPoint":5306,"id":2698,"parameterSlots":0,"returnSlots":1},"@isContract_1193":{"entryPoint":8610,"id":1193,"parameterSlots":1,"returnSlots":1},"@minusInsuranceAmount_3593":{"entryPoint":3401,"id":3593,"parameterSlots":7,"returnSlots":1},"@pause_3354":{"entryPoint":4708,"id":3354,"parameterSlots":0,"returnSlots":0},"@paused_646":{"entryPoint":3378,"id":646,"parameterSlots":0,"returnSlots":1},"@renounceRole_224":{"entryPoint":2468,"id":224,"parameterSlots":2,"returnSlots":0},"@revokeRole_201":{"entryPoint":5935,"id":201,"parameterSlots":2,"returnSlots":0},"@safePermit_1136":{"entryPoint":11453,"id":1136,"parameterSlots":8,"returnSlots":0},"@supportsInterface_1714":{"entryPoint":6252,"id":1714,"parameterSlots":1,"returnSlots":1},"@supportsInterface_75":{"entryPoint":1596,"id":75,"parameterSlots":1,"returnSlots":1},"@toHexString_1655":{"entryPoint":12230,"id":1655,"parameterSlots":2,"returnSlots":1},"@toHexString_1675":{"entryPoint":12185,"id":1675,"parameterSlots":1,"returnSlots":1},"@unpause_3363":{"entryPoint":2599,"id":3363,"parameterSlots":0,"returnSlots":0},"@updateMaxInsuredDays_3417":{"entryPoint":5167,"id":3417,"parameterSlots":1,"returnSlots":0},"@updateMinimumInsurancePeriod_3381":{"entryPoint":3242,"id":3381,"parameterSlots":1,"returnSlots":0},"@updateStartWaitingTime_3399":{"entryPoint":2297,"id":3399,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address":{"entryPoint":13067,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":13930,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":15922,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":13482,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":12874,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":13121,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":15145,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint8":{"entryPoint":13886,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":13699,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_addresst_uint256t_uint256t_uint256":{"entryPoint":14254,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":13786,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256t_uint256":{"entryPoint":13142,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":15943,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":13503,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":13635,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":12895,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":13590,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":15166,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256t_uint256t_uint8t_bytes32t_bytes32":{"entryPoint":14113,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_uint256t_uint256t_uint256t_uint8t_bytes32t_bytes32t_bool":{"entryPoint":13951,"id":null,"parameterSlots":2,"returnSlots":7},"abi_encodeUpdatedPos_t_uint256_to_t_uint256":{"entryPoint":13284,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":15703,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack":{"entryPoint":13321,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":12952,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":13548,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack":{"entryPoint":15661,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":16369,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":16169,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack":{"entryPoint":17181,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack":{"entryPoint":16501,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack":{"entryPoint":17032,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack":{"entryPoint":15540,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack":{"entryPoint":14842,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack":{"entryPoint":16924,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":15394,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":16081,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack":{"entryPoint":15786,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":16259,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack":{"entryPoint":15078,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":13269,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":13744,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":16719,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":16294,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":15718,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":16734,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":15988,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":13415,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":12967,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":13563,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":15676,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16426,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17216,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16536,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17067,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15575,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14877,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16959,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15429,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15821,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15113,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":13759,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":14492,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":16568,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":15853,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed":{"entryPoint":14395,"id":null,"parameterSlots":7,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":13253,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":13225,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":16116,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":13308,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack":{"entryPoint":13236,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":14746,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":16029,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":15263,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":16670,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":14909,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":15211,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":13026,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":12940,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":13449,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":12807,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_1_by_1":{"entryPoint":15607,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":12994,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":13088,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":13850,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_rational_1_by_1_to_t_uint8":{"entryPoint":15627,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":16127,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":17099,"id":null,"parameterSlots":1,"returnSlots":1},"identity":{"entryPoint":15617,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":14580,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":14533,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":16623,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":14699,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":14652,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":12802,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":16352,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2":{"entryPoint":17140,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a":{"entryPoint":16460,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a":{"entryPoint":16991,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759":{"entryPoint":15461,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513":{"entryPoint":14763,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d":{"entryPoint":16845,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":15315,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874":{"entryPoint":16040,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619":{"entryPoint":15745,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69":{"entryPoint":16218,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b":{"entryPoint":14999,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":13044,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":13907,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":13459,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":12851,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":13098,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint8":{"entryPoint":13863,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:32701:26","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:26","statements":[{"nodeType":"YulAssignment","src":"57:19:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:26","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:26"},"nodeType":"YulFunctionCall","src":"67:9:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:26"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:26","type":""}],"src":"7:75:26"},{"body":{"nodeType":"YulBlock","src":"177:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:26"},"nodeType":"YulFunctionCall","src":"187:12:26"},"nodeType":"YulExpressionStatement","src":"187:12:26"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:26"},{"body":{"nodeType":"YulBlock","src":"300:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:26"},"nodeType":"YulFunctionCall","src":"310:12:26"},"nodeType":"YulExpressionStatement","src":"310:12:26"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:26"},{"body":{"nodeType":"YulBlock","src":"378:105:26","statements":[{"nodeType":"YulAssignment","src":"388:89:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:26","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:26"},"nodeType":"YulFunctionCall","src":"399:78:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:26"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:26","type":""}],"src":"334:149:26"},{"body":{"nodeType":"YulBlock","src":"531:78:26","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:26"},"nodeType":"YulFunctionCall","src":"589:12:26"},"nodeType":"YulExpressionStatement","src":"589:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:26"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:26"},"nodeType":"YulFunctionCall","src":"561:23:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:26"},"nodeType":"YulFunctionCall","src":"551:34:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:26"},"nodeType":"YulFunctionCall","src":"544:42:26"},"nodeType":"YulIf","src":"541:62:26"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:26","type":""}],"src":"489:120:26"},{"body":{"nodeType":"YulBlock","src":"666:86:26","statements":[{"nodeType":"YulAssignment","src":"676:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:26"},"nodeType":"YulFunctionCall","src":"685:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:26"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:26"},"nodeType":"YulFunctionCall","src":"714:32:26"},"nodeType":"YulExpressionStatement","src":"714:32:26"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:26","type":""}],"src":"615:137:26"},{"body":{"nodeType":"YulBlock","src":"823:262:26","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:26"},"nodeType":"YulFunctionCall","src":"871:79:26"},"nodeType":"YulExpressionStatement","src":"871:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:26"},"nodeType":"YulFunctionCall","src":"840:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:26"},"nodeType":"YulFunctionCall","src":"836:32:26"},"nodeType":"YulIf","src":"833:119:26"},{"nodeType":"YulBlock","src":"962:116:26","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:26","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:26"},"nodeType":"YulFunctionCall","src":"1036:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:26"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:26"},"nodeType":"YulFunctionCall","src":"1016:52:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:26"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:26","type":""}],"src":"758:327:26"},{"body":{"nodeType":"YulBlock","src":"1133:48:26","statements":[{"nodeType":"YulAssignment","src":"1143:32:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:26"},"nodeType":"YulFunctionCall","src":"1161:13:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:26"},"nodeType":"YulFunctionCall","src":"1154:21:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:26"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:26","type":""}],"src":"1091:90:26"},{"body":{"nodeType":"YulBlock","src":"1246:50:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:26"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:26"},"nodeType":"YulFunctionCall","src":"1268:21:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:26"},"nodeType":"YulFunctionCall","src":"1256:34:26"},"nodeType":"YulExpressionStatement","src":"1256:34:26"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:26","type":""}],"src":"1187:109:26"},{"body":{"nodeType":"YulBlock","src":"1394:118:26","statements":[{"nodeType":"YulAssignment","src":"1404:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:26"},"nodeType":"YulFunctionCall","src":"1412:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:26"},"nodeType":"YulFunctionCall","src":"1487:17:26"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:26"},"nodeType":"YulFunctionCall","src":"1440:65:26"},"nodeType":"YulExpressionStatement","src":"1440:65:26"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:26","type":""}],"src":"1302:210:26"},{"body":{"nodeType":"YulBlock","src":"1563:81:26","statements":[{"nodeType":"YulAssignment","src":"1573:65:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1588:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"1595:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1584:3:26"},"nodeType":"YulFunctionCall","src":"1584:54:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1573:7:26"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1545:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1555:7:26","type":""}],"src":"1518:126:26"},{"body":{"nodeType":"YulBlock","src":"1695:51:26","statements":[{"nodeType":"YulAssignment","src":"1705:35:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1734:5:26"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1716:17:26"},"nodeType":"YulFunctionCall","src":"1716:24:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1705:7:26"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1677:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1687:7:26","type":""}],"src":"1650:96:26"},{"body":{"nodeType":"YulBlock","src":"1795:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"1852:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1861:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1864:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1854:6:26"},"nodeType":"YulFunctionCall","src":"1854:12:26"},"nodeType":"YulExpressionStatement","src":"1854:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1818:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1843:5:26"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1825:17:26"},"nodeType":"YulFunctionCall","src":"1825:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1815:2:26"},"nodeType":"YulFunctionCall","src":"1815:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1808:6:26"},"nodeType":"YulFunctionCall","src":"1808:43:26"},"nodeType":"YulIf","src":"1805:63:26"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1788:5:26","type":""}],"src":"1752:122:26"},{"body":{"nodeType":"YulBlock","src":"1932:87:26","statements":[{"nodeType":"YulAssignment","src":"1942:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1964:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1951:12:26"},"nodeType":"YulFunctionCall","src":"1951:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1942:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2007:5:26"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1980:26:26"},"nodeType":"YulFunctionCall","src":"1980:33:26"},"nodeType":"YulExpressionStatement","src":"1980:33:26"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1910:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"1918:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1926:5:26","type":""}],"src":"1880:139:26"},{"body":{"nodeType":"YulBlock","src":"2070:32:26","statements":[{"nodeType":"YulAssignment","src":"2080:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"2091:5:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2080:7:26"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2052:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2062:7:26","type":""}],"src":"2025:77:26"},{"body":{"nodeType":"YulBlock","src":"2151:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"2208:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2217:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2220:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2210:6:26"},"nodeType":"YulFunctionCall","src":"2210:12:26"},"nodeType":"YulExpressionStatement","src":"2210:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2174:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2199:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2181:17:26"},"nodeType":"YulFunctionCall","src":"2181:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2171:2:26"},"nodeType":"YulFunctionCall","src":"2171:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2164:6:26"},"nodeType":"YulFunctionCall","src":"2164:43:26"},"nodeType":"YulIf","src":"2161:63:26"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2144:5:26","type":""}],"src":"2108:122:26"},{"body":{"nodeType":"YulBlock","src":"2288:87:26","statements":[{"nodeType":"YulAssignment","src":"2298:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2320:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2307:12:26"},"nodeType":"YulFunctionCall","src":"2307:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2298:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2363:5:26"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2336:26:26"},"nodeType":"YulFunctionCall","src":"2336:33:26"},"nodeType":"YulExpressionStatement","src":"2336:33:26"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2266:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"2274:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2282:5:26","type":""}],"src":"2236:139:26"},{"body":{"nodeType":"YulBlock","src":"2481:519:26","statements":[{"body":{"nodeType":"YulBlock","src":"2527:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2529:77:26"},"nodeType":"YulFunctionCall","src":"2529:79:26"},"nodeType":"YulExpressionStatement","src":"2529:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2502:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"2511:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2498:3:26"},"nodeType":"YulFunctionCall","src":"2498:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"2523:2:26","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2494:3:26"},"nodeType":"YulFunctionCall","src":"2494:32:26"},"nodeType":"YulIf","src":"2491:119:26"},{"nodeType":"YulBlock","src":"2620:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2635:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"2649:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2639:6:26","type":""}]},{"nodeType":"YulAssignment","src":"2664:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2699:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"2710:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2695:3:26"},"nodeType":"YulFunctionCall","src":"2695:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2719:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2674:20:26"},"nodeType":"YulFunctionCall","src":"2674:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2664:6:26"}]}]},{"nodeType":"YulBlock","src":"2747:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2762:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"2776:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2766:6:26","type":""}]},{"nodeType":"YulAssignment","src":"2792:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2827:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"2838:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2823:3:26"},"nodeType":"YulFunctionCall","src":"2823:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2847:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2802:20:26"},"nodeType":"YulFunctionCall","src":"2802:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2792:6:26"}]}]},{"nodeType":"YulBlock","src":"2875:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2890:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"2904:2:26","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2894:6:26","type":""}]},{"nodeType":"YulAssignment","src":"2920:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2955:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"2966:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2951:3:26"},"nodeType":"YulFunctionCall","src":"2951:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2975:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2930:20:26"},"nodeType":"YulFunctionCall","src":"2930:53:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2920:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2435:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2446:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2458:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2466:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2474:6:26","type":""}],"src":"2381:619:26"},{"body":{"nodeType":"YulBlock","src":"3080:40:26","statements":[{"nodeType":"YulAssignment","src":"3091:22:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3107:5:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3101:5:26"},"nodeType":"YulFunctionCall","src":"3101:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3091:6:26"}]}]},"name":"array_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3063:5:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3073:6:26","type":""}],"src":"3006:114:26"},{"body":{"nodeType":"YulBlock","src":"3237:73:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3254:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"3259:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3247:6:26"},"nodeType":"YulFunctionCall","src":"3247:19:26"},"nodeType":"YulExpressionStatement","src":"3247:19:26"},{"nodeType":"YulAssignment","src":"3275:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3294:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"3299:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3290:3:26"},"nodeType":"YulFunctionCall","src":"3290:14:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"3275:11:26"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3209:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"3214:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"3225:11:26","type":""}],"src":"3126:184:26"},{"body":{"nodeType":"YulBlock","src":"3388:60:26","statements":[{"nodeType":"YulAssignment","src":"3398:11:26","value":{"name":"ptr","nodeType":"YulIdentifier","src":"3406:3:26"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"3398:4:26"}]},{"nodeType":"YulAssignment","src":"3419:22:26","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3431:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"3436:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3427:3:26"},"nodeType":"YulFunctionCall","src":"3427:14:26"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"3419:4:26"}]}]},"name":"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"3375:3:26","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"3383:4:26","type":""}],"src":"3316:132:26"},{"body":{"nodeType":"YulBlock","src":"3509:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3526:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3549:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3531:17:26"},"nodeType":"YulFunctionCall","src":"3531:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3519:6:26"},"nodeType":"YulFunctionCall","src":"3519:37:26"},"nodeType":"YulExpressionStatement","src":"3519:37:26"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3497:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3504:3:26","type":""}],"src":"3454:108:26"},{"body":{"nodeType":"YulBlock","src":"3648:99:26","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3692:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"3700:3:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"3658:33:26"},"nodeType":"YulFunctionCall","src":"3658:46:26"},"nodeType":"YulExpressionStatement","src":"3658:46:26"},{"nodeType":"YulAssignment","src":"3713:28:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3731:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"3736:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3727:3:26"},"nodeType":"YulFunctionCall","src":"3727:14:26"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"3713:10:26"}]}]},"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"3621:6:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3629:3:26","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"3637:10:26","type":""}],"src":"3568:179:26"},{"body":{"nodeType":"YulBlock","src":"3828:38:26","statements":[{"nodeType":"YulAssignment","src":"3838:22:26","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3850:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"3855:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3846:3:26"},"nodeType":"YulFunctionCall","src":"3846:14:26"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"3838:4:26"}]}]},"name":"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"3815:3:26","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"3823:4:26","type":""}],"src":"3753:113:26"},{"body":{"nodeType":"YulBlock","src":"4026:608:26","statements":[{"nodeType":"YulVariableDeclaration","src":"4036:68:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4098:5:26"}],"functionName":{"name":"array_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4050:47:26"},"nodeType":"YulFunctionCall","src":"4050:54:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4040:6:26","type":""}]},{"nodeType":"YulAssignment","src":"4113:93:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4194:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"4199:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4120:73:26"},"nodeType":"YulFunctionCall","src":"4120:86:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4113:3:26"}]},{"nodeType":"YulVariableDeclaration","src":"4215:71:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4280:5:26"}],"functionName":{"name":"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4230:49:26"},"nodeType":"YulFunctionCall","src":"4230:56:26"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"4219:7:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4295:21:26","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"4309:7:26"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"4299:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"4385:224:26","statements":[{"nodeType":"YulVariableDeclaration","src":"4399:34:26","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"4426:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4420:5:26"},"nodeType":"YulFunctionCall","src":"4420:13:26"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"4403:13:26","type":""}]},{"nodeType":"YulAssignment","src":"4446:70:26","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"4497:13:26"},{"name":"pos","nodeType":"YulIdentifier","src":"4512:3:26"}],"functionName":{"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"4453:43:26"},"nodeType":"YulFunctionCall","src":"4453:63:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4446:3:26"}]},{"nodeType":"YulAssignment","src":"4529:70:26","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"4592:6:26"}],"functionName":{"name":"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4539:52:26"},"nodeType":"YulFunctionCall","src":"4539:60:26"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"4529:6:26"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4347:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"4350:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4344:2:26"},"nodeType":"YulFunctionCall","src":"4344:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4358:18:26","statements":[{"nodeType":"YulAssignment","src":"4360:14:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4369:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"4372:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4365:3:26"},"nodeType":"YulFunctionCall","src":"4365:9:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4360:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"4329:14:26","statements":[{"nodeType":"YulVariableDeclaration","src":"4331:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"4340:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4335:1:26","type":""}]}]},"src":"4325:284:26"},{"nodeType":"YulAssignment","src":"4618:10:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"4625:3:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4618:3:26"}]}]},"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4005:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4012:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4021:3:26","type":""}],"src":"3902:732:26"},{"body":{"nodeType":"YulBlock","src":"4788:225:26","statements":[{"nodeType":"YulAssignment","src":"4798:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4810:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4821:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4806:3:26"},"nodeType":"YulFunctionCall","src":"4806:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4798:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4845:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4856:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4841:3:26"},"nodeType":"YulFunctionCall","src":"4841:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4864:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"4870:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4860:3:26"},"nodeType":"YulFunctionCall","src":"4860:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4834:6:26"},"nodeType":"YulFunctionCall","src":"4834:47:26"},"nodeType":"YulExpressionStatement","src":"4834:47:26"},{"nodeType":"YulAssignment","src":"4890:116:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4992:6:26"},{"name":"tail","nodeType":"YulIdentifier","src":"5001:4:26"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4898:93:26"},"nodeType":"YulFunctionCall","src":"4898:108:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4890:4:26"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4760:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4772:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4783:4:26","type":""}],"src":"4640:373:26"},{"body":{"nodeType":"YulBlock","src":"5064:32:26","statements":[{"nodeType":"YulAssignment","src":"5074:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"5085:5:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5074:7:26"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5046:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5056:7:26","type":""}],"src":"5019:77:26"},{"body":{"nodeType":"YulBlock","src":"5145:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"5202:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5211:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5214:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5204:6:26"},"nodeType":"YulFunctionCall","src":"5204:12:26"},"nodeType":"YulExpressionStatement","src":"5204:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5168:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5193:5:26"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"5175:17:26"},"nodeType":"YulFunctionCall","src":"5175:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5165:2:26"},"nodeType":"YulFunctionCall","src":"5165:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5158:6:26"},"nodeType":"YulFunctionCall","src":"5158:43:26"},"nodeType":"YulIf","src":"5155:63:26"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5138:5:26","type":""}],"src":"5102:122:26"},{"body":{"nodeType":"YulBlock","src":"5282:87:26","statements":[{"nodeType":"YulAssignment","src":"5292:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5314:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5301:12:26"},"nodeType":"YulFunctionCall","src":"5301:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5292:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5357:5:26"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"5330:26:26"},"nodeType":"YulFunctionCall","src":"5330:33:26"},"nodeType":"YulExpressionStatement","src":"5330:33:26"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5260:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"5268:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5276:5:26","type":""}],"src":"5230:139:26"},{"body":{"nodeType":"YulBlock","src":"5441:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"5487:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5489:77:26"},"nodeType":"YulFunctionCall","src":"5489:79:26"},"nodeType":"YulExpressionStatement","src":"5489:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5462:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"5471:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5458:3:26"},"nodeType":"YulFunctionCall","src":"5458:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"5483:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5454:3:26"},"nodeType":"YulFunctionCall","src":"5454:32:26"},"nodeType":"YulIf","src":"5451:119:26"},{"nodeType":"YulBlock","src":"5580:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"5595:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5609:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5599:6:26","type":""}]},{"nodeType":"YulAssignment","src":"5624:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5659:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"5670:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5655:3:26"},"nodeType":"YulFunctionCall","src":"5655:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5679:7:26"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"5634:20:26"},"nodeType":"YulFunctionCall","src":"5634:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5624:6:26"}]}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5411:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5422:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5434:6:26","type":""}],"src":"5375:329:26"},{"body":{"nodeType":"YulBlock","src":"5775:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5792:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5815:5:26"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"5797:17:26"},"nodeType":"YulFunctionCall","src":"5797:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5785:6:26"},"nodeType":"YulFunctionCall","src":"5785:37:26"},"nodeType":"YulExpressionStatement","src":"5785:37:26"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5763:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5770:3:26","type":""}],"src":"5710:118:26"},{"body":{"nodeType":"YulBlock","src":"5932:124:26","statements":[{"nodeType":"YulAssignment","src":"5942:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5954:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"5965:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5950:3:26"},"nodeType":"YulFunctionCall","src":"5950:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5942:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6022:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6035:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"6046:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6031:3:26"},"nodeType":"YulFunctionCall","src":"6031:17:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"5978:43:26"},"nodeType":"YulFunctionCall","src":"5978:71:26"},"nodeType":"YulExpressionStatement","src":"5978:71:26"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5904:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5916:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5927:4:26","type":""}],"src":"5834:222:26"},{"body":{"nodeType":"YulBlock","src":"6128:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"6174:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6176:77:26"},"nodeType":"YulFunctionCall","src":"6176:79:26"},"nodeType":"YulExpressionStatement","src":"6176:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6149:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"6158:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6145:3:26"},"nodeType":"YulFunctionCall","src":"6145:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"6170:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6141:3:26"},"nodeType":"YulFunctionCall","src":"6141:32:26"},"nodeType":"YulIf","src":"6138:119:26"},{"nodeType":"YulBlock","src":"6267:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"6282:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"6296:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6286:6:26","type":""}]},{"nodeType":"YulAssignment","src":"6311:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6346:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"6357:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6342:3:26"},"nodeType":"YulFunctionCall","src":"6342:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6366:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"6321:20:26"},"nodeType":"YulFunctionCall","src":"6321:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6311:6:26"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6098:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6109:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6121:6:26","type":""}],"src":"6062:329:26"},{"body":{"nodeType":"YulBlock","src":"6480:391:26","statements":[{"body":{"nodeType":"YulBlock","src":"6526:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6528:77:26"},"nodeType":"YulFunctionCall","src":"6528:79:26"},"nodeType":"YulExpressionStatement","src":"6528:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6501:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"6510:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6497:3:26"},"nodeType":"YulFunctionCall","src":"6497:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"6522:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6493:3:26"},"nodeType":"YulFunctionCall","src":"6493:32:26"},"nodeType":"YulIf","src":"6490:119:26"},{"nodeType":"YulBlock","src":"6619:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"6634:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"6648:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6638:6:26","type":""}]},{"nodeType":"YulAssignment","src":"6663:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6698:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"6709:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6694:3:26"},"nodeType":"YulFunctionCall","src":"6694:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6718:7:26"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"6673:20:26"},"nodeType":"YulFunctionCall","src":"6673:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6663:6:26"}]}]},{"nodeType":"YulBlock","src":"6746:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"6761:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"6775:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6765:6:26","type":""}]},{"nodeType":"YulAssignment","src":"6791:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6826:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"6837:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6822:3:26"},"nodeType":"YulFunctionCall","src":"6822:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6846:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6801:20:26"},"nodeType":"YulFunctionCall","src":"6801:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6791:6:26"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6442:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6453:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6465:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6473:6:26","type":""}],"src":"6397:474:26"},{"body":{"nodeType":"YulBlock","src":"6943:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"6989:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6991:77:26"},"nodeType":"YulFunctionCall","src":"6991:79:26"},"nodeType":"YulExpressionStatement","src":"6991:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6964:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"6973:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6960:3:26"},"nodeType":"YulFunctionCall","src":"6960:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"6985:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6956:3:26"},"nodeType":"YulFunctionCall","src":"6956:32:26"},"nodeType":"YulIf","src":"6953:119:26"},{"nodeType":"YulBlock","src":"7082:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"7097:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"7111:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7101:6:26","type":""}]},{"nodeType":"YulAssignment","src":"7126:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7161:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"7172:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7157:3:26"},"nodeType":"YulFunctionCall","src":"7157:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7181:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7136:20:26"},"nodeType":"YulFunctionCall","src":"7136:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7126:6:26"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6913:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6924:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6936:6:26","type":""}],"src":"6877:329:26"},{"body":{"nodeType":"YulBlock","src":"7277:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7294:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7317:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"7299:17:26"},"nodeType":"YulFunctionCall","src":"7299:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7287:6:26"},"nodeType":"YulFunctionCall","src":"7287:37:26"},"nodeType":"YulExpressionStatement","src":"7287:37:26"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7265:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7272:3:26","type":""}],"src":"7212:118:26"},{"body":{"nodeType":"YulBlock","src":"7434:124:26","statements":[{"nodeType":"YulAssignment","src":"7444:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7456:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"7467:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7452:3:26"},"nodeType":"YulFunctionCall","src":"7452:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7444:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7524:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7537:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"7548:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7533:3:26"},"nodeType":"YulFunctionCall","src":"7533:17:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"7480:43:26"},"nodeType":"YulFunctionCall","src":"7480:71:26"},"nodeType":"YulExpressionStatement","src":"7480:71:26"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7406:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7418:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7429:4:26","type":""}],"src":"7336:222:26"},{"body":{"nodeType":"YulBlock","src":"7647:391:26","statements":[{"body":{"nodeType":"YulBlock","src":"7693:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7695:77:26"},"nodeType":"YulFunctionCall","src":"7695:79:26"},"nodeType":"YulExpressionStatement","src":"7695:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7668:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"7677:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7664:3:26"},"nodeType":"YulFunctionCall","src":"7664:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"7689:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7660:3:26"},"nodeType":"YulFunctionCall","src":"7660:32:26"},"nodeType":"YulIf","src":"7657:119:26"},{"nodeType":"YulBlock","src":"7786:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"7801:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"7815:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7805:6:26","type":""}]},{"nodeType":"YulAssignment","src":"7830:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7865:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"7876:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7861:3:26"},"nodeType":"YulFunctionCall","src":"7861:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7885:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7840:20:26"},"nodeType":"YulFunctionCall","src":"7840:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7830:6:26"}]}]},{"nodeType":"YulBlock","src":"7913:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"7928:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"7942:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7932:6:26","type":""}]},{"nodeType":"YulAssignment","src":"7958:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7993:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"8004:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7989:3:26"},"nodeType":"YulFunctionCall","src":"7989:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8013:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7968:20:26"},"nodeType":"YulFunctionCall","src":"7968:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7958:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7609:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7620:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7632:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7640:6:26","type":""}],"src":"7564:474:26"},{"body":{"nodeType":"YulBlock","src":"8087:43:26","statements":[{"nodeType":"YulAssignment","src":"8097:27:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8112:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"8119:4:26","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8108:3:26"},"nodeType":"YulFunctionCall","src":"8108:16:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"8097:7:26"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8069:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"8079:7:26","type":""}],"src":"8044:86:26"},{"body":{"nodeType":"YulBlock","src":"8177:77:26","statements":[{"body":{"nodeType":"YulBlock","src":"8232:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8241:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8244:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8234:6:26"},"nodeType":"YulFunctionCall","src":"8234:12:26"},"nodeType":"YulExpressionStatement","src":"8234:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8200:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8223:5:26"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"8207:15:26"},"nodeType":"YulFunctionCall","src":"8207:22:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8197:2:26"},"nodeType":"YulFunctionCall","src":"8197:33:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8190:6:26"},"nodeType":"YulFunctionCall","src":"8190:41:26"},"nodeType":"YulIf","src":"8187:61:26"}]},"name":"validator_revert_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8170:5:26","type":""}],"src":"8136:118:26"},{"body":{"nodeType":"YulBlock","src":"8310:85:26","statements":[{"nodeType":"YulAssignment","src":"8320:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8342:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8329:12:26"},"nodeType":"YulFunctionCall","src":"8329:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"8320:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8383:5:26"}],"functionName":{"name":"validator_revert_t_uint8","nodeType":"YulIdentifier","src":"8358:24:26"},"nodeType":"YulFunctionCall","src":"8358:31:26"},"nodeType":"YulExpressionStatement","src":"8358:31:26"}]},"name":"abi_decode_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8288:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"8296:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"8304:5:26","type":""}],"src":"8260:135:26"},{"body":{"nodeType":"YulBlock","src":"8441:76:26","statements":[{"body":{"nodeType":"YulBlock","src":"8495:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8504:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8507:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8497:6:26"},"nodeType":"YulFunctionCall","src":"8497:12:26"},"nodeType":"YulExpressionStatement","src":"8497:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8464:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8486:5:26"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"8471:14:26"},"nodeType":"YulFunctionCall","src":"8471:21:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8461:2:26"},"nodeType":"YulFunctionCall","src":"8461:32:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8454:6:26"},"nodeType":"YulFunctionCall","src":"8454:40:26"},"nodeType":"YulIf","src":"8451:60:26"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8434:5:26","type":""}],"src":"8401:116:26"},{"body":{"nodeType":"YulBlock","src":"8572:84:26","statements":[{"nodeType":"YulAssignment","src":"8582:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8604:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8591:12:26"},"nodeType":"YulFunctionCall","src":"8591:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"8582:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8644:5:26"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"8620:23:26"},"nodeType":"YulFunctionCall","src":"8620:30:26"},"nodeType":"YulExpressionStatement","src":"8620:30:26"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8550:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"8558:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"8566:5:26","type":""}],"src":"8523:133:26"},{"body":{"nodeType":"YulBlock","src":"8825:1030:26","statements":[{"body":{"nodeType":"YulBlock","src":"8872:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8874:77:26"},"nodeType":"YulFunctionCall","src":"8874:79:26"},"nodeType":"YulExpressionStatement","src":"8874:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8846:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"8855:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8842:3:26"},"nodeType":"YulFunctionCall","src":"8842:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"8867:3:26","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8838:3:26"},"nodeType":"YulFunctionCall","src":"8838:33:26"},"nodeType":"YulIf","src":"8835:120:26"},{"nodeType":"YulBlock","src":"8965:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"8980:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"8994:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8984:6:26","type":""}]},{"nodeType":"YulAssignment","src":"9009:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9044:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"9055:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9040:3:26"},"nodeType":"YulFunctionCall","src":"9040:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9064:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9019:20:26"},"nodeType":"YulFunctionCall","src":"9019:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9009:6:26"}]}]},{"nodeType":"YulBlock","src":"9092:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"9107:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"9121:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9111:6:26","type":""}]},{"nodeType":"YulAssignment","src":"9137:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9172:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"9183:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9168:3:26"},"nodeType":"YulFunctionCall","src":"9168:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9192:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9147:20:26"},"nodeType":"YulFunctionCall","src":"9147:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9137:6:26"}]}]},{"nodeType":"YulBlock","src":"9220:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"9235:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"9249:2:26","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9239:6:26","type":""}]},{"nodeType":"YulAssignment","src":"9265:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9300:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"9311:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9296:3:26"},"nodeType":"YulFunctionCall","src":"9296:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9320:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9275:20:26"},"nodeType":"YulFunctionCall","src":"9275:53:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9265:6:26"}]}]},{"nodeType":"YulBlock","src":"9348:116:26","statements":[{"nodeType":"YulVariableDeclaration","src":"9363:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"9377:2:26","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9367:6:26","type":""}]},{"nodeType":"YulAssignment","src":"9393:61:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9426:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"9437:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9422:3:26"},"nodeType":"YulFunctionCall","src":"9422:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9446:7:26"}],"functionName":{"name":"abi_decode_t_uint8","nodeType":"YulIdentifier","src":"9403:18:26"},"nodeType":"YulFunctionCall","src":"9403:51:26"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"9393:6:26"}]}]},{"nodeType":"YulBlock","src":"9474:119:26","statements":[{"nodeType":"YulVariableDeclaration","src":"9489:17:26","value":{"kind":"number","nodeType":"YulLiteral","src":"9503:3:26","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9493:6:26","type":""}]},{"nodeType":"YulAssignment","src":"9520:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9555:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"9566:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9551:3:26"},"nodeType":"YulFunctionCall","src":"9551:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9575:7:26"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"9530:20:26"},"nodeType":"YulFunctionCall","src":"9530:53:26"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"9520:6:26"}]}]},{"nodeType":"YulBlock","src":"9603:119:26","statements":[{"nodeType":"YulVariableDeclaration","src":"9618:17:26","value":{"kind":"number","nodeType":"YulLiteral","src":"9632:3:26","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9622:6:26","type":""}]},{"nodeType":"YulAssignment","src":"9649:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9684:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"9695:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9680:3:26"},"nodeType":"YulFunctionCall","src":"9680:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9704:7:26"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"9659:20:26"},"nodeType":"YulFunctionCall","src":"9659:53:26"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"9649:6:26"}]}]},{"nodeType":"YulBlock","src":"9732:116:26","statements":[{"nodeType":"YulVariableDeclaration","src":"9747:17:26","value":{"kind":"number","nodeType":"YulLiteral","src":"9761:3:26","type":"","value":"192"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9751:6:26","type":""}]},{"nodeType":"YulAssignment","src":"9778:60:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9810:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"9821:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9806:3:26"},"nodeType":"YulFunctionCall","src":"9806:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9830:7:26"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"9788:17:26"},"nodeType":"YulFunctionCall","src":"9788:50:26"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"9778:6:26"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint256t_uint8t_bytes32t_bytes32t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8747:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8758:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8770:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8778:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8786:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8794:6:26","type":""},{"name":"value4","nodeType":"YulTypedName","src":"8802:6:26","type":""},{"name":"value5","nodeType":"YulTypedName","src":"8810:6:26","type":""},{"name":"value6","nodeType":"YulTypedName","src":"8818:6:26","type":""}],"src":"8662:1193:26"},{"body":{"nodeType":"YulBlock","src":"10010:904:26","statements":[{"body":{"nodeType":"YulBlock","src":"10057:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10059:77:26"},"nodeType":"YulFunctionCall","src":"10059:79:26"},"nodeType":"YulExpressionStatement","src":"10059:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10031:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"10040:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10027:3:26"},"nodeType":"YulFunctionCall","src":"10027:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"10052:3:26","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10023:3:26"},"nodeType":"YulFunctionCall","src":"10023:33:26"},"nodeType":"YulIf","src":"10020:120:26"},{"nodeType":"YulBlock","src":"10150:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"10165:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"10179:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10169:6:26","type":""}]},{"nodeType":"YulAssignment","src":"10194:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10229:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"10240:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10225:3:26"},"nodeType":"YulFunctionCall","src":"10225:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10249:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10204:20:26"},"nodeType":"YulFunctionCall","src":"10204:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10194:6:26"}]}]},{"nodeType":"YulBlock","src":"10277:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"10292:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"10306:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10296:6:26","type":""}]},{"nodeType":"YulAssignment","src":"10322:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10357:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"10368:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10353:3:26"},"nodeType":"YulFunctionCall","src":"10353:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10377:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10332:20:26"},"nodeType":"YulFunctionCall","src":"10332:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10322:6:26"}]}]},{"nodeType":"YulBlock","src":"10405:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"10420:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"10434:2:26","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10424:6:26","type":""}]},{"nodeType":"YulAssignment","src":"10450:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10485:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"10496:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10481:3:26"},"nodeType":"YulFunctionCall","src":"10481:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10505:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10460:20:26"},"nodeType":"YulFunctionCall","src":"10460:53:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"10450:6:26"}]}]},{"nodeType":"YulBlock","src":"10533:116:26","statements":[{"nodeType":"YulVariableDeclaration","src":"10548:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"10562:2:26","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10552:6:26","type":""}]},{"nodeType":"YulAssignment","src":"10578:61:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10611:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"10622:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10607:3:26"},"nodeType":"YulFunctionCall","src":"10607:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10631:7:26"}],"functionName":{"name":"abi_decode_t_uint8","nodeType":"YulIdentifier","src":"10588:18:26"},"nodeType":"YulFunctionCall","src":"10588:51:26"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"10578:6:26"}]}]},{"nodeType":"YulBlock","src":"10659:119:26","statements":[{"nodeType":"YulVariableDeclaration","src":"10674:17:26","value":{"kind":"number","nodeType":"YulLiteral","src":"10688:3:26","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10678:6:26","type":""}]},{"nodeType":"YulAssignment","src":"10705:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10740:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"10751:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10736:3:26"},"nodeType":"YulFunctionCall","src":"10736:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10760:7:26"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"10715:20:26"},"nodeType":"YulFunctionCall","src":"10715:53:26"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"10705:6:26"}]}]},{"nodeType":"YulBlock","src":"10788:119:26","statements":[{"nodeType":"YulVariableDeclaration","src":"10803:17:26","value":{"kind":"number","nodeType":"YulLiteral","src":"10817:3:26","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10807:6:26","type":""}]},{"nodeType":"YulAssignment","src":"10834:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10869:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"10880:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10865:3:26"},"nodeType":"YulFunctionCall","src":"10865:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10889:7:26"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"10844:20:26"},"nodeType":"YulFunctionCall","src":"10844:53:26"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"10834:6:26"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint256t_uint8t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9940:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9951:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9963:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9971:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9979:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9987:6:26","type":""},{"name":"value4","nodeType":"YulTypedName","src":"9995:6:26","type":""},{"name":"value5","nodeType":"YulTypedName","src":"10003:6:26","type":""}],"src":"9861:1053:26"},{"body":{"nodeType":"YulBlock","src":"11071:906:26","statements":[{"body":{"nodeType":"YulBlock","src":"11118:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"11120:77:26"},"nodeType":"YulFunctionCall","src":"11120:79:26"},"nodeType":"YulExpressionStatement","src":"11120:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11092:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"11101:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11088:3:26"},"nodeType":"YulFunctionCall","src":"11088:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"11113:3:26","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11084:3:26"},"nodeType":"YulFunctionCall","src":"11084:33:26"},"nodeType":"YulIf","src":"11081:120:26"},{"nodeType":"YulBlock","src":"11211:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"11226:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"11240:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11230:6:26","type":""}]},{"nodeType":"YulAssignment","src":"11255:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11290:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"11301:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11286:3:26"},"nodeType":"YulFunctionCall","src":"11286:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11310:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"11265:20:26"},"nodeType":"YulFunctionCall","src":"11265:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11255:6:26"}]}]},{"nodeType":"YulBlock","src":"11338:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"11353:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"11367:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11357:6:26","type":""}]},{"nodeType":"YulAssignment","src":"11383:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11418:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"11429:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11414:3:26"},"nodeType":"YulFunctionCall","src":"11414:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11438:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"11393:20:26"},"nodeType":"YulFunctionCall","src":"11393:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11383:6:26"}]}]},{"nodeType":"YulBlock","src":"11466:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"11481:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"11495:2:26","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11485:6:26","type":""}]},{"nodeType":"YulAssignment","src":"11511:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11546:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"11557:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11542:3:26"},"nodeType":"YulFunctionCall","src":"11542:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11566:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"11521:20:26"},"nodeType":"YulFunctionCall","src":"11521:53:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"11511:6:26"}]}]},{"nodeType":"YulBlock","src":"11594:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"11609:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"11623:2:26","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11613:6:26","type":""}]},{"nodeType":"YulAssignment","src":"11639:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11674:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"11685:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11670:3:26"},"nodeType":"YulFunctionCall","src":"11670:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11694:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"11649:20:26"},"nodeType":"YulFunctionCall","src":"11649:53:26"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"11639:6:26"}]}]},{"nodeType":"YulBlock","src":"11722:119:26","statements":[{"nodeType":"YulVariableDeclaration","src":"11737:17:26","value":{"kind":"number","nodeType":"YulLiteral","src":"11751:3:26","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11741:6:26","type":""}]},{"nodeType":"YulAssignment","src":"11768:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11803:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"11814:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11799:3:26"},"nodeType":"YulFunctionCall","src":"11799:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11823:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"11778:20:26"},"nodeType":"YulFunctionCall","src":"11778:53:26"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"11768:6:26"}]}]},{"nodeType":"YulBlock","src":"11851:119:26","statements":[{"nodeType":"YulVariableDeclaration","src":"11866:17:26","value":{"kind":"number","nodeType":"YulLiteral","src":"11880:3:26","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11870:6:26","type":""}]},{"nodeType":"YulAssignment","src":"11897:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11932:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"11943:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11928:3:26"},"nodeType":"YulFunctionCall","src":"11928:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11952:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"11907:20:26"},"nodeType":"YulFunctionCall","src":"11907:53:26"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"11897:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_addresst_uint256t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11001:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11012:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11024:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11032:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11040:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11048:6:26","type":""},{"name":"value4","nodeType":"YulTypedName","src":"11056:6:26","type":""},{"name":"value5","nodeType":"YulTypedName","src":"11064:6:26","type":""}],"src":"10920:1057:26"},{"body":{"nodeType":"YulBlock","src":"12215:531:26","statements":[{"nodeType":"YulAssignment","src":"12225:27:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12237:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12248:3:26","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12233:3:26"},"nodeType":"YulFunctionCall","src":"12233:19:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12225:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12306:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12319:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12330:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12315:3:26"},"nodeType":"YulFunctionCall","src":"12315:17:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"12262:43:26"},"nodeType":"YulFunctionCall","src":"12262:71:26"},"nodeType":"YulExpressionStatement","src":"12262:71:26"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12387:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12400:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12411:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12396:3:26"},"nodeType":"YulFunctionCall","src":"12396:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"12343:43:26"},"nodeType":"YulFunctionCall","src":"12343:72:26"},"nodeType":"YulExpressionStatement","src":"12343:72:26"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"12469:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12482:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12493:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12478:3:26"},"nodeType":"YulFunctionCall","src":"12478:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"12425:43:26"},"nodeType":"YulFunctionCall","src":"12425:72:26"},"nodeType":"YulExpressionStatement","src":"12425:72:26"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"12551:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12564:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12575:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12560:3:26"},"nodeType":"YulFunctionCall","src":"12560:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"12507:43:26"},"nodeType":"YulFunctionCall","src":"12507:72:26"},"nodeType":"YulExpressionStatement","src":"12507:72:26"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"12633:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12646:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12657:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12642:3:26"},"nodeType":"YulFunctionCall","src":"12642:19:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"12589:43:26"},"nodeType":"YulFunctionCall","src":"12589:73:26"},"nodeType":"YulExpressionStatement","src":"12589:73:26"},{"expression":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"12710:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12723:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12734:3:26","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12719:3:26"},"nodeType":"YulFunctionCall","src":"12719:19:26"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"12672:37:26"},"nodeType":"YulFunctionCall","src":"12672:67:26"},"nodeType":"YulExpressionStatement","src":"12672:67:26"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12147:9:26","type":""},{"name":"value5","nodeType":"YulTypedName","src":"12159:6:26","type":""},{"name":"value4","nodeType":"YulTypedName","src":"12167:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12175:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12183:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12191:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12199:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12210:4:26","type":""}],"src":"11983:763:26"},{"body":{"nodeType":"YulBlock","src":"12878:206:26","statements":[{"nodeType":"YulAssignment","src":"12888:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12900:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12911:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12896:3:26"},"nodeType":"YulFunctionCall","src":"12896:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12888:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12968:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12981:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12992:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12977:3:26"},"nodeType":"YulFunctionCall","src":"12977:17:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"12924:43:26"},"nodeType":"YulFunctionCall","src":"12924:71:26"},"nodeType":"YulExpressionStatement","src":"12924:71:26"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13049:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13062:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"13073:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13058:3:26"},"nodeType":"YulFunctionCall","src":"13058:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"13005:43:26"},"nodeType":"YulFunctionCall","src":"13005:72:26"},"nodeType":"YulExpressionStatement","src":"13005:72:26"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12842:9:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12854:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12862:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12873:4:26","type":""}],"src":"12752:332:26"},{"body":{"nodeType":"YulBlock","src":"13118:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13135:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13138:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13128:6:26"},"nodeType":"YulFunctionCall","src":"13128:88:26"},"nodeType":"YulExpressionStatement","src":"13128:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13232:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13235:4:26","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13225:6:26"},"nodeType":"YulFunctionCall","src":"13225:15:26"},"nodeType":"YulExpressionStatement","src":"13225:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13256:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13259:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13249:6:26"},"nodeType":"YulFunctionCall","src":"13249:15:26"},"nodeType":"YulExpressionStatement","src":"13249:15:26"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"13090:180:26"},{"body":{"nodeType":"YulBlock","src":"13319:190:26","statements":[{"nodeType":"YulAssignment","src":"13329:33:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13356:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"13338:17:26"},"nodeType":"YulFunctionCall","src":"13338:24:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"13329:5:26"}]},{"body":{"nodeType":"YulBlock","src":"13452:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"13454:16:26"},"nodeType":"YulFunctionCall","src":"13454:18:26"},"nodeType":"YulExpressionStatement","src":"13454:18:26"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13377:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"13384:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"13374:2:26"},"nodeType":"YulFunctionCall","src":"13374:77:26"},"nodeType":"YulIf","src":"13371:103:26"},{"nodeType":"YulAssignment","src":"13483:20:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13494:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"13501:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13490:3:26"},"nodeType":"YulFunctionCall","src":"13490:13:26"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"13483:3:26"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13305:5:26","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"13315:3:26","type":""}],"src":"13276:233:26"},{"body":{"nodeType":"YulBlock","src":"13543:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13560:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13563:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13553:6:26"},"nodeType":"YulFunctionCall","src":"13553:88:26"},"nodeType":"YulExpressionStatement","src":"13553:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13657:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13660:4:26","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13650:6:26"},"nodeType":"YulFunctionCall","src":"13650:15:26"},"nodeType":"YulExpressionStatement","src":"13650:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13681:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13684:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13674:6:26"},"nodeType":"YulFunctionCall","src":"13674:15:26"},"nodeType":"YulExpressionStatement","src":"13674:15:26"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"13515:180:26"},{"body":{"nodeType":"YulBlock","src":"13729:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13746:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13749:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13739:6:26"},"nodeType":"YulFunctionCall","src":"13739:88:26"},"nodeType":"YulExpressionStatement","src":"13739:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13843:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13846:4:26","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13836:6:26"},"nodeType":"YulFunctionCall","src":"13836:15:26"},"nodeType":"YulExpressionStatement","src":"13836:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13867:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13870:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13860:6:26"},"nodeType":"YulFunctionCall","src":"13860:15:26"},"nodeType":"YulExpressionStatement","src":"13860:15:26"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"13701:180:26"},{"body":{"nodeType":"YulBlock","src":"13983:73:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14000:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"14005:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13993:6:26"},"nodeType":"YulFunctionCall","src":"13993:19:26"},"nodeType":"YulExpressionStatement","src":"13993:19:26"},{"nodeType":"YulAssignment","src":"14021:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14040:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"14045:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14036:3:26"},"nodeType":"YulFunctionCall","src":"14036:14:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"14021:11:26"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13955:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"13960:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"13971:11:26","type":""}],"src":"13887:169:26"},{"body":{"nodeType":"YulBlock","src":"14168:125:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14190:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"14198:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14186:3:26"},"nodeType":"YulFunctionCall","src":"14186:14:26"},{"hexValue":"4d75737420686176652061646d696e20726f6c6520746f20706572666f726d20","kind":"string","nodeType":"YulLiteral","src":"14202:34:26","type":"","value":"Must have admin role to perform "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14179:6:26"},"nodeType":"YulFunctionCall","src":"14179:58:26"},"nodeType":"YulExpressionStatement","src":"14179:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14258:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"14266:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14254:3:26"},"nodeType":"YulFunctionCall","src":"14254:15:26"},{"hexValue":"7468697320616374696f6e2e","kind":"string","nodeType":"YulLiteral","src":"14271:14:26","type":"","value":"this action."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14247:6:26"},"nodeType":"YulFunctionCall","src":"14247:39:26"},"nodeType":"YulExpressionStatement","src":"14247:39:26"}]},"name":"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14160:6:26","type":""}],"src":"14062:231:26"},{"body":{"nodeType":"YulBlock","src":"14445:220:26","statements":[{"nodeType":"YulAssignment","src":"14455:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14521:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"14526:2:26","type":"","value":"44"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14462:58:26"},"nodeType":"YulFunctionCall","src":"14462:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14455:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14627:3:26"}],"functionName":{"name":"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","nodeType":"YulIdentifier","src":"14538:88:26"},"nodeType":"YulFunctionCall","src":"14538:93:26"},"nodeType":"YulExpressionStatement","src":"14538:93:26"},{"nodeType":"YulAssignment","src":"14640:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14651:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"14656:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14647:3:26"},"nodeType":"YulFunctionCall","src":"14647:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14640:3:26"}]}]},"name":"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14433:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14441:3:26","type":""}],"src":"14299:366:26"},{"body":{"nodeType":"YulBlock","src":"14842:248:26","statements":[{"nodeType":"YulAssignment","src":"14852:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14864:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"14875:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14860:3:26"},"nodeType":"YulFunctionCall","src":"14860:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14852:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14899:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"14910:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14895:3:26"},"nodeType":"YulFunctionCall","src":"14895:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14918:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"14924:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14914:3:26"},"nodeType":"YulFunctionCall","src":"14914:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14888:6:26"},"nodeType":"YulFunctionCall","src":"14888:47:26"},"nodeType":"YulExpressionStatement","src":"14888:47:26"},{"nodeType":"YulAssignment","src":"14944:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15078:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14952:124:26"},"nodeType":"YulFunctionCall","src":"14952:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14944:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14822:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14837:4:26","type":""}],"src":"14671:419:26"},{"body":{"nodeType":"YulBlock","src":"15144:300:26","statements":[{"nodeType":"YulAssignment","src":"15154:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15177:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"15159:17:26"},"nodeType":"YulFunctionCall","src":"15159:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"15154:1:26"}]},{"nodeType":"YulAssignment","src":"15188:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"15211:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"15193:17:26"},"nodeType":"YulFunctionCall","src":"15193:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"15188:1:26"}]},{"body":{"nodeType":"YulBlock","src":"15386:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"15388:16:26"},"nodeType":"YulFunctionCall","src":"15388:18:26"},"nodeType":"YulExpressionStatement","src":"15388:18:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15298:1:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15291:6:26"},"nodeType":"YulFunctionCall","src":"15291:9:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15284:6:26"},"nodeType":"YulFunctionCall","src":"15284:17:26"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"15306:1:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15313:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"x","nodeType":"YulIdentifier","src":"15381:1:26"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"15309:3:26"},"nodeType":"YulFunctionCall","src":"15309:74:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15303:2:26"},"nodeType":"YulFunctionCall","src":"15303:81:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15280:3:26"},"nodeType":"YulFunctionCall","src":"15280:105:26"},"nodeType":"YulIf","src":"15277:131:26"},{"nodeType":"YulAssignment","src":"15418:20:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15433:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"15436:1:26"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"15429:3:26"},"nodeType":"YulFunctionCall","src":"15429:9:26"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"15418:7:26"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"15127:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"15130:1:26","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"15136:7:26","type":""}],"src":"15096:348:26"},{"body":{"nodeType":"YulBlock","src":"15556:128:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15578:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"15586:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15574:3:26"},"nodeType":"YulFunctionCall","src":"15574:14:26"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"15590:34:26","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15567:6:26"},"nodeType":"YulFunctionCall","src":"15567:58:26"},"nodeType":"YulExpressionStatement","src":"15567:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15646:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"15654:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15642:3:26"},"nodeType":"YulFunctionCall","src":"15642:15:26"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"15659:17:26","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15635:6:26"},"nodeType":"YulFunctionCall","src":"15635:42:26"},"nodeType":"YulExpressionStatement","src":"15635:42:26"}]},"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15548:6:26","type":""}],"src":"15450:234:26"},{"body":{"nodeType":"YulBlock","src":"15836:220:26","statements":[{"nodeType":"YulAssignment","src":"15846:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15912:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"15917:2:26","type":"","value":"47"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15853:58:26"},"nodeType":"YulFunctionCall","src":"15853:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15846:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16018:3:26"}],"functionName":{"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulIdentifier","src":"15929:88:26"},"nodeType":"YulFunctionCall","src":"15929:93:26"},"nodeType":"YulExpressionStatement","src":"15929:93:26"},{"nodeType":"YulAssignment","src":"16031:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16042:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"16047:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16038:3:26"},"nodeType":"YulFunctionCall","src":"16038:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16031:3:26"}]}]},"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15824:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15832:3:26","type":""}],"src":"15690:366:26"},{"body":{"nodeType":"YulBlock","src":"16233:248:26","statements":[{"nodeType":"YulAssignment","src":"16243:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16255:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"16266:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16251:3:26"},"nodeType":"YulFunctionCall","src":"16251:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16243:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16290:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"16301:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16286:3:26"},"nodeType":"YulFunctionCall","src":"16286:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16309:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"16315:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16305:3:26"},"nodeType":"YulFunctionCall","src":"16305:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16279:6:26"},"nodeType":"YulFunctionCall","src":"16279:47:26"},"nodeType":"YulExpressionStatement","src":"16279:47:26"},{"nodeType":"YulAssignment","src":"16335:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16469:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16343:124:26"},"nodeType":"YulFunctionCall","src":"16343:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16335:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16213:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16228:4:26","type":""}],"src":"16062:419:26"},{"body":{"nodeType":"YulBlock","src":"16550:80:26","statements":[{"nodeType":"YulAssignment","src":"16560:22:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"16575:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16569:5:26"},"nodeType":"YulFunctionCall","src":"16569:13:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"16560:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16618:5:26"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"16591:26:26"},"nodeType":"YulFunctionCall","src":"16591:33:26"},"nodeType":"YulExpressionStatement","src":"16591:33:26"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"16528:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"16536:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"16544:5:26","type":""}],"src":"16487:143:26"},{"body":{"nodeType":"YulBlock","src":"16713:274:26","statements":[{"body":{"nodeType":"YulBlock","src":"16759:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"16761:77:26"},"nodeType":"YulFunctionCall","src":"16761:79:26"},"nodeType":"YulExpressionStatement","src":"16761:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"16734:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"16743:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16730:3:26"},"nodeType":"YulFunctionCall","src":"16730:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"16755:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"16726:3:26"},"nodeType":"YulFunctionCall","src":"16726:32:26"},"nodeType":"YulIf","src":"16723:119:26"},{"nodeType":"YulBlock","src":"16852:128:26","statements":[{"nodeType":"YulVariableDeclaration","src":"16867:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"16881:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"16871:6:26","type":""}]},{"nodeType":"YulAssignment","src":"16896:74:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16942:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"16953:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16938:3:26"},"nodeType":"YulFunctionCall","src":"16938:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"16962:7:26"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"16906:31:26"},"nodeType":"YulFunctionCall","src":"16906:64:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"16896:6:26"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16683:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"16694:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"16706:6:26","type":""}],"src":"16636:351:26"},{"body":{"nodeType":"YulBlock","src":"17038:149:26","statements":[{"nodeType":"YulAssignment","src":"17048:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17071:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"17053:17:26"},"nodeType":"YulFunctionCall","src":"17053:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"17048:1:26"}]},{"nodeType":"YulAssignment","src":"17082:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"17105:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"17087:17:26"},"nodeType":"YulFunctionCall","src":"17087:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"17082:1:26"}]},{"nodeType":"YulAssignment","src":"17116:17:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17128:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"17131:1:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17124:3:26"},"nodeType":"YulFunctionCall","src":"17124:9:26"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"17116:4:26"}]},{"body":{"nodeType":"YulBlock","src":"17158:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"17160:16:26"},"nodeType":"YulFunctionCall","src":"17160:18:26"},"nodeType":"YulExpressionStatement","src":"17160:18:26"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"17149:4:26"},{"name":"x","nodeType":"YulIdentifier","src":"17155:1:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17146:2:26"},"nodeType":"YulFunctionCall","src":"17146:11:26"},"nodeType":"YulIf","src":"17143:37:26"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"17024:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"17027:1:26","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"17033:4:26","type":""}],"src":"16993:194:26"},{"body":{"nodeType":"YulBlock","src":"17237:147:26","statements":[{"nodeType":"YulAssignment","src":"17247:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17270:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"17252:17:26"},"nodeType":"YulFunctionCall","src":"17252:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"17247:1:26"}]},{"nodeType":"YulAssignment","src":"17281:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"17304:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"17286:17:26"},"nodeType":"YulFunctionCall","src":"17286:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"17281:1:26"}]},{"nodeType":"YulAssignment","src":"17315:16:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17326:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"17329:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17322:3:26"},"nodeType":"YulFunctionCall","src":"17322:9:26"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"17315:3:26"}]},{"body":{"nodeType":"YulBlock","src":"17355:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"17357:16:26"},"nodeType":"YulFunctionCall","src":"17357:18:26"},"nodeType":"YulExpressionStatement","src":"17357:18:26"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17347:1:26"},{"name":"sum","nodeType":"YulIdentifier","src":"17350:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17344:2:26"},"nodeType":"YulFunctionCall","src":"17344:10:26"},"nodeType":"YulIf","src":"17341:36:26"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"17224:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"17227:1:26","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"17233:3:26","type":""}],"src":"17193:191:26"},{"body":{"nodeType":"YulBlock","src":"17496:124:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17518:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"17526:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17514:3:26"},"nodeType":"YulFunctionCall","src":"17514:14:26"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"17530:34:26","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17507:6:26"},"nodeType":"YulFunctionCall","src":"17507:58:26"},"nodeType":"YulExpressionStatement","src":"17507:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17586:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"17594:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17582:3:26"},"nodeType":"YulFunctionCall","src":"17582:15:26"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"17599:13:26","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17575:6:26"},"nodeType":"YulFunctionCall","src":"17575:38:26"},"nodeType":"YulExpressionStatement","src":"17575:38:26"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17488:6:26","type":""}],"src":"17390:230:26"},{"body":{"nodeType":"YulBlock","src":"17772:220:26","statements":[{"nodeType":"YulAssignment","src":"17782:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17848:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"17853:2:26","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17789:58:26"},"nodeType":"YulFunctionCall","src":"17789:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17782:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17954:3:26"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"17865:88:26"},"nodeType":"YulFunctionCall","src":"17865:93:26"},"nodeType":"YulExpressionStatement","src":"17865:93:26"},{"nodeType":"YulAssignment","src":"17967:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17978:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"17983:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17974:3:26"},"nodeType":"YulFunctionCall","src":"17974:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17967:3:26"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17760:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17768:3:26","type":""}],"src":"17626:366:26"},{"body":{"nodeType":"YulBlock","src":"18169:248:26","statements":[{"nodeType":"YulAssignment","src":"18179:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18191:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"18202:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18187:3:26"},"nodeType":"YulFunctionCall","src":"18187:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18179:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18226:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"18237:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18222:3:26"},"nodeType":"YulFunctionCall","src":"18222:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18245:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"18251:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18241:3:26"},"nodeType":"YulFunctionCall","src":"18241:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18215:6:26"},"nodeType":"YulFunctionCall","src":"18215:47:26"},"nodeType":"YulExpressionStatement","src":"18215:47:26"},{"nodeType":"YulAssignment","src":"18271:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18405:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18279:124:26"},"nodeType":"YulFunctionCall","src":"18279:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18271:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18149:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18164:4:26","type":""}],"src":"17998:419:26"},{"body":{"nodeType":"YulBlock","src":"18529:127:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18551:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"18559:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18547:3:26"},"nodeType":"YulFunctionCall","src":"18547:14:26"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"18563:34:26","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18540:6:26"},"nodeType":"YulFunctionCall","src":"18540:58:26"},"nodeType":"YulExpressionStatement","src":"18540:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18619:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"18627:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18615:3:26"},"nodeType":"YulFunctionCall","src":"18615:15:26"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"18632:16:26","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18608:6:26"},"nodeType":"YulFunctionCall","src":"18608:41:26"},"nodeType":"YulExpressionStatement","src":"18608:41:26"}]},"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18521:6:26","type":""}],"src":"18423:233:26"},{"body":{"nodeType":"YulBlock","src":"18808:220:26","statements":[{"nodeType":"YulAssignment","src":"18818:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18884:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"18889:2:26","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18825:58:26"},"nodeType":"YulFunctionCall","src":"18825:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18818:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18990:3:26"}],"functionName":{"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulIdentifier","src":"18901:88:26"},"nodeType":"YulFunctionCall","src":"18901:93:26"},"nodeType":"YulExpressionStatement","src":"18901:93:26"},{"nodeType":"YulAssignment","src":"19003:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19014:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"19019:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19010:3:26"},"nodeType":"YulFunctionCall","src":"19010:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19003:3:26"}]}]},"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18796:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18804:3:26","type":""}],"src":"18662:366:26"},{"body":{"nodeType":"YulBlock","src":"19205:248:26","statements":[{"nodeType":"YulAssignment","src":"19215:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19227:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"19238:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19223:3:26"},"nodeType":"YulFunctionCall","src":"19223:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19215:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19262:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"19273:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19258:3:26"},"nodeType":"YulFunctionCall","src":"19258:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19281:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"19287:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19277:3:26"},"nodeType":"YulFunctionCall","src":"19277:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19251:6:26"},"nodeType":"YulFunctionCall","src":"19251:47:26"},"nodeType":"YulExpressionStatement","src":"19251:47:26"},{"nodeType":"YulAssignment","src":"19307:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19441:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19315:124:26"},"nodeType":"YulFunctionCall","src":"19315:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19307:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19185:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19200:4:26","type":""}],"src":"19034:419:26"},{"body":{"nodeType":"YulBlock","src":"19512:32:26","statements":[{"nodeType":"YulAssignment","src":"19522:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"19533:5:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"19522:7:26"}]}]},"name":"cleanup_t_rational_1_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19494:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"19504:7:26","type":""}],"src":"19459:85:26"},{"body":{"nodeType":"YulBlock","src":"19582:28:26","statements":[{"nodeType":"YulAssignment","src":"19592:12:26","value":{"name":"value","nodeType":"YulIdentifier","src":"19599:5:26"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"19592:3:26"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19568:5:26","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"19578:3:26","type":""}],"src":"19550:60:26"},{"body":{"nodeType":"YulBlock","src":"19682:88:26","statements":[{"nodeType":"YulAssignment","src":"19692:72:26","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19756:5:26"}],"functionName":{"name":"cleanup_t_rational_1_by_1","nodeType":"YulIdentifier","src":"19730:25:26"},"nodeType":"YulFunctionCall","src":"19730:32:26"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"19721:8:26"},"nodeType":"YulFunctionCall","src":"19721:42:26"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"19705:15:26"},"nodeType":"YulFunctionCall","src":"19705:59:26"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"19692:9:26"}]}]},"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19662:5:26","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"19672:9:26","type":""}],"src":"19616:154:26"},{"body":{"nodeType":"YulBlock","src":"19847:72:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19864:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19906:5:26"}],"functionName":{"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulIdentifier","src":"19869:36:26"},"nodeType":"YulFunctionCall","src":"19869:43:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19857:6:26"},"nodeType":"YulFunctionCall","src":"19857:56:26"},"nodeType":"YulExpressionStatement","src":"19857:56:26"}]},"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19835:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"19842:3:26","type":""}],"src":"19776:143:26"},{"body":{"nodeType":"YulBlock","src":"20029:130:26","statements":[{"nodeType":"YulAssignment","src":"20039:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20051:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"20062:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20047:3:26"},"nodeType":"YulFunctionCall","src":"20047:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20039:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20125:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20138:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"20149:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20134:3:26"},"nodeType":"YulFunctionCall","src":"20134:17:26"}],"functionName":{"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"20075:49:26"},"nodeType":"YulFunctionCall","src":"20075:77:26"},"nodeType":"YulExpressionStatement","src":"20075:77:26"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20001:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20013:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20024:4:26","type":""}],"src":"19925:234:26"},{"body":{"nodeType":"YulBlock","src":"20230:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20247:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20270:5:26"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"20252:17:26"},"nodeType":"YulFunctionCall","src":"20252:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20240:6:26"},"nodeType":"YulFunctionCall","src":"20240:37:26"},"nodeType":"YulExpressionStatement","src":"20240:37:26"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20218:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"20225:3:26","type":""}],"src":"20165:118:26"},{"body":{"nodeType":"YulBlock","src":"20387:124:26","statements":[{"nodeType":"YulAssignment","src":"20397:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20409:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"20420:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20405:3:26"},"nodeType":"YulFunctionCall","src":"20405:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20397:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20477:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20490:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"20501:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20486:3:26"},"nodeType":"YulFunctionCall","src":"20486:17:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"20433:43:26"},"nodeType":"YulFunctionCall","src":"20433:71:26"},"nodeType":"YulExpressionStatement","src":"20433:71:26"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20359:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20371:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20382:4:26","type":""}],"src":"20289:222:26"},{"body":{"nodeType":"YulBlock","src":"20623:75:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20645:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"20653:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20641:3:26"},"nodeType":"YulFunctionCall","src":"20641:14:26"},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","kind":"string","nodeType":"YulLiteral","src":"20657:33:26","type":"","value":"ReentrancyGuard: reentrant call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20634:6:26"},"nodeType":"YulFunctionCall","src":"20634:57:26"},"nodeType":"YulExpressionStatement","src":"20634:57:26"}]},"name":"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20615:6:26","type":""}],"src":"20517:181:26"},{"body":{"nodeType":"YulBlock","src":"20850:220:26","statements":[{"nodeType":"YulAssignment","src":"20860:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20926:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"20931:2:26","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20867:58:26"},"nodeType":"YulFunctionCall","src":"20867:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20860:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21032:3:26"}],"functionName":{"name":"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","nodeType":"YulIdentifier","src":"20943:88:26"},"nodeType":"YulFunctionCall","src":"20943:93:26"},"nodeType":"YulExpressionStatement","src":"20943:93:26"},{"nodeType":"YulAssignment","src":"21045:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21056:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"21061:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21052:3:26"},"nodeType":"YulFunctionCall","src":"21052:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21045:3:26"}]}]},"name":"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20838:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20846:3:26","type":""}],"src":"20704:366:26"},{"body":{"nodeType":"YulBlock","src":"21247:248:26","statements":[{"nodeType":"YulAssignment","src":"21257:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21269:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21280:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21265:3:26"},"nodeType":"YulFunctionCall","src":"21265:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21257:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21304:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21315:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21300:3:26"},"nodeType":"YulFunctionCall","src":"21300:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21323:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"21329:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21319:3:26"},"nodeType":"YulFunctionCall","src":"21319:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21293:6:26"},"nodeType":"YulFunctionCall","src":"21293:47:26"},"nodeType":"YulExpressionStatement","src":"21293:47:26"},{"nodeType":"YulAssignment","src":"21349:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21483:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21357:124:26"},"nodeType":"YulFunctionCall","src":"21357:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21349:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21227:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21242:4:26","type":""}],"src":"21076:419:26"},{"body":{"nodeType":"YulBlock","src":"21683:371:26","statements":[{"nodeType":"YulAssignment","src":"21693:27:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21705:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21716:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21701:3:26"},"nodeType":"YulFunctionCall","src":"21701:19:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21693:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21774:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21787:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21798:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21783:3:26"},"nodeType":"YulFunctionCall","src":"21783:17:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"21730:43:26"},"nodeType":"YulFunctionCall","src":"21730:71:26"},"nodeType":"YulExpressionStatement","src":"21730:71:26"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"21855:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21868:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21879:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21864:3:26"},"nodeType":"YulFunctionCall","src":"21864:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"21811:43:26"},"nodeType":"YulFunctionCall","src":"21811:72:26"},"nodeType":"YulExpressionStatement","src":"21811:72:26"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"21937:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21950:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21961:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21946:3:26"},"nodeType":"YulFunctionCall","src":"21946:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"21893:43:26"},"nodeType":"YulFunctionCall","src":"21893:72:26"},"nodeType":"YulExpressionStatement","src":"21893:72:26"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"22019:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22032:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"22043:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22028:3:26"},"nodeType":"YulFunctionCall","src":"22028:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"21975:43:26"},"nodeType":"YulFunctionCall","src":"21975:72:26"},"nodeType":"YulExpressionStatement","src":"21975:72:26"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21631:9:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"21643:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"21651:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21659:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21667:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21678:4:26","type":""}],"src":"21501:553:26"},{"body":{"nodeType":"YulBlock","src":"22120:77:26","statements":[{"nodeType":"YulAssignment","src":"22130:22:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"22145:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22139:5:26"},"nodeType":"YulFunctionCall","src":"22139:13:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"22130:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22185:5:26"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"22161:23:26"},"nodeType":"YulFunctionCall","src":"22161:30:26"},"nodeType":"YulExpressionStatement","src":"22161:30:26"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"22098:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"22106:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"22114:5:26","type":""}],"src":"22060:137:26"},{"body":{"nodeType":"YulBlock","src":"22277:271:26","statements":[{"body":{"nodeType":"YulBlock","src":"22323:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"22325:77:26"},"nodeType":"YulFunctionCall","src":"22325:79:26"},"nodeType":"YulExpressionStatement","src":"22325:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"22298:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"22307:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22294:3:26"},"nodeType":"YulFunctionCall","src":"22294:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"22319:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"22290:3:26"},"nodeType":"YulFunctionCall","src":"22290:32:26"},"nodeType":"YulIf","src":"22287:119:26"},{"nodeType":"YulBlock","src":"22416:125:26","statements":[{"nodeType":"YulVariableDeclaration","src":"22431:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"22445:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"22435:6:26","type":""}]},{"nodeType":"YulAssignment","src":"22460:71:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22503:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"22514:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22499:3:26"},"nodeType":"YulFunctionCall","src":"22499:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"22523:7:26"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"22470:28:26"},"nodeType":"YulFunctionCall","src":"22470:61:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"22460:6:26"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22247:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"22258:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"22270:6:26","type":""}],"src":"22203:345:26"},{"body":{"nodeType":"YulBlock","src":"22680:206:26","statements":[{"nodeType":"YulAssignment","src":"22690:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22702:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"22713:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22698:3:26"},"nodeType":"YulFunctionCall","src":"22698:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22690:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22770:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22783:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"22794:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22779:3:26"},"nodeType":"YulFunctionCall","src":"22779:17:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"22726:43:26"},"nodeType":"YulFunctionCall","src":"22726:71:26"},"nodeType":"YulExpressionStatement","src":"22726:71:26"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"22851:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22864:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"22875:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22860:3:26"},"nodeType":"YulFunctionCall","src":"22860:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"22807:43:26"},"nodeType":"YulFunctionCall","src":"22807:72:26"},"nodeType":"YulExpressionStatement","src":"22807:72:26"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22644:9:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22656:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22664:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22675:4:26","type":""}],"src":"22554:332:26"},{"body":{"nodeType":"YulBlock","src":"23006:34:26","statements":[{"nodeType":"YulAssignment","src":"23016:18:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"23031:3:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"23016:11:26"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22978:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"22983:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"22994:11:26","type":""}],"src":"22892:148:26"},{"body":{"nodeType":"YulBlock","src":"23152:67:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23174:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"23182:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23170:3:26"},"nodeType":"YulFunctionCall","src":"23170:14:26"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nodeType":"YulLiteral","src":"23186:25:26","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23163:6:26"},"nodeType":"YulFunctionCall","src":"23163:49:26"},"nodeType":"YulExpressionStatement","src":"23163:49:26"}]},"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"23144:6:26","type":""}],"src":"23046:173:26"},{"body":{"nodeType":"YulBlock","src":"23389:238:26","statements":[{"nodeType":"YulAssignment","src":"23399:92:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23483:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"23488:2:26","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"23406:76:26"},"nodeType":"YulFunctionCall","src":"23406:85:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23399:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23589:3:26"}],"functionName":{"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulIdentifier","src":"23500:88:26"},"nodeType":"YulFunctionCall","src":"23500:93:26"},"nodeType":"YulExpressionStatement","src":"23500:93:26"},{"nodeType":"YulAssignment","src":"23602:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23613:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"23618:2:26","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23609:3:26"},"nodeType":"YulFunctionCall","src":"23609:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"23602:3:26"}]}]},"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23377:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"23385:3:26","type":""}],"src":"23225:402:26"},{"body":{"nodeType":"YulBlock","src":"23692:40:26","statements":[{"nodeType":"YulAssignment","src":"23703:22:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23719:5:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23713:5:26"},"nodeType":"YulFunctionCall","src":"23713:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"23703:6:26"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23675:5:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"23685:6:26","type":""}],"src":"23633:99:26"},{"body":{"nodeType":"YulBlock","src":"23800:184:26","statements":[{"nodeType":"YulVariableDeclaration","src":"23810:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"23819:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"23814:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"23879:63:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"23904:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"23909:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23900:3:26"},"nodeType":"YulFunctionCall","src":"23900:11:26"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"23923:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"23928:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23919:3:26"},"nodeType":"YulFunctionCall","src":"23919:11:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23913:5:26"},"nodeType":"YulFunctionCall","src":"23913:18:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23893:6:26"},"nodeType":"YulFunctionCall","src":"23893:39:26"},"nodeType":"YulExpressionStatement","src":"23893:39:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"23840:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"23843:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"23837:2:26"},"nodeType":"YulFunctionCall","src":"23837:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"23851:19:26","statements":[{"nodeType":"YulAssignment","src":"23853:15:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"23862:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"23865:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23858:3:26"},"nodeType":"YulFunctionCall","src":"23858:10:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"23853:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"23833:3:26","statements":[]},"src":"23829:113:26"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"23962:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"23967:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23958:3:26"},"nodeType":"YulFunctionCall","src":"23958:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"23976:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23951:6:26"},"nodeType":"YulFunctionCall","src":"23951:27:26"},"nodeType":"YulExpressionStatement","src":"23951:27:26"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"23782:3:26","type":""},{"name":"dst","nodeType":"YulTypedName","src":"23787:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"23792:6:26","type":""}],"src":"23738:246:26"},{"body":{"nodeType":"YulBlock","src":"24100:280:26","statements":[{"nodeType":"YulVariableDeclaration","src":"24110:53:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24157:5:26"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"24124:32:26"},"nodeType":"YulFunctionCall","src":"24124:39:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"24114:6:26","type":""}]},{"nodeType":"YulAssignment","src":"24172:96:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24256:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"24261:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"24179:76:26"},"nodeType":"YulFunctionCall","src":"24179:89:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24172:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24316:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"24323:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24312:3:26"},"nodeType":"YulFunctionCall","src":"24312:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"24330:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"24335:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"24277:34:26"},"nodeType":"YulFunctionCall","src":"24277:65:26"},"nodeType":"YulExpressionStatement","src":"24277:65:26"},{"nodeType":"YulAssignment","src":"24351:23:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24362:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"24367:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24358:3:26"},"nodeType":"YulFunctionCall","src":"24358:16:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24351:3:26"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24081:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"24088:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24096:3:26","type":""}],"src":"23990:390:26"},{"body":{"nodeType":"YulBlock","src":"24492:61:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24514:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"24522:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24510:3:26"},"nodeType":"YulFunctionCall","src":"24510:14:26"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nodeType":"YulLiteral","src":"24526:19:26","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24503:6:26"},"nodeType":"YulFunctionCall","src":"24503:43:26"},"nodeType":"YulExpressionStatement","src":"24503:43:26"}]},"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24484:6:26","type":""}],"src":"24386:167:26"},{"body":{"nodeType":"YulBlock","src":"24723:238:26","statements":[{"nodeType":"YulAssignment","src":"24733:92:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24817:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"24822:2:26","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"24740:76:26"},"nodeType":"YulFunctionCall","src":"24740:85:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24733:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24923:3:26"}],"functionName":{"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulIdentifier","src":"24834:88:26"},"nodeType":"YulFunctionCall","src":"24834:93:26"},"nodeType":"YulExpressionStatement","src":"24834:93:26"},{"nodeType":"YulAssignment","src":"24936:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24947:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"24952:2:26","type":"","value":"17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24943:3:26"},"nodeType":"YulFunctionCall","src":"24943:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24936:3:26"}]}]},"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24711:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24719:3:26","type":""}],"src":"24559:402:26"},{"body":{"nodeType":"YulBlock","src":"25353:581:26","statements":[{"nodeType":"YulAssignment","src":"25364:155:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25515:3:26"}],"functionName":{"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"25371:142:26"},"nodeType":"YulFunctionCall","src":"25371:148:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25364:3:26"}]},{"nodeType":"YulAssignment","src":"25529:102:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"25618:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"25627:3:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"25536:81:26"},"nodeType":"YulFunctionCall","src":"25536:95:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25529:3:26"}]},{"nodeType":"YulAssignment","src":"25641:155:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25792:3:26"}],"functionName":{"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"25648:142:26"},"nodeType":"YulFunctionCall","src":"25648:148:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25641:3:26"}]},{"nodeType":"YulAssignment","src":"25806:102:26","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"25895:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"25904:3:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"25813:81:26"},"nodeType":"YulFunctionCall","src":"25813:95:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25806:3:26"}]},{"nodeType":"YulAssignment","src":"25918:10:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"25925:3:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25918:3:26"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25324:3:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"25330:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"25338:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"25349:3:26","type":""}],"src":"24967:967:26"},{"body":{"nodeType":"YulBlock","src":"25988:54:26","statements":[{"nodeType":"YulAssignment","src":"25998:38:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26016:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"26023:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26012:3:26"},"nodeType":"YulFunctionCall","src":"26012:14:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26032:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"26028:3:26"},"nodeType":"YulFunctionCall","src":"26028:7:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"26008:3:26"},"nodeType":"YulFunctionCall","src":"26008:28:26"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"25998:6:26"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25971:5:26","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"25981:6:26","type":""}],"src":"25940:102:26"},{"body":{"nodeType":"YulBlock","src":"26140:285:26","statements":[{"nodeType":"YulVariableDeclaration","src":"26150:53:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26197:5:26"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"26164:32:26"},"nodeType":"YulFunctionCall","src":"26164:39:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"26154:6:26","type":""}]},{"nodeType":"YulAssignment","src":"26212:78:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26278:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"26283:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26219:58:26"},"nodeType":"YulFunctionCall","src":"26219:71:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26212:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26338:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"26345:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26334:3:26"},"nodeType":"YulFunctionCall","src":"26334:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"26352:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"26357:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"26299:34:26"},"nodeType":"YulFunctionCall","src":"26299:65:26"},"nodeType":"YulExpressionStatement","src":"26299:65:26"},{"nodeType":"YulAssignment","src":"26373:46:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26384:3:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"26411:6:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"26389:21:26"},"nodeType":"YulFunctionCall","src":"26389:29:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26380:3:26"},"nodeType":"YulFunctionCall","src":"26380:39:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26373:3:26"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26121:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"26128:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26136:3:26","type":""}],"src":"26048:377:26"},{"body":{"nodeType":"YulBlock","src":"26549:195:26","statements":[{"nodeType":"YulAssignment","src":"26559:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26571:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"26582:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26567:3:26"},"nodeType":"YulFunctionCall","src":"26567:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26559:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26606:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"26617:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26602:3:26"},"nodeType":"YulFunctionCall","src":"26602:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26625:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"26631:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26621:3:26"},"nodeType":"YulFunctionCall","src":"26621:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26595:6:26"},"nodeType":"YulFunctionCall","src":"26595:47:26"},"nodeType":"YulExpressionStatement","src":"26595:47:26"},{"nodeType":"YulAssignment","src":"26651:86:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26723:6:26"},{"name":"tail","nodeType":"YulIdentifier","src":"26732:4:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26659:63:26"},"nodeType":"YulFunctionCall","src":"26659:78:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26651:4:26"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26521:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26533:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26544:4:26","type":""}],"src":"26431:313:26"},{"body":{"nodeType":"YulBlock","src":"26856:64:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26878:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"26886:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26874:3:26"},"nodeType":"YulFunctionCall","src":"26874:14:26"},{"hexValue":"5061757361626c653a206e6f7420706175736564","kind":"string","nodeType":"YulLiteral","src":"26890:22:26","type":"","value":"Pausable: not paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26867:6:26"},"nodeType":"YulFunctionCall","src":"26867:46:26"},"nodeType":"YulExpressionStatement","src":"26867:46:26"}]},"name":"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26848:6:26","type":""}],"src":"26750:170:26"},{"body":{"nodeType":"YulBlock","src":"27072:220:26","statements":[{"nodeType":"YulAssignment","src":"27082:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27148:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"27153:2:26","type":"","value":"20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27089:58:26"},"nodeType":"YulFunctionCall","src":"27089:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27082:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27254:3:26"}],"functionName":{"name":"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","nodeType":"YulIdentifier","src":"27165:88:26"},"nodeType":"YulFunctionCall","src":"27165:93:26"},"nodeType":"YulExpressionStatement","src":"27165:93:26"},{"nodeType":"YulAssignment","src":"27267:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27278:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"27283:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27274:3:26"},"nodeType":"YulFunctionCall","src":"27274:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27267:3:26"}]}]},"name":"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"27060:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27068:3:26","type":""}],"src":"26926:366:26"},{"body":{"nodeType":"YulBlock","src":"27469:248:26","statements":[{"nodeType":"YulAssignment","src":"27479:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27491:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"27502:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27487:3:26"},"nodeType":"YulFunctionCall","src":"27487:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27479:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27526:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"27537:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27522:3:26"},"nodeType":"YulFunctionCall","src":"27522:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27545:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"27551:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27541:3:26"},"nodeType":"YulFunctionCall","src":"27541:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27515:6:26"},"nodeType":"YulFunctionCall","src":"27515:47:26"},"nodeType":"YulExpressionStatement","src":"27515:47:26"},{"nodeType":"YulAssignment","src":"27571:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27705:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27579:124:26"},"nodeType":"YulFunctionCall","src":"27579:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27571:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27449:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27464:4:26","type":""}],"src":"27298:419:26"},{"body":{"nodeType":"YulBlock","src":"27877:288:26","statements":[{"nodeType":"YulAssignment","src":"27887:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27899:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"27910:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27895:3:26"},"nodeType":"YulFunctionCall","src":"27895:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27887:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"27967:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27980:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"27991:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27976:3:26"},"nodeType":"YulFunctionCall","src":"27976:17:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"27923:43:26"},"nodeType":"YulFunctionCall","src":"27923:71:26"},"nodeType":"YulExpressionStatement","src":"27923:71:26"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"28048:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28061:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"28072:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28057:3:26"},"nodeType":"YulFunctionCall","src":"28057:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"28004:43:26"},"nodeType":"YulFunctionCall","src":"28004:72:26"},"nodeType":"YulExpressionStatement","src":"28004:72:26"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"28130:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28143:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"28154:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28139:3:26"},"nodeType":"YulFunctionCall","src":"28139:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"28086:43:26"},"nodeType":"YulFunctionCall","src":"28086:72:26"},"nodeType":"YulExpressionStatement","src":"28086:72:26"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27833:9:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"27845:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"27853:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27861:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27872:4:26","type":""}],"src":"27723:442:26"},{"body":{"nodeType":"YulBlock","src":"28199:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28216:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28219:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28209:6:26"},"nodeType":"YulFunctionCall","src":"28209:88:26"},"nodeType":"YulExpressionStatement","src":"28209:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28313:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"28316:4:26","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28306:6:26"},"nodeType":"YulFunctionCall","src":"28306:15:26"},"nodeType":"YulExpressionStatement","src":"28306:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28337:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28340:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"28330:6:26"},"nodeType":"YulFunctionCall","src":"28330:15:26"},"nodeType":"YulExpressionStatement","src":"28330:15:26"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"28171:180:26"},{"body":{"nodeType":"YulBlock","src":"28399:143:26","statements":[{"nodeType":"YulAssignment","src":"28409:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"28432:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"28414:17:26"},"nodeType":"YulFunctionCall","src":"28414:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"28409:1:26"}]},{"nodeType":"YulAssignment","src":"28443:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"28466:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"28448:17:26"},"nodeType":"YulFunctionCall","src":"28448:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"28443:1:26"}]},{"body":{"nodeType":"YulBlock","src":"28490:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"28492:16:26"},"nodeType":"YulFunctionCall","src":"28492:18:26"},"nodeType":"YulExpressionStatement","src":"28492:18:26"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"28487:1:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"28480:6:26"},"nodeType":"YulFunctionCall","src":"28480:9:26"},"nodeType":"YulIf","src":"28477:35:26"},{"nodeType":"YulAssignment","src":"28522:14:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"28531:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"28534:1:26"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"28527:3:26"},"nodeType":"YulFunctionCall","src":"28527:9:26"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"28522:1:26"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"28388:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"28391:1:26","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"28397:1:26","type":""}],"src":"28357:185:26"},{"body":{"nodeType":"YulBlock","src":"28609:51:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28626:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28647:5:26"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"28631:15:26"},"nodeType":"YulFunctionCall","src":"28631:22:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28619:6:26"},"nodeType":"YulFunctionCall","src":"28619:35:26"},"nodeType":"YulExpressionStatement","src":"28619:35:26"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28597:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"28604:3:26","type":""}],"src":"28548:112:26"},{"body":{"nodeType":"YulBlock","src":"28928:616:26","statements":[{"nodeType":"YulAssignment","src":"28938:27:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28950:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"28961:3:26","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28946:3:26"},"nodeType":"YulFunctionCall","src":"28946:19:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28938:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"29019:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29032:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"29043:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29028:3:26"},"nodeType":"YulFunctionCall","src":"29028:17:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"28975:43:26"},"nodeType":"YulFunctionCall","src":"28975:71:26"},"nodeType":"YulExpressionStatement","src":"28975:71:26"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"29100:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29113:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"29124:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29109:3:26"},"nodeType":"YulFunctionCall","src":"29109:18:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"29056:43:26"},"nodeType":"YulFunctionCall","src":"29056:72:26"},"nodeType":"YulExpressionStatement","src":"29056:72:26"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"29182:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29195:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"29206:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29191:3:26"},"nodeType":"YulFunctionCall","src":"29191:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"29138:43:26"},"nodeType":"YulFunctionCall","src":"29138:72:26"},"nodeType":"YulExpressionStatement","src":"29138:72:26"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"29264:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29277:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"29288:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29273:3:26"},"nodeType":"YulFunctionCall","src":"29273:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"29220:43:26"},"nodeType":"YulFunctionCall","src":"29220:72:26"},"nodeType":"YulExpressionStatement","src":"29220:72:26"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"29342:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29355:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"29366:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29351:3:26"},"nodeType":"YulFunctionCall","src":"29351:19:26"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"29302:39:26"},"nodeType":"YulFunctionCall","src":"29302:69:26"},"nodeType":"YulExpressionStatement","src":"29302:69:26"},{"expression":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"29425:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29438:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"29449:3:26","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29434:3:26"},"nodeType":"YulFunctionCall","src":"29434:19:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"29381:43:26"},"nodeType":"YulFunctionCall","src":"29381:73:26"},"nodeType":"YulExpressionStatement","src":"29381:73:26"},{"expression":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"29508:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29521:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"29532:3:26","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29517:3:26"},"nodeType":"YulFunctionCall","src":"29517:19:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"29464:43:26"},"nodeType":"YulFunctionCall","src":"29464:73:26"},"nodeType":"YulExpressionStatement","src":"29464:73:26"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28852:9:26","type":""},{"name":"value6","nodeType":"YulTypedName","src":"28864:6:26","type":""},{"name":"value5","nodeType":"YulTypedName","src":"28872:6:26","type":""},{"name":"value4","nodeType":"YulTypedName","src":"28880:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"28888:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"28896:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"28904:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28912:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28923:4:26","type":""}],"src":"28666:878:26"},{"body":{"nodeType":"YulBlock","src":"29656:114:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29678:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"29686:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29674:3:26"},"nodeType":"YulFunctionCall","src":"29674:14:26"},{"hexValue":"5361666545524332303a207065726d697420646964206e6f7420737563636565","kind":"string","nodeType":"YulLiteral","src":"29690:34:26","type":"","value":"SafeERC20: permit did not succee"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29667:6:26"},"nodeType":"YulFunctionCall","src":"29667:58:26"},"nodeType":"YulExpressionStatement","src":"29667:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29746:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"29754:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29742:3:26"},"nodeType":"YulFunctionCall","src":"29742:15:26"},{"hexValue":"64","kind":"string","nodeType":"YulLiteral","src":"29759:3:26","type":"","value":"d"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29735:6:26"},"nodeType":"YulFunctionCall","src":"29735:28:26"},"nodeType":"YulExpressionStatement","src":"29735:28:26"}]},"name":"store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"29648:6:26","type":""}],"src":"29550:220:26"},{"body":{"nodeType":"YulBlock","src":"29922:220:26","statements":[{"nodeType":"YulAssignment","src":"29932:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29998:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"30003:2:26","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29939:58:26"},"nodeType":"YulFunctionCall","src":"29939:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29932:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30104:3:26"}],"functionName":{"name":"store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","nodeType":"YulIdentifier","src":"30015:88:26"},"nodeType":"YulFunctionCall","src":"30015:93:26"},"nodeType":"YulExpressionStatement","src":"30015:93:26"},{"nodeType":"YulAssignment","src":"30117:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30128:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"30133:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30124:3:26"},"nodeType":"YulFunctionCall","src":"30124:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"30117:3:26"}]}]},"name":"abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29910:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29918:3:26","type":""}],"src":"29776:366:26"},{"body":{"nodeType":"YulBlock","src":"30319:248:26","statements":[{"nodeType":"YulAssignment","src":"30329:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30341:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"30352:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30337:3:26"},"nodeType":"YulFunctionCall","src":"30337:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30329:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30376:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"30387:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30372:3:26"},"nodeType":"YulFunctionCall","src":"30372:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30395:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"30401:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30391:3:26"},"nodeType":"YulFunctionCall","src":"30391:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30365:6:26"},"nodeType":"YulFunctionCall","src":"30365:47:26"},"nodeType":"YulExpressionStatement","src":"30365:47:26"},{"nodeType":"YulAssignment","src":"30421:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30555:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30429:124:26"},"nodeType":"YulFunctionCall","src":"30429:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30421:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30299:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30314:4:26","type":""}],"src":"30148:419:26"},{"body":{"nodeType":"YulBlock","src":"30679:60:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30701:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"30709:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30697:3:26"},"nodeType":"YulFunctionCall","src":"30697:14:26"},{"hexValue":"5061757361626c653a20706175736564","kind":"string","nodeType":"YulLiteral","src":"30713:18:26","type":"","value":"Pausable: paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30690:6:26"},"nodeType":"YulFunctionCall","src":"30690:42:26"},"nodeType":"YulExpressionStatement","src":"30690:42:26"}]},"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30671:6:26","type":""}],"src":"30573:166:26"},{"body":{"nodeType":"YulBlock","src":"30891:220:26","statements":[{"nodeType":"YulAssignment","src":"30901:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30967:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"30972:2:26","type":"","value":"16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30908:58:26"},"nodeType":"YulFunctionCall","src":"30908:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"30901:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31073:3:26"}],"functionName":{"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulIdentifier","src":"30984:88:26"},"nodeType":"YulFunctionCall","src":"30984:93:26"},"nodeType":"YulExpressionStatement","src":"30984:93:26"},{"nodeType":"YulAssignment","src":"31086:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31097:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"31102:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31093:3:26"},"nodeType":"YulFunctionCall","src":"31093:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"31086:3:26"}]}]},"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"30879:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"30887:3:26","type":""}],"src":"30745:366:26"},{"body":{"nodeType":"YulBlock","src":"31288:248:26","statements":[{"nodeType":"YulAssignment","src":"31298:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31310:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"31321:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31306:3:26"},"nodeType":"YulFunctionCall","src":"31306:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31298:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31345:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"31356:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31341:3:26"},"nodeType":"YulFunctionCall","src":"31341:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31364:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"31370:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31360:3:26"},"nodeType":"YulFunctionCall","src":"31360:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31334:6:26"},"nodeType":"YulFunctionCall","src":"31334:47:26"},"nodeType":"YulExpressionStatement","src":"31334:47:26"},{"nodeType":"YulAssignment","src":"31390:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31524:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31398:124:26"},"nodeType":"YulFunctionCall","src":"31398:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31390:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31268:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31283:4:26","type":""}],"src":"31117:419:26"},{"body":{"nodeType":"YulBlock","src":"31585:128:26","statements":[{"nodeType":"YulAssignment","src":"31595:33:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31622:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"31604:17:26"},"nodeType":"YulFunctionCall","src":"31604:24:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"31595:5:26"}]},{"body":{"nodeType":"YulBlock","src":"31656:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"31658:16:26"},"nodeType":"YulFunctionCall","src":"31658:18:26"},"nodeType":"YulExpressionStatement","src":"31658:18:26"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31643:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"31650:4:26","type":"","value":"0x00"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"31640:2:26"},"nodeType":"YulFunctionCall","src":"31640:15:26"},"nodeType":"YulIf","src":"31637:41:26"},{"nodeType":"YulAssignment","src":"31687:20:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31698:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"31705:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31694:3:26"},"nodeType":"YulFunctionCall","src":"31694:13:26"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"31687:3:26"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"31571:5:26","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"31581:3:26","type":""}],"src":"31542:171:26"},{"body":{"nodeType":"YulBlock","src":"31825:76:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31847:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"31855:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31843:3:26"},"nodeType":"YulFunctionCall","src":"31843:14:26"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"31859:34:26","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31836:6:26"},"nodeType":"YulFunctionCall","src":"31836:58:26"},"nodeType":"YulExpressionStatement","src":"31836:58:26"}]},"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31817:6:26","type":""}],"src":"31719:182:26"},{"body":{"nodeType":"YulBlock","src":"32053:220:26","statements":[{"nodeType":"YulAssignment","src":"32063:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32129:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"32134:2:26","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32070:58:26"},"nodeType":"YulFunctionCall","src":"32070:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"32063:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32235:3:26"}],"functionName":{"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulIdentifier","src":"32146:88:26"},"nodeType":"YulFunctionCall","src":"32146:93:26"},"nodeType":"YulExpressionStatement","src":"32146:93:26"},{"nodeType":"YulAssignment","src":"32248:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32259:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"32264:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32255:3:26"},"nodeType":"YulFunctionCall","src":"32255:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"32248:3:26"}]}]},"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"32041:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"32049:3:26","type":""}],"src":"31907:366:26"},{"body":{"nodeType":"YulBlock","src":"32450:248:26","statements":[{"nodeType":"YulAssignment","src":"32460:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32472:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"32483:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32468:3:26"},"nodeType":"YulFunctionCall","src":"32468:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32460:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32507:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"32518:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32503:3:26"},"nodeType":"YulFunctionCall","src":"32503:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32526:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"32532:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32522:3:26"},"nodeType":"YulFunctionCall","src":"32522:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32496:6:26"},"nodeType":"YulFunctionCall","src":"32496:47:26"},"nodeType":"YulExpressionStatement","src":"32496:47:26"},{"nodeType":"YulAssignment","src":"32552:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32686:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32560:124:26"},"nodeType":"YulFunctionCall","src":"32560:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32552:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32430:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32445:4:26","type":""}],"src":"32279:419:26"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_array$_t_uint256_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function validator_revert_t_uint8(value) {\n        if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint8(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint8(value)\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_uint8t_bytes32t_bytes32t_bool(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6 {\n        if slt(sub(dataEnd, headStart), 224) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint8(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 192\n\n            value6 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 192) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint8(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_addresst_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 192) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed(headStart , value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 192)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value5,  add(headStart, 160))\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513(memPtr) {\n\n        mstore(add(memPtr, 0), \"Must have admin role to perform \")\n\n        mstore(add(memPtr, 32), \"this action.\")\n\n    }\n\n    function abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 44)\n        store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: can only renounce\")\n\n        mstore(add(memPtr, 32), \" roles for self\")\n\n    }\n\n    function abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)\n        store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is alrea\")\n\n        mstore(add(memPtr, 32), \"dy initialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {\n        converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(memPtr) {\n\n        mstore(add(memPtr, 0), \"ReentrancyGuard: reentrant call\")\n\n    }\n\n    function abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: account \")\n\n    }\n\n    function abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 23)\n        store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(pos)\n        end := add(pos, 23)\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(memPtr) {\n\n        mstore(add(memPtr, 0), \" is missing role \")\n\n    }\n\n    function abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 17)\n        store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(pos)\n        end := add(pos, 17)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: not paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n        store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart , value6, value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 224)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value5,  add(headStart, 160))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value6,  add(headStart, 192))\n\n    }\n\n    function store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: permit did not succee\")\n\n        mstore(add(memPtr, 32), \"d\")\n\n    }\n\n    function abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function decrement_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0x00) { panic_error_0x11() }\n        ret := sub(value, 1)\n    }\n\n    function store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Strings: hex length insufficient\")\n\n    }\n\n    function abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":26,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E8847BD GT PUSH2 0x104 JUMPI DUP1 PUSH4 0xA217FDDF GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xCFF5EEDE GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xCFF5EEDE EQ PUSH2 0x58F JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x5BF JUMPI DUP1 PUSH4 0xEC249164 EQ PUSH2 0x5DB JUMPI DUP1 PUSH4 0xF099DD50 EQ PUSH2 0x60C JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x507 JUMPI DUP1 PUSH4 0xB4706268 EQ PUSH2 0x525 JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x541 JUMPI DUP1 PUSH4 0xC392E850 EQ PUSH2 0x55F JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x81280D2B GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x81280D2B EQ PUSH2 0x468 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x498 JUMPI DUP1 PUSH4 0x88295FB2 EQ PUSH2 0x4A2 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x4D7 JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x6E8847BD EQ PUSH2 0x3D8 JUMPI DUP1 PUSH4 0x728CDBCA EQ PUSH2 0x408 JUMPI DUP1 PUSH4 0x77BD35FC EQ PUSH2 0x438 JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x42F6B8A7 GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x5C975ABB GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x33E JUMPI DUP1 PUSH4 0x642ADC28 EQ PUSH2 0x35C JUMPI DUP1 PUSH4 0x6B6D105E EQ PUSH2 0x38C JUMPI DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x3BC JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x42F6B8A7 EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0x4E94C048 EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0x56EB66BB EQ PUSH2 0x322 JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x24B7AB24 GT PUSH2 0x1AD JUMPI DUP1 PUSH4 0x24B7AB24 EQ PUSH2 0x264 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x280 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x2B8 JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x1A5C8F28 EQ PUSH2 0x204 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x234 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E9 SWAP2 SWAP1 PUSH2 0x325F JUMP JUMPDEST PUSH2 0x63C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0x32A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x219 SWAP2 SWAP1 PUSH2 0x3356 JUMP JUMPDEST PUSH2 0x6B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x22B SWAP2 SWAP1 PUSH2 0x3467 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x24E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x249 SWAP2 SWAP1 PUSH2 0x34BF JUMP JUMPDEST PUSH2 0x8D9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25B SWAP2 SWAP1 PUSH2 0x34FB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x279 SWAP2 SWAP1 PUSH2 0x3516 JUMP JUMPDEST PUSH2 0x8F9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x295 SWAP2 SWAP1 PUSH2 0x3543 JUMP JUMPDEST PUSH2 0x983 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2B6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2B1 SWAP2 SWAP1 PUSH2 0x3543 JUMP JUMPDEST PUSH2 0x9A4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C0 PUSH2 0xA27 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2DC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D7 SWAP2 SWAP1 PUSH2 0x3583 JUMP JUMPDEST PUSH2 0xA78 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E9 SWAP2 SWAP1 PUSH2 0x35BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x30C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x307 SWAP2 SWAP1 PUSH2 0x35DA JUMP JUMPDEST PUSH2 0xAF3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x319 SWAP2 SWAP1 PUSH2 0x35BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x33C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x337 SWAP2 SWAP1 PUSH2 0x3516 JUMP JUMPDEST PUSH2 0xCAA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x346 PUSH2 0xD32 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x353 SWAP2 SWAP1 PUSH2 0x32A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x376 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x371 SWAP2 SWAP1 PUSH2 0x367F JUMP JUMPDEST PUSH2 0xD49 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x383 SWAP2 SWAP1 PUSH2 0x32A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3A1 SWAP2 SWAP1 PUSH2 0x3356 JUMP JUMPDEST PUSH2 0xD7D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3B3 SWAP2 SWAP1 PUSH2 0x35BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3D6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3D1 SWAP2 SWAP1 PUSH2 0x3583 JUMP JUMPDEST PUSH2 0xDEE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3F2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3ED SWAP2 SWAP1 PUSH2 0x3721 JUMP JUMPDEST PUSH2 0xF10 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3FF SWAP2 SWAP1 PUSH2 0x32A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x422 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x41D SWAP2 SWAP1 PUSH2 0x37AE JUMP JUMPDEST PUSH2 0xF42 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x42F SWAP2 SWAP1 PUSH2 0x32A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x452 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x44D SWAP2 SWAP1 PUSH2 0x35DA JUMP JUMPDEST PUSH2 0x11DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45F SWAP2 SWAP1 PUSH2 0x32A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x482 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x47D SWAP2 SWAP1 PUSH2 0x3356 JUMP JUMPDEST PUSH2 0x11E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x48F SWAP2 SWAP1 PUSH2 0x32A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4A0 PUSH2 0x1264 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4BC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4B7 SWAP2 SWAP1 PUSH2 0x3356 JUMP JUMPDEST PUSH2 0x12B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4CE SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x383B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4F1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4EC SWAP2 SWAP1 PUSH2 0x3543 JUMP JUMPDEST PUSH2 0x13BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4FE SWAP2 SWAP1 PUSH2 0x32A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x50F PUSH2 0x1428 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x51C SWAP2 SWAP1 PUSH2 0x34FB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x53F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x53A SWAP2 SWAP1 PUSH2 0x3516 JUMP JUMPDEST PUSH2 0x142F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x549 PUSH2 0x14BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x556 SWAP2 SWAP1 PUSH2 0x32A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x579 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x574 SWAP2 SWAP1 PUSH2 0x3356 JUMP JUMPDEST PUSH2 0x14D9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x586 SWAP2 SWAP1 PUSH2 0x35BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5A9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5A4 SWAP2 SWAP1 PUSH2 0x3583 JUMP JUMPDEST PUSH2 0x154A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B6 SWAP2 SWAP1 PUSH2 0x35BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5D9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5D4 SWAP2 SWAP1 PUSH2 0x3543 JUMP JUMPDEST PUSH2 0x172F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5F5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5F0 SWAP2 SWAP1 PUSH2 0x3583 JUMP JUMPDEST PUSH2 0x1750 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x603 SWAP3 SWAP2 SWAP1 PUSH2 0x389C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x626 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x621 SWAP2 SWAP1 PUSH2 0x3356 JUMP JUMPDEST PUSH2 0x17D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x633 SWAP2 SWAP1 PUSH2 0x32A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x6AF JUMPI POP PUSH2 0x6AE DUP3 PUSH2 0x186C JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7B5 JUMPI PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0xC0 ADD MLOAD ISZERO PUSH2 0x7A3 JUMPI DUP3 PUSH2 0x7A0 SWAP1 PUSH2 0x38F4 JUMP JUMPDEST SWAP3 POP JUMPDEST DUP2 PUSH2 0x7AD SWAP1 PUSH2 0x38F4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x6BC JUMP JUMPDEST POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7D2 JUMPI PUSH2 0x7D1 PUSH2 0x393C JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x800 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x8CB JUMPI PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x8B9 JUMPI DUP2 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x8A0 JUMPI PUSH2 0x89F PUSH2 0x396B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH2 0x8B6 SWAP1 PUSH2 0x38F4 JUMP JUMPDEST SWAP3 POP JUMPDEST DUP2 PUSH2 0x8C3 SWAP1 PUSH2 0x38F4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x807 JUMP JUMPDEST POP DUP2 SWAP4 POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x901 PUSH2 0x14BA JUMP JUMPDEST PUSH2 0x940 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x937 SWAP1 PUSH2 0x3A1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE10 DUP2 PUSH2 0x94E SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST PUSH1 0xFD DUP2 SWAP1 SSTORE POP PUSH32 0x75C07EB064B8CCF959BCC601B55315CA198E67B597DC0A7B93E130F8CA779A67 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x98C DUP3 PUSH2 0x8D9 JUMP JUMPDEST PUSH2 0x995 DUP2 PUSH2 0x18D6 JUMP JUMPDEST PUSH2 0x99F DUP4 DUP4 PUSH2 0x18EA JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x9AC PUSH2 0x19CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xA19 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA10 SWAP1 PUSH2 0x3B09 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA23 DUP3 DUP3 PUSH2 0x19D3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xA2F PUSH2 0x14BA JUMP JUMPDEST PUSH2 0xA6E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA65 SWAP1 PUSH2 0x3A1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA76 PUSH2 0x1AB5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x103 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x40 ADD MLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x0 PUSH2 0xBA3 DUP6 DUP6 PUSH2 0x102 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3BF4C082 DUP9 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB5D SWAP2 SWAP1 PUSH2 0x35BF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB7A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB9E SWAP2 SWAP1 PUSH2 0x3B3E JUMP JUMPDEST PUSH2 0x6B6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xC9E JUMPI PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xC19 JUMPI PUSH2 0xC18 PUSH2 0x396B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD TIMESTAMP GT PUSH2 0xC45 JUMPI PUSH1 0x0 PUSH2 0xC6C JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD TIMESTAMP GT PUSH2 0xC65 JUMPI DUP2 PUSH1 0x0 ADD SLOAD TIMESTAMP PUSH2 0xC60 SWAP2 SWAP1 PUSH2 0x3B6B JUMP JUMPDEST PUSH2 0xC6B JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD JUMPDEST JUMPDEST SWAP1 POP DUP1 DUP3 PUSH1 0x4 ADD SLOAD PUSH2 0xC7E SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST DUP6 PUSH2 0xC89 SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST SWAP5 POP DUP3 PUSH2 0xC95 SWAP1 PUSH2 0x38F4 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0xBA8 JUMP JUMPDEST POP DUP2 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xCB2 PUSH2 0x14BA JUMP JUMPDEST PUSH2 0xCF1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCE8 SWAP1 PUSH2 0x3A1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3C DUP2 PUSH2 0xCFE SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST PUSH1 0xFE DUP2 SWAP1 SSTORE POP PUSH31 0x3A5A2424463BB22C8FC4C0F2422B7A18712B7713F9619CAA313F499FAD615E PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD53 PUSH2 0x1B18 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD64 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x1B67 JUMP JUMPDEST SWAP1 POP DUP1 SWAP2 POP POP PUSH2 0xD72 PUSH2 0x1DC4 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xE3D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE34 SWAP1 PUSH2 0x3C45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xEA3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xEAB PUSH2 0x1DCE JUMP JUMPDEST PUSH2 0xEB3 PUSH2 0x1E27 JUMP JUMPDEST PUSH2 0xEBB PUSH2 0x1E78 JUMP JUMPDEST PUSH2 0xECC PUSH2 0xEC6 PUSH2 0x1ED1 JUMP JUMPDEST DUP3 PUSH2 0x18EA JUMP JUMPDEST PUSH2 0xEDD PUSH2 0xED7 PUSH2 0x1EF9 JUMP JUMPDEST DUP3 PUSH2 0x18EA JUMP JUMPDEST PUSH2 0xEF5 PUSH2 0xEE8 PUSH2 0x1EF9 JUMP JUMPDEST PUSH2 0xEF0 PUSH2 0x1ED1 JUMP JUMPDEST PUSH2 0x1F21 JUMP JUMPDEST PUSH2 0xF0D PUSH2 0xF00 PUSH2 0x1ED1 JUMP JUMPDEST PUSH2 0xF08 PUSH2 0x1ED1 JUMP JUMPDEST PUSH2 0x1F21 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF1A PUSH2 0x1B18 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF2A DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH2 0x1F7D JUMP JUMPDEST SWAP1 POP DUP1 SWAP2 POP POP PUSH2 0xF38 PUSH2 0x1DC4 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0xF75 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0xFA2 JUMPI POP PUSH2 0xF84 ADDRESS PUSH2 0x21A2 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0xFA1 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0xFE1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFD8 SWAP1 PUSH2 0x3CD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x101E JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH1 0xFB DUP2 SWAP1 SSTORE POP PUSH1 0x3C DUP4 PUSH2 0x1033 SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST PUSH1 0xFC DUP2 SWAP1 SSTORE POP PUSH1 0x3C DUP5 PUSH2 0x1046 SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST PUSH1 0xFD DUP2 SWAP1 SSTORE POP PUSH1 0x3C DUP6 PUSH2 0x1059 SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST PUSH1 0xFE DUP2 SWAP1 SSTORE POP DUP8 PUSH1 0xFF PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP8 PUSH2 0x100 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP7 PUSH2 0x101 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP6 PUSH2 0x102 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1176 PUSH2 0x1171 PUSH2 0x19CB JUMP JUMPDEST PUSH2 0xDEE JUMP JUMPDEST PUSH1 0x1 SWAP2 POP DUP1 ISZERO PUSH2 0x11D3 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x11CA SWAP2 SWAP1 PUSH2 0x3D3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x126C PUSH2 0x14BA JUMP JUMPDEST PUSH2 0x12AB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A2 SWAP1 PUSH2 0x3A1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x12B3 PUSH2 0x21C5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x40 ADD MLOAD DUP2 PUSH1 0x80 ADD MLOAD DUP3 PUSH1 0x60 ADD MLOAD DUP4 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0xC0 ADD MLOAD SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP POP SWAP4 SWAP8 POP SWAP4 SWAP8 SWAP2 SWAP6 POP SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH2 0x1437 PUSH2 0x14BA JUMP JUMPDEST PUSH2 0x1476 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x146D SWAP1 PUSH2 0x3A1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x15180 DUP2 PUSH2 0x1485 SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST PUSH1 0xFC DUP2 SWAP1 SSTORE POP PUSH32 0xDB4FB2FD6B8B90F67BDA8671842D5CAB4EB4B7EBA9683F5BCEC9ABA9473CC957 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14D4 PUSH2 0x14C7 PUSH2 0x1ED1 JUMP JUMPDEST PUSH2 0x14CF PUSH2 0x19CB JUMP JUMPDEST PUSH2 0x13BD JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0xFB SLOAD DUP2 LT ISZERO PUSH2 0x1725 JUMPI PUSH1 0x0 DUP1 PUSH2 0x1608 DUP7 DUP5 PUSH2 0x102 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3BF4C082 DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15C2 SWAP2 SWAP1 PUSH2 0x35BF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x15DF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1603 SWAP2 SWAP1 PUSH2 0x3B3E JUMP JUMPDEST PUSH2 0x6B6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x1703 JUMPI PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x167E JUMPI PUSH2 0x167D PUSH2 0x396B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD TIMESTAMP GT PUSH2 0x16AA JUMPI PUSH1 0x0 PUSH2 0x16D1 JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD TIMESTAMP GT PUSH2 0x16CA JUMPI DUP2 PUSH1 0x0 ADD SLOAD TIMESTAMP PUSH2 0x16C5 SWAP2 SWAP1 PUSH2 0x3B6B JUMP JUMPDEST PUSH2 0x16D0 JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD JUMPDEST JUMPDEST SWAP1 POP DUP1 DUP3 PUSH1 0x4 ADD SLOAD PUSH2 0x16E3 SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST DUP6 PUSH2 0x16EE SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST SWAP5 POP DUP3 PUSH2 0x16FA SWAP1 PUSH2 0x38F4 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x160D JUMP JUMPDEST POP DUP2 DUP5 PUSH2 0x1710 SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST SWAP4 POP DUP3 PUSH2 0x171C SWAP1 PUSH2 0x38F4 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x1554 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1738 DUP3 PUSH2 0x8D9 JUMP JUMPDEST PUSH2 0x1741 DUP2 PUSH2 0x18D6 JUMP JUMPDEST PUSH2 0x174B DUP4 DUP4 PUSH2 0x19D3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x103 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD DUP2 PUSH1 0x0 ADD MLOAD SWAP3 POP SWAP3 POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 TIMESTAMP PUSH2 0x17E2 DUP6 DUP6 DUP6 PUSH2 0x14D9 JUMP JUMPDEST GT ISZERO PUSH2 0x181A JUMPI PUSH1 0x40 MLOAD PUSH32 0x707001B500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1827 DUP6 DUP6 DUP6 PUSH2 0x2228 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1860 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB00FCB1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18E7 DUP2 PUSH2 0x18E2 PUSH2 0x19CB JUMP JUMPDEST PUSH2 0x25CA JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x18F4 DUP3 DUP3 PUSH2 0x13BD JUMP JUMPDEST PUSH2 0x19C7 JUMPI PUSH1 0x1 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x196C PUSH2 0x19CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x19DD DUP3 DUP3 PUSH2 0x13BD JUMP JUMPDEST ISZERO PUSH2 0x1AB1 JUMPI PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x1A56 PUSH2 0x19CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1ABD PUSH2 0x264F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x1B01 PUSH2 0x19CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B0E SWAP2 SWAP1 PUSH2 0x3D66 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0xC9 SLOAD SUB PUSH2 0x1B5D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B54 SWAP1 PUSH2 0x3DCD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 PUSH2 0x1B76 PUSH2 0x19CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1C19 JUMPI PUSH1 0x40 MLOAD PUSH32 0x96AE3E8200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1C2D PUSH2 0x1C26 PUSH2 0x19CB JUMP JUMPDEST DUP10 DUP10 PUSH2 0x2228 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1C66 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB00FCB1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH2 0x1DB4 JUMPI PUSH1 0x0 DUP10 PUSH2 0x104 PUSH1 0x0 PUSH2 0x1C7B PUSH2 0x19CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x1CE5 SWAP2 SWAP1 PUSH2 0x3B6B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0x278D00 PUSH1 0xFC SLOAD TIMESTAMP PUSH2 0x1CFB SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST PUSH2 0x1D05 SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x1D15 DUP5 DUP14 DUP14 PUSH2 0x2698 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1D50 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB00FCB1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1DAF PUSH2 0x1D5B PUSH2 0x19CB JUMP JUMPDEST ADDRESS DUP4 DUP7 DUP15 DUP15 DUP15 PUSH2 0x100 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2CBD SWAP1 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1E1D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E14 SWAP1 PUSH2 0x3C45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1E25 PUSH2 0x2E8A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1E76 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E6D SWAP1 PUSH2 0x3C45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1EC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1EBE SWAP1 PUSH2 0x3C45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1ECF PUSH2 0x2EF6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F2C DUP4 PUSH2 0x8D9 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x97 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP8 PUSH2 0x104 PUSH1 0x0 PUSH2 0x1F8E PUSH2 0x19CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x1FF8 SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST SWAP1 POP PUSH2 0x104 PUSH1 0x0 PUSH2 0x2007 PUSH2 0x19CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x20C8 JUMPI PUSH1 0x0 PUSH2 0x208D PUSH2 0x2086 PUSH2 0x19CB JUMP JUMPDEST DUP10 DUP10 PUSH2 0x2228 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x20C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB00FCB1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST PUSH1 0x0 PUSH3 0x278D00 PUSH1 0xFC SLOAD TIMESTAMP PUSH2 0x20DC SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST PUSH2 0x20E6 SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x20F6 DUP5 DUP12 DUP12 PUSH2 0x2698 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x2131 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB00FCB1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2190 PUSH2 0x213C PUSH2 0x19CB JUMP JUMPDEST ADDRESS DUP4 DUP7 DUP13 DUP13 DUP13 PUSH2 0x100 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2CBD SWAP1 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 SWAP5 POP POP POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x21CD PUSH2 0x2F4F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x2211 PUSH2 0x19CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x221E SWAP2 SWAP1 PUSH2 0x3D66 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x104 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x22D7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x96AE3E8200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x6 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD TIMESTAMP GT PUSH2 0x2308 JUMPI PUSH1 0x0 PUSH2 0x232F JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD TIMESTAMP GT PUSH2 0x2328 JUMPI DUP2 PUSH1 0x0 ADD SLOAD TIMESTAMP PUSH2 0x2323 SWAP2 SWAP1 PUSH2 0x3B6B JUMP JUMPDEST PUSH2 0x232E JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x4 ADD SLOAD DUP3 PUSH2 0x2343 SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SUB PUSH2 0x2359 JUMPI PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x25C3 JUMP JUMPDEST DUP3 PUSH1 0x4 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x23B0 SWAP2 SWAP1 PUSH2 0x3B6B JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x5 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x240E SWAP2 SWAP1 PUSH2 0x3B6B JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP4 PUSH1 0x4 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0x2 ADD SLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x102 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x26A6E9EB DUP11 DUP11 DUP6 DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x248B SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3DED JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x24AA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x24CE SWAP2 SWAP1 PUSH2 0x3E47 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x79CC6790 DUP13 DUP8 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2530 SWAP3 SWAP2 SWAP1 PUSH2 0x3E74 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x254F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2573 SWAP2 SWAP1 PUSH2 0x3E47 JUMP JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 PUSH2 0x2580 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x25B7 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB00FCB1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP8 POP POP POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x25D4 DUP3 DUP3 PUSH2 0x13BD JUMP JUMPDEST PUSH2 0x264B JUMPI PUSH2 0x25E1 DUP2 PUSH2 0x2F99 JUMP JUMPDEST PUSH2 0x25EF DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0x2FC6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2600 SWAP3 SWAP2 SWAP1 PUSH2 0x3FA6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2642 SWAP2 SWAP1 PUSH2 0x402A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x2657 PUSH2 0xD32 JUMP JUMPDEST PUSH2 0x2696 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x268D SWAP1 PUSH2 0x4098 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH8 0xDE0B6B3A7640000 DUP6 LT ISZERO PUSH2 0x26DC JUMPI PUSH1 0x40 MLOAD PUSH31 0xCD474300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x102 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5657F79D DUP6 DUP8 DUP7 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x273C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x40B8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2759 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x277D SWAP2 SWAP1 PUSH2 0x3E47 JUMP JUMPDEST PUSH2 0x27B3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1E45D1B400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x104 PUSH1 0x0 PUSH2 0x27C0 PUSH2 0x19CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x2864 JUMPI PUSH1 0x40 MLOAD PUSH32 0x707001B500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 PUSH2 0x2873 PUSH2 0x19CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x103 PUSH1 0x0 PUSH2 0x28E0 PUSH2 0x19CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x2 ADD SLOAD PUSH2 0x101 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 PUSH2 0x296A PUSH2 0x19CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2986 SWAP2 SWAP1 PUSH2 0x3D66 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x29A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x29C7 SWAP2 SWAP1 PUSH2 0x3B3E JUMP JUMPDEST PUSH2 0x29D1 SWAP2 SWAP1 PUSH2 0x3B6B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP10 PUSH2 0x102 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5952A8C6 DUP12 DUP12 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A3D SWAP3 SWAP2 SWAP1 PUSH2 0x389C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A5A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2A7E SWAP2 SWAP1 PUSH2 0x3B3E JUMP JUMPDEST PUSH2 0x2A88 SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST PUSH2 0x2A92 SWAP2 SWAP1 PUSH2 0x411E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 DUP5 PUSH1 0x1 ADD SLOAD PUSH2 0x2AA6 SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0xFE SLOAD DUP3 PUSH2 0x2AB7 SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST GT ISZERO PUSH2 0x2AEF JUMPI PUSH1 0x40 MLOAD PUSH32 0xE4B581A500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 PUSH2 0x2AFD SWAP2 SWAP1 PUSH2 0x411E JUMP JUMPDEST SWAP1 POP DUP3 DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2B13 SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP11 DUP7 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP DUP3 DUP7 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP TIMESTAMP DUP7 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP PUSH1 0xFD SLOAD TIMESTAMP PUSH2 0x2B43 SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST DUP7 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH1 0xFC SLOAD DUP2 LT PUSH2 0x2B6B JUMPI PUSH1 0xFC SLOAD DUP7 PUSH1 0x0 ADD SLOAD PUSH2 0x2B66 SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST PUSH2 0x2B7C JUMP JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD SLOAD PUSH2 0x2B7B SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST JUMPDEST DUP7 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP3 DUP2 PUSH2 0x2B90 SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST DUP7 PUSH1 0x5 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP7 PUSH1 0x6 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP6 PUSH1 0x5 ADD SLOAD DUP6 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2BCD SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x0 ADD SLOAD DUP7 PUSH1 0x1 ADD SLOAD LT PUSH2 0x2BED JUMPI DUP6 PUSH1 0x1 ADD SLOAD PUSH2 0x2BF3 JUMP JUMPDEST DUP5 PUSH1 0x0 ADD SLOAD JUMPDEST DUP6 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x102 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD9895C70 DUP13 DUP13 DUP16 DUP9 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C5F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3DED JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2C7E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2CA2 SWAP2 SWAP1 PUSH2 0x3E47 JUMP JUMPDEST SWAP1 POP DUP1 DUP8 PUSH1 0x5 ADD SLOAD SWAP9 POP SWAP9 POP POP POP POP POP POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7ECEBE00 DUP10 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2CF8 SWAP2 SWAP1 PUSH2 0x3D66 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2D15 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2D39 SWAP2 SWAP1 PUSH2 0x3B3E JUMP JUMPDEST SWAP1 POP DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD505ACCF DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D80 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x415E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2DAE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7ECEBE00 DUP11 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DED SWAP2 SWAP1 PUSH2 0x3D66 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E0A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2E2E SWAP2 SWAP1 PUSH2 0x3B3E JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP3 PUSH2 0x2E3D SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST DUP2 EQ PUSH2 0x2E7E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E75 SWAP1 PUSH2 0x423F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2ED9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2ED0 SWAP1 PUSH2 0x3C45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2F45 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F3C SWAP1 PUSH2 0x3C45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x2F57 PUSH2 0xD32 JUMP JUMPDEST ISZERO PUSH2 0x2F97 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F8E SWAP1 PUSH2 0x42AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2FBF DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0x2FC6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0x2FD9 SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST PUSH2 0x2FE3 SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2FFC JUMPI PUSH2 0x2FFB PUSH2 0x393C JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x302E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3066 JUMPI PUSH2 0x3065 PUSH2 0x396B JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x30CA JUMPI PUSH2 0x30C9 PUSH2 0x396B JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0x310A SWAP2 SWAP1 PUSH2 0x3A3D JUMP JUMPDEST PUSH2 0x3114 SWAP2 SWAP1 PUSH2 0x3B9F JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x31B4 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0x3156 JUMPI PUSH2 0x3155 PUSH2 0x396B JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x316D JUMPI PUSH2 0x316C PUSH2 0x396B JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0x31AD SWAP1 PUSH2 0x42CB JUMP JUMPDEST SWAP1 POP PUSH2 0x3117 JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0x31F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x31EF SWAP1 PUSH2 0x4340 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x323C DUP2 PUSH2 0x3207 JUMP JUMPDEST DUP2 EQ PUSH2 0x3247 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3259 DUP2 PUSH2 0x3233 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3275 JUMPI PUSH2 0x3274 PUSH2 0x3202 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3283 DUP5 DUP3 DUP6 ADD PUSH2 0x324A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x32A1 DUP2 PUSH2 0x328C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x32BC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3298 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32ED DUP3 PUSH2 0x32C2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x32FD DUP2 PUSH2 0x32E2 JUMP JUMPDEST DUP2 EQ PUSH2 0x3308 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x331A DUP2 PUSH2 0x32F4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3333 DUP2 PUSH2 0x3320 JUMP JUMPDEST DUP2 EQ PUSH2 0x333E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3350 DUP2 PUSH2 0x332A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x336F JUMPI PUSH2 0x336E PUSH2 0x3202 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x337D DUP7 DUP3 DUP8 ADD PUSH2 0x330B JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x338E DUP7 DUP3 DUP8 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x339F DUP7 DUP3 DUP8 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x33DE DUP2 PUSH2 0x3320 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33F0 DUP4 DUP4 PUSH2 0x33D5 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3414 DUP3 PUSH2 0x33A9 JUMP JUMPDEST PUSH2 0x341E DUP2 DUP6 PUSH2 0x33B4 JUMP JUMPDEST SWAP4 POP PUSH2 0x3429 DUP4 PUSH2 0x33C5 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x345A JUMPI DUP2 MLOAD PUSH2 0x3441 DUP9 DUP3 PUSH2 0x33E4 JUMP JUMPDEST SWAP8 POP PUSH2 0x344C DUP4 PUSH2 0x33FC JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x342D JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3481 DUP2 DUP5 PUSH2 0x3409 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x349C DUP2 PUSH2 0x3489 JUMP JUMPDEST DUP2 EQ PUSH2 0x34A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x34B9 DUP2 PUSH2 0x3493 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x34D5 JUMPI PUSH2 0x34D4 PUSH2 0x3202 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x34E3 DUP5 DUP3 DUP6 ADD PUSH2 0x34AA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x34F5 DUP2 PUSH2 0x3489 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3510 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x34EC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x352C JUMPI PUSH2 0x352B PUSH2 0x3202 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x353A DUP5 DUP3 DUP6 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x355A JUMPI PUSH2 0x3559 PUSH2 0x3202 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3568 DUP6 DUP3 DUP7 ADD PUSH2 0x34AA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3579 DUP6 DUP3 DUP7 ADD PUSH2 0x330B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3599 JUMPI PUSH2 0x3598 PUSH2 0x3202 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x35A7 DUP5 DUP3 DUP6 ADD PUSH2 0x330B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x35B9 DUP2 PUSH2 0x3320 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x35D4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x35B0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x35F1 JUMPI PUSH2 0x35F0 PUSH2 0x3202 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x35FF DUP6 DUP3 DUP7 ADD PUSH2 0x330B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3610 DUP6 DUP3 DUP7 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3630 DUP2 PUSH2 0x361A JUMP JUMPDEST DUP2 EQ PUSH2 0x363B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x364D DUP2 PUSH2 0x3627 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x365C DUP2 PUSH2 0x328C JUMP JUMPDEST DUP2 EQ PUSH2 0x3667 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3679 DUP2 PUSH2 0x3653 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x369E JUMPI PUSH2 0x369D PUSH2 0x3202 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x36AC DUP11 DUP3 DUP12 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x36BD DUP11 DUP3 DUP12 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x36CE DUP11 DUP3 DUP12 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x36DF DUP11 DUP3 DUP12 ADD PUSH2 0x363E JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x36F0 DUP11 DUP3 DUP12 ADD PUSH2 0x34AA JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x3701 DUP11 DUP3 DUP12 ADD PUSH2 0x34AA JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x3712 DUP11 DUP3 DUP12 ADD PUSH2 0x366A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x373E JUMPI PUSH2 0x373D PUSH2 0x3202 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x374C DUP10 DUP3 DUP11 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x375D DUP10 DUP3 DUP11 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0x376E DUP10 DUP3 DUP11 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0x377F DUP10 DUP3 DUP11 ADD PUSH2 0x363E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0x3790 DUP10 DUP3 DUP11 ADD PUSH2 0x34AA JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH2 0x37A1 DUP10 DUP3 DUP11 ADD PUSH2 0x34AA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x37CB JUMPI PUSH2 0x37CA PUSH2 0x3202 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x37D9 DUP10 DUP3 DUP11 ADD PUSH2 0x330B JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x37EA DUP10 DUP3 DUP11 ADD PUSH2 0x330B JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0x37FB DUP10 DUP3 DUP11 ADD PUSH2 0x330B JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0x380C DUP10 DUP3 DUP11 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0x381D DUP10 DUP3 DUP11 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH2 0x382E DUP10 DUP3 DUP11 ADD PUSH2 0x3341 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x3850 PUSH1 0x0 DUP4 ADD DUP10 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x385D PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x386A PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x3877 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x3884 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x3891 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x3298 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x38B1 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x38BE PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x35B0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x38FF DUP3 PUSH2 0x3320 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x3931 JUMPI PUSH2 0x3930 PUSH2 0x38C5 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D75737420686176652061646D696E20726F6C6520746F20706572666F726D20 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7468697320616374696F6E2E0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A07 PUSH1 0x2C DUP4 PUSH2 0x399A JUMP JUMPDEST SWAP2 POP PUSH2 0x3A12 DUP3 PUSH2 0x39AB JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A36 DUP2 PUSH2 0x39FA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A48 DUP3 PUSH2 0x3320 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A53 DUP4 PUSH2 0x3320 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3A8C JUMPI PUSH2 0x3A8B PUSH2 0x38C5 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AF3 PUSH1 0x2F DUP4 PUSH2 0x399A JUMP JUMPDEST SWAP2 POP PUSH2 0x3AFE DUP3 PUSH2 0x3A97 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3B22 DUP2 PUSH2 0x3AE6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3B38 DUP2 PUSH2 0x332A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3B54 JUMPI PUSH2 0x3B53 PUSH2 0x3202 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3B62 DUP5 DUP3 DUP6 ADD PUSH2 0x3B29 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B76 DUP3 PUSH2 0x3320 JUMP JUMPDEST SWAP2 POP PUSH2 0x3B81 DUP4 PUSH2 0x3320 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x3B99 JUMPI PUSH2 0x3B98 PUSH2 0x38C5 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BAA DUP3 PUSH2 0x3320 JUMP JUMPDEST SWAP2 POP PUSH2 0x3BB5 DUP4 PUSH2 0x3320 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x3BCD JUMPI PUSH2 0x3BCC PUSH2 0x38C5 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C2F PUSH1 0x2B DUP4 PUSH2 0x399A JUMP JUMPDEST SWAP2 POP PUSH2 0x3C3A DUP3 PUSH2 0x3BD3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3C5E DUP2 PUSH2 0x3C22 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CC1 PUSH1 0x2E DUP4 PUSH2 0x399A JUMP JUMPDEST SWAP2 POP PUSH2 0x3CCC DUP3 PUSH2 0x3C65 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3CF0 DUP2 PUSH2 0x3CB4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D26 PUSH2 0x3D21 PUSH2 0x3D1C DUP5 PUSH2 0x3CF7 JUMP JUMPDEST PUSH2 0x3D01 JUMP JUMPDEST PUSH2 0x361A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3D36 DUP2 PUSH2 0x3D0B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3D51 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3D2D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3D60 DUP2 PUSH2 0x32E2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3D7B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3D57 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DB7 PUSH1 0x1F DUP4 PUSH2 0x399A JUMP JUMPDEST SWAP2 POP PUSH2 0x3DC2 DUP3 PUSH2 0x3D81 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3DE6 DUP2 PUSH2 0x3DAA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x3E02 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x3E0F PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x3E1C PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x3E29 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x35B0 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3E41 DUP2 PUSH2 0x3653 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3E5D JUMPI PUSH2 0x3E5C PUSH2 0x3202 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3E6B DUP5 DUP3 DUP6 ADD PUSH2 0x3E32 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3E89 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3D57 JUMP JUMPDEST PUSH2 0x3E96 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x35B0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3EDE PUSH1 0x17 DUP4 PUSH2 0x3E9D JUMP JUMPDEST SWAP2 POP PUSH2 0x3EE9 DUP3 PUSH2 0x3EA8 JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3F1D JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3F02 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F34 DUP3 PUSH2 0x3EF4 JUMP JUMPDEST PUSH2 0x3F3E DUP2 DUP6 PUSH2 0x3E9D JUMP JUMPDEST SWAP4 POP PUSH2 0x3F4E DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3EFF JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F90 PUSH1 0x11 DUP4 PUSH2 0x3E9D JUMP JUMPDEST SWAP2 POP PUSH2 0x3F9B DUP3 PUSH2 0x3F5A JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FB1 DUP3 PUSH2 0x3ED1 JUMP JUMPDEST SWAP2 POP PUSH2 0x3FBD DUP3 DUP6 PUSH2 0x3F29 JUMP JUMPDEST SWAP2 POP PUSH2 0x3FC8 DUP3 PUSH2 0x3F83 JUMP JUMPDEST SWAP2 POP PUSH2 0x3FD4 DUP3 DUP5 PUSH2 0x3F29 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FFC DUP3 PUSH2 0x3EF4 JUMP JUMPDEST PUSH2 0x4006 DUP2 DUP6 PUSH2 0x399A JUMP JUMPDEST SWAP4 POP PUSH2 0x4016 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3EFF JUMP JUMPDEST PUSH2 0x401F DUP2 PUSH2 0x3FE0 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4044 DUP2 DUP5 PUSH2 0x3FF1 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4082 PUSH1 0x14 DUP4 PUSH2 0x399A JUMP JUMPDEST SWAP2 POP PUSH2 0x408D DUP3 PUSH2 0x404C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x40B1 DUP2 PUSH2 0x4075 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x40CD PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x40DA PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x40E7 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x35B0 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4129 DUP3 PUSH2 0x3320 JUMP JUMPDEST SWAP2 POP PUSH2 0x4134 DUP4 PUSH2 0x3320 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x4144 JUMPI PUSH2 0x4143 PUSH2 0x40EF JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x4158 DUP2 PUSH2 0x361A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH2 0x4173 PUSH1 0x0 DUP4 ADD DUP11 PUSH2 0x3D57 JUMP JUMPDEST PUSH2 0x4180 PUSH1 0x20 DUP4 ADD DUP10 PUSH2 0x3D57 JUMP JUMPDEST PUSH2 0x418D PUSH1 0x40 DUP4 ADD DUP9 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x419A PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x35B0 JUMP JUMPDEST PUSH2 0x41A7 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x414F JUMP JUMPDEST PUSH2 0x41B4 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x34EC JUMP JUMPDEST PUSH2 0x41C1 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x34EC JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A207065726D697420646964206E6F7420737563636565 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4229 PUSH1 0x21 DUP4 PUSH2 0x399A JUMP JUMPDEST SWAP2 POP PUSH2 0x4234 DUP3 PUSH2 0x41CD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4258 DUP2 PUSH2 0x421C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4295 PUSH1 0x10 DUP4 PUSH2 0x399A JUMP JUMPDEST SWAP2 POP PUSH2 0x42A0 DUP3 PUSH2 0x425F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x42C4 DUP2 PUSH2 0x4288 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42D6 DUP3 PUSH2 0x3320 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x42E9 JUMPI PUSH2 0x42E8 PUSH2 0x38C5 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x432A PUSH1 0x20 DUP4 PUSH2 0x399A JUMP JUMPDEST SWAP2 POP PUSH2 0x4335 DUP3 PUSH2 0x42F4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4359 DUP2 PUSH2 0x431D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB6 0xDD EXP SWAP15 0xAD SWAP14 0xD2 0xAF CALLDATASIZE 0xE3 0x5C LOG1 SWAP7 PUSH26 0x5DBCE265AE5257EC9529513441BAFA0BC2B964736F6C63430008 LT STOP CALLER ","sourceMap":"620:21935:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2903:213:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;16604:935:18;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4708:129:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5470:170:18;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5133:145:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6242:214;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4918:65:18;;;:::i;:::-;;22005:289;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;19548:952;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5124:194;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1858:84:4;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8268:397:18;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;22300:253;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;734:549:15;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6347:355:18;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4039:806;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;10403:116;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;20778:255;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4851:61;;;:::i;:::-;;21039:623;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;3203:145:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2324:49;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5777:161:18;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1289:117:15;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;20507:265:18;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;17562:1117;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5558:147:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;21668:331:18;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;9861:536;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2903:213:0;2988:4;3026:43;3011:58;;;:11;:58;;;;:98;;;;3073:36;3097:11;3073:23;:36::i;:::-;3011:98;3004:105;;2903:213;;;:::o;16604:935:18:-;16763:16;16791:27;16836:6;16832:270;16852:16;16848:1;:20;16832:270;;;16885:42;16930:18;:31;16949:11;16930:31;;;;;;;;;;;;;;;:43;16962:10;16930:43;;;;;;;;;;;:46;16974:1;16930:46;;;;;;;;;;;16885:91;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16994:17;:25;;;16990:85;;;17039:21;;;;:::i;:::-;;;16990:85;17088:3;;;;:::i;:::-;;;16871:231;16832:270;;;;17111:25;17153:19;17139:34;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17111:62;;17183:15;17216:6;17212:298;17232:16;17228:1;:20;17212:298;;;17265:43;17311:18;:31;17330:11;17311:31;;;;;;;;;;;;;;;:43;17343:10;17311:43;;;;;;;;;;;:46;17355:1;17311:46;;;;;;;;;;;17265:92;;17375:17;:25;;;;;;;;;;;;17371:112;;;17440:1;17420:8;17429:7;17420:17;;;;;;;;:::i;:::-;;;;;;;:21;;;;;17459:9;;;;:::i;:::-;;;17371:112;17496:3;;;;:::i;:::-;;;17251:259;17212:298;;;;17524:8;17517:15;;;;;16604:935;;;;;:::o;4708:129:0:-;4782:7;4808:6;:12;4815:4;4808:12;;;;;;;;;;;:22;;;4801:29;;4708:129;;;:::o;5470:170:18:-;652:9:15;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;5586:7:18::1;5572:11;:21;;;;:::i;:::-;5552:17;:41;;;;5608:25;;;;;;;;;;5470:170:::0;:::o;5133:145:0:-;5216:18;5229:4;5216:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5246:25:::1;5257:4;5263:7;5246:10;:25::i;:::-;5133:145:::0;;;:::o;6242:214::-;6348:12;:10;:12::i;:::-;6337:23;;:7;:23;;;6329:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;6423:26;6435:4;6441:7;6423:11;:26::i;:::-;6242:214;;:::o;4918:65:18:-;652:9:15;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;4966:10:18::1;:8;:10::i;:::-;4918:65::o:0;22005:289::-;22114:7;22132:54;22189:24;:37;22214:11;22189:37;;;;;;;;;;;;;;;22132:94;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22243:23;:43;;;22236:50;;;22005:289;;;:::o;19548:952::-;19675:7;19694:23;19720:1;19694:27;;19731:25;19759:101;19781:11;19794:10;19806:18;;;;;;;;;;;:41;;;19848:10;19806:53;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;19759:21;:101::i;:::-;19731:129;;19874:9;19870:592;19890:8;:15;19887:1;:18;19870:592;;;19921:49;19973:18;:31;19992:11;19973:31;;;;;;;;;;;;;;;:43;20005:10;19973:43;;;;;;;;;;;:56;20017:8;20026:1;20017:11;;;;;;;;:::i;:::-;;;;;;;;19973:56;;;;;;;;;;;19921:108;;20043:16;20099:23;:33;;;20081:15;:51;20080:266;;20345:1;20080:266;;;20177:23;:33;;;20159:15;:51;20158:166;;20290:23;:33;;;20272:15;:51;;;;:::i;:::-;20158:166;;;20235:23;:33;;;20158:166;20080:266;20043:304;;20425:8;20381:23;:41;;;:52;;;;:::i;:::-;20361:73;;;;;:::i;:::-;;;20448:3;;;;:::i;:::-;;;19907:555;;19870:592;;;;20478:15;20471:22;;;;19548:952;;;;:::o;5124:194::-;652:9:15;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;5256:9:18::1;5240:13;:25;;;;:::i;:::-;5214:23;:51;;;;5280:31;;;;;;;;;;5124:194:::0;:::o;1858:84:4:-;1905:4;1928:7;;;;;;;;;;;1921:14;;1858:84;:::o;8268:397:18:-;8518:4;2505:21:5;:19;:21::i;:::-;8534:12:18::1;8549:85;8571:13;8586:10;8598:13;8613:1;8616;8619;8622:11;8549:21;:85::i;:::-;8534:100;;8651:7;8644:14;;;2547:20:5::0;:18;:20::i;:::-;8268:397:18;;;;;;;;;:::o;22300:253::-;22448:7;22474:18;:31;22493:11;22474:31;;;;;;;;;;;;;;;:43;22506:10;22474:43;;;;;;;;;;;:58;22518:13;22474:58;;;;;;;;;;;:72;;;22467:79;;22300:253;;;;;:::o;734:549:15:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;845:1:15::1;828:19;;:5;:19;;::::0;825:99:::1;;870:43;;;;;;;;;;;;;;825:99;933:17;:15;:17::i;:::-;960:22;:20;:22::i;:::-;992:24;:22;:24::i;:::-;1027:43;1038:24;:22;:24::i;:::-;1064:5;1027:10;:43::i;:::-;1080:44;1091:25;:23;:25::i;:::-;1118:5;1080:10;:44::i;:::-;1135:66;1149:25;:23;:25::i;:::-;1176:24;:22;:24::i;:::-;1135:13;:66::i;:::-;1211:65;1225:24;:22;:24::i;:::-;1251;:22;:24::i;:::-;1211:13;:65::i;:::-;734:549:::0;:::o;6347:355:18:-;6570:4;2505:21:5;:19;:21::i;:::-;6586:12:18::1;6601:70;6621:13;6636:10;6648:13;6663:1;6666;6669;6601:19;:70::i;:::-;6586:85;;6688:7;6681:14;;;2547:20:5::0;:18;:20::i;:::-;6347:355:18;;;;;;;;:::o;4039:806::-;4301:4;3268:19:3;3291:13;;;;;;;;;;;3290:14;3268:36;;3336:14;:34;;;;;3369:1;3354:12;;;;;;;;;;:16;;;3336:34;3335:108;;;;3377:44;3415:4;3377:29;:44::i;:::-;3376:45;:66;;;;;3441:1;3425:12;;;;;;;;;;:17;;;3376:66;3335:108;3314:201;;;;;;;;;;;;:::i;:::-;;;;;;;;;3540:1;3525:12;;:16;;;;;;;;;;;;;;;;;;3555:14;3551:65;;;3601:4;3585:13;;:20;;;;;;;;;;;;;;;;;;3551:65;4336:1:18::1;4317:16;:20;;;;4382:9;4365:14;:26;;;;:::i;:::-;4347:15;:44;;;;4440:9;4421:16;:28;;;;:::i;:::-;4401:17;:48;;;;4511:9;4486:22;:34;;;;:::i;:::-;4460:23;:60;;;;4560:15;4530:9;;:46;;;;;;;;;;;;;;;;;;4628:15;4586;;:58;;;;;;;;;;;;;;;;;;4679:13;4654:7;;:39;;;;;;;;;;;;;;;;;;4743:19;4703:18;;:60;;;;;;;;;;;;;;;;;;4773:44;4804:12;:10;:12::i;:::-;4773:30;:44::i;:::-;4834:4;4827:11;;3640:14:3::0;3636:99;;;3686:5;3670:13;;:21;;;;;;;;;;;;;;;;;;3710:14;3722:1;3710:14;;;;;;:::i;:::-;;;;;;;;3636:99;3258:483;4039:806:18;;;;;;;;:::o;10403:116::-;10505:4;10403:116;;;;:::o;20778:255::-;20937:4;20960:18;:31;20979:11;20960:31;;;;;;;;;;;;;;;:43;20992:10;20960:43;;;;;;;;;;;:58;21004:13;20960:58;;;;;;;;;;;:66;;;;;;;;;;;;20953:73;;20778:255;;;;;:::o;4851:61::-;652:9:15;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;4897:8:18::1;:6;:8::i;:::-;4851:61::o:0;21039:623::-;21196:7;21205;21214;21223;21232;21241:4;21257:42;21302:18;:31;21321:11;21302:31;;;;;;;;;;;;;;;:43;21334:10;21302:43;;;;;;;;;;;:58;21346:13;21302:58;;;;;;;;;;;21257:103;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21391:17;:31;;;21437:17;:35;;;21486:17;:34;;;21534:17;:27;;;21575:17;:27;;;21616:17;:25;;;21370:285;;;;;;;;;;;;;21039:623;;;;;;;;;;:::o;3203:145:0:-;3289:4;3312:6;:12;3319:4;3312:12;;;;;;;;;;;:20;;:29;3333:7;3312:29;;;;;;;;;;;;;;;;;;;;;;;;;3305:36;;3203:145;;;;:::o;2324:49::-;2369:4;2324:49;;;:::o;5777:161:18:-;652:9:15;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;5887:6:18::1;5874:10;:19;;;;:::i;:::-;5856:15;:37;;;;5908:23;;;;;;;;;;5777:161:::0;:::o;1289:117:15:-;1329:4;1352:47;1360:24;:22;:24::i;:::-;1386:12;:10;:12::i;:::-;1352:7;:47::i;:::-;1345:54;;1289:117;:::o;20507:265:18:-;20671:7;20697:18;:31;20716:11;20697:31;;;;;;;;;;;;;;;:43;20729:10;20697:43;;;;;;;;;;;:58;20741:13;20697:58;;;;;;;;;;;:68;;;20690:75;;20507:265;;;;;:::o;17562:1117::-;17651:7;17670:29;17702:1;17670:33;;17717:9;17713:922;17734:16;;17730:1;:20;17713:922;;;17767:23;17808:25;17836:83;17858:11;17871:1;17874:18;;;;;;;;;;;:41;;;17916:1;17874:44;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;17836:21;:83::i;:::-;17808:111;;17937:9;17933:621;17954:8;:15;17950:1;:19;17933:621;;;17990:49;18042:18;:31;18061:11;18042:31;;;;;;;;;;;;;;;:34;18074:1;18042:34;;;;;;;;;;;:47;18077:8;18086:1;18077:11;;;;;;;;:::i;:::-;;;;;;;;18042:47;;;;;;;;;;;17990:99;;18107:16;18167:23;:33;;;18149:15;:51;18148:278;;18425:1;18148:278;;;18249:23;:33;;;18231:15;:51;18230:170;;18366:23;:33;;;18348:15;:51;;;;:::i;:::-;18230:170;;;18311:23;:33;;;18230:170;18148:278;18107:320;;18509:8;18465:23;:41;;;:52;;;;:::i;:::-;18445:73;;;;;:::i;:::-;;;18536:3;;;;:::i;:::-;;;17972:582;;17933:621;;;;18592:15;18567:40;;;;;:::i;:::-;;;18621:3;;;;:::i;:::-;;;17753:882;;17713:922;;;;18651:21;18644:28;;;17562:1117;;;:::o;5558:147:0:-;5642:18;5655:4;5642:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5672:26:::1;5684:4;5690:7;5672:11;:26::i;:::-;5558:147:::0;;;:::o;21668:331:18:-;21772:7;21781;21800:54;21857:24;:38;21882:12;21857:38;;;;;;;;;;;;;;;21800:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21913:23;:43;;;21958:23;:33;;;21905:87;;;;;21668:331;;;:::o;9861:536::-;9994:4;10112:15;10027:69;10057:11;10070:10;10082:13;10027:29;:69::i;:::-;:100;10010:192;;;10159:32;;;;;;;;;;;;;;10010:192;10211:12;10226:59;10246:11;10259:10;10271:13;10226:19;:59::i;:::-;10211:74;;10300:7;10295:75;;10330:29;;;;;;;;;;;;;;10295:75;10386:4;10379:11;;;9861:536;;;;;:::o;1060:166:12:-;1145:4;1183:36;1168:51;;;:11;:51;;;;1161:58;;1060:166;;;:::o;3642:103:0:-;3708:30;3719:4;3725:12;:10;:12::i;:::-;3708:10;:30::i;:::-;3642:103;:::o;7791:233::-;7874:22;7882:4;7888:7;7874;:22::i;:::-;7869:149;;7944:4;7912:6;:12;7919:4;7912:12;;;;;;;;;;;:20;;:29;7933:7;7912:29;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;;;;;;7994:12;:10;:12::i;:::-;7967:40;;7985:7;7967:40;;7979:4;7967:40;;;;;;;;;;7869:149;7791:233;;:::o;850:96:10:-;903:7;929:10;922:17;;850:96;:::o;8195:234:0:-;8278:22;8286:4;8292:7;8278;:22::i;:::-;8274:149;;;8348:5;8316:6;:12;8323:4;8316:12;;;;;;;;;;;:20;;:29;8337:7;8316:29;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;8399:12;:10;:12::i;:::-;8372:40;;8390:7;8372:40;;8384:4;8372:40;;;;;;;;;;8274:149;8195:234;;:::o;2676:117:4:-;1729:16;:14;:16::i;:::-;2744:5:::1;2734:7;;:15;;;;;;;;;;;;;;;;;;2764:22;2773:12;:10;:12::i;:::-;2764:22;;;;;;:::i;:::-;;;;;;;;2676:117::o:0;2580:287:5:-;1830:1;2712:7;;:19;2704:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1830:1;2842:7;:18;;;;2580:287::o;8680:1175:18:-;8908:4;8929:18;:32;8948:12;:10;:12::i;:::-;8929:32;;;;;;;;;;;;;;;:44;8962:10;8929:44;;;;;;;;;;;:59;8974:13;8929:59;;;;;;;;;;;:67;;;;;;;;;;;;8924:135;;9019:29;;;;;;;;;;;;;;8924:135;9068:23;9094:60;9114:12;:10;:12::i;:::-;9128:10;9140:13;9094:19;:60::i;:::-;9068:86;;9169:18;9164:86;;9210:29;;;;;;;;;;;;;;9164:86;9264:11;9259:569;;9291:24;9394:13;9318:18;:32;9337:12;:10;:12::i;:::-;9318:32;;;;;;;;;;;;;;;:44;9351:10;9318:44;;;;;;;;;;;:59;9363:13;9318:59;;;;;;;;;;;:73;;;:89;;;;:::i;:::-;9291:116;;9421:16;9476:7;9458:15;;9440;:33;;;;:::i;:::-;:43;;;;:::i;:::-;9421:62;;9498:20;9520:21;9545:62;9563:16;9581:10;9593:13;9545:17;:62::i;:::-;9497:110;;;;9626:15;9621:91;;9668:29;;;;;;;;;;;;;;9621:91;9725:89;9752:12;:10;:12::i;:::-;9774:4;9781:13;9796:8;9806:1;9809;9812;9725:15;;;;;;;;;;;:26;;;;:89;;;;;;;;;;:::i;:::-;9277:551;;;;9259:569;9844:4;9837:11;;;8680:1175;;;;;;;;;:::o;2873:209:5:-;1787:1;3053:7;:22;;;;2873:209::o;1063:97:4:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1126:27:4::1;:25;:27::i;:::-;1063:97::o:0;2025:65:0:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2025:65:0:o;1868:111:5:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1938:34:5::1;:32;:34::i;:::-;1868:111::o:0;222:90:16:-;269:7;124:23;288:17;;222:90;:::o;318:92::-;366:7;191:24;385:18;;318:92;:::o;7376:247:0:-;7459:25;7487:18;7500:4;7487:12;:18::i;:::-;7459:46;;7540:9;7515:6;:12;7522:4;7515:12;;;;;;;;;;;:22;;:34;;;;7606:9;7587:17;7581:4;7564:52;;;;;;;;;;7449:174;7376:247;;:::o;6717:1050:18:-;6917:4;6933:24;7036:13;6960:18;:32;6979:12;:10;:12::i;:::-;6960:32;;;;;;;;;;;;;;;:44;6993:10;6960:44;;;;;;;;;;;:59;7005:13;6960:59;;;;;;;;;;;:73;;;:89;;;;:::i;:::-;6933:116;;7063:18;:32;7082:12;:10;:12::i;:::-;7063:32;;;;;;;;;;;;;;;:44;7096:10;7063:44;;;;;;;;;;;:59;7108:13;7063:59;;;;;;;;;;;:67;;;;;;;;;;;;7059:291;;;7146:23;7172:60;7192:12;:10;:12::i;:::-;7206:10;7218:13;7172:19;:60::i;:::-;7146:86;;7251:18;7246:94;;7296:29;;;;;;;;;;;;;;7246:94;7132:218;7059:291;7362:16;7417:7;7399:15;;7381;:33;;;;:::i;:::-;:43;;;;:::i;:::-;7362:62;;7437:20;7459:21;7484:62;7502:16;7520:10;7532:13;7484:17;:62::i;:::-;7436:110;;;;7561:15;7556:83;;7599:29;;;;;;;;;;;;;;7556:83;7648:89;7675:12;:10;:12::i;:::-;7697:4;7704:13;7719:8;7729:1;7732;7735;7648:15;;;;;;;;;;;:26;;;;:89;;;;;;;;;;:::i;:::-;7756:4;7749:11;;;;;;6717:1050;;;;;;;;:::o;1186:320:9:-;1246:4;1498:1;1476:7;:19;;;:23;1469:30;;1186:320;;;:::o;2429:115:4:-;1482:19;:17;:19::i;:::-;2498:4:::1;2488:7;;:14;;;;;;;;;;;;;;;;;;2517:20;2524:12;:10;:12::i;:::-;2517:20;;;;;;:::i;:::-;;;;;;;;2429:115::o:0;13431:1500:18:-;13572:4;13588:43;13634:18;:31;13653:11;13634:31;;;;;;;;;;;;;;;:43;13666:10;13634:43;;;;;;;;;;;:58;13678:13;13634:58;;;;;;;;;;;13588:104;;13707:17;:25;;;;;;;;;;;;13702:93;;13755:29;;;;;;;;;;;;;;13702:93;13832:5;13804:17;:25;;;:33;;;;;;;;;;;;;;;;;;13847:16;13899:17;:27;;;13881:15;:45;13880:230;;14109:1;13880:230;;;13967:17;:27;;;13949:15;:45;13948:144;;14064:17;:27;;;14046:15;:45;;;;:::i;:::-;13948:144;;;14015:17;:27;;;13948:144;13880:230;13847:264;;14121:24;14160:17;:35;;;14149:8;:46;;;;:::i;:::-;14121:75;;14230:1;14210:16;:21;14206:63;;14254:4;14247:11;;;;;;;14206:63;14340:17;:35;;;14279:24;:37;14304:11;14279:37;;;;;;;;;;;;;;;:57;;;:96;;;;;;;:::i;:::-;;;;;;;;14446:17;:31;;;14385:24;:37;14410:11;14385:37;;;;;;;;;;;;;;;:57;;;:92;;;;;;;:::i;:::-;;;;;;;;14487:16;14506:17;:35;;;14487:54;;14551:21;14575:17;:31;;;14551:55;;14616:12;14631:18;;;;;;;;;;;:40;;;14672:10;14684:13;14699;14714:8;14631:92;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;14616:107;;14733:16;14752:7;;;;;;;;;;;:16;;;14769:11;14782:16;14752:47;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;14733:66;;14815:7;14814:8;14813:28;;;;14829:11;14828:12;14813:28;14809:95;;;14864:29;;;;;;;;;;;;;;14809:95;14920:4;14913:11;;;;;;;;;13431:1500;;;;;;:::o;4026:501:0:-;4114:22;4122:4;4128:7;4114;:22::i;:::-;4109:412;;4297:39;4328:7;4297:30;:39::i;:::-;4407:49;4446:4;4438:13;;4453:2;4407:30;:49::i;:::-;4204:274;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4152:358;;;;;;;;;;;:::i;:::-;;;;;;;;4109:412;4026:501;;:::o;2188:106:4:-;2254:8;:6;:8::i;:::-;2246:41;;;;;;;;;;;;:::i;:::-;;;;;;;;;2188:106::o;10627:2703:18:-;10766:4;10772:7;10811:4;10795:13;:20;10791:96;;;10838:38;;;;;;;;;;;;;;10791:96;10915:18;;;;;;;;;;;:36;;;10952:10;10964:13;10979;10915:78;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10896:177;;11030:32;;;;;;;;;;;;;;10896:177;11086:18;:32;11105:12;:10;:12::i;:::-;11086:32;;;;;;;;;;;;;;;:44;11119:10;11086:44;;;;;;;;;;;:59;11131:13;11086:59;;;;;;;;;;;:67;;;;;;;;;;;;11082:137;;;11176:32;;;;;;;;;;;;;;11082:137;11237:43;11283:18;:32;11302:12;:10;:12::i;:::-;11283:32;;;;;;;;;;;;;;;:44;11316:10;11283:44;;;;;;;;;;;:59;11328:13;11283:59;;;;;;;;;;;11237:105;;11352:55;11410:24;:38;11435:12;:10;:12::i;:::-;11410:38;;;;;;;;;;;;;;;11352:96;;11467:28;11532:23;:43;;;11498:7;;;;;;;;;;;:17;;;11516:12;:10;:12::i;:::-;11498:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:77;;;;:::i;:::-;11467:108;;11585:28;11713:4;11696:13;11630:18;;;;;;;;;;;:36;;;11667:10;11679:13;11630:63;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:79;;;;:::i;:::-;11616:101;;;;:::i;:::-;11585:132;;11727:34;11810:20;11764:23;:43;;;:66;;;;:::i;:::-;11727:103;;12007:20;11980:23;;11951:26;:52;;;;:::i;:::-;11950:77;11946:157;;;12050:42;;;;;;;;;;;;;;11946:157;12113:17;12157:20;12134;:43;;;;:::i;:::-;12113:65;;12235:20;12188:23;:43;;;:67;;;;;;;:::i;:::-;;;;;;;;12299:13;12265:17;:31;;:47;;;;12360:20;12322:17;:35;;:58;;;;12427:15;12390:17;:34;;:52;;;;12500:17;;12482:15;:35;;;;:::i;:::-;12452:17;:27;;:65;;;;12583:15;;12571:9;:27;:130;;12686:15;;12656:17;:27;;;:45;;;;:::i;:::-;12571:130;;;12644:9;12614:17;:27;;;:39;;;;:::i;:::-;12571:130;12527:17;:27;;:184;;;;12767:20;12755:9;:32;;;;:::i;:::-;12721:17;:31;;:66;;;;12825:4;12797:17;:25;;;:32;;;;;;;;;;;;;;;;;;12895:17;:31;;;12848:23;:43;;;:78;;;;;;;:::i;:::-;;;;;;;;13016:23;:33;;;12986:17;:27;;;:63;:142;;13101:17;:27;;;12986:142;;;13065:23;:33;;;12986:142;12936:23;:33;;:202;;;;13148:12;13163:18;;;;;;;;;;;:37;;;13201:10;13213:13;13228;13243:20;13163:101;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13148:116;;13282:7;13291:17;:31;;;13274:49;;;;;;;;;;;10627:2703;;;;;;:::o;3002:483:8:-;3238:19;3260:5;:12;;;3273:5;3260:19;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3238:41;;3289:5;:12;;;3302:5;3309:7;3318:5;3325:8;3335:1;3338;3341;3289:54;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3353:18;3374:5;:12;;;3387:5;3374:19;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3353:40;;3439:1;3425:11;:15;;;;:::i;:::-;3411:10;:29;3403:75;;;;;;;;;;;;:::i;:::-;;;;;;;;;3228:257;;3002:483;;;;;;;;:::o;1166:95:4:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1249:5:4::1;1239:7;;:15;;;;;;;;;;;;;;;;;;1166:95::o:0;1985:109:5:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1787:1:5::1;2065:7;:22;;;;1985:109::o:0;2010:106:4:-;2080:8;:6;:8::i;:::-;2079:9;2071:38;;;;;;;;;;;;:::i;:::-;;;;;;;;;2010:106::o;2146:149:11:-;2204:13;2236:52;2264:4;2248:22;;333:2;2236:52;;:11;:52::i;:::-;2229:59;;2146:149;;;:::o;1557:437::-;1632:13;1657:19;1702:1;1693:6;1689:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1679:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1657:47;;1714:15;:6;1721:1;1714:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1739;:6;1746:1;1739:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1769:9;1794:1;1785:6;1781:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1769:26;;1764:128;1801:1;1797;:5;1764:128;;;1835:8;1852:3;1844:5;:11;1835:21;;;;;;;:::i;:::-;;;;;1823:6;1830:1;1823:9;;;;;;;;:::i;:::-;;;;;:33;;;;;;;;;;;1880:1;1870:11;;;;;1804:3;;;;:::i;:::-;;;1764:128;;;;1918:1;1909:5;:10;1901:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;1980:6;1966:21;;;1557:437;;;;:::o;88:117:26:-;197:1;194;187:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:126::-;1555:7;1595:42;1588:5;1584:54;1573:65;;1518:126;;;:::o;1650:96::-;1687:7;1716:24;1734:5;1716:24;:::i;:::-;1705:35;;1650:96;;;:::o;1752:122::-;1825:24;1843:5;1825:24;:::i;:::-;1818:5;1815:35;1805:63;;1864:1;1861;1854:12;1805:63;1752:122;:::o;1880:139::-;1926:5;1964:6;1951:20;1942:29;;1980:33;2007:5;1980:33;:::i;:::-;1880:139;;;;:::o;2025:77::-;2062:7;2091:5;2080:16;;2025:77;;;:::o;2108:122::-;2181:24;2199:5;2181:24;:::i;:::-;2174:5;2171:35;2161:63;;2220:1;2217;2210:12;2161:63;2108:122;:::o;2236:139::-;2282:5;2320:6;2307:20;2298:29;;2336:33;2363:5;2336:33;:::i;:::-;2236:139;;;;:::o;2381:619::-;2458:6;2466;2474;2523:2;2511:9;2502:7;2498:23;2494:32;2491:119;;;2529:79;;:::i;:::-;2491:119;2649:1;2674:53;2719:7;2710:6;2699:9;2695:22;2674:53;:::i;:::-;2664:63;;2620:117;2776:2;2802:53;2847:7;2838:6;2827:9;2823:22;2802:53;:::i;:::-;2792:63;;2747:118;2904:2;2930:53;2975:7;2966:6;2955:9;2951:22;2930:53;:::i;:::-;2920:63;;2875:118;2381:619;;;;;:::o;3006:114::-;3073:6;3107:5;3101:12;3091:22;;3006:114;;;:::o;3126:184::-;3225:11;3259:6;3254:3;3247:19;3299:4;3294:3;3290:14;3275:29;;3126:184;;;;:::o;3316:132::-;3383:4;3406:3;3398:11;;3436:4;3431:3;3427:14;3419:22;;3316:132;;;:::o;3454:108::-;3531:24;3549:5;3531:24;:::i;:::-;3526:3;3519:37;3454:108;;:::o;3568:179::-;3637:10;3658:46;3700:3;3692:6;3658:46;:::i;:::-;3736:4;3731:3;3727:14;3713:28;;3568:179;;;;:::o;3753:113::-;3823:4;3855;3850:3;3846:14;3838:22;;3753:113;;;:::o;3902:732::-;4021:3;4050:54;4098:5;4050:54;:::i;:::-;4120:86;4199:6;4194:3;4120:86;:::i;:::-;4113:93;;4230:56;4280:5;4230:56;:::i;:::-;4309:7;4340:1;4325:284;4350:6;4347:1;4344:13;4325:284;;;4426:6;4420:13;4453:63;4512:3;4497:13;4453:63;:::i;:::-;4446:70;;4539:60;4592:6;4539:60;:::i;:::-;4529:70;;4385:224;4372:1;4369;4365:9;4360:14;;4325:284;;;4329:14;4625:3;4618:10;;4026:608;;;3902:732;;;;:::o;4640:373::-;4783:4;4821:2;4810:9;4806:18;4798:26;;4870:9;4864:4;4860:20;4856:1;4845:9;4841:17;4834:47;4898:108;5001:4;4992:6;4898:108;:::i;:::-;4890:116;;4640:373;;;;:::o;5019:77::-;5056:7;5085:5;5074:16;;5019:77;;;:::o;5102:122::-;5175:24;5193:5;5175:24;:::i;:::-;5168:5;5165:35;5155:63;;5214:1;5211;5204:12;5155:63;5102:122;:::o;5230:139::-;5276:5;5314:6;5301:20;5292:29;;5330:33;5357:5;5330:33;:::i;:::-;5230:139;;;;:::o;5375:329::-;5434:6;5483:2;5471:9;5462:7;5458:23;5454:32;5451:119;;;5489:79;;:::i;:::-;5451:119;5609:1;5634:53;5679:7;5670:6;5659:9;5655:22;5634:53;:::i;:::-;5624:63;;5580:117;5375:329;;;;:::o;5710:118::-;5797:24;5815:5;5797:24;:::i;:::-;5792:3;5785:37;5710:118;;:::o;5834:222::-;5927:4;5965:2;5954:9;5950:18;5942:26;;5978:71;6046:1;6035:9;6031:17;6022:6;5978:71;:::i;:::-;5834:222;;;;:::o;6062:329::-;6121:6;6170:2;6158:9;6149:7;6145:23;6141:32;6138:119;;;6176:79;;:::i;:::-;6138:119;6296:1;6321:53;6366:7;6357:6;6346:9;6342:22;6321:53;:::i;:::-;6311:63;;6267:117;6062:329;;;;:::o;6397:474::-;6465:6;6473;6522:2;6510:9;6501:7;6497:23;6493:32;6490:119;;;6528:79;;:::i;:::-;6490:119;6648:1;6673:53;6718:7;6709:6;6698:9;6694:22;6673:53;:::i;:::-;6663:63;;6619:117;6775:2;6801:53;6846:7;6837:6;6826:9;6822:22;6801:53;:::i;:::-;6791:63;;6746:118;6397:474;;;;;:::o;6877:329::-;6936:6;6985:2;6973:9;6964:7;6960:23;6956:32;6953:119;;;6991:79;;:::i;:::-;6953:119;7111:1;7136:53;7181:7;7172:6;7161:9;7157:22;7136:53;:::i;:::-;7126:63;;7082:117;6877:329;;;;:::o;7212:118::-;7299:24;7317:5;7299:24;:::i;:::-;7294:3;7287:37;7212:118;;:::o;7336:222::-;7429:4;7467:2;7456:9;7452:18;7444:26;;7480:71;7548:1;7537:9;7533:17;7524:6;7480:71;:::i;:::-;7336:222;;;;:::o;7564:474::-;7632:6;7640;7689:2;7677:9;7668:7;7664:23;7660:32;7657:119;;;7695:79;;:::i;:::-;7657:119;7815:1;7840:53;7885:7;7876:6;7865:9;7861:22;7840:53;:::i;:::-;7830:63;;7786:117;7942:2;7968:53;8013:7;8004:6;7993:9;7989:22;7968:53;:::i;:::-;7958:63;;7913:118;7564:474;;;;;:::o;8044:86::-;8079:7;8119:4;8112:5;8108:16;8097:27;;8044:86;;;:::o;8136:118::-;8207:22;8223:5;8207:22;:::i;:::-;8200:5;8197:33;8187:61;;8244:1;8241;8234:12;8187:61;8136:118;:::o;8260:135::-;8304:5;8342:6;8329:20;8320:29;;8358:31;8383:5;8358:31;:::i;:::-;8260:135;;;;:::o;8401:116::-;8471:21;8486:5;8471:21;:::i;:::-;8464:5;8461:32;8451:60;;8507:1;8504;8497:12;8451:60;8401:116;:::o;8523:133::-;8566:5;8604:6;8591:20;8582:29;;8620:30;8644:5;8620:30;:::i;:::-;8523:133;;;;:::o;8662:1193::-;8770:6;8778;8786;8794;8802;8810;8818;8867:3;8855:9;8846:7;8842:23;8838:33;8835:120;;;8874:79;;:::i;:::-;8835:120;8994:1;9019:53;9064:7;9055:6;9044:9;9040:22;9019:53;:::i;:::-;9009:63;;8965:117;9121:2;9147:53;9192:7;9183:6;9172:9;9168:22;9147:53;:::i;:::-;9137:63;;9092:118;9249:2;9275:53;9320:7;9311:6;9300:9;9296:22;9275:53;:::i;:::-;9265:63;;9220:118;9377:2;9403:51;9446:7;9437:6;9426:9;9422:22;9403:51;:::i;:::-;9393:61;;9348:116;9503:3;9530:53;9575:7;9566:6;9555:9;9551:22;9530:53;:::i;:::-;9520:63;;9474:119;9632:3;9659:53;9704:7;9695:6;9684:9;9680:22;9659:53;:::i;:::-;9649:63;;9603:119;9761:3;9788:50;9830:7;9821:6;9810:9;9806:22;9788:50;:::i;:::-;9778:60;;9732:116;8662:1193;;;;;;;;;;:::o;9861:1053::-;9963:6;9971;9979;9987;9995;10003;10052:3;10040:9;10031:7;10027:23;10023:33;10020:120;;;10059:79;;:::i;:::-;10020:120;10179:1;10204:53;10249:7;10240:6;10229:9;10225:22;10204:53;:::i;:::-;10194:63;;10150:117;10306:2;10332:53;10377:7;10368:6;10357:9;10353:22;10332:53;:::i;:::-;10322:63;;10277:118;10434:2;10460:53;10505:7;10496:6;10485:9;10481:22;10460:53;:::i;:::-;10450:63;;10405:118;10562:2;10588:51;10631:7;10622:6;10611:9;10607:22;10588:51;:::i;:::-;10578:61;;10533:116;10688:3;10715:53;10760:7;10751:6;10740:9;10736:22;10715:53;:::i;:::-;10705:63;;10659:119;10817:3;10844:53;10889:7;10880:6;10869:9;10865:22;10844:53;:::i;:::-;10834:63;;10788:119;9861:1053;;;;;;;;:::o;10920:1057::-;11024:6;11032;11040;11048;11056;11064;11113:3;11101:9;11092:7;11088:23;11084:33;11081:120;;;11120:79;;:::i;:::-;11081:120;11240:1;11265:53;11310:7;11301:6;11290:9;11286:22;11265:53;:::i;:::-;11255:63;;11211:117;11367:2;11393:53;11438:7;11429:6;11418:9;11414:22;11393:53;:::i;:::-;11383:63;;11338:118;11495:2;11521:53;11566:7;11557:6;11546:9;11542:22;11521:53;:::i;:::-;11511:63;;11466:118;11623:2;11649:53;11694:7;11685:6;11674:9;11670:22;11649:53;:::i;:::-;11639:63;;11594:118;11751:3;11778:53;11823:7;11814:6;11803:9;11799:22;11778:53;:::i;:::-;11768:63;;11722:119;11880:3;11907:53;11952:7;11943:6;11932:9;11928:22;11907:53;:::i;:::-;11897:63;;11851:119;10920:1057;;;;;;;;:::o;11983:763::-;12210:4;12248:3;12237:9;12233:19;12225:27;;12262:71;12330:1;12319:9;12315:17;12306:6;12262:71;:::i;:::-;12343:72;12411:2;12400:9;12396:18;12387:6;12343:72;:::i;:::-;12425;12493:2;12482:9;12478:18;12469:6;12425:72;:::i;:::-;12507;12575:2;12564:9;12560:18;12551:6;12507:72;:::i;:::-;12589:73;12657:3;12646:9;12642:19;12633:6;12589:73;:::i;:::-;12672:67;12734:3;12723:9;12719:19;12710:6;12672:67;:::i;:::-;11983:763;;;;;;;;;:::o;12752:332::-;12873:4;12911:2;12900:9;12896:18;12888:26;;12924:71;12992:1;12981:9;12977:17;12968:6;12924:71;:::i;:::-;13005:72;13073:2;13062:9;13058:18;13049:6;13005:72;:::i;:::-;12752:332;;;;;:::o;13090:180::-;13138:77;13135:1;13128:88;13235:4;13232:1;13225:15;13259:4;13256:1;13249:15;13276:233;13315:3;13338:24;13356:5;13338:24;:::i;:::-;13329:33;;13384:66;13377:5;13374:77;13371:103;;13454:18;;:::i;:::-;13371:103;13501:1;13494:5;13490:13;13483:20;;13276:233;;;:::o;13515:180::-;13563:77;13560:1;13553:88;13660:4;13657:1;13650:15;13684:4;13681:1;13674:15;13701:180;13749:77;13746:1;13739:88;13846:4;13843:1;13836:15;13870:4;13867:1;13860:15;13887:169;13971:11;14005:6;14000:3;13993:19;14045:4;14040:3;14036:14;14021:29;;13887:169;;;;:::o;14062:231::-;14202:34;14198:1;14190:6;14186:14;14179:58;14271:14;14266:2;14258:6;14254:15;14247:39;14062:231;:::o;14299:366::-;14441:3;14462:67;14526:2;14521:3;14462:67;:::i;:::-;14455:74;;14538:93;14627:3;14538:93;:::i;:::-;14656:2;14651:3;14647:12;14640:19;;14299:366;;;:::o;14671:419::-;14837:4;14875:2;14864:9;14860:18;14852:26;;14924:9;14918:4;14914:20;14910:1;14899:9;14895:17;14888:47;14952:131;15078:4;14952:131;:::i;:::-;14944:139;;14671:419;;;:::o;15096:348::-;15136:7;15159:20;15177:1;15159:20;:::i;:::-;15154:25;;15193:20;15211:1;15193:20;:::i;:::-;15188:25;;15381:1;15313:66;15309:74;15306:1;15303:81;15298:1;15291:9;15284:17;15280:105;15277:131;;;15388:18;;:::i;:::-;15277:131;15436:1;15433;15429:9;15418:20;;15096:348;;;;:::o;15450:234::-;15590:34;15586:1;15578:6;15574:14;15567:58;15659:17;15654:2;15646:6;15642:15;15635:42;15450:234;:::o;15690:366::-;15832:3;15853:67;15917:2;15912:3;15853:67;:::i;:::-;15846:74;;15929:93;16018:3;15929:93;:::i;:::-;16047:2;16042:3;16038:12;16031:19;;15690:366;;;:::o;16062:419::-;16228:4;16266:2;16255:9;16251:18;16243:26;;16315:9;16309:4;16305:20;16301:1;16290:9;16286:17;16279:47;16343:131;16469:4;16343:131;:::i;:::-;16335:139;;16062:419;;;:::o;16487:143::-;16544:5;16575:6;16569:13;16560:22;;16591:33;16618:5;16591:33;:::i;:::-;16487:143;;;;:::o;16636:351::-;16706:6;16755:2;16743:9;16734:7;16730:23;16726:32;16723:119;;;16761:79;;:::i;:::-;16723:119;16881:1;16906:64;16962:7;16953:6;16942:9;16938:22;16906:64;:::i;:::-;16896:74;;16852:128;16636:351;;;;:::o;16993:194::-;17033:4;17053:20;17071:1;17053:20;:::i;:::-;17048:25;;17087:20;17105:1;17087:20;:::i;:::-;17082:25;;17131:1;17128;17124:9;17116:17;;17155:1;17149:4;17146:11;17143:37;;;17160:18;;:::i;:::-;17143:37;16993:194;;;;:::o;17193:191::-;17233:3;17252:20;17270:1;17252:20;:::i;:::-;17247:25;;17286:20;17304:1;17286:20;:::i;:::-;17281:25;;17329:1;17326;17322:9;17315:16;;17350:3;17347:1;17344:10;17341:36;;;17357:18;;:::i;:::-;17341:36;17193:191;;;;:::o;17390:230::-;17530:34;17526:1;17518:6;17514:14;17507:58;17599:13;17594:2;17586:6;17582:15;17575:38;17390:230;:::o;17626:366::-;17768:3;17789:67;17853:2;17848:3;17789:67;:::i;:::-;17782:74;;17865:93;17954:3;17865:93;:::i;:::-;17983:2;17978:3;17974:12;17967:19;;17626:366;;;:::o;17998:419::-;18164:4;18202:2;18191:9;18187:18;18179:26;;18251:9;18245:4;18241:20;18237:1;18226:9;18222:17;18215:47;18279:131;18405:4;18279:131;:::i;:::-;18271:139;;17998:419;;;:::o;18423:233::-;18563:34;18559:1;18551:6;18547:14;18540:58;18632:16;18627:2;18619:6;18615:15;18608:41;18423:233;:::o;18662:366::-;18804:3;18825:67;18889:2;18884:3;18825:67;:::i;:::-;18818:74;;18901:93;18990:3;18901:93;:::i;:::-;19019:2;19014:3;19010:12;19003:19;;18662:366;;;:::o;19034:419::-;19200:4;19238:2;19227:9;19223:18;19215:26;;19287:9;19281:4;19277:20;19273:1;19262:9;19258:17;19251:47;19315:131;19441:4;19315:131;:::i;:::-;19307:139;;19034:419;;;:::o;19459:85::-;19504:7;19533:5;19522:16;;19459:85;;;:::o;19550:60::-;19578:3;19599:5;19592:12;;19550:60;;;:::o;19616:154::-;19672:9;19705:59;19721:42;19730:32;19756:5;19730:32;:::i;:::-;19721:42;:::i;:::-;19705:59;:::i;:::-;19692:72;;19616:154;;;:::o;19776:143::-;19869:43;19906:5;19869:43;:::i;:::-;19864:3;19857:56;19776:143;;:::o;19925:234::-;20024:4;20062:2;20051:9;20047:18;20039:26;;20075:77;20149:1;20138:9;20134:17;20125:6;20075:77;:::i;:::-;19925:234;;;;:::o;20165:118::-;20252:24;20270:5;20252:24;:::i;:::-;20247:3;20240:37;20165:118;;:::o;20289:222::-;20382:4;20420:2;20409:9;20405:18;20397:26;;20433:71;20501:1;20490:9;20486:17;20477:6;20433:71;:::i;:::-;20289:222;;;;:::o;20517:181::-;20657:33;20653:1;20645:6;20641:14;20634:57;20517:181;:::o;20704:366::-;20846:3;20867:67;20931:2;20926:3;20867:67;:::i;:::-;20860:74;;20943:93;21032:3;20943:93;:::i;:::-;21061:2;21056:3;21052:12;21045:19;;20704:366;;;:::o;21076:419::-;21242:4;21280:2;21269:9;21265:18;21257:26;;21329:9;21323:4;21319:20;21315:1;21304:9;21300:17;21293:47;21357:131;21483:4;21357:131;:::i;:::-;21349:139;;21076:419;;;:::o;21501:553::-;21678:4;21716:3;21705:9;21701:19;21693:27;;21730:71;21798:1;21787:9;21783:17;21774:6;21730:71;:::i;:::-;21811:72;21879:2;21868:9;21864:18;21855:6;21811:72;:::i;:::-;21893;21961:2;21950:9;21946:18;21937:6;21893:72;:::i;:::-;21975;22043:2;22032:9;22028:18;22019:6;21975:72;:::i;:::-;21501:553;;;;;;;:::o;22060:137::-;22114:5;22145:6;22139:13;22130:22;;22161:30;22185:5;22161:30;:::i;:::-;22060:137;;;;:::o;22203:345::-;22270:6;22319:2;22307:9;22298:7;22294:23;22290:32;22287:119;;;22325:79;;:::i;:::-;22287:119;22445:1;22470:61;22523:7;22514:6;22503:9;22499:22;22470:61;:::i;:::-;22460:71;;22416:125;22203:345;;;;:::o;22554:332::-;22675:4;22713:2;22702:9;22698:18;22690:26;;22726:71;22794:1;22783:9;22779:17;22770:6;22726:71;:::i;:::-;22807:72;22875:2;22864:9;22860:18;22851:6;22807:72;:::i;:::-;22554:332;;;;;:::o;22892:148::-;22994:11;23031:3;23016:18;;22892:148;;;;:::o;23046:173::-;23186:25;23182:1;23174:6;23170:14;23163:49;23046:173;:::o;23225:402::-;23385:3;23406:85;23488:2;23483:3;23406:85;:::i;:::-;23399:92;;23500:93;23589:3;23500:93;:::i;:::-;23618:2;23613:3;23609:12;23602:19;;23225:402;;;:::o;23633:99::-;23685:6;23719:5;23713:12;23703:22;;23633:99;;;:::o;23738:246::-;23819:1;23829:113;23843:6;23840:1;23837:13;23829:113;;;23928:1;23923:3;23919:11;23913:18;23909:1;23904:3;23900:11;23893:39;23865:2;23862:1;23858:10;23853:15;;23829:113;;;23976:1;23967:6;23962:3;23958:16;23951:27;23800:184;23738:246;;;:::o;23990:390::-;24096:3;24124:39;24157:5;24124:39;:::i;:::-;24179:89;24261:6;24256:3;24179:89;:::i;:::-;24172:96;;24277:65;24335:6;24330:3;24323:4;24316:5;24312:16;24277:65;:::i;:::-;24367:6;24362:3;24358:16;24351:23;;24100:280;23990:390;;;;:::o;24386:167::-;24526:19;24522:1;24514:6;24510:14;24503:43;24386:167;:::o;24559:402::-;24719:3;24740:85;24822:2;24817:3;24740:85;:::i;:::-;24733:92;;24834:93;24923:3;24834:93;:::i;:::-;24952:2;24947:3;24943:12;24936:19;;24559:402;;;:::o;24967:967::-;25349:3;25371:148;25515:3;25371:148;:::i;:::-;25364:155;;25536:95;25627:3;25618:6;25536:95;:::i;:::-;25529:102;;25648:148;25792:3;25648:148;:::i;:::-;25641:155;;25813:95;25904:3;25895:6;25813:95;:::i;:::-;25806:102;;25925:3;25918:10;;24967:967;;;;;:::o;25940:102::-;25981:6;26032:2;26028:7;26023:2;26016:5;26012:14;26008:28;25998:38;;25940:102;;;:::o;26048:377::-;26136:3;26164:39;26197:5;26164:39;:::i;:::-;26219:71;26283:6;26278:3;26219:71;:::i;:::-;26212:78;;26299:65;26357:6;26352:3;26345:4;26338:5;26334:16;26299:65;:::i;:::-;26389:29;26411:6;26389:29;:::i;:::-;26384:3;26380:39;26373:46;;26140:285;26048:377;;;;:::o;26431:313::-;26544:4;26582:2;26571:9;26567:18;26559:26;;26631:9;26625:4;26621:20;26617:1;26606:9;26602:17;26595:47;26659:78;26732:4;26723:6;26659:78;:::i;:::-;26651:86;;26431:313;;;;:::o;26750:170::-;26890:22;26886:1;26878:6;26874:14;26867:46;26750:170;:::o;26926:366::-;27068:3;27089:67;27153:2;27148:3;27089:67;:::i;:::-;27082:74;;27165:93;27254:3;27165:93;:::i;:::-;27283:2;27278:3;27274:12;27267:19;;26926:366;;;:::o;27298:419::-;27464:4;27502:2;27491:9;27487:18;27479:26;;27551:9;27545:4;27541:20;27537:1;27526:9;27522:17;27515:47;27579:131;27705:4;27579:131;:::i;:::-;27571:139;;27298:419;;;:::o;27723:442::-;27872:4;27910:2;27899:9;27895:18;27887:26;;27923:71;27991:1;27980:9;27976:17;27967:6;27923:71;:::i;:::-;28004:72;28072:2;28061:9;28057:18;28048:6;28004:72;:::i;:::-;28086;28154:2;28143:9;28139:18;28130:6;28086:72;:::i;:::-;27723:442;;;;;;:::o;28171:180::-;28219:77;28216:1;28209:88;28316:4;28313:1;28306:15;28340:4;28337:1;28330:15;28357:185;28397:1;28414:20;28432:1;28414:20;:::i;:::-;28409:25;;28448:20;28466:1;28448:20;:::i;:::-;28443:25;;28487:1;28477:35;;28492:18;;:::i;:::-;28477:35;28534:1;28531;28527:9;28522:14;;28357:185;;;;:::o;28548:112::-;28631:22;28647:5;28631:22;:::i;:::-;28626:3;28619:35;28548:112;;:::o;28666:878::-;28923:4;28961:3;28950:9;28946:19;28938:27;;28975:71;29043:1;29032:9;29028:17;29019:6;28975:71;:::i;:::-;29056:72;29124:2;29113:9;29109:18;29100:6;29056:72;:::i;:::-;29138;29206:2;29195:9;29191:18;29182:6;29138:72;:::i;:::-;29220;29288:2;29277:9;29273:18;29264:6;29220:72;:::i;:::-;29302:69;29366:3;29355:9;29351:19;29342:6;29302:69;:::i;:::-;29381:73;29449:3;29438:9;29434:19;29425:6;29381:73;:::i;:::-;29464;29532:3;29521:9;29517:19;29508:6;29464:73;:::i;:::-;28666:878;;;;;;;;;;:::o;29550:220::-;29690:34;29686:1;29678:6;29674:14;29667:58;29759:3;29754:2;29746:6;29742:15;29735:28;29550:220;:::o;29776:366::-;29918:3;29939:67;30003:2;29998:3;29939:67;:::i;:::-;29932:74;;30015:93;30104:3;30015:93;:::i;:::-;30133:2;30128:3;30124:12;30117:19;;29776:366;;;:::o;30148:419::-;30314:4;30352:2;30341:9;30337:18;30329:26;;30401:9;30395:4;30391:20;30387:1;30376:9;30372:17;30365:47;30429:131;30555:4;30429:131;:::i;:::-;30421:139;;30148:419;;;:::o;30573:166::-;30713:18;30709:1;30701:6;30697:14;30690:42;30573:166;:::o;30745:366::-;30887:3;30908:67;30972:2;30967:3;30908:67;:::i;:::-;30901:74;;30984:93;31073:3;30984:93;:::i;:::-;31102:2;31097:3;31093:12;31086:19;;30745:366;;;:::o;31117:419::-;31283:4;31321:2;31310:9;31306:18;31298:26;;31370:9;31364:4;31360:20;31356:1;31345:9;31341:17;31334:47;31398:131;31524:4;31398:131;:::i;:::-;31390:139;;31117:419;;;:::o;31542:171::-;31581:3;31604:24;31622:5;31604:24;:::i;:::-;31595:33;;31650:4;31643:5;31640:15;31637:41;;31658:18;;:::i;:::-;31637:41;31705:1;31698:5;31694:13;31687:20;;31542:171;;;:::o;31719:182::-;31859:34;31855:1;31847:6;31843:14;31836:58;31719:182;:::o;31907:366::-;32049:3;32070:67;32134:2;32129:3;32070:67;:::i;:::-;32063:74;;32146:93;32235:3;32146:93;:::i;:::-;32264:2;32259:3;32255:12;32248:19;;31907:366;;;:::o;32279:419::-;32445:4;32483:2;32472:9;32468:18;32460:26;;32532:9;32526:4;32522:20;32518:1;32507:9;32503:17;32496:47;32560:131;32686:4;32560:131;:::i;:::-;32552:139;;32279:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"3460400","executionCost":"3868","totalCost":"3464268"},"external":{"DEFAULT_ADMIN_ROLE()":"380","__BaseUpgradeablePausable_init(address)":"infinite","addInsuranceAmount(uint256,uint256,uint256,uint8,bytes32,bytes32)":"infinite","calculateTotalFlowMade(address)":"infinite","calculateTotalFlowMade(address,uint256)":"infinite","claimPremium(address,uint256)":"912","claimPremium(address,uint256,uint256)":"infinite","findActivePremiumCost(address,uint256,uint256)":"infinite","getGlobalUserInsuranceInfo(address)":"infinite","getGlobalUserInsurancePremiumCost(address)":"7206","getRoleAdmin(bytes32)":"infinite","getUserInsuranceInfo(address,uint256,uint256)":"infinite","getUserInsuranceStatus(address,uint256,uint256)":"infinite","getUserInsuranceValidTillInfo(address,uint256,uint256)":"infinite","getUserInsuredAmount(address,uint256,uint256)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"3251","initialize(address,address,address,uint256,uint256,uint256)":"infinite","isAdmin()":"2859","minusInsuranceAmount(uint256,uint256,uint256,uint8,bytes32,bytes32,bool)":"infinite","pause()":"infinite","paused()":"2524","renounceRole(bytes32,address)":"infinite","revokeRole(bytes32,address)":"infinite","supportsInterface(bytes4)":"774","unpause()":"infinite","updateMaxInsuredDays(uint256)":"infinite","updateMinimumInsurancePeriod(uint256)":"infinite","updateStartWaitingTime(uint256)":"infinite"},"internal":{"_addInsuranceAmount(uint256,uint256,uint256,uint8,bytes32,bytes32)":"infinite","_calculateTotalFlowMade(address,uint256,uint256[] memory)":"infinite","_minusInsuranceAmount(uint256,uint256,uint256,uint8,bytes32,bytes32,bool)":"infinite","activateInsurance(uint256,uint256,uint256)":"infinite","deactivateCategoryInsurance(address,uint256)":"infinite","deactivateInsurance(address,uint256,uint256)":"infinite"}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","__BaseUpgradeablePausable_init(address)":"6e810b1a","addInsuranceAmount(uint256,uint256,uint256,uint8,bytes32,bytes32)":"6e8847bd","calculateTotalFlowMade(address)":"cff5eede","calculateTotalFlowMade(address,uint256)":"4e94c048","claimPremium(address,uint256)":"77bd35fc","claimPremium(address,uint256,uint256)":"f099dd50","findActivePremiumCost(address,uint256,uint256)":"1a5c8f28","getGlobalUserInsuranceInfo(address)":"ec249164","getGlobalUserInsurancePremiumCost(address)":"42f6b8a7","getRoleAdmin(bytes32)":"248a9ca3","getUserInsuranceInfo(address,uint256,uint256)":"88295fb2","getUserInsuranceStatus(address,uint256,uint256)":"81280d2b","getUserInsuranceValidTillInfo(address,uint256,uint256)":"c392e850","getUserInsuredAmount(address,uint256,uint256)":"6b6d105e","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","initialize(address,address,address,uint256,uint256,uint256)":"728cdbca","isAdmin()":"b6db75a0","minusInsuranceAmount(uint256,uint256,uint256,uint8,bytes32,bytes32,bool)":"642adc28","pause()":"8456cb59","paused()":"5c975abb","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7","unpause()":"3f4ba83a","updateMaxInsuredDays(uint256)":"b4706268","updateMinimumInsurancePeriod(uint256)":"56eb66bb","updateStartWaitingTime(uint256)":"24b7ab24"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BaseUpgradeablePausable__ZeroAddressError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__ActiveInsuranceExistError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__ImmutableChangesError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__InactiveInsuranceError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__InsuranceCoverNotAvailableError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__NotEvenMinimumInsurancePeriodAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__SubCategoryNotActiveError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__TransactionFailedError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdatedMaxInsuredDays\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdatedMinimumInsurancePeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdatedStartWaitingTime\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"insuredAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"addInsuranceAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"}],\"name\":\"calculateTotalFlowMade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"calculateTotalFlowMade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"}],\"name\":\"claimPremium\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"}],\"name\":\"claimPremium\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryCount\",\"type\":\"uint256\"}],\"name\":\"findActivePremiumCost\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getGlobalUserInsuranceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getGlobalUserInsurancePremiumCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"}],\"name\":\"getUserInsuranceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"}],\"name\":\"getUserInsuranceStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"}],\"name\":\"getUserInsuranceValidTillInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"}],\"name\":\"getUserInsuredAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenDAIaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sztDAIAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"insuranceRegistryCA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumInsurancePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startWaitingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxInsuredDays\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"insuredAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"closeStream\",\"type\":\"bool\"}],\"name\":\"minusInsuranceAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeInDays\",\"type\":\"uint256\"}],\"name\":\"updateMaxInsuredDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeInMinutes\",\"type\":\"uint256\"}],\"name\":\"updateMinimumInsurancePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeInHours\",\"type\":\"uint256\"}],\"name\":\"updateStartWaitingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"anshik@safezen.finance\",\"kind\":\"dev\",\"methods\":{\"addInsuranceAmount(uint256,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"this function aims to create or top-up user insurance coverage amount.\",\"params\":{\"categoryID\":\": insurance category, e.g., stablecoin depeg insurance.\",\"insuredAmount\":\": maximum user coverage amount\",\"subCategoryID\":\": insurance sub-category, e.g., USDC depeg coverage, DAI depeg coverage.\"},\"returns\":{\"_0\":\"bool: true if the function executues successfully else false.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,address,uint256,uint256,uint256)\":{\"details\":\"one-time function aims to initialize the contractMUST revert if called more than once.\",\"params\":{\"insuranceRegistryCA\":\": address of the Protocol Registry contract\",\"minimumInsurancePeriod\":\": minimum insurance period\",\"sztDAIAddress\":\"address of the sztDAI ERC20 token\",\"tokenDAIaddress\":\": address of the DAI ERC20 token\"},\"returns\":{\"_0\":\"bool: true if the function executues successfully else false. [PRODUCTION TODO: _startWaitingTime =  startWaitingTime * 1 hours;] [PRODUCTION TODO: _maxInsuredDays = maxInsuredDays * 1 days;]\"}},\"minusInsuranceAmount(uint256,uint256,uint256,uint8,bytes32,bytes32,bool)\":{\"details\":\"this function aims to close or reduce user insurance coverage amount.\",\"params\":{\"categoryID\":\": insurance category, e.g., stablecoin depeg insurance.\",\"closeStream\":\": checks whether user initiate to deactivate its insurance or not.\",\"insuredAmount\":\": maximum user coverage amount\",\"subCategoryID\":\": insurance sub-category, e.g., USDC depeg coverage, DAI depeg coverage.\"},\"returns\":{\"_0\":\"bool: true if the function executues successfully else false.\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateMaxInsuredDays(uint256)\":{\"details\":\"this function aims to update the maximum insurance period\",\"params\":{\"timeInDays\":\": 90 days will be kept as default.\"}},\"updateMinimumInsurancePeriod(uint256)\":{\"details\":\"this function aims to updates minimum insurance period\",\"params\":{\"timeInMinutes\":\": 120 minutes will be kept as default.\"}},\"updateStartWaitingTime(uint256)\":{\"details\":\"this function aims to update the insurance activation waiting period\",\"params\":{\"timeInHours\":\": 4-8 hours will be kept as default. \"}}},\"stateVariables\":{\"usersGlobalInsuranceInfo\":{\"details\":\"mapping to store UserGlobalInsuranceInfo maps: userAddress => UserGlobalInsuranceInfo\"},\"usersInsuranceInfo\":{\"details\":\"mapping to store UserInsurance Info maps: userAddress => categoryID => subCategoryID => UserInsuranceInfo\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateTotalFlowMade(address)\":{\"notice\":\"DURATION\"},\"calculateTotalFlowMade(address,uint256)\":{\"notice\":\"DURATION\"},\"findActivePremiumCost(address,uint256,uint256)\":{\"notice\":\"VIEW FUNCTIONS\"}},\"notice\":\"Report any bug or issues at:\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/payAsYouGo/ConstantFlowAgreement.sol\":\"ConstantFlowAgreement\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"contracts/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./Constants.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nerror BaseUpgradeablePausable__ZeroAddressError();\\n\\ncontract BaseUpgradeablePausable is \\n    Initializable, \\n    PausableUpgradeable, \\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable \\n{\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin(), \\\"Must have admin role to perform this action.\\\");\\n        _;\\n    }\\n\\n    function __BaseUpgradeablePausable_init(address owner) public onlyInitializing() {\\n        if(owner == address(0)) {\\n            revert BaseUpgradeablePausable__ZeroAddressError();\\n        }\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        _grantRole(Constants.getAdminRole(), owner);\\n        _grantRole(Constants.getPauserRole(), owner);\\n\\n        _setRoleAdmin(Constants.getPauserRole(), Constants.getAdminRole());\\n        _setRoleAdmin(Constants.getAdminRole(), Constants.getAdminRole());\\n    }\\n\\n    function isAdmin() public view returns (bool) {\\n        return hasRole(Constants.getAdminRole(), _msgSender());\\n    }\\n\\n  \\n}\",\"keccak256\":\"0x29b172c9fffe9bc60c702a071bae35f301b1b5c3824f0ca44b3d2dcabbda5af9\",\"license\":\"MIT\"},\"contracts/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nlibrary Constants {\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    function getAdminRole() internal pure returns (bytes32) {\\n        return ADMIN_ROLE;\\n    }\\n\\n    function getPauserRole() internal pure returns (bytes32) {\\n        return PAUSER_ROLE;\\n    }\\n}\",\"keccak256\":\"0xeae9d870bc2ace9284ae575eb6c534c177ff6f4a60b98f10a0a8156f19f760cf\",\"license\":\"BUSL-1.1\"},\"contracts/core/payAsYouGo/ConstantFlowAgreement.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// @title Constant Flow Agreement Contract\\n/// @author Anshik Bansal <anshik@safezen.finance>\\n\\n/// Importing required interfaces\\nimport \\\"./../../interfaces/ICFA.sol\\\";\\nimport \\\"./../../interfaces/IERC20Extended.sol\\\";\\nimport \\\"./../../interfaces/IInsuranceRegistry.sol\\\";\\n\\n/// Importing required libraries\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n/// Importing required contracts\\nimport \\\"./../../BaseUpgradeablePausable.sol\\\";\\n\\n/// Report any bug or issues at:\\n/// @custom:security-contact anshik@safezen.finance\\n\\ncontract ConstantFlowAgreement is ICFA, BaseUpgradeablePausable {\\n    /// _initVersion: counter to initialize the init one-time function, max value can be 1.\\n    /// _categoriesCount: counter to keep track of the available insurance categories.\\n    /// _maxInsuredDays: the maximum insurance period [in days], 90 days will be kept as default.\\n    /// _startWaitingTime: insurance activation waiting period, 4-8 hours will be kept as default.\\n    /// _minimumInsurancePeriod: the minimum insurance period, 120 minutes will be kept as default.\\n    uint256 private _categoriesCount;\\n    uint256 private _maxInsuredDays;\\n    uint256 private _startWaitingTime;\\n    uint256 private _minimumInsurancePeriod;\\n\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeERC20Upgradeable for IERC20PermitUpgradeable;\\n\\n    /// _tokenDAI: DAI ERC20 token\\n    /// _sztDAI: sztDAI ERC20 token\\n    /// _insuranceRegistry: Insurance Registry Contract\\n    IERC20Upgradeable private _tokenDAI;\\n    IERC20PermitUpgradeable private _tokenPermitDAI;\\n    IERC20Extended private _sztDAI;\\n    IInsuranceRegistry private _insuranceRegistry;\\n\\n    /// @dev collects user information for particular insurance\\n    /// @param startTime: insurance activation time\\n    /// @param validTill: insurance validation till\\n    /// @param insuredAmount: maximum insurance amount covered\\n    /// @param insuranceFlowRate: amount to be charged per second [insurance flow rate * amount to be insured]\\n    /// @param insuranceCost: expected insurance premium cost for the registered duration\\n    /// @param registrationTime: insurance registration time\\n    /// @param isValid: checks whether user is an active insurance holder or not\\n    struct UserInsuranceInfo {\\n        uint256 startTime;\\n        uint256 validTill;\\n        uint256 insuredAmount;\\n        uint256 registrationTime;\\n        uint256 insuranceFlowRate;\\n        uint256 insuranceCost;\\n        bool isValid;\\n    }\\n\\n    /// @dev collects user global insurance information\\n    /// @param validTill: expected insurance valid period\\n    /// @param insuranceStreamRate: global insurance flow rate per second\\n    /// @param globalInsuranceCost: expected global insurance premium cost for the registered duration\\n    struct UserGlobalInsuranceInfo {\\n        uint256 validTill;\\n        uint256 insuranceStreamRate;\\n        uint256 globalInsuranceCost;\\n    }\\n\\n    /// @dev mapping to store UserGlobalInsuranceInfo\\n    /// maps: userAddress => UserGlobalInsuranceInfo\\n    mapping(address => UserGlobalInsuranceInfo) private usersGlobalInsuranceInfo;\\n\\n    /// @dev mapping to store UserInsurance Info\\n    /// maps: userAddress => categoryID => subCategoryID => UserInsuranceInfo\\n    mapping(address => mapping(uint256 => mapping(uint256 => UserInsuranceInfo))) private usersInsuranceInfo;\\n\\n    /// @dev one-time function aims to initialize the contract\\n    /// @dev MUST revert if called more than once.\\n    /// @param tokenDAIaddress: address of the DAI ERC20 token\\n    /// @param sztDAIAddress address of the sztDAI ERC20 token\\n    /// @param insuranceRegistryCA: address of the Protocol Registry contract\\n    /// @param minimumInsurancePeriod: minimum insurance period\\n    /// @return bool: true if the function executues successfully else false.\\n    /// [PRODUCTION TODO: _startWaitingTime =  startWaitingTime * 1 hours;]\\n    /// [PRODUCTION TODO: _maxInsuredDays = maxInsuredDays * 1 days;]\\n    function initialize(\\n        address tokenDAIaddress,\\n        address sztDAIAddress,\\n        address insuranceRegistryCA,\\n        uint256 minimumInsurancePeriod,\\n        uint256 startWaitingTime,\\n        uint256 maxInsuredDays\\n    ) external initializer returns(bool) {\\n        _categoriesCount = 0;\\n        _maxInsuredDays = maxInsuredDays * 1 minutes;\\n        _startWaitingTime = startWaitingTime * 1 minutes; \\n        _minimumInsurancePeriod = minimumInsurancePeriod * 1 minutes;\\n        _tokenDAI = IERC20Upgradeable(tokenDAIaddress);\\n        _tokenPermitDAI = IERC20PermitUpgradeable(tokenDAIaddress);\\n        _sztDAI = IERC20Extended(sztDAIAddress);\\n        _insuranceRegistry = IInsuranceRegistry(insuranceRegistryCA);\\n        __BaseUpgradeablePausable_init(_msgSender());\\n        return true;\\n    }\\n\\n    function pause() external onlyAdmin {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyAdmin {\\n        _unpause();\\n    }\\n\\n    /// @dev this function aims to updates minimum insurance period\\n    /// @param timeInMinutes: 120 minutes will be kept as default.\\n    function updateMinimumInsurancePeriod(uint256 timeInMinutes) external onlyAdmin {\\n        _minimumInsurancePeriod = timeInMinutes * 1 minutes;\\n        emit UpdatedMinimumInsurancePeriod();\\n    }\\n\\n    /// @dev this function aims to update the insurance activation waiting period\\n    /// @param timeInHours: 4-8 hours will be kept as default. \\n    function updateStartWaitingTime(uint256 timeInHours) external onlyAdmin {\\n        _startWaitingTime = timeInHours * 1 hours;\\n        emit UpdatedStartWaitingTime();\\n    }\\n\\n    /// @dev this function aims to update the maximum insurance period\\n    /// @param timeInDays: 90 days will be kept as default.\\n    function updateMaxInsuredDays(uint256 timeInDays) external onlyAdmin {\\n        _maxInsuredDays = timeInDays * 1 days;\\n        emit UpdatedMaxInsuredDays();\\n    }\\n\\n    /// @dev this function aims to create or top-up user insurance coverage amount.\\n    /// @param insuredAmount: maximum user coverage amount\\n    /// @param categoryID: insurance category, e.g., stablecoin depeg insurance.\\n    /// @param subCategoryID: insurance sub-category, e.g., USDC depeg coverage, DAI depeg coverage.\\n    /// @return bool: true if the function executues successfully else false.\\n    function addInsuranceAmount(\\n        uint256 insuredAmount, \\n        uint256 categoryID, \\n        uint256 subCategoryID, \\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) external override nonReentrant returns(bool) {\\n        bool success = _addInsuranceAmount(insuredAmount, categoryID, subCategoryID, v, r, s);\\n        return success;\\n    }\\n    \\n    \\n    function _addInsuranceAmount(\\n        uint256 insuredAmount, \\n        uint256 categoryID, \\n        uint256 subCategoryID,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) private returns(bool) {\\n        uint256 newInsuredAmount = usersInsuranceInfo[_msgSender()][categoryID][subCategoryID].insuredAmount + insuredAmount;\\n        if (usersInsuranceInfo[_msgSender()][categoryID][subCategoryID].isValid) {\\n            bool closeStreamSuccess = deactivateInsurance(_msgSender(), categoryID, subCategoryID);\\n            if (!closeStreamSuccess) {\\n                revert CFA__TransactionFailedError();\\n            }\\n        }   \\n        uint256 deadline = block.timestamp + _maxInsuredDays + 30 days;  \\n        (bool activateSuccess, uint256 insuranceCost) = activateInsurance(newInsuredAmount, categoryID, subCategoryID);\\n        if (!activateSuccess) {\\n            revert CFA__TransactionFailedError();\\n        }\\n        _tokenPermitDAI.safePermit(_msgSender(), address(this), insuranceCost, deadline, v, r, s);  \\n        return true;\\n    }\\n\\n    /// @dev this function aims to close or reduce user insurance coverage amount.\\n    /// @param insuredAmount: maximum user coverage amount\\n    /// @param categoryID: insurance category, e.g., stablecoin depeg insurance.\\n    /// @param subCategoryID: insurance sub-category, e.g., USDC depeg coverage, DAI depeg coverage.\\n    /// @param closeStream: checks whether user initiate to deactivate its insurance or not.\\n    /// @return bool: true if the function executues successfully else false.\\n    function minusInsuranceAmount(\\n        uint256 insuredAmount, \\n        uint256 categoryID, \\n        uint256 subCategoryID,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s,\\n        bool closeStream\\n    ) external override nonReentrant returns(bool) {\\n        bool success = _minusInsuranceAmount(insuredAmount, categoryID, subCategoryID, v, r, s, closeStream);\\n        return success;\\n    }\\n    \\n    \\n    function _minusInsuranceAmount(\\n        uint256 insuredAmount, \\n        uint256 categoryID, \\n        uint256 subCategoryID,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s,\\n        bool closeStream\\n    ) private returns(bool) {\\n        if (!usersInsuranceInfo[_msgSender()][categoryID][subCategoryID].isValid) {\\n            revert CFA__InactiveInsuranceError();\\n        }\\n        bool closeStreamSuccess = deactivateInsurance(_msgSender(), categoryID, subCategoryID);\\n        if (!closeStreamSuccess) {\\n            revert CFA__TransactionFailedError();\\n        }\\n        if (!closeStream) {\\n            uint256 newInsuredAmount = usersInsuranceInfo[_msgSender()][categoryID][subCategoryID].insuredAmount - insuredAmount;\\n            uint256 deadline = block.timestamp + _maxInsuredDays + 30 days;\\n            (bool activateSuccess, uint256 insuranceCost) = activateInsurance(newInsuredAmount, categoryID, subCategoryID);\\n            if (!activateSuccess) {\\n                revert CFA__TransactionFailedError();\\n            }\\n            _tokenPermitDAI.safePermit(_msgSender(), address(this), insuranceCost, deadline, v, r, s);  \\n\\n        }\\n        return true;\\n    }\\n\\n    function claimPremium(\\n        address userAddress,\\n        uint256 categoryID,\\n        uint256 subCategoryID\\n    ) external returns(bool) {\\n        if (\\n            getUserInsuranceValidTillInfo(userAddress, categoryID, subCategoryID) > \\n            block.timestamp\\n        ) {\\n            revert CFA__ActiveInsuranceExistError();\\n        }\\n        bool success = deactivateInsurance(userAddress, categoryID, subCategoryID);\\n        if (!success) {\\n            revert CFA__TransactionFailedError();\\n        }\\n        return true;\\n    }\\n\\n    function claimPremium(\\n        address userAddress,\\n        uint256 categoryID\\n    ) external returns(bool) {\\n\\n    }\\n\\n    /// @param insuredAmount: insured amount\\n    /// @param categoryID: like Smart Contract Insurance\\n    function activateInsurance(\\n        uint256 insuredAmount,\\n        uint256 categoryID,\\n        uint256 subCategoryID\\n    ) private returns(bool, uint256) {\\n        if (insuredAmount < 1e18) {\\n            revert CFA__InsuranceCoverNotAvailableError();\\n        }\\n        if (\\n            (!_insuranceRegistry.ifEnoughLiquidity(categoryID, insuredAmount, subCategoryID))    \\n        ) {\\n            revert CFA__SubCategoryNotActiveError();\\n        }\\n        if (usersInsuranceInfo[_msgSender()][categoryID][subCategoryID].isValid) {\\n            revert CFA__ActiveInsuranceExistError();\\n        }\\n        \\n        UserInsuranceInfo storage userInsuranceInfo = usersInsuranceInfo[_msgSender()][categoryID][subCategoryID];\\n        UserGlobalInsuranceInfo storage userGlobalInsuranceInfo = usersGlobalInsuranceInfo[_msgSender()];\\n        \\n        uint256 userEstimatedBalance = _sztDAI.balanceOf(_msgSender()) - userGlobalInsuranceInfo.globalInsuranceCost;\\n        uint256 incomingAmountPerSec = (\\n            _insuranceRegistry.getStreamFlowRate(categoryID, subCategoryID) * insuredAmount) / 1e18;\\n        uint256 globalIncomingAmountPerSec = userGlobalInsuranceInfo.insuranceStreamRate + incomingAmountPerSec;\\n        // user balance should be enough to run the insurance for atleast minimum insurance time duration\\n        if ((globalIncomingAmountPerSec * _minimumInsurancePeriod) > userEstimatedBalance) {\\n            revert CFA__NotEvenMinimumInsurancePeriodAmount();\\n        }\\n\\n        uint256 validTill = (userEstimatedBalance / incomingAmountPerSec);\\n        userGlobalInsuranceInfo.insuranceStreamRate += incomingAmountPerSec;\\n        userInsuranceInfo.insuredAmount = insuredAmount;\\n        userInsuranceInfo.insuranceFlowRate = incomingAmountPerSec;\\n        userInsuranceInfo.registrationTime = block.timestamp;\\n        userInsuranceInfo.startTime = block.timestamp + _startWaitingTime;\\n        userInsuranceInfo.validTill = (\\n            validTill < _maxInsuredDays ? \\n            userInsuranceInfo.startTime + validTill : userInsuranceInfo.startTime + _maxInsuredDays\\n        );\\n        userInsuranceInfo.insuranceCost = validTill * incomingAmountPerSec;\\n        userInsuranceInfo.isValid = true;\\n        \\n        userGlobalInsuranceInfo.globalInsuranceCost += userInsuranceInfo.insuranceCost;\\n        userGlobalInsuranceInfo.validTill = (\\n            userInsuranceInfo.validTill < userGlobalInsuranceInfo.validTill ? \\n            userGlobalInsuranceInfo.validTill : userInsuranceInfo.validTill\\n        );\\n        bool success = _insuranceRegistry.addCoverageOffered(categoryID, subCategoryID, insuredAmount, incomingAmountPerSec);\\n        return (success, userInsuranceInfo.insuranceCost);\\n    }\\n\\n    /// NOTE: few if and else to consider for globalinsuranceinfo like endtime and start time \\n    function deactivateInsurance(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) private returns(bool) {\\n        UserInsuranceInfo storage userInsuranceInfo = usersInsuranceInfo[userAddress][categoryID][subCategoryID];\\n        if (!userInsuranceInfo.isValid) {\\n            revert CFA__InactiveInsuranceError();\\n        }\\n        userInsuranceInfo.isValid = false;\\n        uint256 duration = (\\n            (block.timestamp > userInsuranceInfo.startTime) ? (\\n                (block.timestamp > userInsuranceInfo.validTill) ? \\n                userInsuranceInfo.validTill : (block.timestamp - userInsuranceInfo.startTime)\\n            ) : 0);\\n        uint256 amountToBeBurned = (duration * userInsuranceInfo.insuranceFlowRate);\\n        if (amountToBeBurned == 0) {\\n            return true;\\n        } \\n        usersGlobalInsuranceInfo[userAddress].insuranceStreamRate -= userInsuranceInfo.insuranceFlowRate;\\n        usersGlobalInsuranceInfo[userAddress].globalInsuranceCost -= userInsuranceInfo.insuranceCost;\\n        uint256 flowRate = userInsuranceInfo.insuranceFlowRate;\\n        uint256 insuredAmount = userInsuranceInfo.insuredAmount;\\n        bool success = _insuranceRegistry.removeCoverageOffered(categoryID, subCategoryID, insuredAmount, flowRate);\\n        bool burnSuccess = _sztDAI.burnFrom(userAddress, amountToBeBurned);\\n        if ((!success) || (!burnSuccess)) {\\n            revert CFA__TransactionFailedError();\\n        }\\n        return true;\\n    }\\n\\n    /// @dev this function aims to deactivate user's all activated insurance in a single-call.\\n    /// @param userAddress: user wallet address\\n    /// @param categoryID: insurance category, e.g., stablecoin depeg insurance.\\n    function deactivateCategoryInsurance(\\n        address userAddress, \\n        uint256 categoryID\\n    ) private returns(bool) {\\n        uint256[] memory activeID = findActivePremiumCost(userAddress, categoryID, _insuranceRegistry.getLatestSubCategoryID(categoryID));\\n        uint256 expectedAmountToBePaid = _calculateTotalFlowMade(userAddress, categoryID, activeID);\\n        for(uint256 i=0; i < activeID.length;) {\\n            usersInsuranceInfo[userAddress][categoryID][activeID[i]].isValid = false;\\n            uint256 flowRate = usersInsuranceInfo[userAddress][categoryID][activeID[i]].insuranceFlowRate;\\n            uint256 insuredAmount = usersInsuranceInfo[userAddress][categoryID][activeID[i]].insuredAmount;\\n            bool coverageRemoveSuccess = _insuranceRegistry.removeCoverageOffered(categoryID, activeID[i], insuredAmount, flowRate);\\n            if (!coverageRemoveSuccess) {\\n                revert CFA__TransactionFailedError();\\n            }\\n            ++i;\\n        }\\n        uint256 userBalance = _sztDAI.balanceOf(userAddress); \\n        uint256 amountToBeBurned = expectedAmountToBePaid > userBalance ? userBalance : expectedAmountToBePaid;\\n        usersGlobalInsuranceInfo[userAddress].insuranceStreamRate = 0;\\n        bool success = _sztDAI.burnFrom(userAddress, amountToBeBurned);\\n        if (!success) {\\n            revert CFA__TransactionFailedError();\\n        }\\n        return true;\\n    }\\n\\n    /// VIEW FUNCTIONS\\n\\n    function findActivePremiumCost(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryCount\\n    ) public view override returns(uint256[] memory) {\\n        uint256 activeProtocolCount = 0;\\n        for(uint i = 0; i < subCategoryCount;) {\\n            UserInsuranceInfo memory userInsuranceInfo = usersInsuranceInfo[userAddress][categoryID][i];\\n            if (userInsuranceInfo.isValid) {\\n                ++activeProtocolCount;\\n            }\\n            ++i;\\n        }\\n        uint256[] memory activeID = new uint256[](activeProtocolCount);\\n        uint256 counter = 0;\\n        for(uint i = 0; i < subCategoryCount;) {\\n            UserInsuranceInfo storage userInsuranceInfo = usersInsuranceInfo[userAddress][categoryID][i];\\n            if (userInsuranceInfo.isValid) {\\n                activeID[counter] = i;\\n                ++counter;\\n            }\\n            ++i;\\n        }\\n      return activeID;\\n    }\\n\\n    /// DURATION\\n    function calculateTotalFlowMade(\\n        address userAddress\\n    ) external view returns(uint256) {\\n        uint256 globalBalanceToBePaid = 0;\\n        for(uint256 i=0; i < _categoriesCount;) {\\n            uint256 balanceToBePaid = 0;\\n            uint256[] memory activeID = findActivePremiumCost(userAddress, i, _insuranceRegistry.getLatestSubCategoryID(i));\\n            for(uint256 j=0; j < activeID.length;) {\\n                UserInsuranceInfo storage userActiveInsuranceInfo = usersInsuranceInfo[userAddress][i][activeID[j]];\\n                uint256 duration = (\\n                    (block.timestamp > userActiveInsuranceInfo.startTime) ? (\\n                        (block.timestamp > userActiveInsuranceInfo.validTill) ? \\n                        userActiveInsuranceInfo.validTill : (block.timestamp - userActiveInsuranceInfo.startTime)\\n                    ) : 0);\\n                balanceToBePaid += (userActiveInsuranceInfo.insuranceFlowRate * duration);\\n                ++j;\\n            }\\n            globalBalanceToBePaid += balanceToBePaid;\\n            ++i;\\n        }\\n        return globalBalanceToBePaid;\\n    }\\n\\n    function _calculateTotalFlowMade(\\n        address userAddress, \\n        uint256 categoryID,\\n        uint256[] memory activeID\\n    ) internal view returns(uint256) {\\n        uint256 balanceToBePaid = 0;\\n        for(uint256 i=0; i< activeID.length;){\\n            UserInsuranceInfo storage userActiveInsuranceInfo = usersInsuranceInfo[userAddress][categoryID][activeID[i]];\\n            uint256 duration = (\\n                (block.timestamp > userActiveInsuranceInfo.startTime) ? (\\n                    (block.timestamp > userActiveInsuranceInfo.validTill) ? \\n                    userActiveInsuranceInfo.validTill : (block.timestamp - userActiveInsuranceInfo.startTime)\\n                ) : 0);\\n            balanceToBePaid += (userActiveInsuranceInfo.insuranceFlowRate * duration);\\n            ++i;\\n        }\\n        return balanceToBePaid;\\n    }\\n\\n    /// DURATION\\n    function calculateTotalFlowMade(\\n        address userAddress, \\n        uint256 categoryID\\n    ) external view override returns(uint256) {\\n        uint256 balanceToBePaid = 0;\\n        uint256[] memory activeID = findActivePremiumCost(userAddress, categoryID, _insuranceRegistry.getLatestSubCategoryID(categoryID));\\n        for(uint256 i=0; i< activeID.length;){\\n            UserInsuranceInfo storage userActiveInsuranceInfo = usersInsuranceInfo[userAddress][categoryID][activeID[i]];\\n            uint256 duration = (\\n                (block.timestamp > userActiveInsuranceInfo.startTime) ? (\\n                    (block.timestamp > userActiveInsuranceInfo.validTill) ? \\n                    userActiveInsuranceInfo.validTill : (block.timestamp - userActiveInsuranceInfo.startTime)\\n                ) : 0);\\n            balanceToBePaid += (userActiveInsuranceInfo.insuranceFlowRate * duration);\\n            ++i;\\n        }\\n        return balanceToBePaid;\\n    } \\n\\n    function getUserInsuranceValidTillInfo(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) public view override returns(uint256) {\\n        return usersInsuranceInfo[userAddress][categoryID][subCategoryID].validTill;\\n    }\\n\\n    function getUserInsuranceStatus(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) external view override returns(bool) {\\n        return usersInsuranceInfo[userAddress][categoryID][subCategoryID].isValid;\\n    }\\n\\n    function getUserInsuranceInfo(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) external view override returns(uint256, uint256, uint256, uint256, uint256, bool) {\\n        UserInsuranceInfo memory userInsuranceInfo = usersInsuranceInfo[userAddress][categoryID][subCategoryID];\\n        return (\\n            userInsuranceInfo.insuredAmount, \\n            userInsuranceInfo.insuranceFlowRate,\\n            userInsuranceInfo.registrationTime,\\n            userInsuranceInfo.startTime,\\n            userInsuranceInfo.validTill,\\n            userInsuranceInfo.isValid\\n            );\\n    }\\n\\n    function getGlobalUserInsuranceInfo(\\n        address _userAddress\\n    ) external view override returns (uint256, uint256) {\\n        UserGlobalInsuranceInfo memory userGlobalInsuranceInfo = usersGlobalInsuranceInfo[_userAddress];\\n        return (userGlobalInsuranceInfo.insuranceStreamRate, userGlobalInsuranceInfo.validTill);\\n    }\\n\\n    function getGlobalUserInsurancePremiumCost(\\n        address userAddress\\n    ) external view override returns(uint256) {\\n       UserGlobalInsuranceInfo memory userGlobalInsuranceInfo = usersGlobalInsuranceInfo[userAddress];\\n        return userGlobalInsuranceInfo.globalInsuranceCost; \\n    }\\n\\n    function getUserInsuredAmount(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) external view returns(uint256) {\\n        return usersInsuranceInfo[userAddress][categoryID][subCategoryID].insuredAmount;\\n    }\\n}\",\"keccak256\":\"0x960e9211d0405cd112172336e991bb765fb24e48c46fb27be1885e382dc14d7c\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ICFA.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n\\ninterface ICFA {\\n    // CFA Events\\n    event UpdatedMaxInsuredDays();\\n    event UpdatedStartWaitingTime();\\n    event UpdatedMinimumInsurancePeriod();\\n\\n    // CFA Custom Error Code\\n    error CFA__ImmutableChangesError();\\n    error CFA__TransactionFailedError();\\n    error CFA__InactiveInsuranceError();\\n    error CFA__SubCategoryNotActiveError();\\n    error CFA__ActiveInsuranceExistError();\\n    error CFA__InsuranceCoverNotAvailableError();\\n    error CFA__NotEvenMinimumInsurancePeriodAmount();\\n\\n    function addInsuranceAmount(\\n        uint256 insuredAmount, \\n        uint256 categoryID, \\n        uint256 subCategoryID,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) external returns(bool);\\n\\n    function minusInsuranceAmount(\\n        uint256 insuredAmount, \\n        uint256 categoryID, \\n        uint256 subCategoryID,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s,\\n        bool closeStream\\n    ) external returns(bool);\\n\\n    function findActivePremiumCost(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 insuranceCount\\n    ) external view returns(uint256[] memory);\\n\\n    function calculateTotalFlowMade(\\n        address userAddress, \\n        uint256 categoryID\\n    ) external view returns(uint256);  \\n\\n    function calculateTotalFlowMade(\\n        address userAddress\\n    ) external view returns(uint256); \\n\\n    function getUserInsuranceValidTillInfo(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) external view returns(uint256);\\n\\n    function getUserInsuranceStatus(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) external view returns(bool);\\n\\n    function getUserInsuranceInfo(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) external view returns(uint256, uint256, uint256, uint256, uint256, bool);\\n    \\n    function getGlobalUserInsuranceInfo(\\n        address _userAddress\\n    ) external view returns (uint256, uint256);\\n\\n    function getGlobalUserInsurancePremiumCost(\\n        address userAddress\\n    ) external view returns(uint256);\\n}\",\"keccak256\":\"0x104c6cb8a06b415043bc44feaca5daac335a908da1cbabcda5435a26ddda0476\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional mint and burnFrom functions from the ERC20 standard.\\n */\\ninterface IERC20Extended is IERC20Upgradeable {\\n    \\n    function mint(address to, uint256 amount) external returns(bool);\\n\\n    function burnFrom(address account, uint256 amount) external returns(bool);\\n    \\n}\",\"keccak256\":\"0x77d287ad89310c9c5b7acef41830a116628435e9f209b78088282a3e9d683213\",\"license\":\"MIT\"},\"contracts/interfaces/IInsuranceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// Report any bug or issues at:\\n/// @custom:security-contact anshik@safezen.finance\\ninterface IInsuranceRegistry {\\n\\n    error InsuranceRegistry__ImmutableChangesError();\\n    error InsuranceRegistry__TransactionFailedError();\\n    error InsuranceRegistry__NotEnoughLiquidityError();\\n\\n    event UpdatedClaimStakedValue();\\n\\n    function addInsuranceLiquidity(\\n        uint256 categoryID,\\n        uint256 subCategoryID_,\\n        uint256 liquiditySupplied\\n    ) external returns(bool);\\n\\n    function removeInsuranceLiquidity(\\n        uint256 categoryID,\\n        uint256 subCategoryID_, \\n        uint256 liquiditySupplied\\n    ) external returns(bool);\\n\\n    function addCoverageOffered(\\n        uint256 categoryID,\\n        uint256 subCategoryID_, \\n        uint256 coverageAmount,\\n        uint256 incomingFlowRate\\n    ) external returns(bool);\\n\\n    function removeCoverageOffered(\\n        uint256 categoryID,\\n        uint256 subCategoryID_, \\n        uint256 coverageAmount, \\n        uint256 incomingFlowRate\\n    ) external returns(bool);\\n\\n    function claimAdded(\\n        uint256 stakedTokenID, \\n        uint256 categoryID, \\n        uint256 subCategoryID_\\n    ) external returns(bool);\\n\\n    function getVersionID(uint256 categoryID) external view returns(uint256);\\n\\n    function calculateUnderwriterBalance(\\n        uint256 categoryID,\\n        uint256 subCategoryID_\\n    ) external view returns(uint256);\\n\\n    function getLatestCategoryID() external view returns(uint256);\\n\\n    function getLatestSubCategoryID(uint256 categoryID) external view returns(uint256);\\n\\n    function ifEnoughLiquidity(uint256 categoryID, uint256 insuredAmount, uint256 subCategoryID_) external view returns(bool);\\n\\n    function getStreamFlowRate(uint256 categoryID, uint256 subCategoryID_) external view returns(uint256);\\n}\",\"keccak256\":\"0xf9afae03190ba6aa377519032f994fc5670704353cf2818a416f4db9c2b14b9e\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1500,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":601,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":706,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":1719,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"__gap","offset":0,"slot":"101","type":"t_array(t_uint256)50_storage"},{"astId":39,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_roles","offset":0,"slot":"151","type":"t_mapping(t_bytes32,t_struct(RoleData)34_storage)"},{"astId":334,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"__gap","offset":0,"slot":"152","type":"t_array(t_uint256)49_storage"},{"astId":721,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_status","offset":0,"slot":"201","type":"t_uint256"},{"astId":779,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"__gap","offset":0,"slot":"202","type":"t_array(t_uint256)49_storage"},{"astId":3206,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_categoriesCount","offset":0,"slot":"251","type":"t_uint256"},{"astId":3208,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_maxInsuredDays","offset":0,"slot":"252","type":"t_uint256"},{"astId":3210,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_startWaitingTime","offset":0,"slot":"253","type":"t_uint256"},{"astId":3212,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_minimumInsurancePeriod","offset":0,"slot":"254","type":"t_uint256"},{"astId":3224,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_tokenDAI","offset":0,"slot":"255","type":"t_contract(IERC20Upgradeable)858"},{"astId":3227,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_tokenPermitDAI","offset":0,"slot":"256","type":"t_contract(IERC20PermitUpgradeable)894"},{"astId":3230,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_sztDAI","offset":0,"slot":"257","type":"t_contract(IERC20Extended)5713"},{"astId":3233,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_insuranceRegistry","offset":0,"slot":"258","type":"t_contract(IInsuranceRegistry)5916"},{"astId":3261,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"usersGlobalInsuranceInfo","offset":0,"slot":"259","type":"t_mapping(t_address,t_struct(UserGlobalInsuranceInfo)3255_storage)"},{"astId":3271,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"usersInsuranceInfo","offset":0,"slot":"260","type":"t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserInsuranceInfo)3248_storage)))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(IERC20Extended)5713":{"encoding":"inplace","label":"contract IERC20Extended","numberOfBytes":"20"},"t_contract(IERC20PermitUpgradeable)894":{"encoding":"inplace","label":"contract IERC20PermitUpgradeable","numberOfBytes":"20"},"t_contract(IERC20Upgradeable)858":{"encoding":"inplace","label":"contract IERC20Upgradeable","numberOfBytes":"20"},"t_contract(IInsuranceRegistry)5916":{"encoding":"inplace","label":"contract IInsuranceRegistry","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserInsuranceInfo)3248_storage)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo)))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserInsuranceInfo)3248_storage))"},"t_mapping(t_address,t_struct(UserGlobalInsuranceInfo)3255_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct ConstantFlowAgreement.UserGlobalInsuranceInfo)","numberOfBytes":"32","value":"t_struct(UserGlobalInsuranceInfo)3255_storage"},"t_mapping(t_bytes32,t_struct(RoleData)34_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)34_storage"},"t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserInsuranceInfo)3248_storage))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_struct(UserInsuranceInfo)3248_storage)"},"t_mapping(t_uint256,t_struct(UserInsuranceInfo)3248_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo)","numberOfBytes":"32","value":"t_struct(UserInsuranceInfo)3248_storage"},"t_struct(RoleData)34_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":31,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":33,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(UserGlobalInsuranceInfo)3255_storage":{"encoding":"inplace","label":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo","members":[{"astId":3250,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"validTill","offset":0,"slot":"0","type":"t_uint256"},{"astId":3252,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"insuranceStreamRate","offset":0,"slot":"1","type":"t_uint256"},{"astId":3254,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"globalInsuranceCost","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_struct(UserInsuranceInfo)3248_storage":{"encoding":"inplace","label":"struct ConstantFlowAgreement.UserInsuranceInfo","members":[{"astId":3235,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"startTime","offset":0,"slot":"0","type":"t_uint256"},{"astId":3237,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"validTill","offset":0,"slot":"1","type":"t_uint256"},{"astId":3239,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"insuredAmount","offset":0,"slot":"2","type":"t_uint256"},{"astId":3241,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"registrationTime","offset":0,"slot":"3","type":"t_uint256"},{"astId":3243,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"insuranceFlowRate","offset":0,"slot":"4","type":"t_uint256"},{"astId":3245,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"insuranceCost","offset":0,"slot":"5","type":"t_uint256"},{"astId":3247,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"isValid","offset":0,"slot":"6","type":"t_bool"}],"numberOfBytes":"224"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"calculateTotalFlowMade(address)":{"notice":"DURATION"},"calculateTotalFlowMade(address,uint256)":{"notice":"DURATION"},"findActivePremiumCost(address,uint256,uint256)":{"notice":"VIEW FUNCTIONS"}},"notice":"Report any bug or issues at:","version":1}}},"contracts/core/staking/GENZStaking.sol":{"GENZStaking":{"abi":[{"inputs":[{"internalType":"address","name":"tokenAddressGENZ","type":"address"},{"internalType":"uint256","name":"timeInDays","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"BaseUpgradeablePausable__ZeroAddressError","type":"error"},{"inputs":[],"name":"GENZStaking__NotAMinimumStakeAmountError","type":"error"},{"inputs":[],"name":"GENZStaking__TransactionFailedError","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"StakedGENZ","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"UnstakedGENZ","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"value","type":"uint256"}],"name":"UpdatedMinStakingAmount","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"timeInMinutes","type":"uint256"}],"name":"UpdatedWithdrawTimer","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"__BaseUpgradeablePausable_init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"activateWithdrawalTimer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"calculateRewards","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakerClaimedRewardInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getUserStakedGENZBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVersionID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isAdmin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"timeInMinutes","type":"uint256"}],"name":"setWithdrawTime","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"stakeGENZ","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalTokensStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"updateMinimumStakeAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"withdrawGENZ","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_4920":{"entryPoint":null,"id":4920,"parameterSlots":2,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":234,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":293,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256_fromMemory":{"entryPoint":316,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":434,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":188,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":156,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":257,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":387,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":151,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":208,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":267,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:2255:26","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:26","statements":[{"nodeType":"YulAssignment","src":"57:19:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:26","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:26"},"nodeType":"YulFunctionCall","src":"67:9:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:26"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:26","type":""}],"src":"7:75:26"},{"body":{"nodeType":"YulBlock","src":"177:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:26"},"nodeType":"YulFunctionCall","src":"187:12:26"},"nodeType":"YulExpressionStatement","src":"187:12:26"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:26"},{"body":{"nodeType":"YulBlock","src":"300:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:26"},"nodeType":"YulFunctionCall","src":"310:12:26"},"nodeType":"YulExpressionStatement","src":"310:12:26"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:26"},{"body":{"nodeType":"YulBlock","src":"379:81:26","statements":[{"nodeType":"YulAssignment","src":"389:65:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:26"},"nodeType":"YulFunctionCall","src":"400:54:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:26"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:26","type":""}],"src":"334:126:26"},{"body":{"nodeType":"YulBlock","src":"511:51:26","statements":[{"nodeType":"YulAssignment","src":"521:35:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:26"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:26"},"nodeType":"YulFunctionCall","src":"532:24:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:26"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:26","type":""}],"src":"466:96:26"},{"body":{"nodeType":"YulBlock","src":"611:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:26"},"nodeType":"YulFunctionCall","src":"670:12:26"},"nodeType":"YulExpressionStatement","src":"670:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"634:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"659:5:26"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"641:17:26"},"nodeType":"YulFunctionCall","src":"641:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"631:2:26"},"nodeType":"YulFunctionCall","src":"631:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"624:6:26"},"nodeType":"YulFunctionCall","src":"624:43:26"},"nodeType":"YulIf","src":"621:63:26"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"604:5:26","type":""}],"src":"568:122:26"},{"body":{"nodeType":"YulBlock","src":"759:80:26","statements":[{"nodeType":"YulAssignment","src":"769:22:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"784:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"778:5:26"},"nodeType":"YulFunctionCall","src":"778:13:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"769:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"827:5:26"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"800:26:26"},"nodeType":"YulFunctionCall","src":"800:33:26"},"nodeType":"YulExpressionStatement","src":"800:33:26"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"737:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"745:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"753:5:26","type":""}],"src":"696:143:26"},{"body":{"nodeType":"YulBlock","src":"890:32:26","statements":[{"nodeType":"YulAssignment","src":"900:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"911:5:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"900:7:26"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"872:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"882:7:26","type":""}],"src":"845:77:26"},{"body":{"nodeType":"YulBlock","src":"971:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"1028:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1037:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1040:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1030:6:26"},"nodeType":"YulFunctionCall","src":"1030:12:26"},"nodeType":"YulExpressionStatement","src":"1030:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"994:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1019:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1001:17:26"},"nodeType":"YulFunctionCall","src":"1001:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"991:2:26"},"nodeType":"YulFunctionCall","src":"991:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"984:6:26"},"nodeType":"YulFunctionCall","src":"984:43:26"},"nodeType":"YulIf","src":"981:63:26"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"964:5:26","type":""}],"src":"928:122:26"},{"body":{"nodeType":"YulBlock","src":"1119:80:26","statements":[{"nodeType":"YulAssignment","src":"1129:22:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1144:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1138:5:26"},"nodeType":"YulFunctionCall","src":"1138:13:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1129:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1187:5:26"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1160:26:26"},"nodeType":"YulFunctionCall","src":"1160:33:26"},"nodeType":"YulExpressionStatement","src":"1160:33:26"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1097:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"1105:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1113:5:26","type":""}],"src":"1056:143:26"},{"body":{"nodeType":"YulBlock","src":"1299:413:26","statements":[{"body":{"nodeType":"YulBlock","src":"1345:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1347:77:26"},"nodeType":"YulFunctionCall","src":"1347:79:26"},"nodeType":"YulExpressionStatement","src":"1347:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1320:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"1329:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1316:3:26"},"nodeType":"YulFunctionCall","src":"1316:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"1341:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1312:3:26"},"nodeType":"YulFunctionCall","src":"1312:32:26"},"nodeType":"YulIf","src":"1309:119:26"},{"nodeType":"YulBlock","src":"1438:128:26","statements":[{"nodeType":"YulVariableDeclaration","src":"1453:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"1467:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1457:6:26","type":""}]},{"nodeType":"YulAssignment","src":"1482:74:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1528:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"1539:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1524:3:26"},"nodeType":"YulFunctionCall","src":"1524:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1548:7:26"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1492:31:26"},"nodeType":"YulFunctionCall","src":"1492:64:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1482:6:26"}]}]},{"nodeType":"YulBlock","src":"1576:129:26","statements":[{"nodeType":"YulVariableDeclaration","src":"1591:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"1605:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1595:6:26","type":""}]},{"nodeType":"YulAssignment","src":"1621:74:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1667:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"1678:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1663:3:26"},"nodeType":"YulFunctionCall","src":"1663:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1687:7:26"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"1631:31:26"},"nodeType":"YulFunctionCall","src":"1631:64:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1621:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1261:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1272:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1284:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1292:6:26","type":""}],"src":"1205:507:26"},{"body":{"nodeType":"YulBlock","src":"1746:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1763:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1766:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1756:6:26"},"nodeType":"YulFunctionCall","src":"1756:88:26"},"nodeType":"YulExpressionStatement","src":"1756:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1860:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1863:4:26","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1853:6:26"},"nodeType":"YulFunctionCall","src":"1853:15:26"},"nodeType":"YulExpressionStatement","src":"1853:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1884:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1887:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1877:6:26"},"nodeType":"YulFunctionCall","src":"1877:15:26"},"nodeType":"YulExpressionStatement","src":"1877:15:26"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"1718:180:26"},{"body":{"nodeType":"YulBlock","src":"1952:300:26","statements":[{"nodeType":"YulAssignment","src":"1962:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"1985:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1967:17:26"},"nodeType":"YulFunctionCall","src":"1967:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"1962:1:26"}]},{"nodeType":"YulAssignment","src":"1996:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"2019:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2001:17:26"},"nodeType":"YulFunctionCall","src":"2001:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"1996:1:26"}]},{"body":{"nodeType":"YulBlock","src":"2194:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"2196:16:26"},"nodeType":"YulFunctionCall","src":"2196:18:26"},"nodeType":"YulExpressionStatement","src":"2196:18:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2106:1:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2099:6:26"},"nodeType":"YulFunctionCall","src":"2099:9:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2092:6:26"},"nodeType":"YulFunctionCall","src":"2092:17:26"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"2114:1:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2121:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"x","nodeType":"YulIdentifier","src":"2189:1:26"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2117:3:26"},"nodeType":"YulFunctionCall","src":"2117:74:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2111:2:26"},"nodeType":"YulFunctionCall","src":"2111:81:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2088:3:26"},"nodeType":"YulFunctionCall","src":"2088:105:26"},"nodeType":"YulIf","src":"2085:131:26"},{"nodeType":"YulAssignment","src":"2226:20:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2241:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"2244:1:26"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2237:3:26"},"nodeType":"YulFunctionCall","src":"2237:9:26"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"2226:7:26"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"1935:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"1938:1:26","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"1944:7:26","type":""}],"src":"1904:348:26"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n}\n","id":26,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x31B6 CODESIZE SUB DUP1 PUSH3 0x31B6 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x13C JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH1 0xFC DUP2 SWAP1 SSTORE POP PUSH1 0x3C DUP2 PUSH3 0x55 SWAP2 SWAP1 PUSH3 0x1B2 JUMP JUMPDEST PUSH1 0xFD DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP POP PUSH3 0x213 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xC9 DUP3 PUSH3 0x9C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0xDB DUP2 PUSH3 0xBC JUMP JUMPDEST DUP2 EQ PUSH3 0xE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0xFB DUP2 PUSH3 0xD0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x116 DUP2 PUSH3 0x101 JUMP JUMPDEST DUP2 EQ PUSH3 0x122 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x136 DUP2 PUSH3 0x10B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x156 JUMPI PUSH3 0x155 PUSH3 0x97 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x166 DUP6 DUP3 DUP7 ADD PUSH3 0xEA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH3 0x179 DUP6 DUP3 DUP7 ADD PUSH3 0x125 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x1BF DUP3 PUSH3 0x101 JUMP JUMPDEST SWAP2 POP PUSH3 0x1CC DUP4 PUSH3 0x101 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH3 0x208 JUMPI PUSH3 0x207 PUSH3 0x183 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x2F80 PUSH3 0x236 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x793 ADD MSTORE PUSH2 0x117C ADD MSTORE PUSH2 0x2F80 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E810B1A GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xA217FDDF GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x34F JUMPI DUP1 PUSH4 0xB0E31B2D EQ PUSH2 0x36D JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x38B JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x3A9 JUMPI DUP1 PUSH4 0xD6FB97A5 EQ PUSH2 0x3C5 JUMPI DUP1 PUSH4 0xED0CDB1A EQ PUSH2 0x3F5 JUMPI PUSH2 0x142 JUMP JUMPDEST DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x2BF JUMPI DUP1 PUSH4 0x77539417 EQ PUSH2 0x2DB JUMPI DUP1 PUSH4 0x77C379A4 EQ PUSH2 0x2F7 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x315 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x31F JUMPI PUSH2 0x142 JUMP JUMPDEST DUP1 PUSH4 0x3E50DE30 GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x3E50DE30 EQ PUSH2 0x20F JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x22D JUMPI DUP1 PUSH4 0x53B3AD7F EQ PUSH2 0x237 JUMPI DUP1 PUSH4 0x58418587 EQ PUSH2 0x255 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x271 JUMPI DUP1 PUSH4 0x6C64F0B4 EQ PUSH2 0x28F JUMPI PUSH2 0x142 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x60E5C6E EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1F3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x161 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x15C SWAP2 SWAP1 PUSH2 0x22EB JUMP JUMPDEST PUSH2 0x413 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16E SWAP2 SWAP1 PUSH2 0x2333 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x191 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18C SWAP2 SWAP1 PUSH2 0x2384 JUMP JUMPDEST PUSH2 0x48D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19E SWAP2 SWAP1 PUSH2 0x2333 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BC SWAP2 SWAP1 PUSH2 0x23E7 JUMP JUMPDEST PUSH2 0x83E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CE SWAP2 SWAP1 PUSH2 0x2423 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EC SWAP2 SWAP1 PUSH2 0x249C JUMP JUMPDEST PUSH2 0x85E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x20D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x208 SWAP2 SWAP1 PUSH2 0x249C JUMP JUMPDEST PUSH2 0x87F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x217 PUSH2 0x902 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x224 SWAP2 SWAP1 PUSH2 0x24EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x235 PUSH2 0xAAE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x23F PUSH2 0xAFF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24C SWAP2 SWAP1 PUSH2 0x24EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x26F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x26A SWAP2 SWAP1 PUSH2 0x2384 JUMP JUMPDEST PUSH2 0xB51 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x279 PUSH2 0xBDB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x286 SWAP2 SWAP1 PUSH2 0x2333 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A4 SWAP2 SWAP1 PUSH2 0x2384 JUMP JUMPDEST PUSH2 0xBF2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B6 SWAP2 SWAP1 PUSH2 0x2333 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2D9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D4 SWAP2 SWAP1 PUSH2 0x2506 JUMP JUMPDEST PUSH2 0xD3E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2F5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2F0 SWAP2 SWAP1 PUSH2 0x2384 JUMP JUMPDEST PUSH2 0xE60 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2FF PUSH2 0xEDE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30C SWAP2 SWAP1 PUSH2 0x24EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31D PUSH2 0xEE8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x339 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x334 SWAP2 SWAP1 PUSH2 0x249C JUMP JUMPDEST PUSH2 0xF39 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x346 SWAP2 SWAP1 PUSH2 0x2333 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x357 PUSH2 0xFA4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x364 SWAP2 SWAP1 PUSH2 0x2423 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x375 PUSH2 0xFAB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x382 SWAP2 SWAP1 PUSH2 0x24EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x393 PUSH2 0xFB1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A0 SWAP2 SWAP1 PUSH2 0x2333 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3C3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3BE SWAP2 SWAP1 PUSH2 0x249C JUMP JUMPDEST PUSH2 0xFD0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3DF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3DA SWAP2 SWAP1 PUSH2 0x2384 JUMP JUMPDEST PUSH2 0xFF1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3EC SWAP2 SWAP1 PUSH2 0x2333 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3FD PUSH2 0x1228 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x40A SWAP2 SWAP1 PUSH2 0x24EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x486 JUMPI POP PUSH2 0x485 DUP3 PUSH2 0x12D3 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x497 PUSH2 0x133D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 PUSH1 0x0 PUSH2 0x4A6 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP3 DUP2 PUSH1 0x1 ADD SLOAD LT DUP1 PUSH2 0x53C JUMPI POP PUSH1 0xFF PUSH1 0x0 PUSH2 0x4FB PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD TIMESTAMP LT JUMPDEST DUP1 PUSH2 0x58F JUMPI POP PUSH1 0xFF PUSH1 0x0 PUSH2 0x54E PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD DUP4 GT JUMPDEST ISZERO PUSH2 0x5C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x71A61D9D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xFB PUSH1 0x0 DUP2 SLOAD PUSH2 0x5D5 SWAP1 PUSH2 0x2562 JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0xFE PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x5EE SWAP2 SWAP1 PUSH2 0x25AA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x609 SWAP2 SWAP1 PUSH2 0x25AA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH2 0x102 PUSH1 0x0 PUSH2 0x61E PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH1 0xFB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0xFF PUSH1 0x0 PUSH2 0x67F PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SUB PUSH2 0x725 JUMPI PUSH1 0x0 PUSH1 0xFF PUSH1 0x0 PUSH2 0x6D0 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST DUP3 PUSH1 0xFF PUSH1 0x0 PUSH2 0x732 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x77E SWAP2 SWAP1 PUSH2 0x25AA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x7D7 PUSH2 0x790 PUSH2 0x138C JUMP JUMPDEST DUP5 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1394 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x7DF PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x33ACB29A4BA6D440DA1A7BA75E505A000B362F21A991B589437F8F04DD98FD6B DUP5 PUSH1 0x40 MLOAD PUSH2 0x824 SWAP2 SWAP1 PUSH2 0x24EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP2 POP POP PUSH2 0x839 PUSH2 0x141A JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x867 DUP3 PUSH2 0x83E JUMP JUMPDEST PUSH2 0x870 DUP2 PUSH2 0x1424 JUMP JUMPDEST PUSH2 0x87A DUP4 DUP4 PUSH2 0x1438 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x887 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x8F4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8EB SWAP1 PUSH2 0x2661 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8FE DUP3 DUP3 PUSH2 0x1519 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x0 PUSH2 0x913 PUSH2 0x15FB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x92B JUMPI PUSH2 0x92A PUSH2 0x2681 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 SWAP1 POP JUMPDEST PUSH1 0xFB SLOAD DUP2 GT PUSH2 0xAA2 JUMPI PUSH1 0x0 PUSH2 0x102 PUSH1 0x0 PUSH2 0x956 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP DUP2 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x9D6 JUMPI PUSH2 0x9D5 PUSH2 0x2681 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SUB PUSH2 0xA27 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD GT ISZERO PUSH2 0xA07 JUMPI DUP1 PUSH1 0x0 ADD MLOAD DUP8 PUSH2 0xA00 SWAP2 SWAP1 PUSH2 0x26B0 JUMP JUMPDEST SWAP7 POP PUSH2 0xA1A JUMP JUMPDEST DUP1 PUSH1 0x20 ADD MLOAD DUP8 PUSH2 0xA17 SWAP2 SWAP1 PUSH2 0x25AA JUMP JUMPDEST SWAP7 POP JUMPDEST DUP3 PUSH2 0xA24 SWAP1 PUSH2 0x2562 JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD DUP3 PUSH1 0x1 ADD SLOAD PUSH2 0xA55 SWAP2 SWAP1 PUSH2 0x25AA JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x3 ADD SLOAD DUP3 PUSH1 0x2 ADD SLOAD DUP11 DUP4 PUSH2 0xA6D SWAP2 SWAP1 PUSH2 0x26E4 JUMP JUMPDEST PUSH2 0xA77 SWAP2 SWAP1 PUSH2 0x26E4 JUMP JUMPDEST PUSH2 0xA81 SWAP2 SWAP1 PUSH2 0x276D JUMP JUMPDEST DUP7 PUSH2 0xA8C SWAP2 SWAP1 PUSH2 0x26B0 JUMP JUMPDEST SWAP6 POP DUP4 PUSH2 0xA98 SWAP1 PUSH2 0x2562 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x93E JUMP JUMPDEST POP DUP2 SWAP6 POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0xAB6 PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0xAF5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAEC SWAP1 PUSH2 0x2810 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAFD PUSH2 0x18B6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 PUSH1 0x0 PUSH2 0xB0E PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xB59 PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0xB98 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB8F SWAP1 PUSH2 0x2810 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3C DUP2 PUSH2 0xBA5 SWAP2 SWAP1 PUSH2 0x26E4 JUMP JUMPDEST PUSH1 0xFD DUP2 SWAP1 SSTORE POP DUP1 PUSH32 0xC43E5DB88F387521ADFB9F79C0C9EFD47004DC3A041358383ECCCB1A1509DBF6 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF PUSH1 0x0 PUSH2 0xC00 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 PUSH2 0xC9F JUMPI POP DUP2 PUSH1 0xFF PUSH1 0x0 PUSH2 0xC5F PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD LT JUMPDEST ISZERO PUSH2 0xD34 JUMPI PUSH1 0x0 PUSH1 0xFF PUSH1 0x0 PUSH2 0xCB2 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP3 DUP2 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP TIMESTAMP PUSH1 0xFD SLOAD PUSH2 0xD22 SWAP2 SWAP1 PUSH2 0x26B0 JUMP JUMPDEST DUP2 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 SWAP2 POP POP PUSH2 0xD39 JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xD8D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD84 SWAP1 PUSH2 0x28A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xDF3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDFB PUSH2 0x1919 JUMP JUMPDEST PUSH2 0xE03 PUSH2 0x1972 JUMP JUMPDEST PUSH2 0xE0B PUSH2 0x19C3 JUMP JUMPDEST PUSH2 0xE1C PUSH2 0xE16 PUSH2 0x1A1C JUMP JUMPDEST DUP3 PUSH2 0x1438 JUMP JUMPDEST PUSH2 0xE2D PUSH2 0xE27 PUSH2 0x1A44 JUMP JUMPDEST DUP3 PUSH2 0x1438 JUMP JUMPDEST PUSH2 0xE45 PUSH2 0xE38 PUSH2 0x1A44 JUMP JUMPDEST PUSH2 0xE40 PUSH2 0x1A1C JUMP JUMPDEST PUSH2 0x1A6C JUMP JUMPDEST PUSH2 0xE5D PUSH2 0xE50 PUSH2 0x1A1C JUMP JUMPDEST PUSH2 0xE58 PUSH2 0x1A1C JUMP JUMPDEST PUSH2 0x1A6C JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xE68 PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0xEA7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE9E SWAP1 PUSH2 0x2810 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xFC DUP2 SWAP1 SSTORE POP DUP1 PUSH32 0x4E84E59515FA6D59EEDD951D065C81F1962F0E5132F2E9120B47D64C7B33A177 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFB SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xEF0 PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0xF2F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF26 SWAP1 PUSH2 0x2810 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF37 PUSH2 0x1AC8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0xFE SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFCB PUSH2 0xFBE PUSH2 0x1A1C JUMP JUMPDEST PUSH2 0xFC6 PUSH2 0x138C JUMP JUMPDEST PUSH2 0xF39 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xFD9 DUP3 PUSH2 0x83E JUMP JUMPDEST PUSH2 0xFE2 DUP2 PUSH2 0x1424 JUMP JUMPDEST PUSH2 0xFEC DUP4 DUP4 PUSH2 0x1519 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFB PUSH2 0x133D JUMP JUMPDEST PUSH1 0xFC SLOAD DUP3 LT ISZERO PUSH2 0x1037 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAD40140300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xFB PUSH1 0x0 DUP2 SLOAD PUSH2 0x1046 SWAP1 PUSH2 0x2562 JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x100 PUSH1 0x0 PUSH2 0x105C PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x10D7 JUMPI PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xFB SLOAD DUP2 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP JUMPDEST DUP3 DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x10EB SWAP2 SWAP1 PUSH2 0x26B0 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH2 0x102 PUSH1 0x0 PUSH2 0x1100 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH1 0xFB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0xFE PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1166 SWAP2 SWAP1 PUSH2 0x26B0 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x11C1 PUSH2 0x1178 PUSH2 0x138C JUMP JUMPDEST ADDRESS DUP6 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1B2B SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x11C9 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF1E64F5AB94083442836AE6EF7E94101F7FCC786C3E761B00D5F4E10C6C20196 DUP5 PUSH1 0x40 MLOAD PUSH2 0x120E SWAP2 SWAP1 PUSH2 0x24EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP2 POP POP PUSH2 0x1223 PUSH2 0x141A JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x100 PUSH1 0x0 PUSH2 0x1238 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD GT PUSH2 0x1282 JUMPI PUSH1 0x0 PUSH2 0x12CE JUMP JUMPDEST PUSH2 0x100 PUSH1 0x0 PUSH2 0x128F PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0xC9 SLOAD SUB PUSH2 0x1382 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1379 SWAP1 PUSH2 0x290E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1415 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x13B3 SWAP3 SWAP2 SWAP1 PUSH2 0x293D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1BB4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x1435 DUP2 PUSH2 0x1430 PUSH2 0x138C JUMP JUMPDEST PUSH2 0x1C7B JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1442 DUP3 DUP3 PUSH2 0xF39 JUMP JUMPDEST PUSH2 0x1515 JUMPI PUSH1 0x1 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x14BA PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1523 DUP3 DUP3 PUSH2 0xF39 JUMP JUMPDEST ISZERO PUSH2 0x15F7 JUMPI PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x159C PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH2 0x100 PUSH1 0x0 PUSH2 0x160D PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x1657 PUSH2 0xEDE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 SWAP1 POP JUMPDEST DUP2 DUP2 GT PUSH2 0x1759 JUMPI PUSH1 0x0 PUSH2 0x102 PUSH1 0x0 PUSH2 0x1675 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD GT ISZERO PUSH2 0x16D7 JUMPI DUP4 PUSH2 0x16D4 SWAP1 PUSH2 0x2562 JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH1 0x0 PUSH2 0x102 PUSH1 0x0 PUSH2 0x16E6 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD GT ISZERO PUSH2 0x1748 JUMPI DUP4 PUSH2 0x1745 SWAP1 PUSH2 0x2562 JUMP JUMPDEST SWAP4 POP JUMPDEST DUP1 PUSH2 0x1752 SWAP1 PUSH2 0x2562 JUMP JUMPDEST SWAP1 POP PUSH2 0x165F JUMP JUMPDEST POP PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1776 JUMPI PUSH2 0x1775 PUSH2 0x2966 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x17A4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 DUP5 SWAP1 POP JUMPDEST DUP4 DUP2 GT PUSH2 0x18AA JUMPI PUSH1 0x0 PUSH2 0x102 PUSH1 0x0 PUSH2 0x17C4 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD GT ISZERO PUSH2 0x185E JUMPI DUP2 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1851 JUMPI PUSH2 0x1850 PUSH2 0x2681 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD GT ISZERO PUSH2 0x188C JUMPI DUP2 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x187F JUMPI PUSH2 0x187E PUSH2 0x2681 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST DUP3 PUSH2 0x1896 SWAP1 PUSH2 0x2562 JUMP JUMPDEST SWAP3 POP DUP2 PUSH2 0x18A2 SWAP1 PUSH2 0x2562 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x17AE JUMP JUMPDEST POP DUP2 SWAP6 POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x18BE PUSH2 0x1D00 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x1902 PUSH2 0x138C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x190F SWAP2 SWAP1 PUSH2 0x2995 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1968 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x195F SWAP1 PUSH2 0x28A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1970 PUSH2 0x1D49 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x19C1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19B8 SWAP1 PUSH2 0x28A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1A12 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A09 SWAP1 PUSH2 0x28A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1A1A PUSH2 0x1DB5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A77 DUP4 PUSH2 0x83E JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x97 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x1AD0 PUSH2 0x1E0E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x1B14 PUSH2 0x138C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B21 SWAP2 SWAP1 PUSH2 0x2995 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x1BAE DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1B4C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x29B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1BB4 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C16 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1E58 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x1C76 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1C36 SWAP2 SWAP1 PUSH2 0x2A13 JUMP JUMPDEST PUSH2 0x1C75 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6C SWAP1 PUSH2 0x2AB2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1C85 DUP3 DUP3 PUSH2 0xF39 JUMP JUMPDEST PUSH2 0x1CFC JUMPI PUSH2 0x1C92 DUP2 PUSH2 0x1E70 JUMP JUMPDEST PUSH2 0x1CA0 DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0x1E9D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1CB1 SWAP3 SWAP2 SWAP1 PUSH2 0x2BDB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CF3 SWAP2 SWAP1 PUSH2 0x2C5F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1D08 PUSH2 0xBDB JUMP JUMPDEST PUSH2 0x1D47 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D3E SWAP1 PUSH2 0x2CCD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1D98 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D8F SWAP1 PUSH2 0x28A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1E04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DFB SWAP1 PUSH2 0x28A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x1E16 PUSH2 0xBDB JUMP JUMPDEST ISZERO PUSH2 0x1E56 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E4D SWAP1 PUSH2 0x2D39 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1E67 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x20D9 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1E96 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0x1E9D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0x1EB0 SWAP2 SWAP1 PUSH2 0x26E4 JUMP JUMPDEST PUSH2 0x1EBA SWAP2 SWAP1 PUSH2 0x26B0 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1ED3 JUMPI PUSH2 0x1ED2 PUSH2 0x2966 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1F05 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1F3D JUMPI PUSH2 0x1F3C PUSH2 0x2681 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1FA1 JUMPI PUSH2 0x1FA0 PUSH2 0x2681 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0x1FE1 SWAP2 SWAP1 PUSH2 0x26E4 JUMP JUMPDEST PUSH2 0x1FEB SWAP2 SWAP1 PUSH2 0x26B0 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x208B JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0x202D JUMPI PUSH2 0x202C PUSH2 0x2681 JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2044 JUMPI PUSH2 0x2043 PUSH2 0x2681 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0x2084 SWAP1 PUSH2 0x2D59 JUMP JUMPDEST SWAP1 POP PUSH2 0x1FEE JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0x20CF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C6 SWAP1 PUSH2 0x2DCE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x211E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2115 SWAP1 PUSH2 0x2E60 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x2147 SWAP2 SWAP1 PUSH2 0x2EC7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2184 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2189 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x219A DUP8 DUP4 DUP4 DUP8 PUSH2 0x21A6 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x2208 JUMPI PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x2200 JUMPI PUSH2 0x21C0 DUP6 PUSH2 0x221B JUMP JUMPDEST PUSH2 0x21FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x21F6 SWAP1 PUSH2 0x2F2A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x2213 JUMP JUMPDEST PUSH2 0x2212 DUP4 DUP4 PUSH2 0x223E JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x2251 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2285 SWAP2 SWAP1 PUSH2 0x2C5F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22C8 DUP2 PUSH2 0x2293 JUMP JUMPDEST DUP2 EQ PUSH2 0x22D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x22E5 DUP2 PUSH2 0x22BF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2301 JUMPI PUSH2 0x2300 PUSH2 0x228E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x230F DUP5 DUP3 DUP6 ADD PUSH2 0x22D6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x232D DUP2 PUSH2 0x2318 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2348 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2324 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2361 DUP2 PUSH2 0x234E JUMP JUMPDEST DUP2 EQ PUSH2 0x236C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x237E DUP2 PUSH2 0x2358 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x239A JUMPI PUSH2 0x2399 PUSH2 0x228E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x23A8 DUP5 DUP3 DUP6 ADD PUSH2 0x236F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x23C4 DUP2 PUSH2 0x23B1 JUMP JUMPDEST DUP2 EQ PUSH2 0x23CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x23E1 DUP2 PUSH2 0x23BB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23FD JUMPI PUSH2 0x23FC PUSH2 0x228E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x240B DUP5 DUP3 DUP6 ADD PUSH2 0x23D2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x241D DUP2 PUSH2 0x23B1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2438 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2414 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2469 DUP3 PUSH2 0x243E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2479 DUP2 PUSH2 0x245E JUMP JUMPDEST DUP2 EQ PUSH2 0x2484 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2496 DUP2 PUSH2 0x2470 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24B3 JUMPI PUSH2 0x24B2 PUSH2 0x228E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x24C1 DUP6 DUP3 DUP7 ADD PUSH2 0x23D2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x24D2 DUP6 DUP3 DUP7 ADD PUSH2 0x2487 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x24E5 DUP2 PUSH2 0x234E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2500 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x24DC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x251C JUMPI PUSH2 0x251B PUSH2 0x228E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x252A DUP5 DUP3 DUP6 ADD PUSH2 0x2487 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x256D DUP3 PUSH2 0x234E JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x259F JUMPI PUSH2 0x259E PUSH2 0x2533 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25B5 DUP3 PUSH2 0x234E JUMP JUMPDEST SWAP2 POP PUSH2 0x25C0 DUP4 PUSH2 0x234E JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x25D8 JUMPI PUSH2 0x25D7 PUSH2 0x2533 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x264B PUSH1 0x2F DUP4 PUSH2 0x25DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2656 DUP3 PUSH2 0x25EF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x267A DUP2 PUSH2 0x263E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x26BB DUP3 PUSH2 0x234E JUMP JUMPDEST SWAP2 POP PUSH2 0x26C6 DUP4 PUSH2 0x234E JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x26DE JUMPI PUSH2 0x26DD PUSH2 0x2533 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26EF DUP3 PUSH2 0x234E JUMP JUMPDEST SWAP2 POP PUSH2 0x26FA DUP4 PUSH2 0x234E JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2733 JUMPI PUSH2 0x2732 PUSH2 0x2533 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2778 DUP3 PUSH2 0x234E JUMP JUMPDEST SWAP2 POP PUSH2 0x2783 DUP4 PUSH2 0x234E JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2793 JUMPI PUSH2 0x2792 PUSH2 0x273E JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D75737420686176652061646D696E20726F6C6520746F20706572666F726D20 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7468697320616374696F6E2E0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27FA PUSH1 0x2C DUP4 PUSH2 0x25DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2805 DUP3 PUSH2 0x279E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2829 DUP2 PUSH2 0x27ED JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x288C PUSH1 0x2B DUP4 PUSH2 0x25DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2897 DUP3 PUSH2 0x2830 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x28BB DUP2 PUSH2 0x287F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28F8 PUSH1 0x1F DUP4 PUSH2 0x25DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2903 DUP3 PUSH2 0x28C2 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2927 DUP2 PUSH2 0x28EB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2937 DUP2 PUSH2 0x245E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2952 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x292E JUMP JUMPDEST PUSH2 0x295F PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x24DC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x29AA PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x292E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x29C5 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x292E JUMP JUMPDEST PUSH2 0x29D2 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x292E JUMP JUMPDEST PUSH2 0x29DF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x24DC JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x29F0 DUP2 PUSH2 0x2318 JUMP JUMPDEST DUP2 EQ PUSH2 0x29FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2A0D DUP2 PUSH2 0x29E7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A29 JUMPI PUSH2 0x2A28 PUSH2 0x228E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2A37 DUP5 DUP3 DUP6 ADD PUSH2 0x29FE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A9C PUSH1 0x2A DUP4 PUSH2 0x25DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2AA7 DUP3 PUSH2 0x2A40 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2ACB DUP2 PUSH2 0x2A8F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B13 PUSH1 0x17 DUP4 PUSH2 0x2AD2 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B1E DUP3 PUSH2 0x2ADD JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2B52 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2B37 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B69 DUP3 PUSH2 0x2B29 JUMP JUMPDEST PUSH2 0x2B73 DUP2 DUP6 PUSH2 0x2AD2 JUMP JUMPDEST SWAP4 POP PUSH2 0x2B83 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2B34 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BC5 PUSH1 0x11 DUP4 PUSH2 0x2AD2 JUMP JUMPDEST SWAP2 POP PUSH2 0x2BD0 DUP3 PUSH2 0x2B8F JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BE6 DUP3 PUSH2 0x2B06 JUMP JUMPDEST SWAP2 POP PUSH2 0x2BF2 DUP3 DUP6 PUSH2 0x2B5E JUMP JUMPDEST SWAP2 POP PUSH2 0x2BFD DUP3 PUSH2 0x2BB8 JUMP JUMPDEST SWAP2 POP PUSH2 0x2C09 DUP3 DUP5 PUSH2 0x2B5E JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C31 DUP3 PUSH2 0x2B29 JUMP JUMPDEST PUSH2 0x2C3B DUP2 DUP6 PUSH2 0x25DE JUMP JUMPDEST SWAP4 POP PUSH2 0x2C4B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2B34 JUMP JUMPDEST PUSH2 0x2C54 DUP2 PUSH2 0x2C15 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C79 DUP2 DUP5 PUSH2 0x2C26 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CB7 PUSH1 0x14 DUP4 PUSH2 0x25DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2CC2 DUP3 PUSH2 0x2C81 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CE6 DUP2 PUSH2 0x2CAA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D23 PUSH1 0x10 DUP4 PUSH2 0x25DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2D2E DUP3 PUSH2 0x2CED JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D52 DUP2 PUSH2 0x2D16 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D64 DUP3 PUSH2 0x234E JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x2D77 JUMPI PUSH2 0x2D76 PUSH2 0x2533 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DB8 PUSH1 0x20 DUP4 PUSH2 0x25DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2DC3 DUP3 PUSH2 0x2D82 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2DE7 DUP2 PUSH2 0x2DAB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E4A PUSH1 0x26 DUP4 PUSH2 0x25DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2E55 DUP3 PUSH2 0x2DEE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E79 DUP2 PUSH2 0x2E3D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EA1 DUP3 PUSH2 0x2E80 JUMP JUMPDEST PUSH2 0x2EAB DUP2 DUP6 PUSH2 0x2E8B JUMP JUMPDEST SWAP4 POP PUSH2 0x2EBB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2B34 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2ED3 DUP3 DUP5 PUSH2 0x2E96 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F14 PUSH1 0x1D DUP4 PUSH2 0x25DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2F1F DUP3 PUSH2 0x2EDE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F43 DUP2 PUSH2 0x2F07 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE 0xB6 ORIGIN 0xB1 RETURN EXTCODECOPY CODECOPY 0x21 0xEF DUP6 CALLDATASIZE 0xAC PUSH30 0xDDF1E7525FA1C155C91F42ACDC817EEF78C3EE64736F6C63430008100033 ","sourceMap":"765:7109:19:-:0;;;2126:235;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2234:4;2217:14;:21;;;;2278:9;2265:10;:22;;;;:::i;:::-;2248:14;:39;;;;2328:16;2297:48;;;;;;;;;;2126:235;;765:7109;;88:117:26;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:77::-;882:7;911:5;900:16;;845:77;;;:::o;928:122::-;1001:24;1019:5;1001:24;:::i;:::-;994:5;991:35;981:63;;1040:1;1037;1030:12;981:63;928:122;:::o;1056:143::-;1113:5;1144:6;1138:13;1129:22;;1160:33;1187:5;1160:33;:::i;:::-;1056:143;;;;:::o;1205:507::-;1284:6;1292;1341:2;1329:9;1320:7;1316:23;1312:32;1309:119;;;1347:79;;:::i;:::-;1309:119;1467:1;1492:64;1548:7;1539:6;1528:9;1524:22;1492:64;:::i;:::-;1482:74;;1438:128;1605:2;1631:64;1687:7;1678:6;1667:9;1663:22;1631:64;:::i;:::-;1621:74;;1576:129;1205:507;;;;;:::o;1718:180::-;1766:77;1763:1;1756:88;1863:4;1860:1;1853:15;1887:4;1884:1;1877:15;1904:348;1944:7;1967:20;1985:1;1967:20;:::i;:::-;1962:25;;2001:20;2019:1;2001:20;:::i;:::-;1996:25;;2189:1;2121:66;2117:74;2114:1;2111:81;2106:1;2099:9;2092:17;2088:105;2085:131;;;2196:18;;:::i;:::-;2085:131;2244:1;2241;2237:9;2226:20;;1904:348;;;;:::o;765:7109:19:-;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEFAULT_ADMIN_ROLE_42":{"entryPoint":4004,"id":42,"parameterSlots":0,"returnSlots":0},"@__AccessControl_init_21":{"entryPoint":6514,"id":21,"parameterSlots":0,"returnSlots":0},"@__BaseUpgradeablePausable_init_2684":{"entryPoint":3390,"id":2684,"parameterSlots":1,"returnSlots":0},"@__Pausable_init_611":{"entryPoint":6425,"id":611,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_unchained_621":{"entryPoint":7497,"id":621,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_730":{"entryPoint":6595,"id":730,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_unchained_740":{"entryPoint":7605,"id":740,"parameterSlots":0,"returnSlots":0},"@_callOptionalReturn_1174":{"entryPoint":7092,"id":1174,"parameterSlots":2,"returnSlots":0},"@_checkRole_107":{"entryPoint":5156,"id":107,"parameterSlots":1,"returnSlots":0},"@_checkRole_146":{"entryPoint":7291,"id":146,"parameterSlots":2,"returnSlots":0},"@_grantRole_298":{"entryPoint":5176,"id":298,"parameterSlots":2,"returnSlots":0},"@_msgSender_1486":{"entryPoint":5004,"id":1486,"parameterSlots":0,"returnSlots":1},"@_nonReentrantAfter_774":{"entryPoint":5146,"id":774,"parameterSlots":0,"returnSlots":0},"@_nonReentrantBefore_766":{"entryPoint":4925,"id":766,"parameterSlots":0,"returnSlots":0},"@_pause_685":{"entryPoint":6856,"id":685,"parameterSlots":0,"returnSlots":0},"@_requireNotPaused_658":{"entryPoint":7694,"id":658,"parameterSlots":0,"returnSlots":0},"@_requirePaused_669":{"entryPoint":7424,"id":669,"parameterSlots":0,"returnSlots":0},"@_revert_1458":{"entryPoint":8766,"id":1458,"parameterSlots":2,"returnSlots":0},"@_revokeRole_329":{"entryPoint":5401,"id":329,"parameterSlots":2,"returnSlots":0},"@_setRoleAdmin_266":{"entryPoint":6764,"id":266,"parameterSlots":2,"returnSlots":0},"@_unpause_701":{"entryPoint":6326,"id":701,"parameterSlots":0,"returnSlots":0},"@activateWithdrawalTimer_5121":{"entryPoint":3058,"id":5121,"parameterSlots":1,"returnSlots":1},"@calculateRewards_5484":{"entryPoint":2306,"id":5484,"parameterSlots":0,"returnSlots":1},"@functionCallWithValue_1329":{"entryPoint":8409,"id":1329,"parameterSlots":4,"returnSlots":1},"@functionCall_1265":{"entryPoint":7768,"id":1265,"parameterSlots":3,"returnSlots":1},"@getActiveVersionID_5371":{"entryPoint":5627,"id":5371,"parameterSlots":0,"returnSlots":1},"@getAdminRole_2719":{"entryPoint":6684,"id":2719,"parameterSlots":0,"returnSlots":1},"@getPauserRole_2727":{"entryPoint":6724,"id":2727,"parameterSlots":0,"returnSlots":1},"@getRoleAdmin_161":{"entryPoint":2110,"id":161,"parameterSlots":1,"returnSlots":1},"@getStakerClaimedRewardInfo_5519":{"entryPoint":2815,"id":5519,"parameterSlots":0,"returnSlots":1},"@getUserStakedGENZBalance_5507":{"entryPoint":4648,"id":5507,"parameterSlots":0,"returnSlots":1},"@getVersionID_5241":{"entryPoint":3806,"id":5241,"parameterSlots":0,"returnSlots":1},"@grantRole_181":{"entryPoint":2142,"id":181,"parameterSlots":2,"returnSlots":0},"@hasRole_94":{"entryPoint":3897,"id":94,"parameterSlots":2,"returnSlots":1},"@isAdmin_2698":{"entryPoint":4017,"id":2698,"parameterSlots":0,"returnSlots":1},"@isContract_1193":{"entryPoint":8731,"id":1193,"parameterSlots":1,"returnSlots":1},"@pause_4929":{"entryPoint":3816,"id":4929,"parameterSlots":0,"returnSlots":0},"@paused_646":{"entryPoint":3035,"id":646,"parameterSlots":0,"returnSlots":1},"@renounceRole_224":{"entryPoint":2175,"id":224,"parameterSlots":2,"returnSlots":0},"@revokeRole_201":{"entryPoint":4048,"id":201,"parameterSlots":2,"returnSlots":0},"@safeTransferFrom_952":{"entryPoint":6955,"id":952,"parameterSlots":4,"returnSlots":0},"@safeTransfer_926":{"entryPoint":5012,"id":926,"parameterSlots":3,"returnSlots":0},"@setWithdrawTime_4973":{"entryPoint":2897,"id":4973,"parameterSlots":1,"returnSlots":0},"@stakeGENZ_5060":{"entryPoint":4081,"id":5060,"parameterSlots":1,"returnSlots":1},"@supportsInterface_1714":{"entryPoint":4819,"id":1714,"parameterSlots":1,"returnSlots":1},"@supportsInterface_75":{"entryPoint":1043,"id":75,"parameterSlots":1,"returnSlots":1},"@toHexString_1655":{"entryPoint":7837,"id":1655,"parameterSlots":2,"returnSlots":1},"@toHexString_1675":{"entryPoint":7792,"id":1675,"parameterSlots":1,"returnSlots":1},"@totalTokensStaked_4834":{"entryPoint":4011,"id":4834,"parameterSlots":0,"returnSlots":0},"@unpause_4938":{"entryPoint":2734,"id":4938,"parameterSlots":0,"returnSlots":0},"@updateMinimumStakeAmount_4954":{"entryPoint":3680,"id":4954,"parameterSlots":1,"returnSlots":0},"@verifyCallResultFromTarget_1414":{"entryPoint":8614,"id":1414,"parameterSlots":4,"returnSlots":1},"@withdrawGENZ_5233":{"entryPoint":1165,"id":5233,"parameterSlots":1,"returnSlots":1},"abi_decode_t_address":{"entryPoint":9351,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":10750,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":9170,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":8918,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":9071,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":9478,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":10771,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":9191,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":9372,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":8939,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":9092,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":10542,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":8996,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":9236,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":11926,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":11302,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":11102,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack":{"entryPoint":11691,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack":{"entryPoint":11434,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack":{"entryPoint":11837,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack":{"entryPoint":11542,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack":{"entryPoint":10221,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack":{"entryPoint":12039,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":10367,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":11014,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack":{"entryPoint":10895,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack":{"entryPoint":10475,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":11192,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack":{"entryPoint":9790,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":9436,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":11975,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":11227,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":10645,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":10672,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":10557,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":9011,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":9251,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11359,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11726,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11469,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11872,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11577,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10256,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12074,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10402,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10930,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10510,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9825,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":9451,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":11904,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":11049,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":11915,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":9694,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":10962,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":9904,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":10093,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":9956,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":9642,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":9310,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":8984,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":9137,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":8851,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":9278,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":9038,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":11060,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":11609,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":9570,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":9523,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":10046,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":9857,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":10598,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":8846,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":11285,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2":{"entryPoint":11650,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a":{"entryPoint":11393,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c":{"entryPoint":11758,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a":{"entryPoint":11501,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513":{"entryPoint":10142,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad":{"entryPoint":11998,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":10288,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874":{"entryPoint":10973,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd":{"entryPoint":10816,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619":{"entryPoint":10434,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69":{"entryPoint":11151,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b":{"entryPoint":9711,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":9328,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":10727,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":9147,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":8895,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":9048,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:23795:26","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:26","statements":[{"nodeType":"YulAssignment","src":"57:19:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:26","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:26"},"nodeType":"YulFunctionCall","src":"67:9:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:26"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:26","type":""}],"src":"7:75:26"},{"body":{"nodeType":"YulBlock","src":"177:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:26"},"nodeType":"YulFunctionCall","src":"187:12:26"},"nodeType":"YulExpressionStatement","src":"187:12:26"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:26"},{"body":{"nodeType":"YulBlock","src":"300:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:26"},"nodeType":"YulFunctionCall","src":"310:12:26"},"nodeType":"YulExpressionStatement","src":"310:12:26"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:26"},{"body":{"nodeType":"YulBlock","src":"378:105:26","statements":[{"nodeType":"YulAssignment","src":"388:89:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:26","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:26"},"nodeType":"YulFunctionCall","src":"399:78:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:26"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:26","type":""}],"src":"334:149:26"},{"body":{"nodeType":"YulBlock","src":"531:78:26","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:26"},"nodeType":"YulFunctionCall","src":"589:12:26"},"nodeType":"YulExpressionStatement","src":"589:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:26"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:26"},"nodeType":"YulFunctionCall","src":"561:23:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:26"},"nodeType":"YulFunctionCall","src":"551:34:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:26"},"nodeType":"YulFunctionCall","src":"544:42:26"},"nodeType":"YulIf","src":"541:62:26"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:26","type":""}],"src":"489:120:26"},{"body":{"nodeType":"YulBlock","src":"666:86:26","statements":[{"nodeType":"YulAssignment","src":"676:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:26"},"nodeType":"YulFunctionCall","src":"685:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:26"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:26"},"nodeType":"YulFunctionCall","src":"714:32:26"},"nodeType":"YulExpressionStatement","src":"714:32:26"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:26","type":""}],"src":"615:137:26"},{"body":{"nodeType":"YulBlock","src":"823:262:26","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:26"},"nodeType":"YulFunctionCall","src":"871:79:26"},"nodeType":"YulExpressionStatement","src":"871:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:26"},"nodeType":"YulFunctionCall","src":"840:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:26"},"nodeType":"YulFunctionCall","src":"836:32:26"},"nodeType":"YulIf","src":"833:119:26"},{"nodeType":"YulBlock","src":"962:116:26","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:26","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:26"},"nodeType":"YulFunctionCall","src":"1036:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:26"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:26"},"nodeType":"YulFunctionCall","src":"1016:52:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:26"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:26","type":""}],"src":"758:327:26"},{"body":{"nodeType":"YulBlock","src":"1133:48:26","statements":[{"nodeType":"YulAssignment","src":"1143:32:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:26"},"nodeType":"YulFunctionCall","src":"1161:13:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:26"},"nodeType":"YulFunctionCall","src":"1154:21:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:26"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:26","type":""}],"src":"1091:90:26"},{"body":{"nodeType":"YulBlock","src":"1246:50:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:26"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:26"},"nodeType":"YulFunctionCall","src":"1268:21:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:26"},"nodeType":"YulFunctionCall","src":"1256:34:26"},"nodeType":"YulExpressionStatement","src":"1256:34:26"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:26","type":""}],"src":"1187:109:26"},{"body":{"nodeType":"YulBlock","src":"1394:118:26","statements":[{"nodeType":"YulAssignment","src":"1404:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:26"},"nodeType":"YulFunctionCall","src":"1412:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:26"},"nodeType":"YulFunctionCall","src":"1487:17:26"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:26"},"nodeType":"YulFunctionCall","src":"1440:65:26"},"nodeType":"YulExpressionStatement","src":"1440:65:26"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:26","type":""}],"src":"1302:210:26"},{"body":{"nodeType":"YulBlock","src":"1563:32:26","statements":[{"nodeType":"YulAssignment","src":"1573:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"1584:5:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1573:7:26"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1545:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1555:7:26","type":""}],"src":"1518:77:26"},{"body":{"nodeType":"YulBlock","src":"1644:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"1701:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1710:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1713:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1703:6:26"},"nodeType":"YulFunctionCall","src":"1703:12:26"},"nodeType":"YulExpressionStatement","src":"1703:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1667:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1692:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1674:17:26"},"nodeType":"YulFunctionCall","src":"1674:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1664:2:26"},"nodeType":"YulFunctionCall","src":"1664:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1657:6:26"},"nodeType":"YulFunctionCall","src":"1657:43:26"},"nodeType":"YulIf","src":"1654:63:26"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1637:5:26","type":""}],"src":"1601:122:26"},{"body":{"nodeType":"YulBlock","src":"1781:87:26","statements":[{"nodeType":"YulAssignment","src":"1791:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1813:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1800:12:26"},"nodeType":"YulFunctionCall","src":"1800:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1791:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1856:5:26"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1829:26:26"},"nodeType":"YulFunctionCall","src":"1829:33:26"},"nodeType":"YulExpressionStatement","src":"1829:33:26"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1759:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"1767:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1775:5:26","type":""}],"src":"1729:139:26"},{"body":{"nodeType":"YulBlock","src":"1940:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"1986:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1988:77:26"},"nodeType":"YulFunctionCall","src":"1988:79:26"},"nodeType":"YulExpressionStatement","src":"1988:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1961:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"1970:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1957:3:26"},"nodeType":"YulFunctionCall","src":"1957:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"1982:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1953:3:26"},"nodeType":"YulFunctionCall","src":"1953:32:26"},"nodeType":"YulIf","src":"1950:119:26"},{"nodeType":"YulBlock","src":"2079:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2094:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"2108:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2098:6:26","type":""}]},{"nodeType":"YulAssignment","src":"2123:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2158:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"2169:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2154:3:26"},"nodeType":"YulFunctionCall","src":"2154:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2178:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2133:20:26"},"nodeType":"YulFunctionCall","src":"2133:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2123:6:26"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1910:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1921:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1933:6:26","type":""}],"src":"1874:329:26"},{"body":{"nodeType":"YulBlock","src":"2254:32:26","statements":[{"nodeType":"YulAssignment","src":"2264:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"2275:5:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2264:7:26"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2236:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2246:7:26","type":""}],"src":"2209:77:26"},{"body":{"nodeType":"YulBlock","src":"2335:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"2392:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2401:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2404:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2394:6:26"},"nodeType":"YulFunctionCall","src":"2394:12:26"},"nodeType":"YulExpressionStatement","src":"2394:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2358:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2383:5:26"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"2365:17:26"},"nodeType":"YulFunctionCall","src":"2365:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2355:2:26"},"nodeType":"YulFunctionCall","src":"2355:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2348:6:26"},"nodeType":"YulFunctionCall","src":"2348:43:26"},"nodeType":"YulIf","src":"2345:63:26"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2328:5:26","type":""}],"src":"2292:122:26"},{"body":{"nodeType":"YulBlock","src":"2472:87:26","statements":[{"nodeType":"YulAssignment","src":"2482:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2504:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2491:12:26"},"nodeType":"YulFunctionCall","src":"2491:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2482:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2547:5:26"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"2520:26:26"},"nodeType":"YulFunctionCall","src":"2520:33:26"},"nodeType":"YulExpressionStatement","src":"2520:33:26"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2450:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"2458:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2466:5:26","type":""}],"src":"2420:139:26"},{"body":{"nodeType":"YulBlock","src":"2631:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"2677:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2679:77:26"},"nodeType":"YulFunctionCall","src":"2679:79:26"},"nodeType":"YulExpressionStatement","src":"2679:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2652:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"2661:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2648:3:26"},"nodeType":"YulFunctionCall","src":"2648:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"2673:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2644:3:26"},"nodeType":"YulFunctionCall","src":"2644:32:26"},"nodeType":"YulIf","src":"2641:119:26"},{"nodeType":"YulBlock","src":"2770:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2785:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"2799:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2789:6:26","type":""}]},{"nodeType":"YulAssignment","src":"2814:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2849:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"2860:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2845:3:26"},"nodeType":"YulFunctionCall","src":"2845:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2869:7:26"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"2824:20:26"},"nodeType":"YulFunctionCall","src":"2824:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2814:6:26"}]}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2601:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2612:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2624:6:26","type":""}],"src":"2565:329:26"},{"body":{"nodeType":"YulBlock","src":"2965:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2982:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3005:5:26"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"2987:17:26"},"nodeType":"YulFunctionCall","src":"2987:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2975:6:26"},"nodeType":"YulFunctionCall","src":"2975:37:26"},"nodeType":"YulExpressionStatement","src":"2975:37:26"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2953:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2960:3:26","type":""}],"src":"2900:118:26"},{"body":{"nodeType":"YulBlock","src":"3122:124:26","statements":[{"nodeType":"YulAssignment","src":"3132:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3144:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3155:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3140:3:26"},"nodeType":"YulFunctionCall","src":"3140:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3132:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3212:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3225:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3236:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3221:3:26"},"nodeType":"YulFunctionCall","src":"3221:17:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"3168:43:26"},"nodeType":"YulFunctionCall","src":"3168:71:26"},"nodeType":"YulExpressionStatement","src":"3168:71:26"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3094:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3106:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3117:4:26","type":""}],"src":"3024:222:26"},{"body":{"nodeType":"YulBlock","src":"3297:81:26","statements":[{"nodeType":"YulAssignment","src":"3307:65:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3322:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"3329:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3318:3:26"},"nodeType":"YulFunctionCall","src":"3318:54:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3307:7:26"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3279:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3289:7:26","type":""}],"src":"3252:126:26"},{"body":{"nodeType":"YulBlock","src":"3429:51:26","statements":[{"nodeType":"YulAssignment","src":"3439:35:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3468:5:26"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3450:17:26"},"nodeType":"YulFunctionCall","src":"3450:24:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3439:7:26"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3411:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3421:7:26","type":""}],"src":"3384:96:26"},{"body":{"nodeType":"YulBlock","src":"3529:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"3586:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3595:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3598:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3588:6:26"},"nodeType":"YulFunctionCall","src":"3588:12:26"},"nodeType":"YulExpressionStatement","src":"3588:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3552:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3577:5:26"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3559:17:26"},"nodeType":"YulFunctionCall","src":"3559:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3549:2:26"},"nodeType":"YulFunctionCall","src":"3549:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3542:6:26"},"nodeType":"YulFunctionCall","src":"3542:43:26"},"nodeType":"YulIf","src":"3539:63:26"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3522:5:26","type":""}],"src":"3486:122:26"},{"body":{"nodeType":"YulBlock","src":"3666:87:26","statements":[{"nodeType":"YulAssignment","src":"3676:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3698:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3685:12:26"},"nodeType":"YulFunctionCall","src":"3685:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3676:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3741:5:26"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"3714:26:26"},"nodeType":"YulFunctionCall","src":"3714:33:26"},"nodeType":"YulExpressionStatement","src":"3714:33:26"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3644:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"3652:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3660:5:26","type":""}],"src":"3614:139:26"},{"body":{"nodeType":"YulBlock","src":"3842:391:26","statements":[{"body":{"nodeType":"YulBlock","src":"3888:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3890:77:26"},"nodeType":"YulFunctionCall","src":"3890:79:26"},"nodeType":"YulExpressionStatement","src":"3890:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3863:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"3872:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3859:3:26"},"nodeType":"YulFunctionCall","src":"3859:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"3884:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3855:3:26"},"nodeType":"YulFunctionCall","src":"3855:32:26"},"nodeType":"YulIf","src":"3852:119:26"},{"nodeType":"YulBlock","src":"3981:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"3996:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"4010:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4000:6:26","type":""}]},{"nodeType":"YulAssignment","src":"4025:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4060:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"4071:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4056:3:26"},"nodeType":"YulFunctionCall","src":"4056:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4080:7:26"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"4035:20:26"},"nodeType":"YulFunctionCall","src":"4035:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4025:6:26"}]}]},{"nodeType":"YulBlock","src":"4108:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"4123:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"4137:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4127:6:26","type":""}]},{"nodeType":"YulAssignment","src":"4153:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4188:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"4199:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4184:3:26"},"nodeType":"YulFunctionCall","src":"4184:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4208:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4163:20:26"},"nodeType":"YulFunctionCall","src":"4163:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4153:6:26"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3804:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3815:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3827:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3835:6:26","type":""}],"src":"3759:474:26"},{"body":{"nodeType":"YulBlock","src":"4304:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4321:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4344:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4326:17:26"},"nodeType":"YulFunctionCall","src":"4326:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4314:6:26"},"nodeType":"YulFunctionCall","src":"4314:37:26"},"nodeType":"YulExpressionStatement","src":"4314:37:26"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4292:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4299:3:26","type":""}],"src":"4239:118:26"},{"body":{"nodeType":"YulBlock","src":"4461:124:26","statements":[{"nodeType":"YulAssignment","src":"4471:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4483:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4494:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4479:3:26"},"nodeType":"YulFunctionCall","src":"4479:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4471:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4551:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4564:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4575:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4560:3:26"},"nodeType":"YulFunctionCall","src":"4560:17:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"4507:43:26"},"nodeType":"YulFunctionCall","src":"4507:71:26"},"nodeType":"YulExpressionStatement","src":"4507:71:26"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4433:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4445:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4456:4:26","type":""}],"src":"4363:222:26"},{"body":{"nodeType":"YulBlock","src":"4657:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"4703:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4705:77:26"},"nodeType":"YulFunctionCall","src":"4705:79:26"},"nodeType":"YulExpressionStatement","src":"4705:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4678:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"4687:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4674:3:26"},"nodeType":"YulFunctionCall","src":"4674:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"4699:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4670:3:26"},"nodeType":"YulFunctionCall","src":"4670:32:26"},"nodeType":"YulIf","src":"4667:119:26"},{"nodeType":"YulBlock","src":"4796:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"4811:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"4825:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4815:6:26","type":""}]},{"nodeType":"YulAssignment","src":"4840:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4875:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"4886:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4871:3:26"},"nodeType":"YulFunctionCall","src":"4871:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4895:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4850:20:26"},"nodeType":"YulFunctionCall","src":"4850:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4840:6:26"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4627:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4638:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4650:6:26","type":""}],"src":"4591:329:26"},{"body":{"nodeType":"YulBlock","src":"4954:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4971:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4974:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4964:6:26"},"nodeType":"YulFunctionCall","src":"4964:88:26"},"nodeType":"YulExpressionStatement","src":"4964:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5068:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5071:4:26","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5061:6:26"},"nodeType":"YulFunctionCall","src":"5061:15:26"},"nodeType":"YulExpressionStatement","src":"5061:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5092:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5095:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5085:6:26"},"nodeType":"YulFunctionCall","src":"5085:15:26"},"nodeType":"YulExpressionStatement","src":"5085:15:26"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"4926:180:26"},{"body":{"nodeType":"YulBlock","src":"5155:190:26","statements":[{"nodeType":"YulAssignment","src":"5165:33:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5192:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5174:17:26"},"nodeType":"YulFunctionCall","src":"5174:24:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5165:5:26"}]},{"body":{"nodeType":"YulBlock","src":"5288:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5290:16:26"},"nodeType":"YulFunctionCall","src":"5290:18:26"},"nodeType":"YulExpressionStatement","src":"5290:18:26"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5213:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"5220:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5210:2:26"},"nodeType":"YulFunctionCall","src":"5210:77:26"},"nodeType":"YulIf","src":"5207:103:26"},{"nodeType":"YulAssignment","src":"5319:20:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5330:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"5337:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5326:3:26"},"nodeType":"YulFunctionCall","src":"5326:13:26"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5319:3:26"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5141:5:26","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5151:3:26","type":""}],"src":"5112:233:26"},{"body":{"nodeType":"YulBlock","src":"5396:149:26","statements":[{"nodeType":"YulAssignment","src":"5406:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5429:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5411:17:26"},"nodeType":"YulFunctionCall","src":"5411:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"5406:1:26"}]},{"nodeType":"YulAssignment","src":"5440:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"5463:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5445:17:26"},"nodeType":"YulFunctionCall","src":"5445:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"5440:1:26"}]},{"nodeType":"YulAssignment","src":"5474:17:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5486:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"5489:1:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5482:3:26"},"nodeType":"YulFunctionCall","src":"5482:9:26"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"5474:4:26"}]},{"body":{"nodeType":"YulBlock","src":"5516:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5518:16:26"},"nodeType":"YulFunctionCall","src":"5518:18:26"},"nodeType":"YulExpressionStatement","src":"5518:18:26"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"5507:4:26"},{"name":"x","nodeType":"YulIdentifier","src":"5513:1:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5504:2:26"},"nodeType":"YulFunctionCall","src":"5504:11:26"},"nodeType":"YulIf","src":"5501:37:26"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5382:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"5385:1:26","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"5391:4:26","type":""}],"src":"5351:194:26"},{"body":{"nodeType":"YulBlock","src":"5647:73:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5664:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"5669:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5657:6:26"},"nodeType":"YulFunctionCall","src":"5657:19:26"},"nodeType":"YulExpressionStatement","src":"5657:19:26"},{"nodeType":"YulAssignment","src":"5685:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5704:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"5709:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5700:3:26"},"nodeType":"YulFunctionCall","src":"5700:14:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"5685:11:26"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5619:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"5624:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"5635:11:26","type":""}],"src":"5551:169:26"},{"body":{"nodeType":"YulBlock","src":"5832:128:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5854:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"5862:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5850:3:26"},"nodeType":"YulFunctionCall","src":"5850:14:26"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"5866:34:26","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5843:6:26"},"nodeType":"YulFunctionCall","src":"5843:58:26"},"nodeType":"YulExpressionStatement","src":"5843:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5922:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"5930:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5918:3:26"},"nodeType":"YulFunctionCall","src":"5918:15:26"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"5935:17:26","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5911:6:26"},"nodeType":"YulFunctionCall","src":"5911:42:26"},"nodeType":"YulExpressionStatement","src":"5911:42:26"}]},"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"5824:6:26","type":""}],"src":"5726:234:26"},{"body":{"nodeType":"YulBlock","src":"6112:220:26","statements":[{"nodeType":"YulAssignment","src":"6122:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6188:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"6193:2:26","type":"","value":"47"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6129:58:26"},"nodeType":"YulFunctionCall","src":"6129:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6122:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6294:3:26"}],"functionName":{"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulIdentifier","src":"6205:88:26"},"nodeType":"YulFunctionCall","src":"6205:93:26"},"nodeType":"YulExpressionStatement","src":"6205:93:26"},{"nodeType":"YulAssignment","src":"6307:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6318:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"6323:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6314:3:26"},"nodeType":"YulFunctionCall","src":"6314:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6307:3:26"}]}]},"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6100:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6108:3:26","type":""}],"src":"5966:366:26"},{"body":{"nodeType":"YulBlock","src":"6509:248:26","statements":[{"nodeType":"YulAssignment","src":"6519:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6531:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"6542:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6527:3:26"},"nodeType":"YulFunctionCall","src":"6527:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6519:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6566:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"6577:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6562:3:26"},"nodeType":"YulFunctionCall","src":"6562:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"6585:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"6591:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6581:3:26"},"nodeType":"YulFunctionCall","src":"6581:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6555:6:26"},"nodeType":"YulFunctionCall","src":"6555:47:26"},"nodeType":"YulExpressionStatement","src":"6555:47:26"},{"nodeType":"YulAssignment","src":"6611:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"6745:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6619:124:26"},"nodeType":"YulFunctionCall","src":"6619:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6611:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6489:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6504:4:26","type":""}],"src":"6338:419:26"},{"body":{"nodeType":"YulBlock","src":"6791:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6808:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6811:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6801:6:26"},"nodeType":"YulFunctionCall","src":"6801:88:26"},"nodeType":"YulExpressionStatement","src":"6801:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6905:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6908:4:26","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6898:6:26"},"nodeType":"YulFunctionCall","src":"6898:15:26"},"nodeType":"YulExpressionStatement","src":"6898:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6929:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6932:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6922:6:26"},"nodeType":"YulFunctionCall","src":"6922:15:26"},"nodeType":"YulExpressionStatement","src":"6922:15:26"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"6763:180:26"},{"body":{"nodeType":"YulBlock","src":"6993:147:26","statements":[{"nodeType":"YulAssignment","src":"7003:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7026:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"7008:17:26"},"nodeType":"YulFunctionCall","src":"7008:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"7003:1:26"}]},{"nodeType":"YulAssignment","src":"7037:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"7060:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"7042:17:26"},"nodeType":"YulFunctionCall","src":"7042:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"7037:1:26"}]},{"nodeType":"YulAssignment","src":"7071:16:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7082:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"7085:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7078:3:26"},"nodeType":"YulFunctionCall","src":"7078:9:26"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"7071:3:26"}]},{"body":{"nodeType":"YulBlock","src":"7111:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"7113:16:26"},"nodeType":"YulFunctionCall","src":"7113:18:26"},"nodeType":"YulExpressionStatement","src":"7113:18:26"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7103:1:26"},{"name":"sum","nodeType":"YulIdentifier","src":"7106:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7100:2:26"},"nodeType":"YulFunctionCall","src":"7100:10:26"},"nodeType":"YulIf","src":"7097:36:26"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6980:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"6983:1:26","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"6989:3:26","type":""}],"src":"6949:191:26"},{"body":{"nodeType":"YulBlock","src":"7194:300:26","statements":[{"nodeType":"YulAssignment","src":"7204:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7227:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"7209:17:26"},"nodeType":"YulFunctionCall","src":"7209:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"7204:1:26"}]},{"nodeType":"YulAssignment","src":"7238:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"7261:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"7243:17:26"},"nodeType":"YulFunctionCall","src":"7243:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"7238:1:26"}]},{"body":{"nodeType":"YulBlock","src":"7436:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"7438:16:26"},"nodeType":"YulFunctionCall","src":"7438:18:26"},"nodeType":"YulExpressionStatement","src":"7438:18:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7348:1:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7341:6:26"},"nodeType":"YulFunctionCall","src":"7341:9:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7334:6:26"},"nodeType":"YulFunctionCall","src":"7334:17:26"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"7356:1:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7363:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"x","nodeType":"YulIdentifier","src":"7431:1:26"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"7359:3:26"},"nodeType":"YulFunctionCall","src":"7359:74:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7353:2:26"},"nodeType":"YulFunctionCall","src":"7353:81:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7330:3:26"},"nodeType":"YulFunctionCall","src":"7330:105:26"},"nodeType":"YulIf","src":"7327:131:26"},{"nodeType":"YulAssignment","src":"7468:20:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7483:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"7486:1:26"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7479:3:26"},"nodeType":"YulFunctionCall","src":"7479:9:26"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"7468:7:26"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"7177:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"7180:1:26","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"7186:7:26","type":""}],"src":"7146:348:26"},{"body":{"nodeType":"YulBlock","src":"7528:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7545:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7548:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7538:6:26"},"nodeType":"YulFunctionCall","src":"7538:88:26"},"nodeType":"YulExpressionStatement","src":"7538:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7642:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7645:4:26","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7635:6:26"},"nodeType":"YulFunctionCall","src":"7635:15:26"},"nodeType":"YulExpressionStatement","src":"7635:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7666:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7669:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7659:6:26"},"nodeType":"YulFunctionCall","src":"7659:15:26"},"nodeType":"YulExpressionStatement","src":"7659:15:26"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"7500:180:26"},{"body":{"nodeType":"YulBlock","src":"7728:143:26","statements":[{"nodeType":"YulAssignment","src":"7738:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7761:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"7743:17:26"},"nodeType":"YulFunctionCall","src":"7743:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"7738:1:26"}]},{"nodeType":"YulAssignment","src":"7772:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"7795:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"7777:17:26"},"nodeType":"YulFunctionCall","src":"7777:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"7772:1:26"}]},{"body":{"nodeType":"YulBlock","src":"7819:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"7821:16:26"},"nodeType":"YulFunctionCall","src":"7821:18:26"},"nodeType":"YulExpressionStatement","src":"7821:18:26"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"7816:1:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7809:6:26"},"nodeType":"YulFunctionCall","src":"7809:9:26"},"nodeType":"YulIf","src":"7806:35:26"},{"nodeType":"YulAssignment","src":"7851:14:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7860:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"7863:1:26"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"7856:3:26"},"nodeType":"YulFunctionCall","src":"7856:9:26"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7851:1:26"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"7717:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"7720:1:26","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"7726:1:26","type":""}],"src":"7686:185:26"},{"body":{"nodeType":"YulBlock","src":"7983:125:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8005:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"8013:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8001:3:26"},"nodeType":"YulFunctionCall","src":"8001:14:26"},{"hexValue":"4d75737420686176652061646d696e20726f6c6520746f20706572666f726d20","kind":"string","nodeType":"YulLiteral","src":"8017:34:26","type":"","value":"Must have admin role to perform "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7994:6:26"},"nodeType":"YulFunctionCall","src":"7994:58:26"},"nodeType":"YulExpressionStatement","src":"7994:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8073:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"8081:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8069:3:26"},"nodeType":"YulFunctionCall","src":"8069:15:26"},{"hexValue":"7468697320616374696f6e2e","kind":"string","nodeType":"YulLiteral","src":"8086:14:26","type":"","value":"this action."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8062:6:26"},"nodeType":"YulFunctionCall","src":"8062:39:26"},"nodeType":"YulExpressionStatement","src":"8062:39:26"}]},"name":"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7975:6:26","type":""}],"src":"7877:231:26"},{"body":{"nodeType":"YulBlock","src":"8260:220:26","statements":[{"nodeType":"YulAssignment","src":"8270:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8336:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"8341:2:26","type":"","value":"44"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8277:58:26"},"nodeType":"YulFunctionCall","src":"8277:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8270:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8442:3:26"}],"functionName":{"name":"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","nodeType":"YulIdentifier","src":"8353:88:26"},"nodeType":"YulFunctionCall","src":"8353:93:26"},"nodeType":"YulExpressionStatement","src":"8353:93:26"},{"nodeType":"YulAssignment","src":"8455:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8466:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"8471:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8462:3:26"},"nodeType":"YulFunctionCall","src":"8462:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8455:3:26"}]}]},"name":"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8248:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8256:3:26","type":""}],"src":"8114:366:26"},{"body":{"nodeType":"YulBlock","src":"8657:248:26","statements":[{"nodeType":"YulAssignment","src":"8667:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8679:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"8690:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8675:3:26"},"nodeType":"YulFunctionCall","src":"8675:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8667:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8714:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"8725:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8710:3:26"},"nodeType":"YulFunctionCall","src":"8710:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8733:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"8739:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8729:3:26"},"nodeType":"YulFunctionCall","src":"8729:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8703:6:26"},"nodeType":"YulFunctionCall","src":"8703:47:26"},"nodeType":"YulExpressionStatement","src":"8703:47:26"},{"nodeType":"YulAssignment","src":"8759:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8893:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8767:124:26"},"nodeType":"YulFunctionCall","src":"8767:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8759:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8637:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8652:4:26","type":""}],"src":"8486:419:26"},{"body":{"nodeType":"YulBlock","src":"9017:124:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9039:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"9047:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9035:3:26"},"nodeType":"YulFunctionCall","src":"9035:14:26"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"9051:34:26","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9028:6:26"},"nodeType":"YulFunctionCall","src":"9028:58:26"},"nodeType":"YulExpressionStatement","src":"9028:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9107:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"9115:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9103:3:26"},"nodeType":"YulFunctionCall","src":"9103:15:26"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"9120:13:26","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9096:6:26"},"nodeType":"YulFunctionCall","src":"9096:38:26"},"nodeType":"YulExpressionStatement","src":"9096:38:26"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"9009:6:26","type":""}],"src":"8911:230:26"},{"body":{"nodeType":"YulBlock","src":"9293:220:26","statements":[{"nodeType":"YulAssignment","src":"9303:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9369:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"9374:2:26","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9310:58:26"},"nodeType":"YulFunctionCall","src":"9310:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9303:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9475:3:26"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"9386:88:26"},"nodeType":"YulFunctionCall","src":"9386:93:26"},"nodeType":"YulExpressionStatement","src":"9386:93:26"},{"nodeType":"YulAssignment","src":"9488:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9499:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"9504:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9495:3:26"},"nodeType":"YulFunctionCall","src":"9495:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9488:3:26"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9281:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9289:3:26","type":""}],"src":"9147:366:26"},{"body":{"nodeType":"YulBlock","src":"9690:248:26","statements":[{"nodeType":"YulAssignment","src":"9700:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9712:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"9723:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9708:3:26"},"nodeType":"YulFunctionCall","src":"9708:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9700:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9747:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"9758:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9743:3:26"},"nodeType":"YulFunctionCall","src":"9743:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9766:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"9772:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9762:3:26"},"nodeType":"YulFunctionCall","src":"9762:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9736:6:26"},"nodeType":"YulFunctionCall","src":"9736:47:26"},"nodeType":"YulExpressionStatement","src":"9736:47:26"},{"nodeType":"YulAssignment","src":"9792:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9926:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9800:124:26"},"nodeType":"YulFunctionCall","src":"9800:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9792:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9670:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9685:4:26","type":""}],"src":"9519:419:26"},{"body":{"nodeType":"YulBlock","src":"10050:75:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10072:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"10080:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10068:3:26"},"nodeType":"YulFunctionCall","src":"10068:14:26"},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","kind":"string","nodeType":"YulLiteral","src":"10084:33:26","type":"","value":"ReentrancyGuard: reentrant call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10061:6:26"},"nodeType":"YulFunctionCall","src":"10061:57:26"},"nodeType":"YulExpressionStatement","src":"10061:57:26"}]},"name":"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10042:6:26","type":""}],"src":"9944:181:26"},{"body":{"nodeType":"YulBlock","src":"10277:220:26","statements":[{"nodeType":"YulAssignment","src":"10287:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10353:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"10358:2:26","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10294:58:26"},"nodeType":"YulFunctionCall","src":"10294:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10287:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10459:3:26"}],"functionName":{"name":"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","nodeType":"YulIdentifier","src":"10370:88:26"},"nodeType":"YulFunctionCall","src":"10370:93:26"},"nodeType":"YulExpressionStatement","src":"10370:93:26"},{"nodeType":"YulAssignment","src":"10472:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10483:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"10488:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10479:3:26"},"nodeType":"YulFunctionCall","src":"10479:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10472:3:26"}]}]},"name":"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10265:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10273:3:26","type":""}],"src":"10131:366:26"},{"body":{"nodeType":"YulBlock","src":"10674:248:26","statements":[{"nodeType":"YulAssignment","src":"10684:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10696:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"10707:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10692:3:26"},"nodeType":"YulFunctionCall","src":"10692:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10684:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10731:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"10742:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10727:3:26"},"nodeType":"YulFunctionCall","src":"10727:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10750:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"10756:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10746:3:26"},"nodeType":"YulFunctionCall","src":"10746:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10720:6:26"},"nodeType":"YulFunctionCall","src":"10720:47:26"},"nodeType":"YulExpressionStatement","src":"10720:47:26"},{"nodeType":"YulAssignment","src":"10776:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10910:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10784:124:26"},"nodeType":"YulFunctionCall","src":"10784:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10776:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10654:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10669:4:26","type":""}],"src":"10503:419:26"},{"body":{"nodeType":"YulBlock","src":"10993:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11010:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11033:5:26"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"11015:17:26"},"nodeType":"YulFunctionCall","src":"11015:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11003:6:26"},"nodeType":"YulFunctionCall","src":"11003:37:26"},"nodeType":"YulExpressionStatement","src":"11003:37:26"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10981:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10988:3:26","type":""}],"src":"10928:118:26"},{"body":{"nodeType":"YulBlock","src":"11178:206:26","statements":[{"nodeType":"YulAssignment","src":"11188:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11200:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"11211:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11196:3:26"},"nodeType":"YulFunctionCall","src":"11196:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11188:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11268:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11281:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"11292:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11277:3:26"},"nodeType":"YulFunctionCall","src":"11277:17:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11224:43:26"},"nodeType":"YulFunctionCall","src":"11224:71:26"},"nodeType":"YulExpressionStatement","src":"11224:71:26"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11349:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11362:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"11373:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11358:3:26"},"nodeType":"YulFunctionCall","src":"11358:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"11305:43:26"},"nodeType":"YulFunctionCall","src":"11305:72:26"},"nodeType":"YulExpressionStatement","src":"11305:72:26"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11142:9:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11154:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11162:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11173:4:26","type":""}],"src":"11052:332:26"},{"body":{"nodeType":"YulBlock","src":"11418:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11435:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11438:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11428:6:26"},"nodeType":"YulFunctionCall","src":"11428:88:26"},"nodeType":"YulExpressionStatement","src":"11428:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11532:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11535:4:26","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11525:6:26"},"nodeType":"YulFunctionCall","src":"11525:15:26"},"nodeType":"YulExpressionStatement","src":"11525:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11556:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11559:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11549:6:26"},"nodeType":"YulFunctionCall","src":"11549:15:26"},"nodeType":"YulExpressionStatement","src":"11549:15:26"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"11390:180:26"},{"body":{"nodeType":"YulBlock","src":"11674:124:26","statements":[{"nodeType":"YulAssignment","src":"11684:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11696:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"11707:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11692:3:26"},"nodeType":"YulFunctionCall","src":"11692:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11684:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11764:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11777:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"11788:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11773:3:26"},"nodeType":"YulFunctionCall","src":"11773:17:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11720:43:26"},"nodeType":"YulFunctionCall","src":"11720:71:26"},"nodeType":"YulExpressionStatement","src":"11720:71:26"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11646:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11658:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11669:4:26","type":""}],"src":"11576:222:26"},{"body":{"nodeType":"YulBlock","src":"11958:288:26","statements":[{"nodeType":"YulAssignment","src":"11968:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11980:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"11991:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11976:3:26"},"nodeType":"YulFunctionCall","src":"11976:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11968:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12048:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12061:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12072:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12057:3:26"},"nodeType":"YulFunctionCall","src":"12057:17:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"12004:43:26"},"nodeType":"YulFunctionCall","src":"12004:71:26"},"nodeType":"YulExpressionStatement","src":"12004:71:26"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12129:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12142:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12153:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12138:3:26"},"nodeType":"YulFunctionCall","src":"12138:18:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"12085:43:26"},"nodeType":"YulFunctionCall","src":"12085:72:26"},"nodeType":"YulExpressionStatement","src":"12085:72:26"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"12211:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12224:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12235:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12220:3:26"},"nodeType":"YulFunctionCall","src":"12220:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"12167:43:26"},"nodeType":"YulFunctionCall","src":"12167:72:26"},"nodeType":"YulExpressionStatement","src":"12167:72:26"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11914:9:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11926:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11934:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11942:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11953:4:26","type":""}],"src":"11804:442:26"},{"body":{"nodeType":"YulBlock","src":"12292:76:26","statements":[{"body":{"nodeType":"YulBlock","src":"12346:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12355:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12358:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12348:6:26"},"nodeType":"YulFunctionCall","src":"12348:12:26"},"nodeType":"YulExpressionStatement","src":"12348:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12315:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12337:5:26"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"12322:14:26"},"nodeType":"YulFunctionCall","src":"12322:21:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12312:2:26"},"nodeType":"YulFunctionCall","src":"12312:32:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12305:6:26"},"nodeType":"YulFunctionCall","src":"12305:40:26"},"nodeType":"YulIf","src":"12302:60:26"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12285:5:26","type":""}],"src":"12252:116:26"},{"body":{"nodeType":"YulBlock","src":"12434:77:26","statements":[{"nodeType":"YulAssignment","src":"12444:22:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12459:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12453:5:26"},"nodeType":"YulFunctionCall","src":"12453:13:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"12444:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12499:5:26"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"12475:23:26"},"nodeType":"YulFunctionCall","src":"12475:30:26"},"nodeType":"YulExpressionStatement","src":"12475:30:26"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"12412:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"12420:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"12428:5:26","type":""}],"src":"12374:137:26"},{"body":{"nodeType":"YulBlock","src":"12591:271:26","statements":[{"body":{"nodeType":"YulBlock","src":"12637:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"12639:77:26"},"nodeType":"YulFunctionCall","src":"12639:79:26"},"nodeType":"YulExpressionStatement","src":"12639:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12612:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"12621:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12608:3:26"},"nodeType":"YulFunctionCall","src":"12608:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"12633:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12604:3:26"},"nodeType":"YulFunctionCall","src":"12604:32:26"},"nodeType":"YulIf","src":"12601:119:26"},{"nodeType":"YulBlock","src":"12730:125:26","statements":[{"nodeType":"YulVariableDeclaration","src":"12745:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"12759:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12749:6:26","type":""}]},{"nodeType":"YulAssignment","src":"12774:71:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12817:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"12828:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12813:3:26"},"nodeType":"YulFunctionCall","src":"12813:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12837:7:26"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"12784:28:26"},"nodeType":"YulFunctionCall","src":"12784:61:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12774:6:26"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12561:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12572:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12584:6:26","type":""}],"src":"12517:345:26"},{"body":{"nodeType":"YulBlock","src":"12974:123:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12996:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"13004:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12992:3:26"},"nodeType":"YulFunctionCall","src":"12992:14:26"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nodeType":"YulLiteral","src":"13008:34:26","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12985:6:26"},"nodeType":"YulFunctionCall","src":"12985:58:26"},"nodeType":"YulExpressionStatement","src":"12985:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13064:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"13072:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13060:3:26"},"nodeType":"YulFunctionCall","src":"13060:15:26"},{"hexValue":"6f742073756363656564","kind":"string","nodeType":"YulLiteral","src":"13077:12:26","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13053:6:26"},"nodeType":"YulFunctionCall","src":"13053:37:26"},"nodeType":"YulExpressionStatement","src":"13053:37:26"}]},"name":"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12966:6:26","type":""}],"src":"12868:229:26"},{"body":{"nodeType":"YulBlock","src":"13249:220:26","statements":[{"nodeType":"YulAssignment","src":"13259:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13325:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"13330:2:26","type":"","value":"42"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13266:58:26"},"nodeType":"YulFunctionCall","src":"13266:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13259:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13431:3:26"}],"functionName":{"name":"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","nodeType":"YulIdentifier","src":"13342:88:26"},"nodeType":"YulFunctionCall","src":"13342:93:26"},"nodeType":"YulExpressionStatement","src":"13342:93:26"},{"nodeType":"YulAssignment","src":"13444:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13455:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"13460:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13451:3:26"},"nodeType":"YulFunctionCall","src":"13451:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13444:3:26"}]}]},"name":"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13237:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13245:3:26","type":""}],"src":"13103:366:26"},{"body":{"nodeType":"YulBlock","src":"13646:248:26","statements":[{"nodeType":"YulAssignment","src":"13656:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13668:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"13679:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13664:3:26"},"nodeType":"YulFunctionCall","src":"13664:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13656:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13703:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"13714:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13699:3:26"},"nodeType":"YulFunctionCall","src":"13699:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13722:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"13728:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13718:3:26"},"nodeType":"YulFunctionCall","src":"13718:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13692:6:26"},"nodeType":"YulFunctionCall","src":"13692:47:26"},"nodeType":"YulExpressionStatement","src":"13692:47:26"},{"nodeType":"YulAssignment","src":"13748:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13882:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13756:124:26"},"nodeType":"YulFunctionCall","src":"13756:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13748:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13626:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13641:4:26","type":""}],"src":"13475:419:26"},{"body":{"nodeType":"YulBlock","src":"14014:34:26","statements":[{"nodeType":"YulAssignment","src":"14024:18:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"14039:3:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"14024:11:26"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13986:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"13991:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"14002:11:26","type":""}],"src":"13900:148:26"},{"body":{"nodeType":"YulBlock","src":"14160:67:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14182:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"14190:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14178:3:26"},"nodeType":"YulFunctionCall","src":"14178:14:26"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nodeType":"YulLiteral","src":"14194:25:26","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14171:6:26"},"nodeType":"YulFunctionCall","src":"14171:49:26"},"nodeType":"YulExpressionStatement","src":"14171:49:26"}]},"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14152:6:26","type":""}],"src":"14054:173:26"},{"body":{"nodeType":"YulBlock","src":"14397:238:26","statements":[{"nodeType":"YulAssignment","src":"14407:92:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14491:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"14496:2:26","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"14414:76:26"},"nodeType":"YulFunctionCall","src":"14414:85:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14407:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14597:3:26"}],"functionName":{"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulIdentifier","src":"14508:88:26"},"nodeType":"YulFunctionCall","src":"14508:93:26"},"nodeType":"YulExpressionStatement","src":"14508:93:26"},{"nodeType":"YulAssignment","src":"14610:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14621:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"14626:2:26","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14617:3:26"},"nodeType":"YulFunctionCall","src":"14617:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14610:3:26"}]}]},"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14385:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14393:3:26","type":""}],"src":"14233:402:26"},{"body":{"nodeType":"YulBlock","src":"14700:40:26","statements":[{"nodeType":"YulAssignment","src":"14711:22:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14727:5:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14721:5:26"},"nodeType":"YulFunctionCall","src":"14721:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"14711:6:26"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14683:5:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"14693:6:26","type":""}],"src":"14641:99:26"},{"body":{"nodeType":"YulBlock","src":"14808:184:26","statements":[{"nodeType":"YulVariableDeclaration","src":"14818:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"14827:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"14822:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"14887:63:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"14912:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"14917:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14908:3:26"},"nodeType":"YulFunctionCall","src":"14908:11:26"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"14931:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"14936:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14927:3:26"},"nodeType":"YulFunctionCall","src":"14927:11:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14921:5:26"},"nodeType":"YulFunctionCall","src":"14921:18:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14901:6:26"},"nodeType":"YulFunctionCall","src":"14901:39:26"},"nodeType":"YulExpressionStatement","src":"14901:39:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"14848:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"14851:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14845:2:26"},"nodeType":"YulFunctionCall","src":"14845:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"14859:19:26","statements":[{"nodeType":"YulAssignment","src":"14861:15:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"14870:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"14873:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14866:3:26"},"nodeType":"YulFunctionCall","src":"14866:10:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"14861:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"14841:3:26","statements":[]},"src":"14837:113:26"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"14970:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"14975:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14966:3:26"},"nodeType":"YulFunctionCall","src":"14966:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"14984:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14959:6:26"},"nodeType":"YulFunctionCall","src":"14959:27:26"},"nodeType":"YulExpressionStatement","src":"14959:27:26"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"14790:3:26","type":""},{"name":"dst","nodeType":"YulTypedName","src":"14795:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"14800:6:26","type":""}],"src":"14746:246:26"},{"body":{"nodeType":"YulBlock","src":"15108:280:26","statements":[{"nodeType":"YulVariableDeclaration","src":"15118:53:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15165:5:26"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"15132:32:26"},"nodeType":"YulFunctionCall","src":"15132:39:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"15122:6:26","type":""}]},{"nodeType":"YulAssignment","src":"15180:96:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15264:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"15269:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"15187:76:26"},"nodeType":"YulFunctionCall","src":"15187:89:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15180:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15324:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"15331:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15320:3:26"},"nodeType":"YulFunctionCall","src":"15320:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"15338:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"15343:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"15285:34:26"},"nodeType":"YulFunctionCall","src":"15285:65:26"},"nodeType":"YulExpressionStatement","src":"15285:65:26"},{"nodeType":"YulAssignment","src":"15359:23:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15370:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"15375:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15366:3:26"},"nodeType":"YulFunctionCall","src":"15366:16:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15359:3:26"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15089:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15096:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15104:3:26","type":""}],"src":"14998:390:26"},{"body":{"nodeType":"YulBlock","src":"15500:61:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15522:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"15530:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15518:3:26"},"nodeType":"YulFunctionCall","src":"15518:14:26"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nodeType":"YulLiteral","src":"15534:19:26","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15511:6:26"},"nodeType":"YulFunctionCall","src":"15511:43:26"},"nodeType":"YulExpressionStatement","src":"15511:43:26"}]},"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15492:6:26","type":""}],"src":"15394:167:26"},{"body":{"nodeType":"YulBlock","src":"15731:238:26","statements":[{"nodeType":"YulAssignment","src":"15741:92:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15825:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"15830:2:26","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"15748:76:26"},"nodeType":"YulFunctionCall","src":"15748:85:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15741:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15931:3:26"}],"functionName":{"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulIdentifier","src":"15842:88:26"},"nodeType":"YulFunctionCall","src":"15842:93:26"},"nodeType":"YulExpressionStatement","src":"15842:93:26"},{"nodeType":"YulAssignment","src":"15944:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15955:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"15960:2:26","type":"","value":"17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15951:3:26"},"nodeType":"YulFunctionCall","src":"15951:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15944:3:26"}]}]},"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15719:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15727:3:26","type":""}],"src":"15567:402:26"},{"body":{"nodeType":"YulBlock","src":"16361:581:26","statements":[{"nodeType":"YulAssignment","src":"16372:155:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16523:3:26"}],"functionName":{"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16379:142:26"},"nodeType":"YulFunctionCall","src":"16379:148:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16372:3:26"}]},{"nodeType":"YulAssignment","src":"16537:102:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16626:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"16635:3:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16544:81:26"},"nodeType":"YulFunctionCall","src":"16544:95:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16537:3:26"}]},{"nodeType":"YulAssignment","src":"16649:155:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16800:3:26"}],"functionName":{"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16656:142:26"},"nodeType":"YulFunctionCall","src":"16656:148:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16649:3:26"}]},{"nodeType":"YulAssignment","src":"16814:102:26","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16903:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"16912:3:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16821:81:26"},"nodeType":"YulFunctionCall","src":"16821:95:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16814:3:26"}]},{"nodeType":"YulAssignment","src":"16926:10:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"16933:3:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16926:3:26"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16332:3:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16338:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16346:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16357:3:26","type":""}],"src":"15975:967:26"},{"body":{"nodeType":"YulBlock","src":"16996:54:26","statements":[{"nodeType":"YulAssignment","src":"17006:38:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17024:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"17031:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17020:3:26"},"nodeType":"YulFunctionCall","src":"17020:14:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17040:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"17036:3:26"},"nodeType":"YulFunctionCall","src":"17036:7:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17016:3:26"},"nodeType":"YulFunctionCall","src":"17016:28:26"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"17006:6:26"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16979:5:26","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"16989:6:26","type":""}],"src":"16948:102:26"},{"body":{"nodeType":"YulBlock","src":"17148:285:26","statements":[{"nodeType":"YulVariableDeclaration","src":"17158:53:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17205:5:26"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"17172:32:26"},"nodeType":"YulFunctionCall","src":"17172:39:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"17162:6:26","type":""}]},{"nodeType":"YulAssignment","src":"17220:78:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17286:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"17291:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17227:58:26"},"nodeType":"YulFunctionCall","src":"17227:71:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17220:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17346:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"17353:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17342:3:26"},"nodeType":"YulFunctionCall","src":"17342:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"17360:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"17365:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"17307:34:26"},"nodeType":"YulFunctionCall","src":"17307:65:26"},"nodeType":"YulExpressionStatement","src":"17307:65:26"},{"nodeType":"YulAssignment","src":"17381:46:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17392:3:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"17419:6:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"17397:21:26"},"nodeType":"YulFunctionCall","src":"17397:29:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17388:3:26"},"nodeType":"YulFunctionCall","src":"17388:39:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17381:3:26"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17129:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"17136:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17144:3:26","type":""}],"src":"17056:377:26"},{"body":{"nodeType":"YulBlock","src":"17557:195:26","statements":[{"nodeType":"YulAssignment","src":"17567:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17579:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"17590:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17575:3:26"},"nodeType":"YulFunctionCall","src":"17575:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17567:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17614:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"17625:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17610:3:26"},"nodeType":"YulFunctionCall","src":"17610:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17633:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"17639:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17629:3:26"},"nodeType":"YulFunctionCall","src":"17629:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17603:6:26"},"nodeType":"YulFunctionCall","src":"17603:47:26"},"nodeType":"YulExpressionStatement","src":"17603:47:26"},{"nodeType":"YulAssignment","src":"17659:86:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17731:6:26"},{"name":"tail","nodeType":"YulIdentifier","src":"17740:4:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17667:63:26"},"nodeType":"YulFunctionCall","src":"17667:78:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17659:4:26"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17529:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17541:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17552:4:26","type":""}],"src":"17439:313:26"},{"body":{"nodeType":"YulBlock","src":"17864:64:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17886:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"17894:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17882:3:26"},"nodeType":"YulFunctionCall","src":"17882:14:26"},{"hexValue":"5061757361626c653a206e6f7420706175736564","kind":"string","nodeType":"YulLiteral","src":"17898:22:26","type":"","value":"Pausable: not paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17875:6:26"},"nodeType":"YulFunctionCall","src":"17875:46:26"},"nodeType":"YulExpressionStatement","src":"17875:46:26"}]},"name":"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17856:6:26","type":""}],"src":"17758:170:26"},{"body":{"nodeType":"YulBlock","src":"18080:220:26","statements":[{"nodeType":"YulAssignment","src":"18090:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18156:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"18161:2:26","type":"","value":"20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18097:58:26"},"nodeType":"YulFunctionCall","src":"18097:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18090:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18262:3:26"}],"functionName":{"name":"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","nodeType":"YulIdentifier","src":"18173:88:26"},"nodeType":"YulFunctionCall","src":"18173:93:26"},"nodeType":"YulExpressionStatement","src":"18173:93:26"},{"nodeType":"YulAssignment","src":"18275:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18286:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"18291:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18282:3:26"},"nodeType":"YulFunctionCall","src":"18282:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18275:3:26"}]}]},"name":"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18068:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18076:3:26","type":""}],"src":"17934:366:26"},{"body":{"nodeType":"YulBlock","src":"18477:248:26","statements":[{"nodeType":"YulAssignment","src":"18487:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18499:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"18510:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18495:3:26"},"nodeType":"YulFunctionCall","src":"18495:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18487:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18534:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"18545:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18530:3:26"},"nodeType":"YulFunctionCall","src":"18530:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18553:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"18559:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18549:3:26"},"nodeType":"YulFunctionCall","src":"18549:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18523:6:26"},"nodeType":"YulFunctionCall","src":"18523:47:26"},"nodeType":"YulExpressionStatement","src":"18523:47:26"},{"nodeType":"YulAssignment","src":"18579:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18713:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18587:124:26"},"nodeType":"YulFunctionCall","src":"18587:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18579:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18457:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18472:4:26","type":""}],"src":"18306:419:26"},{"body":{"nodeType":"YulBlock","src":"18837:60:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18859:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"18867:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18855:3:26"},"nodeType":"YulFunctionCall","src":"18855:14:26"},{"hexValue":"5061757361626c653a20706175736564","kind":"string","nodeType":"YulLiteral","src":"18871:18:26","type":"","value":"Pausable: paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18848:6:26"},"nodeType":"YulFunctionCall","src":"18848:42:26"},"nodeType":"YulExpressionStatement","src":"18848:42:26"}]},"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18829:6:26","type":""}],"src":"18731:166:26"},{"body":{"nodeType":"YulBlock","src":"19049:220:26","statements":[{"nodeType":"YulAssignment","src":"19059:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19125:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"19130:2:26","type":"","value":"16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19066:58:26"},"nodeType":"YulFunctionCall","src":"19066:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19059:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19231:3:26"}],"functionName":{"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulIdentifier","src":"19142:88:26"},"nodeType":"YulFunctionCall","src":"19142:93:26"},"nodeType":"YulExpressionStatement","src":"19142:93:26"},{"nodeType":"YulAssignment","src":"19244:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19255:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"19260:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19251:3:26"},"nodeType":"YulFunctionCall","src":"19251:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19244:3:26"}]}]},"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19037:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19045:3:26","type":""}],"src":"18903:366:26"},{"body":{"nodeType":"YulBlock","src":"19446:248:26","statements":[{"nodeType":"YulAssignment","src":"19456:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19468:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"19479:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19464:3:26"},"nodeType":"YulFunctionCall","src":"19464:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19456:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19503:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"19514:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19499:3:26"},"nodeType":"YulFunctionCall","src":"19499:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19522:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"19528:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19518:3:26"},"nodeType":"YulFunctionCall","src":"19518:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19492:6:26"},"nodeType":"YulFunctionCall","src":"19492:47:26"},"nodeType":"YulExpressionStatement","src":"19492:47:26"},{"nodeType":"YulAssignment","src":"19548:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19682:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19556:124:26"},"nodeType":"YulFunctionCall","src":"19556:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19548:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19426:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19441:4:26","type":""}],"src":"19275:419:26"},{"body":{"nodeType":"YulBlock","src":"19743:128:26","statements":[{"nodeType":"YulAssignment","src":"19753:33:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19780:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"19762:17:26"},"nodeType":"YulFunctionCall","src":"19762:24:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"19753:5:26"}]},{"body":{"nodeType":"YulBlock","src":"19814:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"19816:16:26"},"nodeType":"YulFunctionCall","src":"19816:18:26"},"nodeType":"YulExpressionStatement","src":"19816:18:26"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19801:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"19808:4:26","type":"","value":"0x00"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"19798:2:26"},"nodeType":"YulFunctionCall","src":"19798:15:26"},"nodeType":"YulIf","src":"19795:41:26"},{"nodeType":"YulAssignment","src":"19845:20:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19856:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"19863:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19852:3:26"},"nodeType":"YulFunctionCall","src":"19852:13:26"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"19845:3:26"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19729:5:26","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"19739:3:26","type":""}],"src":"19700:171:26"},{"body":{"nodeType":"YulBlock","src":"19983:76:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20005:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"20013:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20001:3:26"},"nodeType":"YulFunctionCall","src":"20001:14:26"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"20017:34:26","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19994:6:26"},"nodeType":"YulFunctionCall","src":"19994:58:26"},"nodeType":"YulExpressionStatement","src":"19994:58:26"}]},"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19975:6:26","type":""}],"src":"19877:182:26"},{"body":{"nodeType":"YulBlock","src":"20211:220:26","statements":[{"nodeType":"YulAssignment","src":"20221:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20287:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"20292:2:26","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20228:58:26"},"nodeType":"YulFunctionCall","src":"20228:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20221:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20393:3:26"}],"functionName":{"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulIdentifier","src":"20304:88:26"},"nodeType":"YulFunctionCall","src":"20304:93:26"},"nodeType":"YulExpressionStatement","src":"20304:93:26"},{"nodeType":"YulAssignment","src":"20406:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20417:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"20422:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20413:3:26"},"nodeType":"YulFunctionCall","src":"20413:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20406:3:26"}]}]},"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20199:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20207:3:26","type":""}],"src":"20065:366:26"},{"body":{"nodeType":"YulBlock","src":"20608:248:26","statements":[{"nodeType":"YulAssignment","src":"20618:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20630:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"20641:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20626:3:26"},"nodeType":"YulFunctionCall","src":"20626:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20618:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20665:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"20676:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20661:3:26"},"nodeType":"YulFunctionCall","src":"20661:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20684:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"20690:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20680:3:26"},"nodeType":"YulFunctionCall","src":"20680:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20654:6:26"},"nodeType":"YulFunctionCall","src":"20654:47:26"},"nodeType":"YulExpressionStatement","src":"20654:47:26"},{"nodeType":"YulAssignment","src":"20710:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20844:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20718:124:26"},"nodeType":"YulFunctionCall","src":"20718:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20710:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20588:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20603:4:26","type":""}],"src":"20437:419:26"},{"body":{"nodeType":"YulBlock","src":"20968:119:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20990:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"20998:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20986:3:26"},"nodeType":"YulFunctionCall","src":"20986:14:26"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"21002:34:26","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20979:6:26"},"nodeType":"YulFunctionCall","src":"20979:58:26"},"nodeType":"YulExpressionStatement","src":"20979:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21058:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"21066:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21054:3:26"},"nodeType":"YulFunctionCall","src":"21054:15:26"},{"hexValue":"722063616c6c","kind":"string","nodeType":"YulLiteral","src":"21071:8:26","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21047:6:26"},"nodeType":"YulFunctionCall","src":"21047:33:26"},"nodeType":"YulExpressionStatement","src":"21047:33:26"}]},"name":"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20960:6:26","type":""}],"src":"20862:225:26"},{"body":{"nodeType":"YulBlock","src":"21239:220:26","statements":[{"nodeType":"YulAssignment","src":"21249:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21315:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"21320:2:26","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21256:58:26"},"nodeType":"YulFunctionCall","src":"21256:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21249:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21421:3:26"}],"functionName":{"name":"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","nodeType":"YulIdentifier","src":"21332:88:26"},"nodeType":"YulFunctionCall","src":"21332:93:26"},"nodeType":"YulExpressionStatement","src":"21332:93:26"},{"nodeType":"YulAssignment","src":"21434:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21445:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"21450:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21441:3:26"},"nodeType":"YulFunctionCall","src":"21441:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21434:3:26"}]}]},"name":"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21227:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21235:3:26","type":""}],"src":"21093:366:26"},{"body":{"nodeType":"YulBlock","src":"21636:248:26","statements":[{"nodeType":"YulAssignment","src":"21646:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21658:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21669:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21654:3:26"},"nodeType":"YulFunctionCall","src":"21654:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21646:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21693:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21704:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21689:3:26"},"nodeType":"YulFunctionCall","src":"21689:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21712:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"21718:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21708:3:26"},"nodeType":"YulFunctionCall","src":"21708:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21682:6:26"},"nodeType":"YulFunctionCall","src":"21682:47:26"},"nodeType":"YulExpressionStatement","src":"21682:47:26"},{"nodeType":"YulAssignment","src":"21738:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21872:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21746:124:26"},"nodeType":"YulFunctionCall","src":"21746:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21738:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21616:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21631:4:26","type":""}],"src":"21465:419:26"},{"body":{"nodeType":"YulBlock","src":"21948:40:26","statements":[{"nodeType":"YulAssignment","src":"21959:22:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21975:5:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21969:5:26"},"nodeType":"YulFunctionCall","src":"21969:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"21959:6:26"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21931:5:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"21941:6:26","type":""}],"src":"21890:98:26"},{"body":{"nodeType":"YulBlock","src":"22107:34:26","statements":[{"nodeType":"YulAssignment","src":"22117:18:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"22132:3:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"22117:11:26"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22079:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"22084:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"22095:11:26","type":""}],"src":"21994:147:26"},{"body":{"nodeType":"YulBlock","src":"22255:278:26","statements":[{"nodeType":"YulVariableDeclaration","src":"22265:52:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22311:5:26"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"22279:31:26"},"nodeType":"YulFunctionCall","src":"22279:38:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"22269:6:26","type":""}]},{"nodeType":"YulAssignment","src":"22326:95:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22409:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"22414:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"22333:75:26"},"nodeType":"YulFunctionCall","src":"22333:88:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22326:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22469:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"22476:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22465:3:26"},"nodeType":"YulFunctionCall","src":"22465:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"22483:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"22488:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"22430:34:26"},"nodeType":"YulFunctionCall","src":"22430:65:26"},"nodeType":"YulExpressionStatement","src":"22430:65:26"},{"nodeType":"YulAssignment","src":"22504:23:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22515:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"22520:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22511:3:26"},"nodeType":"YulFunctionCall","src":"22511:16:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22504:3:26"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22236:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"22243:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22251:3:26","type":""}],"src":"22147:386:26"},{"body":{"nodeType":"YulBlock","src":"22673:137:26","statements":[{"nodeType":"YulAssignment","src":"22684:100:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22771:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"22780:3:26"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"22691:79:26"},"nodeType":"YulFunctionCall","src":"22691:93:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22684:3:26"}]},{"nodeType":"YulAssignment","src":"22794:10:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"22801:3:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22794:3:26"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22652:3:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22658:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22669:3:26","type":""}],"src":"22539:271:26"},{"body":{"nodeType":"YulBlock","src":"22922:73:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22944:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"22952:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22940:3:26"},"nodeType":"YulFunctionCall","src":"22940:14:26"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"22956:31:26","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22933:6:26"},"nodeType":"YulFunctionCall","src":"22933:55:26"},"nodeType":"YulExpressionStatement","src":"22933:55:26"}]},"name":"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22914:6:26","type":""}],"src":"22816:179:26"},{"body":{"nodeType":"YulBlock","src":"23147:220:26","statements":[{"nodeType":"YulAssignment","src":"23157:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23223:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"23228:2:26","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23164:58:26"},"nodeType":"YulFunctionCall","src":"23164:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23157:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23329:3:26"}],"functionName":{"name":"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","nodeType":"YulIdentifier","src":"23240:88:26"},"nodeType":"YulFunctionCall","src":"23240:93:26"},"nodeType":"YulExpressionStatement","src":"23240:93:26"},{"nodeType":"YulAssignment","src":"23342:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23353:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"23358:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23349:3:26"},"nodeType":"YulFunctionCall","src":"23349:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"23342:3:26"}]}]},"name":"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23135:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"23143:3:26","type":""}],"src":"23001:366:26"},{"body":{"nodeType":"YulBlock","src":"23544:248:26","statements":[{"nodeType":"YulAssignment","src":"23554:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23566:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"23577:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23562:3:26"},"nodeType":"YulFunctionCall","src":"23562:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23554:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23601:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"23612:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23597:3:26"},"nodeType":"YulFunctionCall","src":"23597:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23620:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"23626:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23616:3:26"},"nodeType":"YulFunctionCall","src":"23616:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23590:6:26"},"nodeType":"YulFunctionCall","src":"23590:47:26"},"nodeType":"YulExpressionStatement","src":"23590:47:26"},{"nodeType":"YulAssignment","src":"23646:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23780:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23654:124:26"},"nodeType":"YulFunctionCall","src":"23654:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23646:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23524:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23539:4:26","type":""}],"src":"23373:419:26"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: can only renounce\")\n\n        mstore(add(memPtr, 32), \" roles for self\")\n\n    }\n\n    function abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)\n        store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513(memPtr) {\n\n        mstore(add(memPtr, 0), \"Must have admin role to perform \")\n\n        mstore(add(memPtr, 32), \"this action.\")\n\n    }\n\n    function abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 44)\n        store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(memPtr) {\n\n        mstore(add(memPtr, 0), \"ReentrancyGuard: reentrant call\")\n\n    }\n\n    function abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: ERC20 operation did n\")\n\n        mstore(add(memPtr, 32), \"ot succeed\")\n\n    }\n\n    function abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: account \")\n\n    }\n\n    function abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 23)\n        store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(pos)\n        end := add(pos, 23)\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(memPtr) {\n\n        mstore(add(memPtr, 0), \" is missing role \")\n\n    }\n\n    function abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 17)\n        store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(pos)\n        end := add(pos, 17)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: not paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n        store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function decrement_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0x00) { panic_error_0x11() }\n        ret := sub(value, 1)\n    }\n\n    function store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Strings: hex length insufficient\")\n\n    }\n\n    function abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: insufficient balance fo\")\n\n        mstore(add(memPtr, 32), \"r call\")\n\n    }\n\n    function abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: call to non-contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":26,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"4837":[{"length":32,"start":1939},{"length":32,"start":4476}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E810B1A GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xA217FDDF GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x34F JUMPI DUP1 PUSH4 0xB0E31B2D EQ PUSH2 0x36D JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x38B JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x3A9 JUMPI DUP1 PUSH4 0xD6FB97A5 EQ PUSH2 0x3C5 JUMPI DUP1 PUSH4 0xED0CDB1A EQ PUSH2 0x3F5 JUMPI PUSH2 0x142 JUMP JUMPDEST DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x2BF JUMPI DUP1 PUSH4 0x77539417 EQ PUSH2 0x2DB JUMPI DUP1 PUSH4 0x77C379A4 EQ PUSH2 0x2F7 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x315 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x31F JUMPI PUSH2 0x142 JUMP JUMPDEST DUP1 PUSH4 0x3E50DE30 GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x3E50DE30 EQ PUSH2 0x20F JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x22D JUMPI DUP1 PUSH4 0x53B3AD7F EQ PUSH2 0x237 JUMPI DUP1 PUSH4 0x58418587 EQ PUSH2 0x255 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x271 JUMPI DUP1 PUSH4 0x6C64F0B4 EQ PUSH2 0x28F JUMPI PUSH2 0x142 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x60E5C6E EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1F3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x161 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x15C SWAP2 SWAP1 PUSH2 0x22EB JUMP JUMPDEST PUSH2 0x413 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16E SWAP2 SWAP1 PUSH2 0x2333 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x191 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18C SWAP2 SWAP1 PUSH2 0x2384 JUMP JUMPDEST PUSH2 0x48D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19E SWAP2 SWAP1 PUSH2 0x2333 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BC SWAP2 SWAP1 PUSH2 0x23E7 JUMP JUMPDEST PUSH2 0x83E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CE SWAP2 SWAP1 PUSH2 0x2423 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EC SWAP2 SWAP1 PUSH2 0x249C JUMP JUMPDEST PUSH2 0x85E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x20D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x208 SWAP2 SWAP1 PUSH2 0x249C JUMP JUMPDEST PUSH2 0x87F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x217 PUSH2 0x902 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x224 SWAP2 SWAP1 PUSH2 0x24EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x235 PUSH2 0xAAE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x23F PUSH2 0xAFF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24C SWAP2 SWAP1 PUSH2 0x24EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x26F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x26A SWAP2 SWAP1 PUSH2 0x2384 JUMP JUMPDEST PUSH2 0xB51 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x279 PUSH2 0xBDB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x286 SWAP2 SWAP1 PUSH2 0x2333 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A4 SWAP2 SWAP1 PUSH2 0x2384 JUMP JUMPDEST PUSH2 0xBF2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B6 SWAP2 SWAP1 PUSH2 0x2333 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2D9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D4 SWAP2 SWAP1 PUSH2 0x2506 JUMP JUMPDEST PUSH2 0xD3E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2F5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2F0 SWAP2 SWAP1 PUSH2 0x2384 JUMP JUMPDEST PUSH2 0xE60 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2FF PUSH2 0xEDE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30C SWAP2 SWAP1 PUSH2 0x24EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31D PUSH2 0xEE8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x339 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x334 SWAP2 SWAP1 PUSH2 0x249C JUMP JUMPDEST PUSH2 0xF39 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x346 SWAP2 SWAP1 PUSH2 0x2333 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x357 PUSH2 0xFA4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x364 SWAP2 SWAP1 PUSH2 0x2423 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x375 PUSH2 0xFAB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x382 SWAP2 SWAP1 PUSH2 0x24EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x393 PUSH2 0xFB1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A0 SWAP2 SWAP1 PUSH2 0x2333 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3C3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3BE SWAP2 SWAP1 PUSH2 0x249C JUMP JUMPDEST PUSH2 0xFD0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3DF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3DA SWAP2 SWAP1 PUSH2 0x2384 JUMP JUMPDEST PUSH2 0xFF1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3EC SWAP2 SWAP1 PUSH2 0x2333 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3FD PUSH2 0x1228 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x40A SWAP2 SWAP1 PUSH2 0x24EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x486 JUMPI POP PUSH2 0x485 DUP3 PUSH2 0x12D3 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x497 PUSH2 0x133D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 PUSH1 0x0 PUSH2 0x4A6 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP3 DUP2 PUSH1 0x1 ADD SLOAD LT DUP1 PUSH2 0x53C JUMPI POP PUSH1 0xFF PUSH1 0x0 PUSH2 0x4FB PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD TIMESTAMP LT JUMPDEST DUP1 PUSH2 0x58F JUMPI POP PUSH1 0xFF PUSH1 0x0 PUSH2 0x54E PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD DUP4 GT JUMPDEST ISZERO PUSH2 0x5C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x71A61D9D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xFB PUSH1 0x0 DUP2 SLOAD PUSH2 0x5D5 SWAP1 PUSH2 0x2562 JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0xFE PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x5EE SWAP2 SWAP1 PUSH2 0x25AA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x609 SWAP2 SWAP1 PUSH2 0x25AA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH2 0x102 PUSH1 0x0 PUSH2 0x61E PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH1 0xFB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0xFF PUSH1 0x0 PUSH2 0x67F PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SUB PUSH2 0x725 JUMPI PUSH1 0x0 PUSH1 0xFF PUSH1 0x0 PUSH2 0x6D0 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST DUP3 PUSH1 0xFF PUSH1 0x0 PUSH2 0x732 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x77E SWAP2 SWAP1 PUSH2 0x25AA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x7D7 PUSH2 0x790 PUSH2 0x138C JUMP JUMPDEST DUP5 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1394 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x7DF PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x33ACB29A4BA6D440DA1A7BA75E505A000B362F21A991B589437F8F04DD98FD6B DUP5 PUSH1 0x40 MLOAD PUSH2 0x824 SWAP2 SWAP1 PUSH2 0x24EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP2 POP POP PUSH2 0x839 PUSH2 0x141A JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x867 DUP3 PUSH2 0x83E JUMP JUMPDEST PUSH2 0x870 DUP2 PUSH2 0x1424 JUMP JUMPDEST PUSH2 0x87A DUP4 DUP4 PUSH2 0x1438 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x887 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x8F4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8EB SWAP1 PUSH2 0x2661 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8FE DUP3 DUP3 PUSH2 0x1519 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x0 PUSH2 0x913 PUSH2 0x15FB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x92B JUMPI PUSH2 0x92A PUSH2 0x2681 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 SWAP1 POP JUMPDEST PUSH1 0xFB SLOAD DUP2 GT PUSH2 0xAA2 JUMPI PUSH1 0x0 PUSH2 0x102 PUSH1 0x0 PUSH2 0x956 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP DUP2 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x9D6 JUMPI PUSH2 0x9D5 PUSH2 0x2681 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SUB PUSH2 0xA27 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD GT ISZERO PUSH2 0xA07 JUMPI DUP1 PUSH1 0x0 ADD MLOAD DUP8 PUSH2 0xA00 SWAP2 SWAP1 PUSH2 0x26B0 JUMP JUMPDEST SWAP7 POP PUSH2 0xA1A JUMP JUMPDEST DUP1 PUSH1 0x20 ADD MLOAD DUP8 PUSH2 0xA17 SWAP2 SWAP1 PUSH2 0x25AA JUMP JUMPDEST SWAP7 POP JUMPDEST DUP3 PUSH2 0xA24 SWAP1 PUSH2 0x2562 JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD DUP3 PUSH1 0x1 ADD SLOAD PUSH2 0xA55 SWAP2 SWAP1 PUSH2 0x25AA JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x3 ADD SLOAD DUP3 PUSH1 0x2 ADD SLOAD DUP11 DUP4 PUSH2 0xA6D SWAP2 SWAP1 PUSH2 0x26E4 JUMP JUMPDEST PUSH2 0xA77 SWAP2 SWAP1 PUSH2 0x26E4 JUMP JUMPDEST PUSH2 0xA81 SWAP2 SWAP1 PUSH2 0x276D JUMP JUMPDEST DUP7 PUSH2 0xA8C SWAP2 SWAP1 PUSH2 0x26B0 JUMP JUMPDEST SWAP6 POP DUP4 PUSH2 0xA98 SWAP1 PUSH2 0x2562 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x93E JUMP JUMPDEST POP DUP2 SWAP6 POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0xAB6 PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0xAF5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAEC SWAP1 PUSH2 0x2810 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAFD PUSH2 0x18B6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 PUSH1 0x0 PUSH2 0xB0E PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xB59 PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0xB98 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB8F SWAP1 PUSH2 0x2810 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3C DUP2 PUSH2 0xBA5 SWAP2 SWAP1 PUSH2 0x26E4 JUMP JUMPDEST PUSH1 0xFD DUP2 SWAP1 SSTORE POP DUP1 PUSH32 0xC43E5DB88F387521ADFB9F79C0C9EFD47004DC3A041358383ECCCB1A1509DBF6 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF PUSH1 0x0 PUSH2 0xC00 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 PUSH2 0xC9F JUMPI POP DUP2 PUSH1 0xFF PUSH1 0x0 PUSH2 0xC5F PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD LT JUMPDEST ISZERO PUSH2 0xD34 JUMPI PUSH1 0x0 PUSH1 0xFF PUSH1 0x0 PUSH2 0xCB2 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP3 DUP2 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP TIMESTAMP PUSH1 0xFD SLOAD PUSH2 0xD22 SWAP2 SWAP1 PUSH2 0x26B0 JUMP JUMPDEST DUP2 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 SWAP2 POP POP PUSH2 0xD39 JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xD8D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD84 SWAP1 PUSH2 0x28A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xDF3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDFB PUSH2 0x1919 JUMP JUMPDEST PUSH2 0xE03 PUSH2 0x1972 JUMP JUMPDEST PUSH2 0xE0B PUSH2 0x19C3 JUMP JUMPDEST PUSH2 0xE1C PUSH2 0xE16 PUSH2 0x1A1C JUMP JUMPDEST DUP3 PUSH2 0x1438 JUMP JUMPDEST PUSH2 0xE2D PUSH2 0xE27 PUSH2 0x1A44 JUMP JUMPDEST DUP3 PUSH2 0x1438 JUMP JUMPDEST PUSH2 0xE45 PUSH2 0xE38 PUSH2 0x1A44 JUMP JUMPDEST PUSH2 0xE40 PUSH2 0x1A1C JUMP JUMPDEST PUSH2 0x1A6C JUMP JUMPDEST PUSH2 0xE5D PUSH2 0xE50 PUSH2 0x1A1C JUMP JUMPDEST PUSH2 0xE58 PUSH2 0x1A1C JUMP JUMPDEST PUSH2 0x1A6C JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xE68 PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0xEA7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE9E SWAP1 PUSH2 0x2810 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xFC DUP2 SWAP1 SSTORE POP DUP1 PUSH32 0x4E84E59515FA6D59EEDD951D065C81F1962F0E5132F2E9120B47D64C7B33A177 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFB SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xEF0 PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0xF2F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF26 SWAP1 PUSH2 0x2810 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF37 PUSH2 0x1AC8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0xFE SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFCB PUSH2 0xFBE PUSH2 0x1A1C JUMP JUMPDEST PUSH2 0xFC6 PUSH2 0x138C JUMP JUMPDEST PUSH2 0xF39 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xFD9 DUP3 PUSH2 0x83E JUMP JUMPDEST PUSH2 0xFE2 DUP2 PUSH2 0x1424 JUMP JUMPDEST PUSH2 0xFEC DUP4 DUP4 PUSH2 0x1519 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFB PUSH2 0x133D JUMP JUMPDEST PUSH1 0xFC SLOAD DUP3 LT ISZERO PUSH2 0x1037 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAD40140300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xFB PUSH1 0x0 DUP2 SLOAD PUSH2 0x1046 SWAP1 PUSH2 0x2562 JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x100 PUSH1 0x0 PUSH2 0x105C PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x10D7 JUMPI PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xFB SLOAD DUP2 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP JUMPDEST DUP3 DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x10EB SWAP2 SWAP1 PUSH2 0x26B0 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH2 0x102 PUSH1 0x0 PUSH2 0x1100 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH1 0xFB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0xFE PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1166 SWAP2 SWAP1 PUSH2 0x26B0 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x11C1 PUSH2 0x1178 PUSH2 0x138C JUMP JUMPDEST ADDRESS DUP6 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1B2B SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x11C9 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF1E64F5AB94083442836AE6EF7E94101F7FCC786C3E761B00D5F4E10C6C20196 DUP5 PUSH1 0x40 MLOAD PUSH2 0x120E SWAP2 SWAP1 PUSH2 0x24EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP2 POP POP PUSH2 0x1223 PUSH2 0x141A JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x100 PUSH1 0x0 PUSH2 0x1238 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD GT PUSH2 0x1282 JUMPI PUSH1 0x0 PUSH2 0x12CE JUMP JUMPDEST PUSH2 0x100 PUSH1 0x0 PUSH2 0x128F PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0xC9 SLOAD SUB PUSH2 0x1382 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1379 SWAP1 PUSH2 0x290E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1415 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x13B3 SWAP3 SWAP2 SWAP1 PUSH2 0x293D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1BB4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x1435 DUP2 PUSH2 0x1430 PUSH2 0x138C JUMP JUMPDEST PUSH2 0x1C7B JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1442 DUP3 DUP3 PUSH2 0xF39 JUMP JUMPDEST PUSH2 0x1515 JUMPI PUSH1 0x1 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x14BA PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1523 DUP3 DUP3 PUSH2 0xF39 JUMP JUMPDEST ISZERO PUSH2 0x15F7 JUMPI PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x159C PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH2 0x100 PUSH1 0x0 PUSH2 0x160D PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x1657 PUSH2 0xEDE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 SWAP1 POP JUMPDEST DUP2 DUP2 GT PUSH2 0x1759 JUMPI PUSH1 0x0 PUSH2 0x102 PUSH1 0x0 PUSH2 0x1675 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD GT ISZERO PUSH2 0x16D7 JUMPI DUP4 PUSH2 0x16D4 SWAP1 PUSH2 0x2562 JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH1 0x0 PUSH2 0x102 PUSH1 0x0 PUSH2 0x16E6 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD GT ISZERO PUSH2 0x1748 JUMPI DUP4 PUSH2 0x1745 SWAP1 PUSH2 0x2562 JUMP JUMPDEST SWAP4 POP JUMPDEST DUP1 PUSH2 0x1752 SWAP1 PUSH2 0x2562 JUMP JUMPDEST SWAP1 POP PUSH2 0x165F JUMP JUMPDEST POP PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1776 JUMPI PUSH2 0x1775 PUSH2 0x2966 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x17A4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 DUP5 SWAP1 POP JUMPDEST DUP4 DUP2 GT PUSH2 0x18AA JUMPI PUSH1 0x0 PUSH2 0x102 PUSH1 0x0 PUSH2 0x17C4 PUSH2 0x138C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD GT ISZERO PUSH2 0x185E JUMPI DUP2 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1851 JUMPI PUSH2 0x1850 PUSH2 0x2681 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD GT ISZERO PUSH2 0x188C JUMPI DUP2 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x187F JUMPI PUSH2 0x187E PUSH2 0x2681 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST DUP3 PUSH2 0x1896 SWAP1 PUSH2 0x2562 JUMP JUMPDEST SWAP3 POP DUP2 PUSH2 0x18A2 SWAP1 PUSH2 0x2562 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x17AE JUMP JUMPDEST POP DUP2 SWAP6 POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x18BE PUSH2 0x1D00 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x1902 PUSH2 0x138C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x190F SWAP2 SWAP1 PUSH2 0x2995 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1968 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x195F SWAP1 PUSH2 0x28A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1970 PUSH2 0x1D49 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x19C1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19B8 SWAP1 PUSH2 0x28A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1A12 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A09 SWAP1 PUSH2 0x28A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1A1A PUSH2 0x1DB5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A77 DUP4 PUSH2 0x83E JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x97 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x1AD0 PUSH2 0x1E0E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x1B14 PUSH2 0x138C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B21 SWAP2 SWAP1 PUSH2 0x2995 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x1BAE DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1B4C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x29B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1BB4 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C16 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1E58 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x1C76 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1C36 SWAP2 SWAP1 PUSH2 0x2A13 JUMP JUMPDEST PUSH2 0x1C75 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6C SWAP1 PUSH2 0x2AB2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1C85 DUP3 DUP3 PUSH2 0xF39 JUMP JUMPDEST PUSH2 0x1CFC JUMPI PUSH2 0x1C92 DUP2 PUSH2 0x1E70 JUMP JUMPDEST PUSH2 0x1CA0 DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0x1E9D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1CB1 SWAP3 SWAP2 SWAP1 PUSH2 0x2BDB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CF3 SWAP2 SWAP1 PUSH2 0x2C5F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1D08 PUSH2 0xBDB JUMP JUMPDEST PUSH2 0x1D47 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D3E SWAP1 PUSH2 0x2CCD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1D98 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D8F SWAP1 PUSH2 0x28A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1E04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DFB SWAP1 PUSH2 0x28A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x1E16 PUSH2 0xBDB JUMP JUMPDEST ISZERO PUSH2 0x1E56 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E4D SWAP1 PUSH2 0x2D39 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1E67 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x20D9 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1E96 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0x1E9D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0x1EB0 SWAP2 SWAP1 PUSH2 0x26E4 JUMP JUMPDEST PUSH2 0x1EBA SWAP2 SWAP1 PUSH2 0x26B0 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1ED3 JUMPI PUSH2 0x1ED2 PUSH2 0x2966 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1F05 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1F3D JUMPI PUSH2 0x1F3C PUSH2 0x2681 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1FA1 JUMPI PUSH2 0x1FA0 PUSH2 0x2681 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0x1FE1 SWAP2 SWAP1 PUSH2 0x26E4 JUMP JUMPDEST PUSH2 0x1FEB SWAP2 SWAP1 PUSH2 0x26B0 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x208B JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0x202D JUMPI PUSH2 0x202C PUSH2 0x2681 JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2044 JUMPI PUSH2 0x2043 PUSH2 0x2681 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0x2084 SWAP1 PUSH2 0x2D59 JUMP JUMPDEST SWAP1 POP PUSH2 0x1FEE JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0x20CF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C6 SWAP1 PUSH2 0x2DCE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x211E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2115 SWAP1 PUSH2 0x2E60 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x2147 SWAP2 SWAP1 PUSH2 0x2EC7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2184 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2189 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x219A DUP8 DUP4 DUP4 DUP8 PUSH2 0x21A6 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x2208 JUMPI PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x2200 JUMPI PUSH2 0x21C0 DUP6 PUSH2 0x221B JUMP JUMPDEST PUSH2 0x21FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x21F6 SWAP1 PUSH2 0x2F2A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x2213 JUMP JUMPDEST PUSH2 0x2212 DUP4 DUP4 PUSH2 0x223E JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x2251 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2285 SWAP2 SWAP1 PUSH2 0x2C5F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22C8 DUP2 PUSH2 0x2293 JUMP JUMPDEST DUP2 EQ PUSH2 0x22D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x22E5 DUP2 PUSH2 0x22BF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2301 JUMPI PUSH2 0x2300 PUSH2 0x228E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x230F DUP5 DUP3 DUP6 ADD PUSH2 0x22D6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x232D DUP2 PUSH2 0x2318 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2348 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2324 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2361 DUP2 PUSH2 0x234E JUMP JUMPDEST DUP2 EQ PUSH2 0x236C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x237E DUP2 PUSH2 0x2358 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x239A JUMPI PUSH2 0x2399 PUSH2 0x228E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x23A8 DUP5 DUP3 DUP6 ADD PUSH2 0x236F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x23C4 DUP2 PUSH2 0x23B1 JUMP JUMPDEST DUP2 EQ PUSH2 0x23CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x23E1 DUP2 PUSH2 0x23BB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23FD JUMPI PUSH2 0x23FC PUSH2 0x228E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x240B DUP5 DUP3 DUP6 ADD PUSH2 0x23D2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x241D DUP2 PUSH2 0x23B1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2438 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2414 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2469 DUP3 PUSH2 0x243E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2479 DUP2 PUSH2 0x245E JUMP JUMPDEST DUP2 EQ PUSH2 0x2484 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2496 DUP2 PUSH2 0x2470 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24B3 JUMPI PUSH2 0x24B2 PUSH2 0x228E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x24C1 DUP6 DUP3 DUP7 ADD PUSH2 0x23D2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x24D2 DUP6 DUP3 DUP7 ADD PUSH2 0x2487 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x24E5 DUP2 PUSH2 0x234E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2500 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x24DC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x251C JUMPI PUSH2 0x251B PUSH2 0x228E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x252A DUP5 DUP3 DUP6 ADD PUSH2 0x2487 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x256D DUP3 PUSH2 0x234E JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x259F JUMPI PUSH2 0x259E PUSH2 0x2533 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25B5 DUP3 PUSH2 0x234E JUMP JUMPDEST SWAP2 POP PUSH2 0x25C0 DUP4 PUSH2 0x234E JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x25D8 JUMPI PUSH2 0x25D7 PUSH2 0x2533 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x264B PUSH1 0x2F DUP4 PUSH2 0x25DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2656 DUP3 PUSH2 0x25EF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x267A DUP2 PUSH2 0x263E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x26BB DUP3 PUSH2 0x234E JUMP JUMPDEST SWAP2 POP PUSH2 0x26C6 DUP4 PUSH2 0x234E JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x26DE JUMPI PUSH2 0x26DD PUSH2 0x2533 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26EF DUP3 PUSH2 0x234E JUMP JUMPDEST SWAP2 POP PUSH2 0x26FA DUP4 PUSH2 0x234E JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2733 JUMPI PUSH2 0x2732 PUSH2 0x2533 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2778 DUP3 PUSH2 0x234E JUMP JUMPDEST SWAP2 POP PUSH2 0x2783 DUP4 PUSH2 0x234E JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2793 JUMPI PUSH2 0x2792 PUSH2 0x273E JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D75737420686176652061646D696E20726F6C6520746F20706572666F726D20 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7468697320616374696F6E2E0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27FA PUSH1 0x2C DUP4 PUSH2 0x25DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2805 DUP3 PUSH2 0x279E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2829 DUP2 PUSH2 0x27ED JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x288C PUSH1 0x2B DUP4 PUSH2 0x25DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2897 DUP3 PUSH2 0x2830 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x28BB DUP2 PUSH2 0x287F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28F8 PUSH1 0x1F DUP4 PUSH2 0x25DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2903 DUP3 PUSH2 0x28C2 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2927 DUP2 PUSH2 0x28EB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2937 DUP2 PUSH2 0x245E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2952 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x292E JUMP JUMPDEST PUSH2 0x295F PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x24DC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x29AA PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x292E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x29C5 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x292E JUMP JUMPDEST PUSH2 0x29D2 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x292E JUMP JUMPDEST PUSH2 0x29DF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x24DC JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x29F0 DUP2 PUSH2 0x2318 JUMP JUMPDEST DUP2 EQ PUSH2 0x29FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2A0D DUP2 PUSH2 0x29E7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A29 JUMPI PUSH2 0x2A28 PUSH2 0x228E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2A37 DUP5 DUP3 DUP6 ADD PUSH2 0x29FE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A9C PUSH1 0x2A DUP4 PUSH2 0x25DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2AA7 DUP3 PUSH2 0x2A40 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2ACB DUP2 PUSH2 0x2A8F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B13 PUSH1 0x17 DUP4 PUSH2 0x2AD2 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B1E DUP3 PUSH2 0x2ADD JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2B52 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2B37 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B69 DUP3 PUSH2 0x2B29 JUMP JUMPDEST PUSH2 0x2B73 DUP2 DUP6 PUSH2 0x2AD2 JUMP JUMPDEST SWAP4 POP PUSH2 0x2B83 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2B34 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BC5 PUSH1 0x11 DUP4 PUSH2 0x2AD2 JUMP JUMPDEST SWAP2 POP PUSH2 0x2BD0 DUP3 PUSH2 0x2B8F JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BE6 DUP3 PUSH2 0x2B06 JUMP JUMPDEST SWAP2 POP PUSH2 0x2BF2 DUP3 DUP6 PUSH2 0x2B5E JUMP JUMPDEST SWAP2 POP PUSH2 0x2BFD DUP3 PUSH2 0x2BB8 JUMP JUMPDEST SWAP2 POP PUSH2 0x2C09 DUP3 DUP5 PUSH2 0x2B5E JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C31 DUP3 PUSH2 0x2B29 JUMP JUMPDEST PUSH2 0x2C3B DUP2 DUP6 PUSH2 0x25DE JUMP JUMPDEST SWAP4 POP PUSH2 0x2C4B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2B34 JUMP JUMPDEST PUSH2 0x2C54 DUP2 PUSH2 0x2C15 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C79 DUP2 DUP5 PUSH2 0x2C26 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CB7 PUSH1 0x14 DUP4 PUSH2 0x25DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2CC2 DUP3 PUSH2 0x2C81 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CE6 DUP2 PUSH2 0x2CAA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D23 PUSH1 0x10 DUP4 PUSH2 0x25DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2D2E DUP3 PUSH2 0x2CED JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D52 DUP2 PUSH2 0x2D16 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D64 DUP3 PUSH2 0x234E JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x2D77 JUMPI PUSH2 0x2D76 PUSH2 0x2533 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DB8 PUSH1 0x20 DUP4 PUSH2 0x25DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2DC3 DUP3 PUSH2 0x2D82 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2DE7 DUP2 PUSH2 0x2DAB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E4A PUSH1 0x26 DUP4 PUSH2 0x25DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2E55 DUP3 PUSH2 0x2DEE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E79 DUP2 PUSH2 0x2E3D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EA1 DUP3 PUSH2 0x2E80 JUMP JUMPDEST PUSH2 0x2EAB DUP2 DUP6 PUSH2 0x2E8B JUMP JUMPDEST SWAP4 POP PUSH2 0x2EBB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2B34 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2ED3 DUP3 DUP5 PUSH2 0x2E96 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F14 PUSH1 0x1D DUP4 PUSH2 0x25DE JUMP JUMPDEST SWAP2 POP PUSH2 0x2F1F DUP3 PUSH2 0x2EDE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F43 DUP2 PUSH2 0x2F07 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE 0xB6 ORIGIN 0xB1 RETURN EXTCODECOPY CODECOPY 0x21 0xEF DUP6 CALLDATASIZE 0xAC PUSH30 0xDDF1E7525FA1C155C91F42ACDC817EEF78C3EE64736F6C63430008100033 ","sourceMap":"765:7109:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2903:213:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4269:939:19;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4708:129:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5133:145;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6242:214;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6416:1128:19;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2434:65;;;:::i;:::-;;7741:131;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2730:176;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1858:84:4;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3672:587:19;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;734:549:15;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2505:152:19;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5214:89;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2367:61;;;:::i;:::-;;3203:145:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2324:49;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;939:41:19;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1289:117:15;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5558:147:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2912:717:19;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7550:185;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2903:213:0;2988:4;3026:43;3011:58;;;:11;:58;;;;:98;;;;3073:36;3097:11;3073:23;:36::i;:::-;3011:98;3004:105;;2903:213;;;:::o;4269:939:19:-;4345:4;2505:21:5;:19;:21::i;:::-;4361:25:19::1;4389:9;:23;4399:12;:10;:12::i;:::-;4389:23;;;;;;;;;;;;;;;4361:51;;4464:5;4440:8;:21;;;:29;4439:111;;;;4506:13;:27;4520:12;:10;:12::i;:::-;4506:27;;;;;;;;;;;;;;;:43;;;4488:15;:61;4439:111;:180;;;;4576:13;:27;4590:12;:10;:12::i;:::-;4576:27;;;;;;;;;;;;;;;:42;;;4568:5;:50;4439:180;4422:277;;;4651:37;;;;;;;;;;;;;;4422:277;4710:12;;4708:14;;;;;:::i;:::-;;;;;;;;4753:5;4732:17;;:26;;;;;;;:::i;:::-;;;;;;;;4793:5;4768:8;:21;;;:30;;;;;;;:::i;:::-;;;;;;;;4871:5;4808:16;:30;4825:12;:10;:12::i;:::-;4808:30;;;;;;;;;;;;;;;:44;4839:12;;4808:44;;;;;;;;;;;:60;;:68;;;;4936:5;4890:13;:27;4904:12;:10;:12::i;:::-;4890:27;;;;;;;;;;;;;;;:42;;;:51:::0;4886:132:::1;;5002:5;4957:13;:27;4971:12;:10;:12::i;:::-;4957:27;;;;;;;;;;;;;;;:42;;;:50;;;;;;;;;;;;;;;;;;4886:132;5073:5;5027:13;:27;5041:12;:10;:12::i;:::-;5027:27;;;;;;;;;;;;;;;:42;;;:51;;;;;;;:::i;:::-;;;;;;;;5088:44;5112:12;:10;:12::i;:::-;5126:5;5088:10;:23;;;;:44;;;;;:::i;:::-;5160:12;:10;:12::i;:::-;5147:33;;;5174:5;5147:33;;;;;;:::i;:::-;;;;;;;;5197:4;5190:11;;;2547:20:5::0;:18;:20::i;:::-;4269:939:19;;;:::o;4708:129:0:-;4782:7;4808:6;:12;4815:4;4808:12;;;;;;;;;;;:22;;;4801:29;;4708:129;;;:::o;5133:145::-;5216:18;5229:4;5216:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5246:25:::1;5257:4;5263:7;5246:10;:25::i;:::-;5133:145:::0;;;:::o;6242:214::-;6348:12;:10;:12::i;:::-;6337:23;;:7;:23;;;6329:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;6423:26;6435:4;6441:7;6423:11;:26::i;:::-;6242:214;;:::o;6416:1128:19:-;6466:7;6485:19;6507:1;6485:23;;6518:32;6553:20;:18;:20::i;:::-;6518:55;;6583:22;6608:15;6624:1;6608:18;;;;;;;;:::i;:::-;;;;;;;;6583:43;;6636:25;6675:15;6708:9;6720:14;6708:26;;6704:800;6741:12;;6736:1;:17;6704:800;;6770:41;6814:16;:30;6831:12;:10;:12::i;:::-;6814:30;;;;;;;;;;;;;;;:33;6845:1;6814:33;;;;;;;;;;;6770:77;;;;;;;;;;;;;;;;;;;;;;;;;;;6892:1;6864:15;6880:7;6864:24;;;;;;;;:::i;:::-;;;;;;;;:29;6861:333;;6951:1;6917:18;:31;;;:35;6913:240;;;6991:18;:31;;;6976:46;;;;;:::i;:::-;;;6913:240;;;7100:18;:34;;;7085:49;;;;;:::i;:::-;;;6913:240;7170:9;;;;:::i;:::-;;;6861:333;7207:35;7245:16;:19;7262:1;7245:19;;;;;;;;;;;7207:57;;7289:16;7330:11;:21;;;7308:11;:19;;;:43;;;;:::i;:::-;7289:62;;7446:11;:28;;;7413:11;:29;;;7399:11;7388:8;:22;;;;:::i;:::-;:54;;;;:::i;:::-;7387:88;;;;:::i;:::-;7365:111;;;;;:::i;:::-;;;7490:3;;;;:::i;:::-;;;6756:748;;;6704:800;;;;7520:17;7513:24;;;;;;;6416:1128;:::o;2434:65::-;652:9:15;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;2482:10:19::1;:8;:10::i;:::-;2434:65::o:0;7741:131::-;7801:7;7827:9;:23;7837:12;:10;:12::i;:::-;7827:23;;;;;;;;;;;;;;;:38;;;7820:45;;7741:131;:::o;2730:176::-;652:9:15;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;2840:9:19::1;2824:13;:25;;;;:::i;:::-;2807:14;:42;;;;2885:13;2864:35;;;;;;;;;;2730:176:::0;:::o;1858:84:4:-;1905:4;1928:7;;;;;;;;;;;1921:14;;1858:84;:::o;3672:587:19:-;3746:4;3782:13;:27;3796:12;:10;:12::i;:::-;3782:27;;;;;;;;;;;;;;;:42;;;;;;;;;;;;3780:45;3779:116;;;;3889:5;3844:13;:27;3858:12;:10;:12::i;:::-;3844:27;;;;;;;;;;;;;;;:42;;;:50;3779:116;3762:469;;;3920:47;3970:13;:27;3984:12;:10;:12::i;:::-;3970:27;;;;;;;;;;;;;;;3920:77;;4049:4;4011:20;:35;;;:42;;;;;;;;;;;;;;;;;;4105:5;4067:20;:35;;:43;;;;4180:15;4163:14;;:32;;;;:::i;:::-;4124:20;:36;;:71;;;;4216:4;4209:11;;;;;3762:469;4247:5;4240:12;;3672:587;;;;:::o;734:549:15:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;845:1:15::1;828:19;;:5;:19;;::::0;825:99:::1;;870:43;;;;;;;;;;;;;;825:99;933:17;:15;:17::i;:::-;960:22;:20;:22::i;:::-;992:24;:22;:24::i;:::-;1027:43;1038:24;:22;:24::i;:::-;1064:5;1027:10;:43::i;:::-;1080:44;1091:25;:23;:25::i;:::-;1118:5;1080:10;:44::i;:::-;1135:66;1149:25;:23;:25::i;:::-;1176:24;:22;:24::i;:::-;1135:13;:66::i;:::-;1211:65;1225:24;:22;:24::i;:::-;1251;:22;:24::i;:::-;1211:13;:65::i;:::-;734:549:::0;:::o;2505:152:19:-;652:9:15;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;2600:5:19::1;2583:14;:22;;;;2644:5;2620:30;;;;;;;;;;2505:152:::0;:::o;5214:89::-;5258:7;5284:12;;5277:19;;5214:89;:::o;2367:61::-;652:9:15;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;2413:8:19::1;:6;:8::i;:::-;2367:61::o:0;3203:145:0:-;3289:4;3312:6;:12;3319:4;3312:12;;;;;;;;;;;:20;;:29;3333:7;3312:29;;;;;;;;;;;;;;;;;;;;;;;;;3305:36;;3203:145;;;;:::o;2324:49::-;2369:4;2324:49;;;:::o;939:41:19:-;;;;:::o;1289:117:15:-;1329:4;1352:47;1360:24;:22;:24::i;:::-;1386:12;:10;:12::i;:::-;1352:7;:47::i;:::-;1345:54;;1289:117;:::o;5558:147:0:-;5642:18;5655:4;5642:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5672:26:::1;5684:4;5690:7;5672:11;:26::i;:::-;5558:147:::0;;;:::o;2912:717:19:-;2983:4;2505:21:5;:19;:21::i;:::-;3011:14:19::1;;3003:5;:22;2999:102;;;3048:42;;;;;;;;;;;;;;2999:102;3112:12;;3110:14;;;;;:::i;:::-;;;;;;;;3134:25;3162:9;:23;3172:12;:10;:12::i;:::-;3162:23;;;;;;;;;;;;;;;3134:51;;3199:8;:18;;;;;;;;;;;;3195:129;;3254:4;3233:8;:18;;;:25;;;;;;;;;;;;;;;;;;3301:12;;3272:8;:26;;:41;;;;3195:129;3358:5;3333:8;:21;;;:30;;;;;;;:::i;:::-;;;;;;;;3433:5;3373:16;:30;3390:12;:10;:12::i;:::-;3373:30;;;;;;;;;;;;;;;:44;3404:12;;3373:44;;;;;;;;;;;:57;;:65;;;;3477:5;3456:17;;:26;;;;;;;:::i;:::-;;;;;;;;3492:63;3520:12;:10;:12::i;:::-;3542:4;3549:5;3492:10;:27;;;;:63;;;;;;:::i;:::-;3581:12;:10;:12::i;:::-;3570:31;;;3595:5;3570:31;;;;;;:::i;:::-;;;;;;;;3618:4;3611:11;;;2547:20:5::0;:18;:20::i;:::-;2912:717:19;;;:::o;7550:185::-;7617:7;7683:1;7644:9;:23;7654:12;:10;:12::i;:::-;7644:23;;;;;;;;;;;;;;;:36;;;:40;:83;;7726:1;7644:83;;;7687:9;:23;7697:12;:10;:12::i;:::-;7687:23;;;;;;;;;;;;;;;:36;;;7644:83;7636:92;;7550:185;:::o;1060:166:12:-;1145:4;1183:36;1168:51;;;:11;:51;;;;1161:58;;1060:166;;;:::o;2580:287:5:-;1830:1;2712:7;;:19;2704:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1830:1;2842:7;:18;;;;2580:287::o;850:96:10:-;903:7;929:10;922:17;;850:96;:::o;818:216:8:-;941:86;961:5;991:23;;;1016:2;1020:5;968:58;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;941:19;:86::i;:::-;818:216;;;:::o;2873:209:5:-;1787:1;3053:7;:22;;;;2873:209::o;3642:103:0:-;3708:30;3719:4;3725:12;:10;:12::i;:::-;3708:10;:30::i;:::-;3642:103;:::o;7791:233::-;7874:22;7882:4;7888:7;7874;:22::i;:::-;7869:149;;7944:4;7912:6;:12;7919:4;7912:12;;;;;;;;;;;:20;;:29;7933:7;7912:29;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;;;;;;7994:12;:10;:12::i;:::-;7967:40;;7985:7;7967:40;;7979:4;7967:40;;;;;;;;;;7869:149;7791:233;;:::o;8195:234::-;8278:22;8286:4;8292:7;8278;:22::i;:::-;8274:149;;;8348:5;8316:6;:12;8323:4;8316:12;;;;;;;;;;;:20;;:29;8337:7;8316:29;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;8399:12;:10;:12::i;:::-;8372:40;;8390:7;8372:40;;8384:4;8372:40;;;;;;;;;;8274:149;8195:234;;:::o;5309:1101:19:-;5361:16;5389:19;5422:24;5449:9;:23;5459:12;:10;:12::i;:::-;5449:23;;;;;;;;;;;;;;;:41;;;5422:68;;5500:19;5523:14;:12;:14::i;:::-;5500:37;;5551:9;5563:16;5551:28;;5547:314;5586:11;5581:1;:16;5547:314;;5667:1;5618:16;:30;5635:12;:10;:12::i;:::-;5618:30;;;;;;;;;;;;;;;:33;5649:1;5618:33;;;;;;;;;;;:46;;;:50;5614:102;;;5688:13;;;;:::i;:::-;;;5614:102;5785:1;5733:16;:30;5750:12;:10;:12::i;:::-;5733:30;;;;;;;;;;;;;;;:33;5764:1;5733:33;;;;;;;;;;;:49;;;:53;5729:105;;;5806:13;;;;:::i;:::-;;;5729:105;5847:3;;;;:::i;:::-;;;5547:314;;;;5870:32;5919:11;5905:26;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5870:61;;5941:15;5974:6;5983:16;5974:25;;5970:402;6006:11;6001:1;:16;5970:402;;6034:34;6071:16;:30;6088:12;:10;:12::i;:::-;6071:30;;;;;;;;;;;;;;;:33;6102:1;6071:33;;;;;;;;;;;6034:70;;;;;;;;;;;;;;;;;;;;;;;;;;;6148:1;6121:11;:24;;;:28;6118:94;;;6196:1;6169:15;6185:7;6169:24;;;;;;;;:::i;:::-;;;;;;;:28;;;;;6118:94;6258:1;6228:11;:27;;;:31;6225:97;;;6306:1;6279:15;6295:7;6279:24;;;;;;;;:::i;:::-;;;;;;;:28;;;;;6225:97;6335:9;;;;:::i;:::-;;;6358:3;;;;:::i;:::-;;;6020:352;5970:402;;;;6388:15;6381:22;;;;;;;5309:1101;:::o;2676:117:4:-;1729:16;:14;:16::i;:::-;2744:5:::1;2734:7;;:15;;;;;;;;;;;;;;;;;;2764:22;2773:12;:10;:12::i;:::-;2764:22;;;;;;:::i;:::-;;;;;;;;2676:117::o:0;1063:97::-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1126:27:4::1;:25;:27::i;:::-;1063:97::o:0;2025:65:0:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2025:65:0:o;1868:111:5:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1938:34:5::1;:32;:34::i;:::-;1868:111::o:0;222:90:16:-;269:7;124:23;288:17;;222:90;:::o;318:92::-;366:7;191:24;385:18;;318:92;:::o;7376:247:0:-;7459:25;7487:18;7500:4;7487:12;:18::i;:::-;7459:46;;7540:9;7515:6;:12;7522:4;7515:12;;;;;;;;;;;:22;;:34;;;;7606:9;7587:17;7581:4;7564:52;;;;;;;;;;7449:174;7376:247;;:::o;2429:115:4:-;1482:19;:17;:19::i;:::-;2498:4:::1;2488:7;;:14;;;;;;;;;;;;;;;;;;2517:20;2524:12;:10;:12::i;:::-;2517:20;;;;;;:::i;:::-;;;;;;;;2429:115::o:0;1040:252:8:-;1189:96;1209:5;1239:27;;;1268:4;1274:2;1278:5;1216:68;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1189:19;:96::i;:::-;1040:252;;;;:::o;3868:717::-;4298:23;4324:69;4352:4;4324:69;;;;;;;;;;;;;;;;;4332:5;4324:27;;;;:69;;;;;:::i;:::-;4298:95;;4427:1;4407:10;:17;:21;4403:176;;;4502:10;4491:30;;;;;;;;;;;;:::i;:::-;4483:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;4403:176;3949:636;3868:717;;:::o;4026:501:0:-;4114:22;4122:4;4128:7;4114;:22::i;:::-;4109:412;;4297:39;4328:7;4297:30;:39::i;:::-;4407:49;4446:4;4438:13;;4453:2;4407:30;:49::i;:::-;4204:274;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4152:358;;;;;;;;;;;:::i;:::-;;;;;;;;4109:412;4026:501;;:::o;2188:106:4:-;2254:8;:6;:8::i;:::-;2246:41;;;;;;;;;;;;:::i;:::-;;;;;;;;;2188:106::o;1166:95::-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1249:5:4::1;1239:7;;:15;;;;;;;;;;;;;;;;;;1166:95::o:0;1985:109:5:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1787:1:5::1;2065:7;:22;;;;1985:109::o:0;2010:106:4:-;2080:8;:6;:8::i;:::-;2079:9;2071:38;;;;;;;;;;;;:::i;:::-;;;;;;;;;2010:106::o;3884:223:9:-;4017:12;4048:52;4070:6;4078:4;4084:1;4087:12;4048:21;:52::i;:::-;4041:59;;3884:223;;;;;:::o;2146:149:11:-;2204:13;2236:52;2264:4;2248:22;;333:2;2236:52;;:11;:52::i;:::-;2229:59;;2146:149;;;:::o;1557:437::-;1632:13;1657:19;1702:1;1693:6;1689:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1679:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1657:47;;1714:15;:6;1721:1;1714:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1739;:6;1746:1;1739:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1769:9;1794:1;1785:6;1781:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1769:26;;1764:128;1801:1;1797;:5;1764:128;;;1835:8;1852:3;1844:5;:11;1835:21;;;;;;;:::i;:::-;;;;;1823:6;1830:1;1823:9;;;;;;;;:::i;:::-;;;;;:33;;;;;;;;;;;1880:1;1870:11;;;;;1804:3;;;;:::i;:::-;;;1764:128;;;;1918:1;1909:5;:10;1901:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;1980:6;1966:21;;;1557:437;;;;:::o;4971:446:9:-;5136:12;5193:5;5168:21;:30;;5160:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;5252:12;5266:23;5293:6;:11;;5312:5;5319:4;5293:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5251:73;;;;5341:69;5368:6;5376:7;5385:10;5397:12;5341:26;:69::i;:::-;5334:76;;;;4971:446;;;;;;:::o;6589:628::-;6769:12;6797:7;6793:418;;;6845:1;6824:10;:17;:22;6820:286;;7039:18;7050:6;7039:10;:18::i;:::-;7031:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;6820:286;7126:10;7119:17;;;;6793:418;7167:33;7175:10;7187:12;7167:7;:33::i;:::-;6589:628;;;;;;;:::o;1186:320::-;1246:4;1498:1;1476:7;:19;;;:23;1469:30;;1186:320;;;:::o;7739:540::-;7918:1;7898:10;:17;:21;7894:379;;;8126:10;8120:17;8182:15;8169:10;8165:2;8161:19;8154:44;7894:379;8249:12;8242:20;;;;;;;;;;;:::i;:::-;;;;;;;;88:117:26;197:1;194;187:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:77::-;1555:7;1584:5;1573:16;;1518:77;;;:::o;1601:122::-;1674:24;1692:5;1674:24;:::i;:::-;1667:5;1664:35;1654:63;;1713:1;1710;1703:12;1654:63;1601:122;:::o;1729:139::-;1775:5;1813:6;1800:20;1791:29;;1829:33;1856:5;1829:33;:::i;:::-;1729:139;;;;:::o;1874:329::-;1933:6;1982:2;1970:9;1961:7;1957:23;1953:32;1950:119;;;1988:79;;:::i;:::-;1950:119;2108:1;2133:53;2178:7;2169:6;2158:9;2154:22;2133:53;:::i;:::-;2123:63;;2079:117;1874:329;;;;:::o;2209:77::-;2246:7;2275:5;2264:16;;2209:77;;;:::o;2292:122::-;2365:24;2383:5;2365:24;:::i;:::-;2358:5;2355:35;2345:63;;2404:1;2401;2394:12;2345:63;2292:122;:::o;2420:139::-;2466:5;2504:6;2491:20;2482:29;;2520:33;2547:5;2520:33;:::i;:::-;2420:139;;;;:::o;2565:329::-;2624:6;2673:2;2661:9;2652:7;2648:23;2644:32;2641:119;;;2679:79;;:::i;:::-;2641:119;2799:1;2824:53;2869:7;2860:6;2849:9;2845:22;2824:53;:::i;:::-;2814:63;;2770:117;2565:329;;;;:::o;2900:118::-;2987:24;3005:5;2987:24;:::i;:::-;2982:3;2975:37;2900:118;;:::o;3024:222::-;3117:4;3155:2;3144:9;3140:18;3132:26;;3168:71;3236:1;3225:9;3221:17;3212:6;3168:71;:::i;:::-;3024:222;;;;:::o;3252:126::-;3289:7;3329:42;3322:5;3318:54;3307:65;;3252:126;;;:::o;3384:96::-;3421:7;3450:24;3468:5;3450:24;:::i;:::-;3439:35;;3384:96;;;:::o;3486:122::-;3559:24;3577:5;3559:24;:::i;:::-;3552:5;3549:35;3539:63;;3598:1;3595;3588:12;3539:63;3486:122;:::o;3614:139::-;3660:5;3698:6;3685:20;3676:29;;3714:33;3741:5;3714:33;:::i;:::-;3614:139;;;;:::o;3759:474::-;3827:6;3835;3884:2;3872:9;3863:7;3859:23;3855:32;3852:119;;;3890:79;;:::i;:::-;3852:119;4010:1;4035:53;4080:7;4071:6;4060:9;4056:22;4035:53;:::i;:::-;4025:63;;3981:117;4137:2;4163:53;4208:7;4199:6;4188:9;4184:22;4163:53;:::i;:::-;4153:63;;4108:118;3759:474;;;;;:::o;4239:118::-;4326:24;4344:5;4326:24;:::i;:::-;4321:3;4314:37;4239:118;;:::o;4363:222::-;4456:4;4494:2;4483:9;4479:18;4471:26;;4507:71;4575:1;4564:9;4560:17;4551:6;4507:71;:::i;:::-;4363:222;;;;:::o;4591:329::-;4650:6;4699:2;4687:9;4678:7;4674:23;4670:32;4667:119;;;4705:79;;:::i;:::-;4667:119;4825:1;4850:53;4895:7;4886:6;4875:9;4871:22;4850:53;:::i;:::-;4840:63;;4796:117;4591:329;;;;:::o;4926:180::-;4974:77;4971:1;4964:88;5071:4;5068:1;5061:15;5095:4;5092:1;5085:15;5112:233;5151:3;5174:24;5192:5;5174:24;:::i;:::-;5165:33;;5220:66;5213:5;5210:77;5207:103;;5290:18;;:::i;:::-;5207:103;5337:1;5330:5;5326:13;5319:20;;5112:233;;;:::o;5351:194::-;5391:4;5411:20;5429:1;5411:20;:::i;:::-;5406:25;;5445:20;5463:1;5445:20;:::i;:::-;5440:25;;5489:1;5486;5482:9;5474:17;;5513:1;5507:4;5504:11;5501:37;;;5518:18;;:::i;:::-;5501:37;5351:194;;;;:::o;5551:169::-;5635:11;5669:6;5664:3;5657:19;5709:4;5704:3;5700:14;5685:29;;5551:169;;;;:::o;5726:234::-;5866:34;5862:1;5854:6;5850:14;5843:58;5935:17;5930:2;5922:6;5918:15;5911:42;5726:234;:::o;5966:366::-;6108:3;6129:67;6193:2;6188:3;6129:67;:::i;:::-;6122:74;;6205:93;6294:3;6205:93;:::i;:::-;6323:2;6318:3;6314:12;6307:19;;5966:366;;;:::o;6338:419::-;6504:4;6542:2;6531:9;6527:18;6519:26;;6591:9;6585:4;6581:20;6577:1;6566:9;6562:17;6555:47;6619:131;6745:4;6619:131;:::i;:::-;6611:139;;6338:419;;;:::o;6763:180::-;6811:77;6808:1;6801:88;6908:4;6905:1;6898:15;6932:4;6929:1;6922:15;6949:191;6989:3;7008:20;7026:1;7008:20;:::i;:::-;7003:25;;7042:20;7060:1;7042:20;:::i;:::-;7037:25;;7085:1;7082;7078:9;7071:16;;7106:3;7103:1;7100:10;7097:36;;;7113:18;;:::i;:::-;7097:36;6949:191;;;;:::o;7146:348::-;7186:7;7209:20;7227:1;7209:20;:::i;:::-;7204:25;;7243:20;7261:1;7243:20;:::i;:::-;7238:25;;7431:1;7363:66;7359:74;7356:1;7353:81;7348:1;7341:9;7334:17;7330:105;7327:131;;;7438:18;;:::i;:::-;7327:131;7486:1;7483;7479:9;7468:20;;7146:348;;;;:::o;7500:180::-;7548:77;7545:1;7538:88;7645:4;7642:1;7635:15;7669:4;7666:1;7659:15;7686:185;7726:1;7743:20;7761:1;7743:20;:::i;:::-;7738:25;;7777:20;7795:1;7777:20;:::i;:::-;7772:25;;7816:1;7806:35;;7821:18;;:::i;:::-;7806:35;7863:1;7860;7856:9;7851:14;;7686:185;;;;:::o;7877:231::-;8017:34;8013:1;8005:6;8001:14;7994:58;8086:14;8081:2;8073:6;8069:15;8062:39;7877:231;:::o;8114:366::-;8256:3;8277:67;8341:2;8336:3;8277:67;:::i;:::-;8270:74;;8353:93;8442:3;8353:93;:::i;:::-;8471:2;8466:3;8462:12;8455:19;;8114:366;;;:::o;8486:419::-;8652:4;8690:2;8679:9;8675:18;8667:26;;8739:9;8733:4;8729:20;8725:1;8714:9;8710:17;8703:47;8767:131;8893:4;8767:131;:::i;:::-;8759:139;;8486:419;;;:::o;8911:230::-;9051:34;9047:1;9039:6;9035:14;9028:58;9120:13;9115:2;9107:6;9103:15;9096:38;8911:230;:::o;9147:366::-;9289:3;9310:67;9374:2;9369:3;9310:67;:::i;:::-;9303:74;;9386:93;9475:3;9386:93;:::i;:::-;9504:2;9499:3;9495:12;9488:19;;9147:366;;;:::o;9519:419::-;9685:4;9723:2;9712:9;9708:18;9700:26;;9772:9;9766:4;9762:20;9758:1;9747:9;9743:17;9736:47;9800:131;9926:4;9800:131;:::i;:::-;9792:139;;9519:419;;;:::o;9944:181::-;10084:33;10080:1;10072:6;10068:14;10061:57;9944:181;:::o;10131:366::-;10273:3;10294:67;10358:2;10353:3;10294:67;:::i;:::-;10287:74;;10370:93;10459:3;10370:93;:::i;:::-;10488:2;10483:3;10479:12;10472:19;;10131:366;;;:::o;10503:419::-;10669:4;10707:2;10696:9;10692:18;10684:26;;10756:9;10750:4;10746:20;10742:1;10731:9;10727:17;10720:47;10784:131;10910:4;10784:131;:::i;:::-;10776:139;;10503:419;;;:::o;10928:118::-;11015:24;11033:5;11015:24;:::i;:::-;11010:3;11003:37;10928:118;;:::o;11052:332::-;11173:4;11211:2;11200:9;11196:18;11188:26;;11224:71;11292:1;11281:9;11277:17;11268:6;11224:71;:::i;:::-;11305:72;11373:2;11362:9;11358:18;11349:6;11305:72;:::i;:::-;11052:332;;;;;:::o;11390:180::-;11438:77;11435:1;11428:88;11535:4;11532:1;11525:15;11559:4;11556:1;11549:15;11576:222;11669:4;11707:2;11696:9;11692:18;11684:26;;11720:71;11788:1;11777:9;11773:17;11764:6;11720:71;:::i;:::-;11576:222;;;;:::o;11804:442::-;11953:4;11991:2;11980:9;11976:18;11968:26;;12004:71;12072:1;12061:9;12057:17;12048:6;12004:71;:::i;:::-;12085:72;12153:2;12142:9;12138:18;12129:6;12085:72;:::i;:::-;12167;12235:2;12224:9;12220:18;12211:6;12167:72;:::i;:::-;11804:442;;;;;;:::o;12252:116::-;12322:21;12337:5;12322:21;:::i;:::-;12315:5;12312:32;12302:60;;12358:1;12355;12348:12;12302:60;12252:116;:::o;12374:137::-;12428:5;12459:6;12453:13;12444:22;;12475:30;12499:5;12475:30;:::i;:::-;12374:137;;;;:::o;12517:345::-;12584:6;12633:2;12621:9;12612:7;12608:23;12604:32;12601:119;;;12639:79;;:::i;:::-;12601:119;12759:1;12784:61;12837:7;12828:6;12817:9;12813:22;12784:61;:::i;:::-;12774:71;;12730:125;12517:345;;;;:::o;12868:229::-;13008:34;13004:1;12996:6;12992:14;12985:58;13077:12;13072:2;13064:6;13060:15;13053:37;12868:229;:::o;13103:366::-;13245:3;13266:67;13330:2;13325:3;13266:67;:::i;:::-;13259:74;;13342:93;13431:3;13342:93;:::i;:::-;13460:2;13455:3;13451:12;13444:19;;13103:366;;;:::o;13475:419::-;13641:4;13679:2;13668:9;13664:18;13656:26;;13728:9;13722:4;13718:20;13714:1;13703:9;13699:17;13692:47;13756:131;13882:4;13756:131;:::i;:::-;13748:139;;13475:419;;;:::o;13900:148::-;14002:11;14039:3;14024:18;;13900:148;;;;:::o;14054:173::-;14194:25;14190:1;14182:6;14178:14;14171:49;14054:173;:::o;14233:402::-;14393:3;14414:85;14496:2;14491:3;14414:85;:::i;:::-;14407:92;;14508:93;14597:3;14508:93;:::i;:::-;14626:2;14621:3;14617:12;14610:19;;14233:402;;;:::o;14641:99::-;14693:6;14727:5;14721:12;14711:22;;14641:99;;;:::o;14746:246::-;14827:1;14837:113;14851:6;14848:1;14845:13;14837:113;;;14936:1;14931:3;14927:11;14921:18;14917:1;14912:3;14908:11;14901:39;14873:2;14870:1;14866:10;14861:15;;14837:113;;;14984:1;14975:6;14970:3;14966:16;14959:27;14808:184;14746:246;;;:::o;14998:390::-;15104:3;15132:39;15165:5;15132:39;:::i;:::-;15187:89;15269:6;15264:3;15187:89;:::i;:::-;15180:96;;15285:65;15343:6;15338:3;15331:4;15324:5;15320:16;15285:65;:::i;:::-;15375:6;15370:3;15366:16;15359:23;;15108:280;14998:390;;;;:::o;15394:167::-;15534:19;15530:1;15522:6;15518:14;15511:43;15394:167;:::o;15567:402::-;15727:3;15748:85;15830:2;15825:3;15748:85;:::i;:::-;15741:92;;15842:93;15931:3;15842:93;:::i;:::-;15960:2;15955:3;15951:12;15944:19;;15567:402;;;:::o;15975:967::-;16357:3;16379:148;16523:3;16379:148;:::i;:::-;16372:155;;16544:95;16635:3;16626:6;16544:95;:::i;:::-;16537:102;;16656:148;16800:3;16656:148;:::i;:::-;16649:155;;16821:95;16912:3;16903:6;16821:95;:::i;:::-;16814:102;;16933:3;16926:10;;15975:967;;;;;:::o;16948:102::-;16989:6;17040:2;17036:7;17031:2;17024:5;17020:14;17016:28;17006:38;;16948:102;;;:::o;17056:377::-;17144:3;17172:39;17205:5;17172:39;:::i;:::-;17227:71;17291:6;17286:3;17227:71;:::i;:::-;17220:78;;17307:65;17365:6;17360:3;17353:4;17346:5;17342:16;17307:65;:::i;:::-;17397:29;17419:6;17397:29;:::i;:::-;17392:3;17388:39;17381:46;;17148:285;17056:377;;;;:::o;17439:313::-;17552:4;17590:2;17579:9;17575:18;17567:26;;17639:9;17633:4;17629:20;17625:1;17614:9;17610:17;17603:47;17667:78;17740:4;17731:6;17667:78;:::i;:::-;17659:86;;17439:313;;;;:::o;17758:170::-;17898:22;17894:1;17886:6;17882:14;17875:46;17758:170;:::o;17934:366::-;18076:3;18097:67;18161:2;18156:3;18097:67;:::i;:::-;18090:74;;18173:93;18262:3;18173:93;:::i;:::-;18291:2;18286:3;18282:12;18275:19;;17934:366;;;:::o;18306:419::-;18472:4;18510:2;18499:9;18495:18;18487:26;;18559:9;18553:4;18549:20;18545:1;18534:9;18530:17;18523:47;18587:131;18713:4;18587:131;:::i;:::-;18579:139;;18306:419;;;:::o;18731:166::-;18871:18;18867:1;18859:6;18855:14;18848:42;18731:166;:::o;18903:366::-;19045:3;19066:67;19130:2;19125:3;19066:67;:::i;:::-;19059:74;;19142:93;19231:3;19142:93;:::i;:::-;19260:2;19255:3;19251:12;19244:19;;18903:366;;;:::o;19275:419::-;19441:4;19479:2;19468:9;19464:18;19456:26;;19528:9;19522:4;19518:20;19514:1;19503:9;19499:17;19492:47;19556:131;19682:4;19556:131;:::i;:::-;19548:139;;19275:419;;;:::o;19700:171::-;19739:3;19762:24;19780:5;19762:24;:::i;:::-;19753:33;;19808:4;19801:5;19798:15;19795:41;;19816:18;;:::i;:::-;19795:41;19863:1;19856:5;19852:13;19845:20;;19700:171;;;:::o;19877:182::-;20017:34;20013:1;20005:6;20001:14;19994:58;19877:182;:::o;20065:366::-;20207:3;20228:67;20292:2;20287:3;20228:67;:::i;:::-;20221:74;;20304:93;20393:3;20304:93;:::i;:::-;20422:2;20417:3;20413:12;20406:19;;20065:366;;;:::o;20437:419::-;20603:4;20641:2;20630:9;20626:18;20618:26;;20690:9;20684:4;20680:20;20676:1;20665:9;20661:17;20654:47;20718:131;20844:4;20718:131;:::i;:::-;20710:139;;20437:419;;;:::o;20862:225::-;21002:34;20998:1;20990:6;20986:14;20979:58;21071:8;21066:2;21058:6;21054:15;21047:33;20862:225;:::o;21093:366::-;21235:3;21256:67;21320:2;21315:3;21256:67;:::i;:::-;21249:74;;21332:93;21421:3;21332:93;:::i;:::-;21450:2;21445:3;21441:12;21434:19;;21093:366;;;:::o;21465:419::-;21631:4;21669:2;21658:9;21654:18;21646:26;;21718:9;21712:4;21708:20;21704:1;21693:9;21689:17;21682:47;21746:131;21872:4;21746:131;:::i;:::-;21738:139;;21465:419;;;:::o;21890:98::-;21941:6;21975:5;21969:12;21959:22;;21890:98;;;:::o;21994:147::-;22095:11;22132:3;22117:18;;21994:147;;;;:::o;22147:386::-;22251:3;22279:38;22311:5;22279:38;:::i;:::-;22333:88;22414:6;22409:3;22333:88;:::i;:::-;22326:95;;22430:65;22488:6;22483:3;22476:4;22469:5;22465:16;22430:65;:::i;:::-;22520:6;22515:3;22511:16;22504:23;;22255:278;22147:386;;;;:::o;22539:271::-;22669:3;22691:93;22780:3;22771:6;22691:93;:::i;:::-;22684:100;;22801:3;22794:10;;22539:271;;;;:::o;22816:179::-;22956:31;22952:1;22944:6;22940:14;22933:55;22816:179;:::o;23001:366::-;23143:3;23164:67;23228:2;23223:3;23164:67;:::i;:::-;23157:74;;23240:93;23329:3;23240:93;:::i;:::-;23358:2;23353:3;23349:12;23342:19;;23001:366;;;:::o;23373:419::-;23539:4;23577:2;23566:9;23562:18;23554:26;;23626:9;23620:4;23616:20;23612:1;23601:9;23597:17;23590:47;23654:131;23780:4;23654:131;:::i;:::-;23646:139;;23373:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"2432000","executionCost":"infinite","totalCost":"infinite"},"external":{"DEFAULT_ADMIN_ROLE()":"357","__BaseUpgradeablePausable_init(address)":"infinite","activateWithdrawalTimer(uint256)":"infinite","calculateRewards()":"infinite","getRoleAdmin(bytes32)":"infinite","getStakerClaimedRewardInfo()":"2634","getUserStakedGENZBalance()":"infinite","getVersionID()":"2504","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"3251","isAdmin()":"2836","pause()":"infinite","paused()":"2590","renounceRole(bytes32,address)":"infinite","revokeRole(bytes32,address)":"infinite","setWithdrawTime(uint256)":"infinite","stakeGENZ(uint256)":"infinite","supportsInterface(bytes4)":"751","totalTokensStaked()":"2473","unpause()":"infinite","updateMinimumStakeAmount(uint256)":"26199","withdrawGENZ(uint256)":"infinite"},"internal":{"getActiveVersionID()":"infinite"}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","__BaseUpgradeablePausable_init(address)":"6e810b1a","activateWithdrawalTimer(uint256)":"6c64f0b4","calculateRewards()":"3e50de30","getRoleAdmin(bytes32)":"248a9ca3","getStakerClaimedRewardInfo()":"53b3ad7f","getUserStakedGENZBalance()":"ed0cdb1a","getVersionID()":"77c379a4","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isAdmin()":"b6db75a0","pause()":"8456cb59","paused()":"5c975abb","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","setWithdrawTime(uint256)":"58418587","stakeGENZ(uint256)":"d6fb97a5","supportsInterface(bytes4)":"01ffc9a7","totalTokensStaked()":"b0e31b2d","unpause()":"3f4ba83a","updateMinimumStakeAmount(uint256)":"77539417","withdrawGENZ(uint256)":"060e5c6e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddressGENZ\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeInDays\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BaseUpgradeablePausable__ZeroAddressError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GENZStaking__NotAMinimumStakeAmountError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GENZStaking__TransactionFailedError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"StakedGENZ\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UnstakedGENZ\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinStakingAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timeInMinutes\",\"type\":\"uint256\"}],\"name\":\"UpdatedWithdrawTimer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"activateWithdrawalTimer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakerClaimedRewardInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserStakedGENZBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersionID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeInMinutes\",\"type\":\"uint256\"}],\"name\":\"setWithdrawTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"stakeGENZ\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateMinimumStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawGENZ\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"[PRODUCTION TODO: _withdrawTimer = timeInDays * 1 days;]\"},\"setWithdrawTime(uint256)\":{\"notice\":\"[PRODUCTION TODO: _withdrawTimer = timeInHours * 1 hours;]\"}},\"notice\":\"NOTE: Staking tokens would be used for activities like flash loans  to generate rewards for the staked users\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/staking/GENZStaking.sol\":\"GENZStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xe73087c5001a37cf7186b3709377c7ceb01a0d38fb908723d1464cea66b4958c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"contracts/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./Constants.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nerror BaseUpgradeablePausable__ZeroAddressError();\\n\\ncontract BaseUpgradeablePausable is \\n    Initializable, \\n    PausableUpgradeable, \\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable \\n{\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin(), \\\"Must have admin role to perform this action.\\\");\\n        _;\\n    }\\n\\n    function __BaseUpgradeablePausable_init(address owner) public onlyInitializing() {\\n        if(owner == address(0)) {\\n            revert BaseUpgradeablePausable__ZeroAddressError();\\n        }\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        _grantRole(Constants.getAdminRole(), owner);\\n        _grantRole(Constants.getPauserRole(), owner);\\n\\n        _setRoleAdmin(Constants.getPauserRole(), Constants.getAdminRole());\\n        _setRoleAdmin(Constants.getAdminRole(), Constants.getAdminRole());\\n    }\\n\\n    function isAdmin() public view returns (bool) {\\n        return hasRole(Constants.getAdminRole(), _msgSender());\\n    }\\n\\n  \\n}\",\"keccak256\":\"0x29b172c9fffe9bc60c702a071bae35f301b1b5c3824f0ca44b3d2dcabbda5af9\",\"license\":\"MIT\"},\"contracts/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nlibrary Constants {\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    function getAdminRole() internal pure returns (bytes32) {\\n        return ADMIN_ROLE;\\n    }\\n\\n    function getPauserRole() internal pure returns (bytes32) {\\n        return PAUSER_ROLE;\\n    }\\n}\",\"keccak256\":\"0xeae9d870bc2ace9284ae575eb6c534c177ff6f4a60b98f10a0a8156f19f760cf\",\"license\":\"BUSL-1.1\"},\"contracts/core/staking/GENZStaking.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// @title GENZ Staking Contract\\n/// @author Anshik Bansal <anshik@safezen.finance>\\n\\n/// Importing required interfaces\\nimport \\\"./../../interfaces/IBuyGENZ.sol\\\";\\nimport \\\"./../../interfaces/IGENZStaking.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\\\";\\n\\n/// Importing required libraries\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n/// Importing required contracts\\nimport \\\"./../../BaseUpgradeablePausable.sol\\\";\\n\\nerror GENZStaking__TransactionFailedError();\\nerror GENZStaking__NotAMinimumStakeAmountError();\\n\\n/// NOTE: Staking tokens would be used for activities like flash loans \\n/// to generate rewards for the staked users\\ncontract GENZStaking is IGENZStaking, BaseUpgradeablePausable {\\n    uint256 private _currVersion;\\n    uint256 private _minStakeValue;\\n    uint256 private _withdrawTimer;\\n    uint256 public override totalTokensStaked;\\n    IERC20Upgradeable private immutable _tokenGENZ;\\n\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /// TODO: Versionable Info data to be included in functions\\n    struct VersionableInfo {\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 distributedAmount;\\n        uint256 tokenDistributed;\\n    }\\n\\n    struct UserInfo {\\n        bool hasStaked;\\n        uint256 stakedTokens;\\n        uint256 startVersionBlock; \\n        uint256 claimedRewards;\\n    }\\n\\n    struct UserBalanceInfo {\\n        uint256 stakedTokens;\\n        uint256 withdrawnTokens;\\n    }\\n\\n    struct WithdrawWaitPeriod{\\n        bool ifTimerStarted;\\n        uint256 GENZTokenCount;\\n        uint256 canWithdrawTime;\\n    }\\n\\n    mapping (address => WithdrawWaitPeriod) private checkWaitTime;\\n\\n    mapping(address => UserInfo) private usersInfo;\\n\\n    /// versionID => VersionableInfo\\n    mapping(uint256 => VersionableInfo) private versionableInfos;\\n\\n    /// userAddress => versionID => UserBalanceInfo\\n    mapping(address => mapping(uint256 => UserBalanceInfo)) private usersBalanceInfo;\\n\\n    /// [PRODUCTION TODO: _withdrawTimer = timeInDays * 1 days;]\\n    constructor(\\n        address tokenAddressGENZ, \\n        uint256 timeInDays\\n    ) {\\n        _minStakeValue = 1e18;\\n        _withdrawTimer = timeInDays * 1 minutes;\\n        _tokenGENZ = IERC20Upgradeable(tokenAddressGENZ);\\n        \\n    }\\n\\n    function pause() external onlyAdmin {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyAdmin {\\n        _unpause();\\n    }\\n\\n    function updateMinimumStakeAmount(uint256 value) external onlyAdmin {\\n        _minStakeValue = value;\\n        emit UpdatedMinStakingAmount(value);\\n    }\\n\\n    /// [PRODUCTION TODO: _withdrawTimer = timeInHours * 1 hours;]\\n    function setWithdrawTime(uint256 timeInMinutes) external onlyAdmin {\\n        _withdrawTimer = timeInMinutes * 1 minutes;\\n        emit UpdatedWithdrawTimer(timeInMinutes);\\n    }\\n\\n    function stakeGENZ(uint256 value) public override nonReentrant returns(bool) {\\n        if (value < _minStakeValue) {\\n            revert GENZStaking__NotAMinimumStakeAmountError();\\n        }\\n        ++_currVersion;\\n        UserInfo storage userInfo = usersInfo[_msgSender()];\\n        if(!userInfo.hasStaked) {\\n            userInfo.hasStaked = true;\\n            userInfo.startVersionBlock = _currVersion;\\n        }\\n        userInfo.stakedTokens += value;\\n        usersBalanceInfo[_msgSender()][_currVersion].stakedTokens = value;        \\n        totalTokensStaked += value;\\n        _tokenGENZ.safeTransferFrom(_msgSender(), address(this), value);\\n        emit StakedGENZ(_msgSender(), value);\\n        return true;\\n    }\\n    \\n    // 2 hours withdrawal period\\n    function activateWithdrawalTimer(uint256 value) external override returns(bool) {\\n        if (\\n            (!(checkWaitTime[_msgSender()].ifTimerStarted)) || \\n            (checkWaitTime[_msgSender()].GENZTokenCount < value)\\n        ) {\\n            WithdrawWaitPeriod storage waitingTimeCountdown = checkWaitTime[_msgSender()];\\n            waitingTimeCountdown.ifTimerStarted = true;\\n            waitingTimeCountdown.GENZTokenCount = value;\\n            waitingTimeCountdown.canWithdrawTime = _withdrawTimer + block.timestamp;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    function withdrawGENZ(uint256 value) external override nonReentrant returns(bool) {\\n        UserInfo storage userInfo = usersInfo[_msgSender()];\\n        if (\\n            (userInfo.stakedTokens < value) || \\n            (block.timestamp < checkWaitTime[_msgSender()].canWithdrawTime) || \\n            (value > checkWaitTime[_msgSender()].GENZTokenCount)\\n        ) {\\n            revert GENZStaking__TransactionFailedError();\\n        }\\n        ++_currVersion;\\n        totalTokensStaked -= value;\\n        userInfo.stakedTokens -= value;\\n        usersBalanceInfo[_msgSender()][_currVersion].withdrawnTokens = value;\\n        if (checkWaitTime[_msgSender()].GENZTokenCount == value) {\\n            checkWaitTime[_msgSender()].ifTimerStarted = false;\\n        }\\n        checkWaitTime[_msgSender()].GENZTokenCount -= value;\\n        _tokenGENZ.safeTransfer(_msgSender(), value);\\n        emit UnstakedGENZ(_msgSender(), value);\\n        return true;\\n    }\\n\\n    function getVersionID() public view returns(uint256) {\\n        return _currVersion;\\n    }\\n\\n    function getActiveVersionID() internal view returns(uint256[] memory) {\\n        uint256 activeCount = 0;\\n        uint256 userStartVersion = usersInfo[_msgSender()].startVersionBlock;\\n        uint256 currVersion =  getVersionID();\\n        for(uint256 i = userStartVersion; i <= currVersion;) {\\n            if (usersBalanceInfo[_msgSender()][i].stakedTokens > 0) {\\n                ++activeCount;\\n            }\\n            if (usersBalanceInfo[_msgSender()][i].withdrawnTokens > 0) {\\n                ++activeCount;\\n            }\\n            ++i;\\n        }\\n        uint256[] memory activeVersionID = new uint256[](activeCount);\\n        uint256 counter = 0;\\n        for(uint i = userStartVersion; i <= currVersion;) {\\n            UserBalanceInfo memory userBalance = usersBalanceInfo[_msgSender()][i];\\n            if(userBalance.stakedTokens > 0) {\\n                activeVersionID[counter] = i;\\n            }\\n            if(userBalance.withdrawnTokens > 0) {\\n                activeVersionID[counter] = i;\\n            }\\n            ++counter;\\n            ++i;\\n        }\\n        return activeVersionID;\\n    }\\n\\n    function calculateRewards() external view returns(uint256) {\\n        uint256 userBalance = 0;\\n        uint256[] memory activeVersionID = getActiveVersionID();\\n        uint256 startVersionID = activeVersionID[0];\\n        uint256 userPremiumEarned = 0;\\n        uint256 counter = 0;\\n        for(uint256 i = startVersionID; i <= _currVersion;) {\\n            UserBalanceInfo memory userVersionBalance = usersBalanceInfo[_msgSender()][i];\\n            if(activeVersionID[counter] == i) {\\n                if (userVersionBalance.stakedTokens > 0) {\\n                    userBalance += userVersionBalance.stakedTokens;\\n                }\\n                else {\\n                    userBalance -= userVersionBalance.withdrawnTokens;\\n                }\\n                ++counter;\\n            }\\n            VersionableInfo storage versionInfo = versionableInfos[i];           \\n            uint256 duration = versionInfo.endTime - versionInfo.startTime;\\n            userPremiumEarned += ((duration * userBalance * versionInfo.distributedAmount)/ (versionInfo.tokenDistributed));\\n            ++i;\\n        }\\n        return userPremiumEarned;\\n    }\\n\\n    function getUserStakedGENZBalance() external view override returns(uint256) {\\n        return (usersInfo[_msgSender()].stakedTokens > 0 ? usersInfo[_msgSender()].stakedTokens : 0);\\n    }\\n\\n    function getStakerClaimedRewardInfo() external view returns(uint256) {\\n        return usersInfo[_msgSender()].claimedRewards;\\n    }\\n}\",\"keccak256\":\"0xcea267cb4b40a7e03bc24640dce7456f8f86a057401930ee4352d0129dc93b2e\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBuyGENZ.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IBuyGENZ {\\n    \\n    /// Custom Error Codes\\n    error BuySellGENZ__PausedError();\\n    error BuySellGENZ__LowAmountError();\\n    error BuySellGENZ__LowSZTBalanceError();\\n    error BuySellGENZ__GENZBurnFailedError();\\n    error BuySellGENZ__GENZMintFailedError();\\n    error BuySellGENZ__ImmutableChangesError();\\n    error BuySellGENZ__TransactionFailedError();\\n    error BuySellGENZ__InsufficientBalanceError();\\n    error BuySellGENZ__ZeroAddressTransactionError();\\n\\n}\",\"keccak256\":\"0x74d79d87e23c822d6044d2489608ddbeb5ccc83b4db663c7bb509f46803da0ee\",\"license\":\"MIT\"},\"contracts/interfaces/IGENZStaking.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\ninterface IGENZStaking {\\n\\n    event UpdatedWithdrawTimer(uint256 indexed timeInMinutes);\\n\\n    event UpdatedMinStakingAmount(uint256 indexed value);\\n\\n    event StakedGENZ(address indexed userAddress, uint256 value);\\n\\n    event UnstakedGENZ(address indexed userAddress, uint256 value);\\n\\n    function stakeGENZ(uint256 _value) external returns(bool);\\n\\n    function activateWithdrawalTimer(uint256 _value) external returns(bool);\\n\\n    function withdrawGENZ(uint256 _value) external returns(bool);\\n\\n    function totalTokensStaked() external view returns(uint256);\\n\\n    function getUserStakedGENZBalance() external view returns(uint256);\\n\\n}\",\"keccak256\":\"0x386900ee190a486d4e7197828a671c60a054f8c06f32e33ec0ffffcbb5895636\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1500,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":601,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":706,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":1719,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"__gap","offset":0,"slot":"101","type":"t_array(t_uint256)50_storage"},{"astId":39,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"_roles","offset":0,"slot":"151","type":"t_mapping(t_bytes32,t_struct(RoleData)34_storage)"},{"astId":334,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"__gap","offset":0,"slot":"152","type":"t_array(t_uint256)49_storage"},{"astId":721,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"_status","offset":0,"slot":"201","type":"t_uint256"},{"astId":779,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"__gap","offset":0,"slot":"202","type":"t_array(t_uint256)49_storage"},{"astId":4827,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"_currVersion","offset":0,"slot":"251","type":"t_uint256"},{"astId":4829,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"_minStakeValue","offset":0,"slot":"252","type":"t_uint256"},{"astId":4831,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"_withdrawTimer","offset":0,"slot":"253","type":"t_uint256"},{"astId":4834,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"totalTokensStaked","offset":0,"slot":"254","type":"t_uint256"},{"astId":4876,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"checkWaitTime","offset":0,"slot":"255","type":"t_mapping(t_address,t_struct(WithdrawWaitPeriod)4871_storage)"},{"astId":4881,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"usersInfo","offset":0,"slot":"256","type":"t_mapping(t_address,t_struct(UserInfo)4859_storage)"},{"astId":4887,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"versionableInfos","offset":0,"slot":"257","type":"t_mapping(t_uint256,t_struct(VersionableInfo)4850_storage)"},{"astId":4895,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"usersBalanceInfo","offset":0,"slot":"258","type":"t_mapping(t_address,t_mapping(t_uint256,t_struct(UserBalanceInfo)4864_storage))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_uint256,t_struct(UserBalanceInfo)4864_storage))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => struct GENZStaking.UserBalanceInfo))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_struct(UserBalanceInfo)4864_storage)"},"t_mapping(t_address,t_struct(UserInfo)4859_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct GENZStaking.UserInfo)","numberOfBytes":"32","value":"t_struct(UserInfo)4859_storage"},"t_mapping(t_address,t_struct(WithdrawWaitPeriod)4871_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct GENZStaking.WithdrawWaitPeriod)","numberOfBytes":"32","value":"t_struct(WithdrawWaitPeriod)4871_storage"},"t_mapping(t_bytes32,t_struct(RoleData)34_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)34_storage"},"t_mapping(t_uint256,t_struct(UserBalanceInfo)4864_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct GENZStaking.UserBalanceInfo)","numberOfBytes":"32","value":"t_struct(UserBalanceInfo)4864_storage"},"t_mapping(t_uint256,t_struct(VersionableInfo)4850_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct GENZStaking.VersionableInfo)","numberOfBytes":"32","value":"t_struct(VersionableInfo)4850_storage"},"t_struct(RoleData)34_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":31,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":33,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(UserBalanceInfo)4864_storage":{"encoding":"inplace","label":"struct GENZStaking.UserBalanceInfo","members":[{"astId":4861,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"stakedTokens","offset":0,"slot":"0","type":"t_uint256"},{"astId":4863,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"withdrawnTokens","offset":0,"slot":"1","type":"t_uint256"}],"numberOfBytes":"64"},"t_struct(UserInfo)4859_storage":{"encoding":"inplace","label":"struct GENZStaking.UserInfo","members":[{"astId":4852,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"hasStaked","offset":0,"slot":"0","type":"t_bool"},{"astId":4854,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"stakedTokens","offset":0,"slot":"1","type":"t_uint256"},{"astId":4856,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"startVersionBlock","offset":0,"slot":"2","type":"t_uint256"},{"astId":4858,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"claimedRewards","offset":0,"slot":"3","type":"t_uint256"}],"numberOfBytes":"128"},"t_struct(VersionableInfo)4850_storage":{"encoding":"inplace","label":"struct GENZStaking.VersionableInfo","members":[{"astId":4843,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"startTime","offset":0,"slot":"0","type":"t_uint256"},{"astId":4845,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"endTime","offset":0,"slot":"1","type":"t_uint256"},{"astId":4847,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"distributedAmount","offset":0,"slot":"2","type":"t_uint256"},{"astId":4849,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"tokenDistributed","offset":0,"slot":"3","type":"t_uint256"}],"numberOfBytes":"128"},"t_struct(WithdrawWaitPeriod)4871_storage":{"encoding":"inplace","label":"struct GENZStaking.WithdrawWaitPeriod","members":[{"astId":4866,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"ifTimerStarted","offset":0,"slot":"0","type":"t_bool"},{"astId":4868,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"GENZTokenCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":4870,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"canWithdrawTime","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"constructor":{"notice":"[PRODUCTION TODO: _withdrawTimer = timeInDays * 1 days;]"},"setWithdrawTime(uint256)":{"notice":"[PRODUCTION TODO: _withdrawTimer = timeInHours * 1 hours;]"}},"notice":"NOTE: Staking tokens would be used for activities like flash loans  to generate rewards for the staked users","version":1}}},"contracts/interfaces/IBuyGENZ.sol":{"IBuyGENZ":{"abi":[{"inputs":[],"name":"BuySellGENZ__GENZBurnFailedError","type":"error"},{"inputs":[],"name":"BuySellGENZ__GENZMintFailedError","type":"error"},{"inputs":[],"name":"BuySellGENZ__ImmutableChangesError","type":"error"},{"inputs":[],"name":"BuySellGENZ__InsufficientBalanceError","type":"error"},{"inputs":[],"name":"BuySellGENZ__LowAmountError","type":"error"},{"inputs":[],"name":"BuySellGENZ__LowSZTBalanceError","type":"error"},{"inputs":[],"name":"BuySellGENZ__PausedError","type":"error"},{"inputs":[],"name":"BuySellGENZ__TransactionFailedError","type":"error"},{"inputs":[],"name":"BuySellGENZ__ZeroAddressTransactionError","type":"error"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BuySellGENZ__GENZBurnFailedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__GENZMintFailedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__ImmutableChangesError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__InsufficientBalanceError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__LowAmountError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__LowSZTBalanceError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__PausedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__TransactionFailedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__ZeroAddressTransactionError\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"BuySellGENZ__PausedError()\":[{\"notice\":\"Custom Error Codes\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IBuyGENZ.sol\":\"IBuyGENZ\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IBuyGENZ.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IBuyGENZ {\\n    \\n    /// Custom Error Codes\\n    error BuySellGENZ__PausedError();\\n    error BuySellGENZ__LowAmountError();\\n    error BuySellGENZ__LowSZTBalanceError();\\n    error BuySellGENZ__GENZBurnFailedError();\\n    error BuySellGENZ__GENZMintFailedError();\\n    error BuySellGENZ__ImmutableChangesError();\\n    error BuySellGENZ__TransactionFailedError();\\n    error BuySellGENZ__InsufficientBalanceError();\\n    error BuySellGENZ__ZeroAddressTransactionError();\\n\\n}\",\"keccak256\":\"0x74d79d87e23c822d6044d2489608ddbeb5ccc83b4db663c7bb509f46803da0ee\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"BuySellGENZ__PausedError()":[{"notice":"Custom Error Codes"}]},"kind":"user","methods":{},"version":1}}},"contracts/interfaces/ICFA.sol":{"ICFA":{"abi":[{"inputs":[],"name":"CFA__ActiveInsuranceExistError","type":"error"},{"inputs":[],"name":"CFA__ImmutableChangesError","type":"error"},{"inputs":[],"name":"CFA__InactiveInsuranceError","type":"error"},{"inputs":[],"name":"CFA__InsuranceCoverNotAvailableError","type":"error"},{"inputs":[],"name":"CFA__NotEvenMinimumInsurancePeriodAmount","type":"error"},{"inputs":[],"name":"CFA__SubCategoryNotActiveError","type":"error"},{"inputs":[],"name":"CFA__TransactionFailedError","type":"error"},{"anonymous":false,"inputs":[],"name":"UpdatedMaxInsuredDays","type":"event"},{"anonymous":false,"inputs":[],"name":"UpdatedMinimumInsurancePeriod","type":"event"},{"anonymous":false,"inputs":[],"name":"UpdatedStartWaitingTime","type":"event"},{"inputs":[{"internalType":"uint256","name":"insuredAmount","type":"uint256"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"addInsuranceAmount","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"}],"name":"calculateTotalFlowMade","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"calculateTotalFlowMade","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"insuranceCount","type":"uint256"}],"name":"findActivePremiumCost","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"}],"name":"getGlobalUserInsuranceInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getGlobalUserInsurancePremiumCost","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"}],"name":"getUserInsuranceInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"}],"name":"getUserInsuranceStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"}],"name":"getUserInsuranceValidTillInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"insuredAmount","type":"uint256"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"},{"internalType":"bool","name":"closeStream","type":"bool"}],"name":"minusInsuranceAmount","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addInsuranceAmount(uint256,uint256,uint256,uint8,bytes32,bytes32)":"6e8847bd","calculateTotalFlowMade(address)":"cff5eede","calculateTotalFlowMade(address,uint256)":"4e94c048","findActivePremiumCost(address,uint256,uint256)":"1a5c8f28","getGlobalUserInsuranceInfo(address)":"ec249164","getGlobalUserInsurancePremiumCost(address)":"42f6b8a7","getUserInsuranceInfo(address,uint256,uint256)":"88295fb2","getUserInsuranceStatus(address,uint256,uint256)":"81280d2b","getUserInsuranceValidTillInfo(address,uint256,uint256)":"c392e850","minusInsuranceAmount(uint256,uint256,uint256,uint8,bytes32,bytes32,bool)":"642adc28"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CFA__ActiveInsuranceExistError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__ImmutableChangesError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__InactiveInsuranceError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__InsuranceCoverNotAvailableError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__NotEvenMinimumInsurancePeriodAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__SubCategoryNotActiveError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__TransactionFailedError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdatedMaxInsuredDays\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdatedMinimumInsurancePeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdatedStartWaitingTime\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"insuredAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"addInsuranceAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"}],\"name\":\"calculateTotalFlowMade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"calculateTotalFlowMade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"insuranceCount\",\"type\":\"uint256\"}],\"name\":\"findActivePremiumCost\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getGlobalUserInsuranceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getGlobalUserInsurancePremiumCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"}],\"name\":\"getUserInsuranceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"}],\"name\":\"getUserInsuranceStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"}],\"name\":\"getUserInsuranceValidTillInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"insuredAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"closeStream\",\"type\":\"bool\"}],\"name\":\"minusInsuranceAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ICFA.sol\":\"ICFA\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ICFA.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n\\ninterface ICFA {\\n    // CFA Events\\n    event UpdatedMaxInsuredDays();\\n    event UpdatedStartWaitingTime();\\n    event UpdatedMinimumInsurancePeriod();\\n\\n    // CFA Custom Error Code\\n    error CFA__ImmutableChangesError();\\n    error CFA__TransactionFailedError();\\n    error CFA__InactiveInsuranceError();\\n    error CFA__SubCategoryNotActiveError();\\n    error CFA__ActiveInsuranceExistError();\\n    error CFA__InsuranceCoverNotAvailableError();\\n    error CFA__NotEvenMinimumInsurancePeriodAmount();\\n\\n    function addInsuranceAmount(\\n        uint256 insuredAmount, \\n        uint256 categoryID, \\n        uint256 subCategoryID,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) external returns(bool);\\n\\n    function minusInsuranceAmount(\\n        uint256 insuredAmount, \\n        uint256 categoryID, \\n        uint256 subCategoryID,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s,\\n        bool closeStream\\n    ) external returns(bool);\\n\\n    function findActivePremiumCost(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 insuranceCount\\n    ) external view returns(uint256[] memory);\\n\\n    function calculateTotalFlowMade(\\n        address userAddress, \\n        uint256 categoryID\\n    ) external view returns(uint256);  \\n\\n    function calculateTotalFlowMade(\\n        address userAddress\\n    ) external view returns(uint256); \\n\\n    function getUserInsuranceValidTillInfo(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) external view returns(uint256);\\n\\n    function getUserInsuranceStatus(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) external view returns(bool);\\n\\n    function getUserInsuranceInfo(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) external view returns(uint256, uint256, uint256, uint256, uint256, bool);\\n    \\n    function getGlobalUserInsuranceInfo(\\n        address _userAddress\\n    ) external view returns (uint256, uint256);\\n\\n    function getGlobalUserInsurancePremiumCost(\\n        address userAddress\\n    ) external view returns(uint256);\\n}\",\"keccak256\":\"0x104c6cb8a06b415043bc44feaca5daac335a908da1cbabcda5435a26ddda0476\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IERC20Extended.sol":{"IERC20Extended":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional mint and burnFrom functions from the ERC20 standard.","kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burnFrom(address,uint256)":"79cc6790","mint(address,uint256)":"40c10f19","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional mint and burnFrom functions from the ERC20 standard.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IERC20Extended.sol\":\"IERC20Extended\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional mint and burnFrom functions from the ERC20 standard.\\n */\\ninterface IERC20Extended is IERC20Upgradeable {\\n    \\n    function mint(address to, uint256 amount) external returns(bool);\\n\\n    function burnFrom(address account, uint256 amount) external returns(bool);\\n    \\n}\",\"keccak256\":\"0x77d287ad89310c9c5b7acef41830a116628435e9f209b78088282a3e9d683213\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IGENZStaking.sol":{"IGENZStaking":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"StakedGENZ","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"UnstakedGENZ","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"value","type":"uint256"}],"name":"UpdatedMinStakingAmount","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"timeInMinutes","type":"uint256"}],"name":"UpdatedWithdrawTimer","type":"event"},{"inputs":[{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"activateWithdrawalTimer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getUserStakedGENZBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"stakeGENZ","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalTokensStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"withdrawGENZ","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"activateWithdrawalTimer(uint256)":"6c64f0b4","getUserStakedGENZBalance()":"ed0cdb1a","stakeGENZ(uint256)":"d6fb97a5","totalTokensStaked()":"b0e31b2d","withdrawGENZ(uint256)":"060e5c6e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"StakedGENZ\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UnstakedGENZ\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinStakingAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timeInMinutes\",\"type\":\"uint256\"}],\"name\":\"UpdatedWithdrawTimer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"activateWithdrawalTimer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserStakedGENZBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"stakeGENZ\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawGENZ\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IGENZStaking.sol\":\"IGENZStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IGENZStaking.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\ninterface IGENZStaking {\\n\\n    event UpdatedWithdrawTimer(uint256 indexed timeInMinutes);\\n\\n    event UpdatedMinStakingAmount(uint256 indexed value);\\n\\n    event StakedGENZ(address indexed userAddress, uint256 value);\\n\\n    event UnstakedGENZ(address indexed userAddress, uint256 value);\\n\\n    function stakeGENZ(uint256 _value) external returns(bool);\\n\\n    function activateWithdrawalTimer(uint256 _value) external returns(bool);\\n\\n    function withdrawGENZ(uint256 _value) external returns(bool);\\n\\n    function totalTokensStaked() external view returns(uint256);\\n\\n    function getUserStakedGENZBalance() external view returns(uint256);\\n\\n}\",\"keccak256\":\"0x386900ee190a486d4e7197828a671c60a054f8c06f32e33ec0ffffcbb5895636\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IGlobalPauseOperation.sol":{"IGlobalPauseOperation":{"abi":[{"inputs":[],"name":"GlobalPauseOperation__ImmutableChangesError","type":"error"},{"inputs":[],"name":"GlobalPauseOps__ZeroAddressInputError","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"PausedOperation","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"UnpausedOperation","type":"event"},{"inputs":[],"name":"isPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pauseOperation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpauseOperation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isPaused()":"b187bd26","pauseOperation()":"c9d07020","unpauseOperation()":"39511e99"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"GlobalPauseOperation__ImmutableChangesError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GlobalPauseOps__ZeroAddressInputError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PausedOperation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnpausedOperation\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IGlobalPauseOperation.sol\":\"IGlobalPauseOperation\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IGlobalPauseOperation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IGlobalPauseOperation {\\n\\n    error GlobalPauseOps__ZeroAddressInputError();\\n\\n    error GlobalPauseOperation__ImmutableChangesError();\\n\\n    event PausedOperation(address account);\\n\\n    event UnpausedOperation(address account);\\n\\n    function pauseOperation() external returns(bool);\\n\\n    function unpauseOperation() external returns(bool);\\n    \\n    function isPaused() external view returns(bool);\\n}\",\"keccak256\":\"0x79586f955f8b52af0e350004f608462d4af71c872ea75ce1b633239c5d00fc29\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IInsuranceRegistry.sol":{"IInsuranceRegistry":{"abi":[{"inputs":[],"name":"InsuranceRegistry__ImmutableChangesError","type":"error"},{"inputs":[],"name":"InsuranceRegistry__NotEnoughLiquidityError","type":"error"},{"inputs":[],"name":"InsuranceRegistry__TransactionFailedError","type":"error"},{"anonymous":false,"inputs":[],"name":"UpdatedClaimStakedValue","type":"event"},{"inputs":[{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID_","type":"uint256"},{"internalType":"uint256","name":"coverageAmount","type":"uint256"},{"internalType":"uint256","name":"incomingFlowRate","type":"uint256"}],"name":"addCoverageOffered","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID_","type":"uint256"},{"internalType":"uint256","name":"liquiditySupplied","type":"uint256"}],"name":"addInsuranceLiquidity","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID_","type":"uint256"}],"name":"calculateUnderwriterBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"stakedTokenID","type":"uint256"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID_","type":"uint256"}],"name":"claimAdded","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getLatestCategoryID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"categoryID","type":"uint256"}],"name":"getLatestSubCategoryID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID_","type":"uint256"}],"name":"getStreamFlowRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"categoryID","type":"uint256"}],"name":"getVersionID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"insuredAmount","type":"uint256"},{"internalType":"uint256","name":"subCategoryID_","type":"uint256"}],"name":"ifEnoughLiquidity","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID_","type":"uint256"},{"internalType":"uint256","name":"coverageAmount","type":"uint256"},{"internalType":"uint256","name":"incomingFlowRate","type":"uint256"}],"name":"removeCoverageOffered","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID_","type":"uint256"},{"internalType":"uint256","name":"liquiditySupplied","type":"uint256"}],"name":"removeInsuranceLiquidity","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"custom:security-contact":"anshik@safezen.finance","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addCoverageOffered(uint256,uint256,uint256,uint256)":"d9895c70","addInsuranceLiquidity(uint256,uint256,uint256)":"6ad08f05","calculateUnderwriterBalance(uint256,uint256)":"cf3f0fc0","claimAdded(uint256,uint256,uint256)":"b9e19fe1","getLatestCategoryID()":"e1d01098","getLatestSubCategoryID(uint256)":"3bf4c082","getStreamFlowRate(uint256,uint256)":"5952a8c6","getVersionID(uint256)":"6c12b868","ifEnoughLiquidity(uint256,uint256,uint256)":"5657f79d","removeCoverageOffered(uint256,uint256,uint256,uint256)":"26a6e9eb","removeInsuranceLiquidity(uint256,uint256,uint256)":"c296d870"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InsuranceRegistry__ImmutableChangesError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsuranceRegistry__NotEnoughLiquidityError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsuranceRegistry__TransactionFailedError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdatedClaimStakedValue\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coverageAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incomingFlowRate\",\"type\":\"uint256\"}],\"name\":\"addCoverageOffered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquiditySupplied\",\"type\":\"uint256\"}],\"name\":\"addInsuranceLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID_\",\"type\":\"uint256\"}],\"name\":\"calculateUnderwriterBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID_\",\"type\":\"uint256\"}],\"name\":\"claimAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestCategoryID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"}],\"name\":\"getLatestSubCategoryID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID_\",\"type\":\"uint256\"}],\"name\":\"getStreamFlowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"}],\"name\":\"getVersionID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"insuredAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID_\",\"type\":\"uint256\"}],\"name\":\"ifEnoughLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coverageAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incomingFlowRate\",\"type\":\"uint256\"}],\"name\":\"removeCoverageOffered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquiditySupplied\",\"type\":\"uint256\"}],\"name\":\"removeInsuranceLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"anshik@safezen.finance\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Report any bug or issues at:\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IInsuranceRegistry.sol\":\"IInsuranceRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IInsuranceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// Report any bug or issues at:\\n/// @custom:security-contact anshik@safezen.finance\\ninterface IInsuranceRegistry {\\n\\n    error InsuranceRegistry__ImmutableChangesError();\\n    error InsuranceRegistry__TransactionFailedError();\\n    error InsuranceRegistry__NotEnoughLiquidityError();\\n\\n    event UpdatedClaimStakedValue();\\n\\n    function addInsuranceLiquidity(\\n        uint256 categoryID,\\n        uint256 subCategoryID_,\\n        uint256 liquiditySupplied\\n    ) external returns(bool);\\n\\n    function removeInsuranceLiquidity(\\n        uint256 categoryID,\\n        uint256 subCategoryID_, \\n        uint256 liquiditySupplied\\n    ) external returns(bool);\\n\\n    function addCoverageOffered(\\n        uint256 categoryID,\\n        uint256 subCategoryID_, \\n        uint256 coverageAmount,\\n        uint256 incomingFlowRate\\n    ) external returns(bool);\\n\\n    function removeCoverageOffered(\\n        uint256 categoryID,\\n        uint256 subCategoryID_, \\n        uint256 coverageAmount, \\n        uint256 incomingFlowRate\\n    ) external returns(bool);\\n\\n    function claimAdded(\\n        uint256 stakedTokenID, \\n        uint256 categoryID, \\n        uint256 subCategoryID_\\n    ) external returns(bool);\\n\\n    function getVersionID(uint256 categoryID) external view returns(uint256);\\n\\n    function calculateUnderwriterBalance(\\n        uint256 categoryID,\\n        uint256 subCategoryID_\\n    ) external view returns(uint256);\\n\\n    function getLatestCategoryID() external view returns(uint256);\\n\\n    function getLatestSubCategoryID(uint256 categoryID) external view returns(uint256);\\n\\n    function ifEnoughLiquidity(uint256 categoryID, uint256 insuredAmount, uint256 subCategoryID_) external view returns(bool);\\n\\n    function getStreamFlowRate(uint256 categoryID, uint256 subCategoryID_) external view returns(uint256);\\n}\",\"keccak256\":\"0xf9afae03190ba6aa377519032f994fc5670704353cf2818a416f4db9c2b14b9e\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Report any bug or issues at:","version":1}}}}}}