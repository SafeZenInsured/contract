{"id":"ca3c8983af075f7f84a4daf99b617199","_format":"hh-sol-build-info-1","solcVersion":"0.8.16","solcLongVersion":"0.8.16+commit.07a7930e","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20PermitUpgradeable.sol\";\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"../../../utils/cryptography/EIP712Upgradeable.sol\";\nimport \"../../../utils/CountersUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 51\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\n        __EIP712_init_unchained(name, \"1\");\n    }\n\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"contracts/BaseUpgradeablePausable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"./Constants.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nerror BaseUpgradeablePausable__ZeroAddressError();\n\ncontract BaseUpgradeablePausable is \n    Initializable, \n    PausableUpgradeable, \n    AccessControlUpgradeable,\n    ReentrancyGuardUpgradeable \n{\n\n    modifier onlyAdmin() {\n        require(isAdmin(), \"Must have admin role to perform this action.\");\n        _;\n    }\n\n    function __BaseUpgradeablePausable_init(address owner) public onlyInitializing() {\n        if(owner == address(0)) {\n            revert BaseUpgradeablePausable__ZeroAddressError();\n        }\n        __Pausable_init();\n        __AccessControl_init();\n        __ReentrancyGuard_init();\n\n        _grantRole(Constants.getAdminRole(), owner);\n        _grantRole(Constants.getPauserRole(), owner);\n\n        _setRoleAdmin(Constants.getPauserRole(), Constants.getAdminRole());\n        _setRoleAdmin(Constants.getAdminRole(), Constants.getAdminRole());\n    }\n\n    function isAdmin() public view returns (bool) {\n        return hasRole(Constants.getAdminRole(), _msgSender());\n    }\n\n  \n}"},"contracts/Constants.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.16;\n\nlibrary Constants {\n\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    function getAdminRole() internal pure returns (bytes32) {\n        return ADMIN_ROLE;\n    }\n\n    function getPauserRole() internal pure returns (bytes32) {\n        return PAUSER_ROLE;\n    }\n}"},"contracts/core/payAsYouGo/ConstantFlowAgreement.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.16;\n\n/// @title Constant Flow Agreement Contract\n/// @author Anshik Bansal <anshik@safezen.finance>\n\n/// Importing required interfaces\nimport \"./../../interfaces/ICFA.sol\";\nimport \"./../../interfaces/IERC20Extended.sol\";\nimport \"./../../interfaces/IInsuranceRegistry.sol\";\n\n/// Importing required libraries\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\n/// Importing required contracts\nimport \"./../../BaseUpgradeablePausable.sol\";\n\n/// Report any bug or issues at:\n/// @custom:security-contact anshik@safezen.finance\n\ncontract ConstantFlowAgreement is ICFA, BaseUpgradeablePausable {\n    /// _initVersion: counter to initialize the init one-time function, max value can be 1.\n    /// _categoriesCount: counter to keep track of the available insurance categories.\n    /// _maxInsuredDays: the maximum insurance period [in days], 90 days will be kept as default.\n    /// _startWaitingTime: insurance activation waiting period, 4-8 hours will be kept as default.\n    /// _minimumInsurancePeriod: the minimum insurance period, 120 minutes will be kept as default.\n    uint256 private _categoriesCount;\n    uint256 private _maxInsuredDays;\n    uint256 private _startWaitingTime;\n    uint256 private _minimumInsurancePeriod;\n\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using SafeERC20Upgradeable for IERC20PermitUpgradeable;\n\n    /// _tokenDAI: DAI ERC20 token\n    /// _sztDAI: sztDAI ERC20 token\n    /// _insuranceRegistry: Insurance Registry Contract\n    IERC20Upgradeable private _tokenDAI;\n    IERC20PermitUpgradeable private _tokenPermitDAI;\n    IERC20Extended private _sztDAI;\n    IInsuranceRegistry private _insuranceRegistry;\n\n    /// @dev collects user information for particular insurance\n    /// @param startTime: insurance activation time\n    /// @param validTill: insurance validation till\n    /// @param insuredAmount: maximum insurance amount covered\n    /// @param insuranceFlowRate: amount to be charged per second [insurance flow rate * amount to be insured]\n    /// @param insuranceCost: expected insurance premium cost for the registered duration\n    /// @param registrationTime: insurance registration time\n    /// @param isValid: checks whether user is an active insurance holder or not\n    struct UserInsuranceInfo {\n        uint256 startTime;\n        uint256 validTill;\n        uint256 insuredAmount;\n        uint256 registrationTime;\n        uint256 insuranceFlowRate;\n        uint256 insuranceCost;\n        bool isValid;\n    }\n\n    /// @dev collects user global insurance information\n    /// @param validTill: expected insurance valid period\n    /// @param insuranceStreamRate: global insurance flow rate per second\n    /// @param globalInsuranceCost: expected global insurance premium cost for the registered duration\n    struct UserGlobalInsuranceInfo {\n        uint256 validTill;\n        uint256 insuranceStreamRate;\n        uint256 globalInsuranceCost;\n    }\n\n    /// @dev mapping to store UserGlobalInsuranceInfo\n    /// maps: userAddress => UserGlobalInsuranceInfo\n    mapping(address => UserGlobalInsuranceInfo) private usersGlobalInsuranceInfo;\n\n    /// @dev mapping to store UserInsurance Info\n    /// maps: userAddress => categoryID => subCategoryID => UserInsuranceInfo\n    mapping(address => mapping(uint256 => mapping(uint256 => UserInsuranceInfo))) private usersInsuranceInfo;\n\n    /// @dev one-time function aims to initialize the contract\n    /// @dev MUST revert if called more than once.\n    /// @param tokenDAIaddress: address of the DAI ERC20 token\n    /// @param sztDAIAddress address of the sztDAI ERC20 token\n    /// @param insuranceRegistryCA: address of the Protocol Registry contract\n    /// @param minimumInsurancePeriod: minimum insurance period\n    /// @return bool: true if the function executues successfully else false.\n    /// [PRODUCTION TODO: _startWaitingTime =  startWaitingTime * 1 hours;]\n    /// [PRODUCTION TODO: _maxInsuredDays = maxInsuredDays * 1 days;]\n    function initialize(\n        address tokenDAIaddress,\n        address sztDAIAddress,\n        address insuranceRegistryCA,\n        uint256 minimumInsurancePeriod,\n        uint256 startWaitingTime,\n        uint256 maxInsuredDays\n    ) external initializer returns(bool) {\n        _categoriesCount = 0;\n        _maxInsuredDays = maxInsuredDays * 1 minutes;\n        _startWaitingTime = startWaitingTime * 1 minutes; \n        _minimumInsurancePeriod = minimumInsurancePeriod * 1 minutes;\n        _tokenDAI = IERC20Upgradeable(tokenDAIaddress);\n        _tokenPermitDAI = IERC20PermitUpgradeable(tokenDAIaddress);\n        _sztDAI = IERC20Extended(sztDAIAddress);\n        _insuranceRegistry = IInsuranceRegistry(insuranceRegistryCA);\n        __BaseUpgradeablePausable_init(_msgSender());\n        return true;\n    }\n\n    function pause() external onlyAdmin {\n        _pause();\n    }\n\n    function unpause() external onlyAdmin {\n        _unpause();\n    }\n\n    /// @dev this function aims to updates minimum insurance period\n    /// @param timeInMinutes: 120 minutes will be kept as default.\n    function updateMinimumInsurancePeriod(uint256 timeInMinutes) external onlyAdmin {\n        _minimumInsurancePeriod = timeInMinutes * 1 minutes;\n        emit UpdatedMinimumInsurancePeriod();\n    }\n\n    /// @dev this function aims to update the insurance activation waiting period\n    /// @param timeInHours: 4-8 hours will be kept as default. \n    function updateStartWaitingTime(uint256 timeInHours) external onlyAdmin {\n        _startWaitingTime = timeInHours * 1 hours;\n        emit UpdatedStartWaitingTime();\n    }\n\n    /// @dev this function aims to update the maximum insurance period\n    /// @param timeInDays: 90 days will be kept as default.\n    function updateMaxInsuredDays(uint256 timeInDays) external onlyAdmin {\n        _maxInsuredDays = timeInDays * 1 days;\n        emit UpdatedMaxInsuredDays();\n    }\n\n    /// @dev this function aims to create or top-up user insurance coverage amount.\n    /// @param insuredAmount: maximum user coverage amount\n    /// @param categoryID: insurance category, e.g., stablecoin depeg insurance.\n    /// @param subCategoryID: insurance sub-category, e.g., USDC depeg coverage, DAI depeg coverage.\n    /// @return bool: true if the function executues successfully else false.\n    function addInsuranceAmount(\n        uint256 insuredAmount, \n        uint256 categoryID, \n        uint256 subCategoryID, \n        uint8 v, \n        bytes32 r, \n        bytes32 s\n    ) external override nonReentrant returns(bool) {\n        bool success = _addInsuranceAmount(insuredAmount, categoryID, subCategoryID, v, r, s);\n        return success;\n    }\n    \n    \n    function _addInsuranceAmount(\n        uint256 insuredAmount, \n        uint256 categoryID, \n        uint256 subCategoryID,\n        uint8 v, \n        bytes32 r, \n        bytes32 s\n    ) private returns(bool) {\n        uint256 newInsuredAmount = usersInsuranceInfo[_msgSender()][categoryID][subCategoryID].insuredAmount + insuredAmount;\n        if (usersInsuranceInfo[_msgSender()][categoryID][subCategoryID].isValid) {\n            bool closeStreamSuccess = deactivateInsurance(_msgSender(), categoryID, subCategoryID);\n            if (!closeStreamSuccess) {\n                revert CFA__TransactionFailedError();\n            }\n        }   \n        uint256 deadline = block.timestamp + _maxInsuredDays + 30 days;  \n        (bool activateSuccess, uint256 insuranceCost) = activateInsurance(newInsuredAmount, categoryID, subCategoryID);\n        if (!activateSuccess) {\n            revert CFA__TransactionFailedError();\n        }\n        _tokenPermitDAI.safePermit(_msgSender(), address(this), insuranceCost, deadline, v, r, s);  \n        return true;\n    }\n\n    /// @dev this function aims to close or reduce user insurance coverage amount.\n    /// @param insuredAmount: maximum user coverage amount\n    /// @param categoryID: insurance category, e.g., stablecoin depeg insurance.\n    /// @param subCategoryID: insurance sub-category, e.g., USDC depeg coverage, DAI depeg coverage.\n    /// @param closeStream: checks whether user initiate to deactivate its insurance or not.\n    /// @return bool: true if the function executues successfully else false.\n    function minusInsuranceAmount(\n        uint256 insuredAmount, \n        uint256 categoryID, \n        uint256 subCategoryID,\n        uint8 v, \n        bytes32 r, \n        bytes32 s,\n        bool closeStream\n    ) external override nonReentrant returns(bool) {\n        bool success = _minusInsuranceAmount(insuredAmount, categoryID, subCategoryID, v, r, s, closeStream);\n        return success;\n    }\n    \n    \n    function _minusInsuranceAmount(\n        uint256 insuredAmount, \n        uint256 categoryID, \n        uint256 subCategoryID,\n        uint8 v, \n        bytes32 r, \n        bytes32 s,\n        bool closeStream\n    ) private returns(bool) {\n        if (!usersInsuranceInfo[_msgSender()][categoryID][subCategoryID].isValid) {\n            revert CFA__InactiveInsuranceError();\n        }\n        bool closeStreamSuccess = deactivateInsurance(_msgSender(), categoryID, subCategoryID);\n        if (!closeStreamSuccess) {\n            revert CFA__TransactionFailedError();\n        }\n        if (!closeStream) {\n            uint256 newInsuredAmount = usersInsuranceInfo[_msgSender()][categoryID][subCategoryID].insuredAmount - insuredAmount;\n            uint256 deadline = block.timestamp + _maxInsuredDays + 30 days;\n            (bool activateSuccess, uint256 insuranceCost) = activateInsurance(newInsuredAmount, categoryID, subCategoryID);\n            if (!activateSuccess) {\n                revert CFA__TransactionFailedError();\n            }\n            _tokenPermitDAI.safePermit(_msgSender(), address(this), insuranceCost, deadline, v, r, s);  \n\n        }\n        return true;\n    }\n\n    function claimPremium(\n        address userAddress,\n        uint256 categoryID,\n        uint256 subCategoryID\n    ) external returns(bool) {\n        if (\n            getUserInsuranceValidTillInfo(userAddress, categoryID, subCategoryID) > \n            block.timestamp\n        ) {\n            revert CFA__ActiveInsuranceExistError();\n        }\n        bool success = deactivateInsurance(userAddress, categoryID, subCategoryID);\n        if (!success) {\n            revert CFA__TransactionFailedError();\n        }\n        return true;\n    }\n\n    function claimPremium(\n        address userAddress,\n        uint256 categoryID\n    ) external returns(bool) {\n\n    }\n\n    /// @param insuredAmount: insured amount\n    /// @param categoryID: like Smart Contract Insurance\n    function activateInsurance(\n        uint256 insuredAmount,\n        uint256 categoryID,\n        uint256 subCategoryID\n    ) private returns(bool, uint256) {\n        if (insuredAmount < 1e18) {\n            revert CFA__InsuranceCoverNotAvailableError();\n        }\n        if (\n            (!_insuranceRegistry.ifEnoughLiquidity(categoryID, insuredAmount, subCategoryID))    \n        ) {\n            revert CFA__SubCategoryNotActiveError();\n        }\n        if (usersInsuranceInfo[_msgSender()][categoryID][subCategoryID].isValid) {\n            revert CFA__ActiveInsuranceExistError();\n        }\n        \n        UserInsuranceInfo storage userInsuranceInfo = usersInsuranceInfo[_msgSender()][categoryID][subCategoryID];\n        UserGlobalInsuranceInfo storage userGlobalInsuranceInfo = usersGlobalInsuranceInfo[_msgSender()];\n        \n        uint256 userEstimatedBalance = _sztDAI.balanceOf(_msgSender()) - userGlobalInsuranceInfo.globalInsuranceCost;\n        uint256 incomingAmountPerSec = (\n            _insuranceRegistry.getStreamFlowRate(categoryID, subCategoryID) * insuredAmount) / 1e18;\n        uint256 globalIncomingAmountPerSec = userGlobalInsuranceInfo.insuranceStreamRate + incomingAmountPerSec;\n        // user balance should be enough to run the insurance for atleast minimum insurance time duration\n        if ((globalIncomingAmountPerSec * _minimumInsurancePeriod) > userEstimatedBalance) {\n            revert CFA__NotEvenMinimumInsurancePeriodAmount();\n        }\n\n        uint256 validTill = (userEstimatedBalance / incomingAmountPerSec);\n        userGlobalInsuranceInfo.insuranceStreamRate += incomingAmountPerSec;\n        userInsuranceInfo.insuredAmount = insuredAmount;\n        userInsuranceInfo.insuranceFlowRate = incomingAmountPerSec;\n        userInsuranceInfo.registrationTime = block.timestamp;\n        userInsuranceInfo.startTime = block.timestamp + _startWaitingTime;\n        userInsuranceInfo.validTill = (\n            validTill < _maxInsuredDays ? \n            userInsuranceInfo.startTime + validTill : userInsuranceInfo.startTime + _maxInsuredDays\n        );\n        userInsuranceInfo.insuranceCost = validTill * incomingAmountPerSec;\n        userInsuranceInfo.isValid = true;\n        \n        userGlobalInsuranceInfo.globalInsuranceCost += userInsuranceInfo.insuranceCost;\n        userGlobalInsuranceInfo.validTill = (\n            userInsuranceInfo.validTill < userGlobalInsuranceInfo.validTill ? \n            userGlobalInsuranceInfo.validTill : userInsuranceInfo.validTill\n        );\n        bool success = _insuranceRegistry.addCoverageOffered(categoryID, subCategoryID, insuredAmount, incomingAmountPerSec);\n        return (success, userInsuranceInfo.insuranceCost);\n    }\n\n    /// NOTE: few if and else to consider for globalinsuranceinfo like endtime and start time \n    function deactivateInsurance(\n        address userAddress, \n        uint256 categoryID, \n        uint256 subCategoryID\n    ) private returns(bool) {\n        UserInsuranceInfo storage userInsuranceInfo = usersInsuranceInfo[userAddress][categoryID][subCategoryID];\n        if (!userInsuranceInfo.isValid) {\n            revert CFA__InactiveInsuranceError();\n        }\n        userInsuranceInfo.isValid = false;\n        uint256 duration = (\n            (block.timestamp > userInsuranceInfo.startTime) ? (\n                (block.timestamp > userInsuranceInfo.validTill) ? \n                userInsuranceInfo.validTill : (block.timestamp - userInsuranceInfo.startTime)\n            ) : 0);\n        uint256 amountToBeBurned = (duration * userInsuranceInfo.insuranceFlowRate);\n        if (amountToBeBurned == 0) {\n            return true;\n        } \n        usersGlobalInsuranceInfo[userAddress].insuranceStreamRate -= userInsuranceInfo.insuranceFlowRate;\n        usersGlobalInsuranceInfo[userAddress].globalInsuranceCost -= userInsuranceInfo.insuranceCost;\n        uint256 flowRate = userInsuranceInfo.insuranceFlowRate;\n        uint256 insuredAmount = userInsuranceInfo.insuredAmount;\n        bool success = _insuranceRegistry.removeCoverageOffered(categoryID, subCategoryID, insuredAmount, flowRate);\n        bool burnSuccess = _sztDAI.burnFrom(userAddress, amountToBeBurned);\n        if ((!success) || (!burnSuccess)) {\n            revert CFA__TransactionFailedError();\n        }\n        return true;\n    }\n\n    /// @dev this function aims to deactivate user's all activated insurance in a single-call.\n    /// @param userAddress: user wallet address\n    /// @param categoryID: insurance category, e.g., stablecoin depeg insurance.\n    function deactivateCategoryInsurance(\n        address userAddress, \n        uint256 categoryID\n    ) internal returns(bool) {\n        uint256[] memory activeID = findActivePremiumCost(userAddress, categoryID, _insuranceRegistry.getLatestSubCategoryID(categoryID));\n        uint256 expectedAmountToBePaid = _calculateTotalFlowMade(userAddress, categoryID, activeID);\n        for(uint256 i=0; i < activeID.length;) {\n            usersInsuranceInfo[userAddress][categoryID][activeID[i]].isValid = false;\n            uint256 flowRate = usersInsuranceInfo[userAddress][categoryID][activeID[i]].insuranceFlowRate;\n            uint256 insuredAmount = usersInsuranceInfo[userAddress][categoryID][activeID[i]].insuredAmount;\n            bool coverageRemoveSuccess = _insuranceRegistry.removeCoverageOffered(categoryID, activeID[i], insuredAmount, flowRate);\n            if (!coverageRemoveSuccess) {\n                revert CFA__TransactionFailedError();\n            }\n            ++i;\n        }\n        uint256 userBalance = _sztDAI.balanceOf(userAddress); \n        uint256 amountToBeBurned = expectedAmountToBePaid > userBalance ? userBalance : expectedAmountToBePaid;\n        usersGlobalInsuranceInfo[userAddress].insuranceStreamRate = 0;\n        bool success = _sztDAI.burnFrom(userAddress, amountToBeBurned);\n        if (!success) {\n            revert CFA__TransactionFailedError();\n        }\n        return true;\n    }\n\n    /// VIEW FUNCTIONS\n\n    function findActivePremiumCost(\n        address userAddress, \n        uint256 categoryID, \n        uint256 subCategoryCount\n    ) public view override returns(uint256[] memory) {\n        uint256 activeProtocolCount = 0;\n        for(uint i = 0; i < subCategoryCount;) {\n            UserInsuranceInfo memory userInsuranceInfo = usersInsuranceInfo[userAddress][categoryID][i];\n            if (userInsuranceInfo.isValid) {\n                ++activeProtocolCount;\n            }\n            ++i;\n        }\n        uint256[] memory activeID = new uint256[](activeProtocolCount);\n        uint256 counter = 0;\n        for(uint i = 0; i < subCategoryCount;) {\n            UserInsuranceInfo storage userInsuranceInfo = usersInsuranceInfo[userAddress][categoryID][i];\n            if (userInsuranceInfo.isValid) {\n                activeID[counter] = i;\n                ++counter;\n            }\n            ++i;\n        }\n      return activeID;\n    }\n\n    /// DURATION\n    function calculateTotalFlowMade(\n        address userAddress\n    ) external view returns(uint256) {\n        uint256 globalBalanceToBePaid = 0;\n        for(uint256 i=0; i < _categoriesCount;) {\n            uint256 balanceToBePaid = 0;\n            uint256[] memory activeID = findActivePremiumCost(userAddress, i, _insuranceRegistry.getLatestSubCategoryID(i));\n            for(uint256 j=0; j < activeID.length;) {\n                UserInsuranceInfo storage userActiveInsuranceInfo = usersInsuranceInfo[userAddress][i][activeID[j]];\n                uint256 duration = block.timestamp > userActiveInsuranceInfo.startTime ? block.timestamp - userActiveInsuranceInfo.startTime : 0;\n                balanceToBePaid += (userActiveInsuranceInfo.insuranceFlowRate * duration);\n                ++j;\n            }\n            globalBalanceToBePaid += balanceToBePaid;\n            ++i;\n        }\n        return globalBalanceToBePaid;\n    }\n\n    function _calculateTotalFlowMade(\n        address userAddress, \n        uint256 categoryID,\n        uint256[] memory activeID\n    ) internal view returns(uint256) {\n        uint256 balanceToBePaid = 0;\n        for(uint256 i=0; i< activeID.length;){\n            UserInsuranceInfo storage userActiveInsuranceInfo = usersInsuranceInfo[userAddress][categoryID][activeID[i]];\n            uint256 duration = (userActiveInsuranceInfo.validTill - userActiveInsuranceInfo.startTime);\n            balanceToBePaid += (userActiveInsuranceInfo.insuranceFlowRate * duration);\n            ++i;\n        }\n        return balanceToBePaid;\n    }\n\n    /// DURATION\n    function calculateTotalFlowMade(\n        address userAddress, \n        uint256 categoryID\n    ) external view override returns(uint256) {\n        uint256 balanceToBePaid = 0;\n        uint256[] memory activeID = findActivePremiumCost(userAddress, categoryID, _insuranceRegistry.getLatestSubCategoryID(categoryID));\n        for(uint256 i=0; i< activeID.length;){\n            UserInsuranceInfo storage userActiveInsuranceInfo = usersInsuranceInfo[userAddress][categoryID][activeID[i]];\n            uint256 duration = (userActiveInsuranceInfo.validTill - userActiveInsuranceInfo.startTime);\n            balanceToBePaid += (userActiveInsuranceInfo.insuranceFlowRate * duration);\n            ++i;\n        }\n        return balanceToBePaid;\n    } \n\n    function getUserInsuranceValidTillInfo(\n        address userAddress, \n        uint256 categoryID, \n        uint256 subCategoryID\n    ) public view override returns(uint256) {\n        return usersInsuranceInfo[userAddress][categoryID][subCategoryID].validTill;\n    }\n\n    function getUserInsuranceStatus(\n        address userAddress, \n        uint256 categoryID, \n        uint256 subCategoryID\n    ) external view override returns(bool) {\n        return usersInsuranceInfo[userAddress][categoryID][subCategoryID].isValid;\n    }\n\n    function getUserInsuranceInfo(\n        address userAddress, \n        uint256 categoryID, \n        uint256 subCategoryID\n    ) external view override returns(uint256, uint256, uint256, uint256, uint256, bool) {\n        UserInsuranceInfo memory userInsuranceInfo = usersInsuranceInfo[userAddress][categoryID][subCategoryID];\n        return (\n            userInsuranceInfo.insuredAmount, \n            userInsuranceInfo.insuranceFlowRate,\n            userInsuranceInfo.registrationTime,\n            userInsuranceInfo.startTime,\n            userInsuranceInfo.validTill,\n            userInsuranceInfo.isValid\n            );\n    }\n\n    function getGlobalUserInsuranceInfo(\n        address _userAddress\n    ) external view override returns (uint256, uint256) {\n        UserGlobalInsuranceInfo memory userGlobalInsuranceInfo = usersGlobalInsuranceInfo[_userAddress];\n        return (userGlobalInsuranceInfo.insuranceStreamRate, userGlobalInsuranceInfo.validTill);\n    }\n\n    function getGlobalUserInsurancePremiumCost(\n        address userAddress\n    ) external view override returns(uint256) {\n       UserGlobalInsuranceInfo memory userGlobalInsuranceInfo = usersGlobalInsuranceInfo[userAddress];\n        return userGlobalInsuranceInfo.globalInsuranceCost; \n    }\n\n    function getUserInsuredAmount(\n        address userAddress, \n        uint256 categoryID, \n        uint256 subCategoryID\n    ) external view returns(uint256) {\n        return usersInsuranceInfo[userAddress][categoryID][subCategoryID].insuredAmount;\n    }\n}"},"contracts/core/token/SZTDAIERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\n/// @title: sztDAI ERC20 Token Contract\n/// @author: Anshik Bansal <anshik@safezen.finance>\n\n/// Importing required interfaces\nimport \"./../../interfaces/ICFA.sol\";\nimport \"./../../interfaces/IERC20Extended.sol\";\n\n/// Importing required contracts\nimport \"./../../BaseUpgradeablePausable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\";\n\n/// Custom Error Codes\nerror ERC20__ImmutableChangesError();\nerror ERC20__SameAdressTransferError();\nerror ERC20__InsufficientBalanceError();\n\n/// Report any bug or issues at:\n/// @custom:security-contact anshik@safezen.finance\n\ncontract SZTDAI is ERC20Upgradeable, IERC20Extended, ERC20PermitUpgradeable, BaseUpgradeablePausable {\n    uint256 private _initVersion;\n    address public swapContractDAI;\n    ICFA private _contractFlowAgreement;\n\n    modifier onlyPermissioned() {\n        require(\n            (_msgSender() == swapContractDAI) || \n            (_msgSender() == address(_contractFlowAgreement))\n        );\n        _;\n    }\n\n    function initialize() external initializer {\n        __ERC20_init(\"SZT DAI Stream Token\", \"SZTDAI\");\n        __ERC20Permit_init(\"SZTDAI\");\n        __BaseUpgradeablePausable_init(_msgSender());\n    }\n\n    function init(\n        address _addressSwapDAI,\n        address _addressCFA\n    ) external onlyAdmin {\n        if (_initVersion > 0) {\n            revert ERC20__ImmutableChangesError();\n        }\n        ++_initVersion;\n        swapContractDAI = _addressSwapDAI;\n        _contractFlowAgreement = ICFA(_addressCFA);\n    }\n\n    function pause() external onlyAdmin {\n        _pause();\n    }\n\n    function unpause() external onlyAdmin {\n        _unpause();\n    }\n    \n    //// check onlyPermissioned if needed or not\n    function mint(address to, uint256 amount) external onlyPermissioned override returns(bool) {\n        _mint(to, amount);\n        return true;\n    }\n\n    function burnFrom(address account, uint256 amount) external override returns(bool) {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n        return true;\n    }\n\n    function transfer(\n        address to, \n        uint256 amount\n    ) public override(ERC20Upgradeable, IERC20Upgradeable) returns(bool) {\n        address owner = _msgSender();\n        uint256 userCurrentBalance = balanceOf(_msgSender());\n        uint256 userPremiumCost = _contractFlowAgreement.getGlobalUserInsurancePremiumCost(_msgSender());\n        if ((userCurrentBalance - userPremiumCost) < amount) {\n            revert ERC20__InsufficientBalanceError();\n        }\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address from, \n        address to, \n        uint256 amount\n    ) public override(ERC20Upgradeable, IERC20Upgradeable) returns(bool) {\n        if (to == from) {\n            revert ERC20__SameAdressTransferError();\n        }\n        uint256 userCurrentBalance = balanceOf(from);\n        uint256 userPremiumCost = _contractFlowAgreement.getGlobalUserInsurancePremiumCost(from);\n        if ((userCurrentBalance - userPremiumCost) < amount) {\n            revert ERC20__InsufficientBalanceError();\n        }\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n}"},"contracts/interfaces/ICFA.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.16;\n\n\ninterface ICFA {\n    // CFA Events\n    event UpdatedMaxInsuredDays();\n    event UpdatedStartWaitingTime();\n    event UpdatedMinimumInsurancePeriod();\n\n    // CFA Custom Error Code\n    error CFA__ImmutableChangesError();\n    error CFA__TransactionFailedError();\n    error CFA__InactiveInsuranceError();\n    error CFA__SubCategoryNotActiveError();\n    error CFA__ActiveInsuranceExistError();\n    error CFA__InsuranceCoverNotAvailableError();\n    error CFA__NotEvenMinimumInsurancePeriodAmount();\n\n    function addInsuranceAmount(\n        uint256 insuredAmount, \n        uint256 categoryID, \n        uint256 subCategoryID,\n        uint8 v, \n        bytes32 r, \n        bytes32 s\n    ) external returns(bool);\n\n    function minusInsuranceAmount(\n        uint256 insuredAmount, \n        uint256 categoryID, \n        uint256 subCategoryID,\n        uint8 v, \n        bytes32 r, \n        bytes32 s,\n        bool closeStream\n    ) external returns(bool);\n\n    function findActivePremiumCost(\n        address userAddress, \n        uint256 categoryID, \n        uint256 insuranceCount\n    ) external view returns(uint256[] memory);\n\n    function calculateTotalFlowMade(\n        address userAddress, \n        uint256 categoryID\n    ) external view returns(uint256);  \n\n    function calculateTotalFlowMade(\n        address userAddress\n    ) external view returns(uint256); \n\n    function getUserInsuranceValidTillInfo(\n        address userAddress, \n        uint256 categoryID, \n        uint256 subCategoryID\n    ) external view returns(uint256);\n\n    function getUserInsuranceStatus(\n        address userAddress, \n        uint256 categoryID, \n        uint256 subCategoryID\n    ) external view returns(bool);\n\n    function getUserInsuranceInfo(\n        address userAddress, \n        uint256 categoryID, \n        uint256 subCategoryID\n    ) external view returns(uint256, uint256, uint256, uint256, uint256, bool);\n    \n    function getGlobalUserInsuranceInfo(\n        address _userAddress\n    ) external view returns (uint256, uint256);\n\n    function getGlobalUserInsurancePremiumCost(\n        address userAddress\n    ) external view returns(uint256);\n}"},"contracts/interfaces/IERC20Extended.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional mint and burnFrom functions from the ERC20 standard.\n */\ninterface IERC20Extended is IERC20Upgradeable {\n    \n    function mint(address to, uint256 amount) external returns(bool);\n\n    function burnFrom(address account, uint256 amount) external returns(bool);\n    \n}"},"contracts/interfaces/IInsuranceRegistry.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.16;\n\n/// Report any bug or issues at:\n/// @custom:security-contact anshik@safezen.finance\ninterface IInsuranceRegistry {\n\n    error InsuranceRegistry__ImmutableChangesError();\n    error InsuranceRegistry__TransactionFailedError();\n    error InsuranceRegistry__NotEnoughLiquidityError();\n\n    event UpdatedClaimStakedValue();\n\n    function addInsuranceLiquidity(\n        uint256 categoryID,\n        uint256 subCategoryID_,\n        uint256 liquiditySupplied\n    ) external returns(bool);\n\n    function removeInsuranceLiquidity(\n        uint256 categoryID,\n        uint256 subCategoryID_, \n        uint256 liquiditySupplied\n    ) external returns(bool);\n\n    function addCoverageOffered(\n        uint256 categoryID,\n        uint256 subCategoryID_, \n        uint256 coverageAmount,\n        uint256 incomingFlowRate\n    ) external returns(bool);\n\n    function removeCoverageOffered(\n        uint256 categoryID,\n        uint256 subCategoryID_, \n        uint256 coverageAmount, \n        uint256 incomingFlowRate\n    ) external returns(bool);\n\n    function claimAdded(\n        uint256 stakedTokenID, \n        uint256 categoryID, \n        uint256 subCategoryID_\n    ) external returns(bool);\n\n    function getVersionID(uint256 categoryID) external view returns(uint256);\n\n    function calculateUnderwriterBalance(\n        uint256 categoryID,\n        uint256 subCategoryID_\n    ) external view returns(uint256);\n\n    function getLatestCategoryID() external view returns(uint256);\n\n    function getLatestSubCategoryID(uint256 categoryID) external view returns(uint256);\n\n    function ifEnoughLiquidity(uint256 categoryID, uint256 insuredAmount, uint256 subCategoryID_) external view returns(bool);\n\n    function getStreamFlowRate(uint256 categoryID, uint256 subCategoryID_) external view returns(uint256);\n}"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","exportedSymbols":{"AccessControlUpgradeable":[335],"AddressUpgradeable":[2284],"ContextUpgradeable":[2326],"ERC165Upgradeable":[3130],"IAccessControlUpgradeable":[408],"IERC165Upgradeable":[3142],"Initializable":[577],"MathUpgradeable":[4007],"StringsUpgradeable":[2575]},"id":336,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol","file":"./IAccessControlUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":409,"src":"133:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":2327,"src":"175:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"../utils/StringsUpgradeable.sol","id":4,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":2576,"src":"217:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","file":"../utils/introspection/ERC165Upgradeable.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":3131,"src":"259:54:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":6,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":578,"src":"314:42:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":8,"name":"Initializable","nameLocations":["1939:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":577,"src":"1939:13:0"},"id":9,"nodeType":"InheritanceSpecifier","src":"1939:13:0"},{"baseName":{"id":10,"name":"ContextUpgradeable","nameLocations":["1954:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":2326,"src":"1954:18:0"},"id":11,"nodeType":"InheritanceSpecifier","src":"1954:18:0"},{"baseName":{"id":12,"name":"IAccessControlUpgradeable","nameLocations":["1974:25:0"],"nodeType":"IdentifierPath","referencedDeclaration":408,"src":"1974:25:0"},"id":13,"nodeType":"InheritanceSpecifier","src":"1974:25:0"},{"baseName":{"id":14,"name":"ERC165Upgradeable","nameLocations":["2001:17:0"],"nodeType":"IdentifierPath","referencedDeclaration":3130,"src":"2001:17:0"},"id":15,"nodeType":"InheritanceSpecifier","src":"2001:17:0"}],"canonicalName":"AccessControlUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":7,"nodeType":"StructuredDocumentation","src":"358:1534:0","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it."},"fullyImplemented":true,"id":335,"linearizedBaseContracts":[335,3130,3142,408,2326,577],"name":"AccessControlUpgradeable","nameLocation":"1911:24:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":20,"nodeType":"Block","src":"2083:7:0","statements":[]},"id":21,"implemented":true,"kind":"function","modifiers":[{"id":18,"kind":"modifierInvocation","modifierName":{"id":17,"name":"onlyInitializing","nameLocations":["2066:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":522,"src":"2066:16:0"},"nodeType":"ModifierInvocation","src":"2066:16:0"}],"name":"__AccessControl_init","nameLocation":"2034:20:0","nodeType":"FunctionDefinition","parameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"2054:2:0"},"returnParameters":{"id":19,"nodeType":"ParameterList","parameters":[],"src":"2083:0:0"},"scope":335,"src":"2025:65:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":26,"nodeType":"Block","src":"2164:7:0","statements":[]},"id":27,"implemented":true,"kind":"function","modifiers":[{"id":24,"kind":"modifierInvocation","modifierName":{"id":23,"name":"onlyInitializing","nameLocations":["2147:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":522,"src":"2147:16:0"},"nodeType":"ModifierInvocation","src":"2147:16:0"}],"name":"__AccessControl_init_unchained","nameLocation":"2105:30:0","nodeType":"FunctionDefinition","parameters":{"id":22,"nodeType":"ParameterList","parameters":[],"src":"2135:2:0"},"returnParameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"2164:0:0"},"scope":335,"src":"2096:75:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"canonicalName":"AccessControlUpgradeable.RoleData","id":34,"members":[{"constant":false,"id":31,"mutability":"mutable","name":"members","nameLocation":"2227:7:0","nodeType":"VariableDeclaration","scope":34,"src":"2202:32:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":30,"keyType":{"id":28,"name":"address","nodeType":"ElementaryTypeName","src":"2210:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2202:24:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":29,"name":"bool","nodeType":"ElementaryTypeName","src":"2221:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":33,"mutability":"mutable","name":"adminRole","nameLocation":"2252:9:0","nodeType":"VariableDeclaration","scope":34,"src":"2244:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":32,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2244:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"2183:8:0","nodeType":"StructDefinition","scope":335,"src":"2176:92:0","visibility":"public"},{"constant":false,"id":39,"mutability":"mutable","name":"_roles","nameLocation":"2311:6:0","nodeType":"VariableDeclaration","scope":335,"src":"2274:43:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"typeName":{"id":38,"keyType":{"id":35,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2282:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2274:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"valueType":{"id":37,"nodeType":"UserDefinedTypeName","pathNode":{"id":36,"name":"RoleData","nameLocations":["2293:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":34,"src":"2293:8:0"},"referencedDeclaration":34,"src":"2293:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage_ptr","typeString":"struct AccessControlUpgradeable.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":42,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2348:18:0","nodeType":"VariableDeclaration","scope":335,"src":"2324:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":40,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":41,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2369:4:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":52,"nodeType":"Block","src":"2792:44:0","statements":[{"expression":{"arguments":[{"id":48,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"2813:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":47,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[107,146],"referencedDeclaration":107,"src":"2802:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2802:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":50,"nodeType":"ExpressionStatement","src":"2802:16:0"},{"id":51,"nodeType":"PlaceholderStatement","src":"2828:1:0"}]},"documentation":{"id":43,"nodeType":"StructuredDocumentation","src":"2380:375:0","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"},"id":53,"name":"onlyRole","nameLocation":"2769:8:0","nodeType":"ModifierDefinition","parameters":{"id":46,"nodeType":"ParameterList","parameters":[{"constant":false,"id":45,"mutability":"mutable","name":"role","nameLocation":"2786:4:0","nodeType":"VariableDeclaration","scope":53,"src":"2778:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":44,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2778:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2777:14:0"},"src":"2760:76:0","virtual":false,"visibility":"internal"},{"baseFunctions":[3124],"body":{"id":74,"nodeType":"Block","src":"2994:122:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":67,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":62,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"3011:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":64,"name":"IAccessControlUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"3031:25:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControlUpgradeable_$408_$","typeString":"type(contract IAccessControlUpgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControlUpgradeable_$408_$","typeString":"type(contract IAccessControlUpgradeable)"}],"id":63,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3026:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":65,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3026:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControlUpgradeable_$408","typeString":"type(contract IAccessControlUpgradeable)"}},"id":66,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3058:11:0","memberName":"interfaceId","nodeType":"MemberAccess","src":"3026:43:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"3011:58:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":70,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"3097:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":68,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"3073:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlUpgradeable_$335_$","typeString":"type(contract super AccessControlUpgradeable)"}},"id":69,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3079:17:0","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3124,"src":"3073:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":71,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3073:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3011:98:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":61,"id":73,"nodeType":"Return","src":"3004:105:0"}]},"documentation":{"id":54,"nodeType":"StructuredDocumentation","src":"2842:56:0","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":75,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2912:17:0","nodeType":"FunctionDefinition","overrides":{"id":58,"nodeType":"OverrideSpecifier","overrides":[],"src":"2970:8:0"},"parameters":{"id":57,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56,"mutability":"mutable","name":"interfaceId","nameLocation":"2937:11:0","nodeType":"VariableDeclaration","scope":75,"src":"2930:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":55,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2930:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2929:20:0"},"returnParameters":{"id":61,"nodeType":"ParameterList","parameters":[{"constant":false,"id":60,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":75,"src":"2988:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":59,"name":"bool","nodeType":"ElementaryTypeName","src":"2988:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2987:6:0"},"scope":335,"src":"2903:213:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[375],"body":{"id":93,"nodeType":"Block","src":"3295:53:0","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":86,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"3312:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":88,"indexExpression":{"id":87,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":78,"src":"3319:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3312:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":89,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3325:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":31,"src":"3312:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":91,"indexExpression":{"id":90,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"3333:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3312:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":85,"id":92,"nodeType":"Return","src":"3305:36:0"}]},"documentation":{"id":76,"nodeType":"StructuredDocumentation","src":"3122:76:0","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":94,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"3212:7:0","nodeType":"FunctionDefinition","overrides":{"id":82,"nodeType":"OverrideSpecifier","overrides":[],"src":"3271:8:0"},"parameters":{"id":81,"nodeType":"ParameterList","parameters":[{"constant":false,"id":78,"mutability":"mutable","name":"role","nameLocation":"3228:4:0","nodeType":"VariableDeclaration","scope":94,"src":"3220:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":77,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3220:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":80,"mutability":"mutable","name":"account","nameLocation":"3242:7:0","nodeType":"VariableDeclaration","scope":94,"src":"3234:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":79,"name":"address","nodeType":"ElementaryTypeName","src":"3234:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3219:31:0"},"returnParameters":{"id":85,"nodeType":"ParameterList","parameters":[{"constant":false,"id":84,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":94,"src":"3289:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":83,"name":"bool","nodeType":"ElementaryTypeName","src":"3289:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3288:6:0"},"scope":335,"src":"3203:145:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":106,"nodeType":"Block","src":"3698:47:0","statements":[{"expression":{"arguments":[{"id":101,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"3719:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":102,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"3725:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3725:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":100,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[107,146],"referencedDeclaration":146,"src":"3708:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3708:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":105,"nodeType":"ExpressionStatement","src":"3708:30:0"}]},"documentation":{"id":95,"nodeType":"StructuredDocumentation","src":"3354:283:0","text":" @dev Revert with a standard message if `_msgSender()` is missing `role`.\n Overriding this function changes the behavior of the {onlyRole} modifier.\n Format of the revert message is described in {_checkRole}.\n _Available since v4.6._"},"id":107,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3651:10:0","nodeType":"FunctionDefinition","parameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"role","nameLocation":"3670:4:0","nodeType":"VariableDeclaration","scope":107,"src":"3662:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":96,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3662:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3661:14:0"},"returnParameters":{"id":99,"nodeType":"ParameterList","parameters":[],"src":"3698:0:0"},"scope":335,"src":"3642:103:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":145,"nodeType":"Block","src":"4099:428:0","statements":[{"condition":{"id":119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4113:23:0","subExpression":{"arguments":[{"id":116,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"4122:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":117,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"4128:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":115,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"4114:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4114:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":144,"nodeType":"IfStatement","src":"4109:412:0","trueBody":{"id":143,"nodeType":"Block","src":"4138:383:0","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","id":125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4246:25:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},"value":"AccessControl: account "},{"arguments":[{"id":128,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"4328:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":126,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2575,"src":"4297:18:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$2575_$","typeString":"type(library StringsUpgradeable)"}},"id":127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4316:11:0","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":2574,"src":"4297:30:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4297:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"206973206d697373696e6720726f6c6520","id":130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4362:19:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},"value":" is missing role "},{"arguments":[{"arguments":[{"id":135,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"4446:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":134,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4438:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":133,"name":"uint256","nodeType":"ElementaryTypeName","src":"4438:7:0","typeDescriptions":{}}},"id":136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4438:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"3332","id":137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4453:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"id":131,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2575,"src":"4407:18:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$2575_$","typeString":"type(library StringsUpgradeable)"}},"id":132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4426:11:0","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":2554,"src":"4407:30:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4407:49:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":123,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4204:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4208:12:0","memberName":"encodePacked","nodeType":"MemberAccess","src":"4204:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4204:274:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4176:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":121,"name":"string","nodeType":"ElementaryTypeName","src":"4176:6:0","typeDescriptions":{}}},"id":140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4176:320:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":120,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"4152:6:0","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4152:358:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":142,"nodeType":"ExpressionStatement","src":"4152:358:0"}]}}]},"documentation":{"id":108,"nodeType":"StructuredDocumentation","src":"3751:270:0","text":" @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"},"id":146,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"4035:10:0","nodeType":"FunctionDefinition","parameters":{"id":113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":110,"mutability":"mutable","name":"role","nameLocation":"4054:4:0","nodeType":"VariableDeclaration","scope":146,"src":"4046:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":109,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4046:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":112,"mutability":"mutable","name":"account","nameLocation":"4068:7:0","nodeType":"VariableDeclaration","scope":146,"src":"4060:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"4060:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4045:31:0"},"returnParameters":{"id":114,"nodeType":"ParameterList","parameters":[],"src":"4099:0:0"},"scope":335,"src":"4026:501:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[383],"body":{"id":160,"nodeType":"Block","src":"4791:46:0","statements":[{"expression":{"expression":{"baseExpression":{"id":155,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"4808:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":157,"indexExpression":{"id":156,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"4815:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4808:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":158,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4821:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":33,"src":"4808:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":154,"id":159,"nodeType":"Return","src":"4801:29:0"}]},"documentation":{"id":147,"nodeType":"StructuredDocumentation","src":"4533:170:0","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":161,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"4717:12:0","nodeType":"FunctionDefinition","overrides":{"id":151,"nodeType":"OverrideSpecifier","overrides":[],"src":"4764:8:0"},"parameters":{"id":150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":149,"mutability":"mutable","name":"role","nameLocation":"4738:4:0","nodeType":"VariableDeclaration","scope":161,"src":"4730:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":148,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4730:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4729:14:0"},"returnParameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":161,"src":"4782:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":152,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4782:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4781:9:0"},"scope":335,"src":"4708:129:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[391],"body":{"id":180,"nodeType":"Block","src":"5236:42:0","statements":[{"expression":{"arguments":[{"id":176,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"5257:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":177,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"5263:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":175,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"5246:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5246:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":179,"nodeType":"ExpressionStatement","src":"5246:25:0"}]},"documentation":{"id":162,"nodeType":"StructuredDocumentation","src":"4843:285:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":181,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":171,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"5229:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":170,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"5216:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5216:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":173,"kind":"modifierInvocation","modifierName":{"id":169,"name":"onlyRole","nameLocations":["5207:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":53,"src":"5207:8:0"},"nodeType":"ModifierInvocation","src":"5207:28:0"}],"name":"grantRole","nameLocation":"5142:9:0","nodeType":"FunctionDefinition","overrides":{"id":168,"nodeType":"OverrideSpecifier","overrides":[],"src":"5198:8:0"},"parameters":{"id":167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":164,"mutability":"mutable","name":"role","nameLocation":"5160:4:0","nodeType":"VariableDeclaration","scope":181,"src":"5152:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":163,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5152:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":166,"mutability":"mutable","name":"account","nameLocation":"5174:7:0","nodeType":"VariableDeclaration","scope":181,"src":"5166:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":165,"name":"address","nodeType":"ElementaryTypeName","src":"5166:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5151:31:0"},"returnParameters":{"id":174,"nodeType":"ParameterList","parameters":[],"src":"5236:0:0"},"scope":335,"src":"5133:145:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[399],"body":{"id":200,"nodeType":"Block","src":"5662:43:0","statements":[{"expression":{"arguments":[{"id":196,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"5684:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":197,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"5690:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":195,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"5672:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5672:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":199,"nodeType":"ExpressionStatement","src":"5672:26:0"}]},"documentation":{"id":182,"nodeType":"StructuredDocumentation","src":"5284:269:0","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":201,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":191,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"5655:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":190,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"5642:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5642:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":193,"kind":"modifierInvocation","modifierName":{"id":189,"name":"onlyRole","nameLocations":["5633:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":53,"src":"5633:8:0"},"nodeType":"ModifierInvocation","src":"5633:28:0"}],"name":"revokeRole","nameLocation":"5567:10:0","nodeType":"FunctionDefinition","overrides":{"id":188,"nodeType":"OverrideSpecifier","overrides":[],"src":"5624:8:0"},"parameters":{"id":187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":184,"mutability":"mutable","name":"role","nameLocation":"5586:4:0","nodeType":"VariableDeclaration","scope":201,"src":"5578:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":183,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5578:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":186,"mutability":"mutable","name":"account","nameLocation":"5600:7:0","nodeType":"VariableDeclaration","scope":201,"src":"5592:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":185,"name":"address","nodeType":"ElementaryTypeName","src":"5592:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5577:31:0"},"returnParameters":{"id":194,"nodeType":"ParameterList","parameters":[],"src":"5662:0:0"},"scope":335,"src":"5558:147:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[407],"body":{"id":223,"nodeType":"Block","src":"6319:137:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":211,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"6337:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":212,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"6348:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6348:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6337:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66","id":215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6362:49:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""},"value":"AccessControl: can only renounce roles for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""}],"id":210,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6329:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6329:83:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":217,"nodeType":"ExpressionStatement","src":"6329:83:0"},{"expression":{"arguments":[{"id":219,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"6435:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":220,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"6441:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":218,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"6423:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6423:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":222,"nodeType":"ExpressionStatement","src":"6423:26:0"}]},"documentation":{"id":202,"nodeType":"StructuredDocumentation","src":"5711:526:0","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":224,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"6251:12:0","nodeType":"FunctionDefinition","overrides":{"id":208,"nodeType":"OverrideSpecifier","overrides":[],"src":"6310:8:0"},"parameters":{"id":207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"role","nameLocation":"6272:4:0","nodeType":"VariableDeclaration","scope":224,"src":"6264:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":203,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6264:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":206,"mutability":"mutable","name":"account","nameLocation":"6286:7:0","nodeType":"VariableDeclaration","scope":224,"src":"6278:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":205,"name":"address","nodeType":"ElementaryTypeName","src":"6278:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6263:31:0"},"returnParameters":{"id":209,"nodeType":"ParameterList","parameters":[],"src":"6319:0:0"},"scope":335,"src":"6242:214:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":237,"nodeType":"Block","src":"7209:42:0","statements":[{"expression":{"arguments":[{"id":233,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"7230:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":234,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"7236:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":232,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"7219:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7219:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":236,"nodeType":"ExpressionStatement","src":"7219:25:0"}]},"documentation":{"id":225,"nodeType":"StructuredDocumentation","src":"6462:674:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n May emit a {RoleGranted} event.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."},"id":238,"implemented":true,"kind":"function","modifiers":[],"name":"_setupRole","nameLocation":"7150:10:0","nodeType":"FunctionDefinition","parameters":{"id":230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":227,"mutability":"mutable","name":"role","nameLocation":"7169:4:0","nodeType":"VariableDeclaration","scope":238,"src":"7161:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":226,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7161:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":229,"mutability":"mutable","name":"account","nameLocation":"7183:7:0","nodeType":"VariableDeclaration","scope":238,"src":"7175:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":228,"name":"address","nodeType":"ElementaryTypeName","src":"7175:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7160:31:0"},"returnParameters":{"id":231,"nodeType":"ParameterList","parameters":[],"src":"7209:0:0"},"scope":335,"src":"7141:110:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":265,"nodeType":"Block","src":"7449:174:0","statements":[{"assignments":[247],"declarations":[{"constant":false,"id":247,"mutability":"mutable","name":"previousAdminRole","nameLocation":"7467:17:0","nodeType":"VariableDeclaration","scope":265,"src":"7459:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":246,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7459:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":251,"initialValue":{"arguments":[{"id":249,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"7500:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":248,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"7487:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7487:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7459:46:0"},{"expression":{"id":257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":252,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"7515:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":254,"indexExpression":{"id":253,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"7522:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7515:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":255,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7528:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":33,"src":"7515:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":256,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"7540:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7515:34:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":258,"nodeType":"ExpressionStatement","src":"7515:34:0"},{"eventCall":{"arguments":[{"id":260,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"7581:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":261,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"7587:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":262,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"7606:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":259,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"7564:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7564:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":264,"nodeType":"EmitStatement","src":"7559:57:0"}]},"documentation":{"id":239,"nodeType":"StructuredDocumentation","src":"7257:114:0","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":266,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"7385:13:0","nodeType":"FunctionDefinition","parameters":{"id":244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":241,"mutability":"mutable","name":"role","nameLocation":"7407:4:0","nodeType":"VariableDeclaration","scope":266,"src":"7399:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":240,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7399:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":243,"mutability":"mutable","name":"adminRole","nameLocation":"7421:9:0","nodeType":"VariableDeclaration","scope":266,"src":"7413:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":242,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7413:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7398:33:0"},"returnParameters":{"id":245,"nodeType":"ParameterList","parameters":[],"src":"7449:0:0"},"scope":335,"src":"7376:247:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":297,"nodeType":"Block","src":"7859:165:0","statements":[{"condition":{"id":278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7873:23:0","subExpression":{"arguments":[{"id":275,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"7882:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":276,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"7888:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":274,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"7874:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7874:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":296,"nodeType":"IfStatement","src":"7869:149:0","trueBody":{"id":295,"nodeType":"Block","src":"7898:120:0","statements":[{"expression":{"id":286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":279,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"7912:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":281,"indexExpression":{"id":280,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"7919:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7912:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":282,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7925:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":31,"src":"7912:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":284,"indexExpression":{"id":283,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"7933:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7912:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7944:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7912:36:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":287,"nodeType":"ExpressionStatement","src":"7912:36:0"},{"eventCall":{"arguments":[{"id":289,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"7979:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":290,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"7985:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":291,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"7994:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7994:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":288,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"7967:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7967:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":294,"nodeType":"EmitStatement","src":"7962:45:0"}]}}]},"documentation":{"id":267,"nodeType":"StructuredDocumentation","src":"7629:157:0","text":" @dev Grants `role` to `account`.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":298,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"7800:10:0","nodeType":"FunctionDefinition","parameters":{"id":272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":269,"mutability":"mutable","name":"role","nameLocation":"7819:4:0","nodeType":"VariableDeclaration","scope":298,"src":"7811:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":268,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7811:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":271,"mutability":"mutable","name":"account","nameLocation":"7833:7:0","nodeType":"VariableDeclaration","scope":298,"src":"7825:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":270,"name":"address","nodeType":"ElementaryTypeName","src":"7825:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7810:31:0"},"returnParameters":{"id":273,"nodeType":"ParameterList","parameters":[],"src":"7859:0:0"},"scope":335,"src":"7791:233:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":328,"nodeType":"Block","src":"8264:165:0","statements":[{"condition":{"arguments":[{"id":307,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"8286:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":308,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"8292:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":306,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"8278:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8278:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":327,"nodeType":"IfStatement","src":"8274:149:0","trueBody":{"id":326,"nodeType":"Block","src":"8302:121:0","statements":[{"expression":{"id":317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":310,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"8316:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":312,"indexExpression":{"id":311,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"8323:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8316:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":313,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8329:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":31,"src":"8316:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":315,"indexExpression":{"id":314,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"8337:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8316:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8348:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"8316:37:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":318,"nodeType":"ExpressionStatement","src":"8316:37:0"},{"eventCall":{"arguments":[{"id":320,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"8384:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":321,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"8390:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":322,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"8399:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8399:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":319,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":365,"src":"8372:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8372:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":325,"nodeType":"EmitStatement","src":"8367:45:0"}]}}]},"documentation":{"id":299,"nodeType":"StructuredDocumentation","src":"8030:160:0","text":" @dev Revokes `role` from `account`.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":329,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"8204:11:0","nodeType":"FunctionDefinition","parameters":{"id":304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":301,"mutability":"mutable","name":"role","nameLocation":"8224:4:0","nodeType":"VariableDeclaration","scope":329,"src":"8216:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":300,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8216:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":303,"mutability":"mutable","name":"account","nameLocation":"8238:7:0","nodeType":"VariableDeclaration","scope":329,"src":"8230:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":302,"name":"address","nodeType":"ElementaryTypeName","src":"8230:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8215:31:0"},"returnParameters":{"id":305,"nodeType":"ParameterList","parameters":[],"src":"8264:0:0"},"scope":335,"src":"8195:234:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":330,"nodeType":"StructuredDocumentation","src":"8435:254:0","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":334,"mutability":"mutable","name":"__gap","nameLocation":"8714:5:0","nodeType":"VariableDeclaration","scope":335,"src":"8694:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":331,"name":"uint256","nodeType":"ElementaryTypeName","src":"8694:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":333,"length":{"hexValue":"3439","id":332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8702:2:0","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"8694:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":336,"src":"1893:6829:0","usedErrors":[]}],"src":"108:8615:0"},"id":0},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol","exportedSymbols":{"IAccessControlUpgradeable":[408]},"id":409,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":337,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"94:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControlUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":338,"nodeType":"StructuredDocumentation","src":"119:89:1","text":" @dev External interface of AccessControl declared to support ERC165 detection."},"fullyImplemented":false,"id":408,"linearizedBaseContracts":[408],"name":"IAccessControlUpgradeable","nameLocation":"219:25:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":339,"nodeType":"StructuredDocumentation","src":"251:292:1","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"},"eventSelector":"bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff","id":347,"name":"RoleAdminChanged","nameLocation":"554:16:1","nodeType":"EventDefinition","parameters":{"id":346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":341,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"587:4:1","nodeType":"VariableDeclaration","scope":347,"src":"571:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":340,"name":"bytes32","nodeType":"ElementaryTypeName","src":"571:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":343,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"609:17:1","nodeType":"VariableDeclaration","scope":347,"src":"593:33:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":342,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":345,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"644:12:1","nodeType":"VariableDeclaration","scope":347,"src":"628:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":344,"name":"bytes32","nodeType":"ElementaryTypeName","src":"628:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"570:87:1"},"src":"548:110:1"},{"anonymous":false,"documentation":{"id":348,"nodeType":"StructuredDocumentation","src":"664:212:1","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":356,"name":"RoleGranted","nameLocation":"887:11:1","nodeType":"EventDefinition","parameters":{"id":355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":350,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"915:4:1","nodeType":"VariableDeclaration","scope":356,"src":"899:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":349,"name":"bytes32","nodeType":"ElementaryTypeName","src":"899:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":352,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"937:7:1","nodeType":"VariableDeclaration","scope":356,"src":"921:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":351,"name":"address","nodeType":"ElementaryTypeName","src":"921:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":354,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"962:6:1","nodeType":"VariableDeclaration","scope":356,"src":"946:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":353,"name":"address","nodeType":"ElementaryTypeName","src":"946:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"898:71:1"},"src":"881:89:1"},{"anonymous":false,"documentation":{"id":357,"nodeType":"StructuredDocumentation","src":"976:275:1","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":365,"name":"RoleRevoked","nameLocation":"1262:11:1","nodeType":"EventDefinition","parameters":{"id":364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":359,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1290:4:1","nodeType":"VariableDeclaration","scope":365,"src":"1274:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":358,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1274:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":361,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1312:7:1","nodeType":"VariableDeclaration","scope":365,"src":"1296:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":360,"name":"address","nodeType":"ElementaryTypeName","src":"1296:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":363,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1337:6:1","nodeType":"VariableDeclaration","scope":365,"src":"1321:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":362,"name":"address","nodeType":"ElementaryTypeName","src":"1321:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1273:71:1"},"src":"1256:89:1"},{"documentation":{"id":366,"nodeType":"StructuredDocumentation","src":"1351:76:1","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":375,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1441:7:1","nodeType":"FunctionDefinition","parameters":{"id":371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":368,"mutability":"mutable","name":"role","nameLocation":"1457:4:1","nodeType":"VariableDeclaration","scope":375,"src":"1449:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":367,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1449:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":370,"mutability":"mutable","name":"account","nameLocation":"1471:7:1","nodeType":"VariableDeclaration","scope":375,"src":"1463:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":369,"name":"address","nodeType":"ElementaryTypeName","src":"1463:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1448:31:1"},"returnParameters":{"id":374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":373,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":375,"src":"1503:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":372,"name":"bool","nodeType":"ElementaryTypeName","src":"1503:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1502:6:1"},"scope":408,"src":"1432:77:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":376,"nodeType":"StructuredDocumentation","src":"1515:184:1","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":383,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"1713:12:1","nodeType":"FunctionDefinition","parameters":{"id":379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":378,"mutability":"mutable","name":"role","nameLocation":"1734:4:1","nodeType":"VariableDeclaration","scope":383,"src":"1726:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1726:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1725:14:1"},"returnParameters":{"id":382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":381,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":383,"src":"1763:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":380,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1763:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1762:9:1"},"scope":408,"src":"1704:68:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":384,"nodeType":"StructuredDocumentation","src":"1778:239:1","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":391,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2031:9:1","nodeType":"FunctionDefinition","parameters":{"id":389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":386,"mutability":"mutable","name":"role","nameLocation":"2049:4:1","nodeType":"VariableDeclaration","scope":391,"src":"2041:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":385,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2041:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":388,"mutability":"mutable","name":"account","nameLocation":"2063:7:1","nodeType":"VariableDeclaration","scope":391,"src":"2055:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":387,"name":"address","nodeType":"ElementaryTypeName","src":"2055:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2040:31:1"},"returnParameters":{"id":390,"nodeType":"ParameterList","parameters":[],"src":"2080:0:1"},"scope":408,"src":"2022:59:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":392,"nodeType":"StructuredDocumentation","src":"2087:223:1","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":399,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2324:10:1","nodeType":"FunctionDefinition","parameters":{"id":397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":394,"mutability":"mutable","name":"role","nameLocation":"2343:4:1","nodeType":"VariableDeclaration","scope":399,"src":"2335:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":393,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2335:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":396,"mutability":"mutable","name":"account","nameLocation":"2357:7:1","nodeType":"VariableDeclaration","scope":399,"src":"2349:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":395,"name":"address","nodeType":"ElementaryTypeName","src":"2349:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2334:31:1"},"returnParameters":{"id":398,"nodeType":"ParameterList","parameters":[],"src":"2374:0:1"},"scope":408,"src":"2315:60:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":400,"nodeType":"StructuredDocumentation","src":"2381:480:1","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."},"functionSelector":"36568abe","id":407,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2875:12:1","nodeType":"FunctionDefinition","parameters":{"id":405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":402,"mutability":"mutable","name":"role","nameLocation":"2896:4:1","nodeType":"VariableDeclaration","scope":407,"src":"2888:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":401,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2888:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":404,"mutability":"mutable","name":"account","nameLocation":"2910:7:1","nodeType":"VariableDeclaration","scope":407,"src":"2902:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":403,"name":"address","nodeType":"ElementaryTypeName","src":"2902:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2887:31:1"},"returnParameters":{"id":406,"nodeType":"ParameterList","parameters":[],"src":"2927:0:1"},"scope":408,"src":"2866:62:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":409,"src":"209:2721:1","usedErrors":[]}],"src":"94:2837:1"},"id":1},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[2284],"Initializable":[577]},"id":578,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":410,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:2"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":411,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":578,"sourceUnit":2285,"src":"138:44:2","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":412,"nodeType":"StructuredDocumentation","src":"184:2198:2","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":577,"linearizedBaseContracts":[577],"name":"Initializable","nameLocation":"2401:13:2","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":413,"nodeType":"StructuredDocumentation","src":"2421:109:2","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":415,"mutability":"mutable","name":"_initialized","nameLocation":"2549:12:2","nodeType":"VariableDeclaration","scope":577,"src":"2535:26:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":414,"name":"uint8","nodeType":"ElementaryTypeName","src":"2535:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":416,"nodeType":"StructuredDocumentation","src":"2568:91:2","text":" @dev Indicates that the contract is in the process of being initialized."},"id":418,"mutability":"mutable","name":"_initializing","nameLocation":"2677:13:2","nodeType":"VariableDeclaration","scope":577,"src":"2664:26:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":417,"name":"bool","nodeType":"ElementaryTypeName","src":"2664:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":419,"nodeType":"StructuredDocumentation","src":"2697:90:2","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":423,"name":"Initialized","nameLocation":"2798:11:2","nodeType":"EventDefinition","parameters":{"id":422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":421,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2816:7:2","nodeType":"VariableDeclaration","scope":423,"src":"2810:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":420,"name":"uint8","nodeType":"ElementaryTypeName","src":"2810:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2809:15:2"},"src":"2792:33:2"},{"body":{"id":478,"nodeType":"Block","src":"3258:483:2","statements":[{"assignments":[427],"declarations":[{"constant":false,"id":427,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3273:14:2","nodeType":"VariableDeclaration","scope":478,"src":"3268:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":426,"name":"bool","nodeType":"ElementaryTypeName","src":"3268:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":430,"initialValue":{"id":429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3290:14:2","subExpression":{"id":428,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"3291:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3268:36:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":432,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"3336:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":433,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"3354:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3369:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3354:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3336:34:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":437,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3335:36:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3376:45:2","subExpression":{"arguments":[{"arguments":[{"id":442,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3415:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$577","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$577","typeString":"contract Initializable"}],"id":441,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3407:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":440,"name":"address","nodeType":"ElementaryTypeName","src":"3407:7:2","typeDescriptions":{}}},"id":443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3407:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":438,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2284,"src":"3377:18:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2284_$","typeString":"type(library AddressUpgradeable)"}},"id":439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3396:10:2","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2018,"src":"3377:29:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3377:44:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":446,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"3425:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3441:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3425:17:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3376:66:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":450,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3375:68:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3335:108:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3457:48:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":431,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3314:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3314:201:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":454,"nodeType":"ExpressionStatement","src":"3314:201:2"},{"expression":{"id":457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":455,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"3525:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3540:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3525:16:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":458,"nodeType":"ExpressionStatement","src":"3525:16:2"},{"condition":{"id":459,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"3555:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":465,"nodeType":"IfStatement","src":"3551:65:2","trueBody":{"id":464,"nodeType":"Block","src":"3571:45:2","statements":[{"expression":{"id":462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":460,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"3585:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3601:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3585:20:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":463,"nodeType":"ExpressionStatement","src":"3585:20:2"}]}},{"id":466,"nodeType":"PlaceholderStatement","src":"3625:1:2"},{"condition":{"id":467,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"3640:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":477,"nodeType":"IfStatement","src":"3636:99:2","trueBody":{"id":476,"nodeType":"Block","src":"3656:79:2","statements":[{"expression":{"id":470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":468,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"3670:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3686:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3670:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":471,"nodeType":"ExpressionStatement","src":"3670:21:2"},{"eventCall":{"arguments":[{"hexValue":"31","id":473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3722:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":472,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":423,"src":"3710:11:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3710:14:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":475,"nodeType":"EmitStatement","src":"3705:19:2"}]}}]},"documentation":{"id":424,"nodeType":"StructuredDocumentation","src":"2831:399:2","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":479,"name":"initializer","nameLocation":"3244:11:2","nodeType":"ModifierDefinition","parameters":{"id":425,"nodeType":"ParameterList","parameters":[],"src":"3255:2:2"},"src":"3235:506:2","virtual":false,"visibility":"internal"},{"body":{"id":511,"nodeType":"Block","src":"4852:255:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4870:14:2","subExpression":{"id":485,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"4871:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":487,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"4888:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":488,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"4903:7:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4888:22:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4870:40:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4912:48:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":484,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4862:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4862:99:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":493,"nodeType":"ExpressionStatement","src":"4862:99:2"},{"expression":{"id":496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":494,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"4971:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":495,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"4986:7:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4971:22:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":497,"nodeType":"ExpressionStatement","src":"4971:22:2"},{"expression":{"id":500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":498,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"5003:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5019:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5003:20:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":501,"nodeType":"ExpressionStatement","src":"5003:20:2"},{"id":502,"nodeType":"PlaceholderStatement","src":"5033:1:2"},{"expression":{"id":505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":503,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"5044:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5060:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5044:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":506,"nodeType":"ExpressionStatement","src":"5044:21:2"},{"eventCall":{"arguments":[{"id":508,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"5092:7:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":507,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":423,"src":"5080:11:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5080:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":510,"nodeType":"EmitStatement","src":"5075:25:2"}]},"documentation":{"id":480,"nodeType":"StructuredDocumentation","src":"3747:1062:2","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":512,"name":"reinitializer","nameLocation":"4823:13:2","nodeType":"ModifierDefinition","parameters":{"id":483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":482,"mutability":"mutable","name":"version","nameLocation":"4843:7:2","nodeType":"VariableDeclaration","scope":512,"src":"4837:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":481,"name":"uint8","nodeType":"ElementaryTypeName","src":"4837:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4836:15:2"},"src":"4814:293:2","virtual":false,"visibility":"internal"},{"body":{"id":521,"nodeType":"Block","src":"5345:97:2","statements":[{"expression":{"arguments":[{"id":516,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"5363:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5378:45:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":515,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5355:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5355:69:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":519,"nodeType":"ExpressionStatement","src":"5355:69:2"},{"id":520,"nodeType":"PlaceholderStatement","src":"5434:1:2"}]},"documentation":{"id":513,"nodeType":"StructuredDocumentation","src":"5113:199:2","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":522,"name":"onlyInitializing","nameLocation":"5326:16:2","nodeType":"ModifierDefinition","parameters":{"id":514,"nodeType":"ParameterList","parameters":[],"src":"5342:2:2"},"src":"5317:125:2","virtual":false,"visibility":"internal"},{"body":{"id":557,"nodeType":"Block","src":"5977:230:2","statements":[{"expression":{"arguments":[{"id":528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5995:14:2","subExpression":{"id":527,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"5996:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6011:41:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":526,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5987:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5987:66:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":531,"nodeType":"ExpressionStatement","src":"5987:66:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":532,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"6067:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"arguments":[{"id":535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6087:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":534,"name":"uint8","nodeType":"ElementaryTypeName","src":"6087:5:2","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":533,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6082:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6082:11:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":537,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6094:3:2","memberName":"max","nodeType":"MemberAccess","src":"6082:15:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6067:30:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":556,"nodeType":"IfStatement","src":"6063:138:2","trueBody":{"id":555,"nodeType":"Block","src":"6099:102:2","statements":[{"expression":{"id":545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":539,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"6113:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":542,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6133:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":541,"name":"uint8","nodeType":"ElementaryTypeName","src":"6133:5:2","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":540,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6128:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6128:11:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":544,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6140:3:2","memberName":"max","nodeType":"MemberAccess","src":"6128:15:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6113:30:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":546,"nodeType":"ExpressionStatement","src":"6113:30:2"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":550,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6179:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":549,"name":"uint8","nodeType":"ElementaryTypeName","src":"6179:5:2","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":548,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6174:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:11:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6186:3:2","memberName":"max","nodeType":"MemberAccess","src":"6174:15:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":547,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":423,"src":"6162:11:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6162:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":554,"nodeType":"EmitStatement","src":"6157:33:2"}]}}]},"documentation":{"id":523,"nodeType":"StructuredDocumentation","src":"5448:475:2","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":558,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5937:20:2","nodeType":"FunctionDefinition","parameters":{"id":524,"nodeType":"ParameterList","parameters":[],"src":"5957:2:2"},"returnParameters":{"id":525,"nodeType":"ParameterList","parameters":[],"src":"5977:0:2"},"scope":577,"src":"5928:279:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":566,"nodeType":"Block","src":"6381:36:2","statements":[{"expression":{"id":564,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"6398:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":563,"id":565,"nodeType":"Return","src":"6391:19:2"}]},"documentation":{"id":559,"nodeType":"StructuredDocumentation","src":"6213:99:2","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":567,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6326:22:2","nodeType":"FunctionDefinition","parameters":{"id":560,"nodeType":"ParameterList","parameters":[],"src":"6348:2:2"},"returnParameters":{"id":563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":562,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":567,"src":"6374:5:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":561,"name":"uint8","nodeType":"ElementaryTypeName","src":"6374:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6373:7:2"},"scope":577,"src":"6317:100:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":575,"nodeType":"Block","src":"6589:37:2","statements":[{"expression":{"id":573,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"6606:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":572,"id":574,"nodeType":"Return","src":"6599:20:2"}]},"documentation":{"id":568,"nodeType":"StructuredDocumentation","src":"6423:105:2","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":576,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6542:15:2","nodeType":"FunctionDefinition","parameters":{"id":569,"nodeType":"ParameterList","parameters":[],"src":"6557:2:2"},"returnParameters":{"id":572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":571,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":576,"src":"6583:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":570,"name":"bool","nodeType":"ElementaryTypeName","src":"6583:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6582:6:2"},"scope":577,"src":"6533:93:2","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":578,"src":"2383:4245:2","usedErrors":[]}],"src":"113:6516:2"},"id":2},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2284],"ContextUpgradeable":[2326],"Initializable":[577],"PausableUpgradeable":[704]},"id":705,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":579,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:3"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":580,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":705,"sourceUnit":2327,"src":"130:41:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":581,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":705,"sourceUnit":578,"src":"172:42:3","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":583,"name":"Initializable","nameLocations":["697:13:3"],"nodeType":"IdentifierPath","referencedDeclaration":577,"src":"697:13:3"},"id":584,"nodeType":"InheritanceSpecifier","src":"697:13:3"},{"baseName":{"id":585,"name":"ContextUpgradeable","nameLocations":["712:18:3"],"nodeType":"IdentifierPath","referencedDeclaration":2326,"src":"712:18:3"},"id":586,"nodeType":"InheritanceSpecifier","src":"712:18:3"}],"canonicalName":"PausableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":582,"nodeType":"StructuredDocumentation","src":"216:439:3","text":" @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."},"fullyImplemented":true,"id":704,"linearizedBaseContracts":[704,2326,577],"name":"PausableUpgradeable","nameLocation":"674:19:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":587,"nodeType":"StructuredDocumentation","src":"737:73:3","text":" @dev Emitted when the pause is triggered by `account`."},"eventSelector":"62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258","id":591,"name":"Paused","nameLocation":"821:6:3","nodeType":"EventDefinition","parameters":{"id":590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":589,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"836:7:3","nodeType":"VariableDeclaration","scope":591,"src":"828:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":588,"name":"address","nodeType":"ElementaryTypeName","src":"828:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"827:17:3"},"src":"815:30:3"},{"anonymous":false,"documentation":{"id":592,"nodeType":"StructuredDocumentation","src":"851:70:3","text":" @dev Emitted when the pause is lifted by `account`."},"eventSelector":"5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa","id":596,"name":"Unpaused","nameLocation":"932:8:3","nodeType":"EventDefinition","parameters":{"id":595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":594,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"949:7:3","nodeType":"VariableDeclaration","scope":596,"src":"941:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":593,"name":"address","nodeType":"ElementaryTypeName","src":"941:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"940:17:3"},"src":"926:32:3"},{"constant":false,"id":598,"mutability":"mutable","name":"_paused","nameLocation":"977:7:3","nodeType":"VariableDeclaration","scope":704,"src":"964:20:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":597,"name":"bool","nodeType":"ElementaryTypeName","src":"964:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"body":{"id":607,"nodeType":"Block","src":"1116:44:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":604,"name":"__Pausable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"1126:25:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1126:27:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":606,"nodeType":"ExpressionStatement","src":"1126:27:3"}]},"documentation":{"id":599,"nodeType":"StructuredDocumentation","src":"991:67:3","text":" @dev Initializes the contract in unpaused state."},"id":608,"implemented":true,"kind":"function","modifiers":[{"id":602,"kind":"modifierInvocation","modifierName":{"id":601,"name":"onlyInitializing","nameLocations":["1099:16:3"],"nodeType":"IdentifierPath","referencedDeclaration":522,"src":"1099:16:3"},"nodeType":"ModifierInvocation","src":"1099:16:3"}],"name":"__Pausable_init","nameLocation":"1072:15:3","nodeType":"FunctionDefinition","parameters":{"id":600,"nodeType":"ParameterList","parameters":[],"src":"1087:2:3"},"returnParameters":{"id":603,"nodeType":"ParameterList","parameters":[],"src":"1116:0:3"},"scope":704,"src":"1063:97:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":617,"nodeType":"Block","src":"1229:32:3","statements":[{"expression":{"id":615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":613,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":598,"src":"1239:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1249:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1239:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":616,"nodeType":"ExpressionStatement","src":"1239:15:3"}]},"id":618,"implemented":true,"kind":"function","modifiers":[{"id":611,"kind":"modifierInvocation","modifierName":{"id":610,"name":"onlyInitializing","nameLocations":["1212:16:3"],"nodeType":"IdentifierPath","referencedDeclaration":522,"src":"1212:16:3"},"nodeType":"ModifierInvocation","src":"1212:16:3"}],"name":"__Pausable_init_unchained","nameLocation":"1175:25:3","nodeType":"FunctionDefinition","parameters":{"id":609,"nodeType":"ParameterList","parameters":[],"src":"1200:2:3"},"returnParameters":{"id":612,"nodeType":"ParameterList","parameters":[],"src":"1229:0:3"},"scope":704,"src":"1166:95:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":625,"nodeType":"Block","src":"1472:47:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":621,"name":"_requireNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":655,"src":"1482:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1482:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":623,"nodeType":"ExpressionStatement","src":"1482:19:3"},{"id":624,"nodeType":"PlaceholderStatement","src":"1511:1:3"}]},"documentation":{"id":619,"nodeType":"StructuredDocumentation","src":"1267:175:3","text":" @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."},"id":626,"name":"whenNotPaused","nameLocation":"1456:13:3","nodeType":"ModifierDefinition","parameters":{"id":620,"nodeType":"ParameterList","parameters":[],"src":"1469:2:3"},"src":"1447:72:3","virtual":false,"visibility":"internal"},{"body":{"id":633,"nodeType":"Block","src":"1719:44:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":629,"name":"_requirePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":666,"src":"1729:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1729:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":631,"nodeType":"ExpressionStatement","src":"1729:16:3"},{"id":632,"nodeType":"PlaceholderStatement","src":"1755:1:3"}]},"documentation":{"id":627,"nodeType":"StructuredDocumentation","src":"1525:167:3","text":" @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."},"id":634,"name":"whenPaused","nameLocation":"1706:10:3","nodeType":"ModifierDefinition","parameters":{"id":628,"nodeType":"ParameterList","parameters":[],"src":"1716:2:3"},"src":"1697:66:3","virtual":false,"visibility":"internal"},{"body":{"id":642,"nodeType":"Block","src":"1911:31:3","statements":[{"expression":{"id":640,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":598,"src":"1928:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":639,"id":641,"nodeType":"Return","src":"1921:14:3"}]},"documentation":{"id":635,"nodeType":"StructuredDocumentation","src":"1769:84:3","text":" @dev Returns true if the contract is paused, and false otherwise."},"functionSelector":"5c975abb","id":643,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1867:6:3","nodeType":"FunctionDefinition","parameters":{"id":636,"nodeType":"ParameterList","parameters":[],"src":"1873:2:3"},"returnParameters":{"id":639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":638,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":643,"src":"1905:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":637,"name":"bool","nodeType":"ElementaryTypeName","src":"1905:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1904:6:3"},"scope":704,"src":"1858:84:3","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":654,"nodeType":"Block","src":"2061:55:3","statements":[{"expression":{"arguments":[{"id":650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2079:9:3","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":648,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":643,"src":"2080:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2080:8:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a20706175736564","id":651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2090:18:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""},"value":"Pausable: paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""}],"id":647,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2071:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2071:38:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":653,"nodeType":"ExpressionStatement","src":"2071:38:3"}]},"documentation":{"id":644,"nodeType":"StructuredDocumentation","src":"1948:57:3","text":" @dev Throws if the contract is paused."},"id":655,"implemented":true,"kind":"function","modifiers":[],"name":"_requireNotPaused","nameLocation":"2019:17:3","nodeType":"FunctionDefinition","parameters":{"id":645,"nodeType":"ParameterList","parameters":[],"src":"2036:2:3"},"returnParameters":{"id":646,"nodeType":"ParameterList","parameters":[],"src":"2061:0:3"},"scope":704,"src":"2010:106:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":665,"nodeType":"Block","src":"2236:58:3","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":660,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":643,"src":"2254:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2254:8:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a206e6f7420706175736564","id":662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2264:22:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""},"value":"Pausable: not paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""}],"id":659,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2246:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2246:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":664,"nodeType":"ExpressionStatement","src":"2246:41:3"}]},"documentation":{"id":656,"nodeType":"StructuredDocumentation","src":"2122:61:3","text":" @dev Throws if the contract is not paused."},"id":666,"implemented":true,"kind":"function","modifiers":[],"name":"_requirePaused","nameLocation":"2197:14:3","nodeType":"FunctionDefinition","parameters":{"id":657,"nodeType":"ParameterList","parameters":[],"src":"2211:2:3"},"returnParameters":{"id":658,"nodeType":"ParameterList","parameters":[],"src":"2236:0:3"},"scope":704,"src":"2188:106:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":681,"nodeType":"Block","src":"2478:66:3","statements":[{"expression":{"id":674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":672,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":598,"src":"2488:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2498:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2488:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":675,"nodeType":"ExpressionStatement","src":"2488:14:3"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":677,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"2524:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2524:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":676,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"2517:6:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":680,"nodeType":"EmitStatement","src":"2512:25:3"}]},"documentation":{"id":667,"nodeType":"StructuredDocumentation","src":"2300:124:3","text":" @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."},"id":682,"implemented":true,"kind":"function","modifiers":[{"id":670,"kind":"modifierInvocation","modifierName":{"id":669,"name":"whenNotPaused","nameLocations":["2464:13:3"],"nodeType":"IdentifierPath","referencedDeclaration":626,"src":"2464:13:3"},"nodeType":"ModifierInvocation","src":"2464:13:3"}],"name":"_pause","nameLocation":"2438:6:3","nodeType":"FunctionDefinition","parameters":{"id":668,"nodeType":"ParameterList","parameters":[],"src":"2444:2:3"},"returnParameters":{"id":671,"nodeType":"ParameterList","parameters":[],"src":"2478:0:3"},"scope":704,"src":"2429:115:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":697,"nodeType":"Block","src":"2724:69:3","statements":[{"expression":{"id":690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":688,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":598,"src":"2734:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2744:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2734:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":691,"nodeType":"ExpressionStatement","src":"2734:15:3"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":693,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"2773:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2773:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":692,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":596,"src":"2764:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2764:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":696,"nodeType":"EmitStatement","src":"2759:27:3"}]},"documentation":{"id":683,"nodeType":"StructuredDocumentation","src":"2550:121:3","text":" @dev Returns to normal state.\n Requirements:\n - The contract must be paused."},"id":698,"implemented":true,"kind":"function","modifiers":[{"id":686,"kind":"modifierInvocation","modifierName":{"id":685,"name":"whenPaused","nameLocations":["2713:10:3"],"nodeType":"IdentifierPath","referencedDeclaration":634,"src":"2713:10:3"},"nodeType":"ModifierInvocation","src":"2713:10:3"}],"name":"_unpause","nameLocation":"2685:8:3","nodeType":"FunctionDefinition","parameters":{"id":684,"nodeType":"ParameterList","parameters":[],"src":"2693:2:3"},"returnParameters":{"id":687,"nodeType":"ParameterList","parameters":[],"src":"2724:0:3"},"scope":704,"src":"2676:117:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":699,"nodeType":"StructuredDocumentation","src":"2799:254:3","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":703,"mutability":"mutable","name":"__gap","nameLocation":"3078:5:3","nodeType":"VariableDeclaration","scope":704,"src":"3058:25:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":700,"name":"uint256","nodeType":"ElementaryTypeName","src":"3058:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":702,"length":{"hexValue":"3439","id":701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3066:2:3","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3058:11:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":705,"src":"656:2430:3","usedErrors":[]}],"src":"105:2982:3"},"id":3},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2284],"Initializable":[577],"ReentrancyGuardUpgradeable":[777]},"id":778,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":706,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:4"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":707,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":778,"sourceUnit":578,"src":"136:42:4","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":709,"name":"Initializable","nameLocations":["979:13:4"],"nodeType":"IdentifierPath","referencedDeclaration":577,"src":"979:13:4"},"id":710,"nodeType":"InheritanceSpecifier","src":"979:13:4"}],"canonicalName":"ReentrancyGuardUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":708,"nodeType":"StructuredDocumentation","src":"180:750:4","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":777,"linearizedBaseContracts":[777,577],"name":"ReentrancyGuardUpgradeable","nameLocation":"949:26:4","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":713,"mutability":"constant","name":"_NOT_ENTERED","nameLocation":"1772:12:4","nodeType":"VariableDeclaration","scope":777,"src":"1747:41:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":711,"name":"uint256","nodeType":"ElementaryTypeName","src":"1747:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1787:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":716,"mutability":"constant","name":"_ENTERED","nameLocation":"1819:8:4","nodeType":"VariableDeclaration","scope":777,"src":"1794:37:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":714,"name":"uint256","nodeType":"ElementaryTypeName","src":"1794:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1830:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":718,"mutability":"mutable","name":"_status","nameLocation":"1854:7:4","nodeType":"VariableDeclaration","scope":777,"src":"1838:23:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":717,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":726,"nodeType":"Block","src":"1928:51:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":723,"name":"__ReentrancyGuard_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"1938:32:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1938:34:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":725,"nodeType":"ExpressionStatement","src":"1938:34:4"}]},"id":727,"implemented":true,"kind":"function","modifiers":[{"id":721,"kind":"modifierInvocation","modifierName":{"id":720,"name":"onlyInitializing","nameLocations":["1911:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":522,"src":"1911:16:4"},"nodeType":"ModifierInvocation","src":"1911:16:4"}],"name":"__ReentrancyGuard_init","nameLocation":"1877:22:4","nodeType":"FunctionDefinition","parameters":{"id":719,"nodeType":"ParameterList","parameters":[],"src":"1899:2:4"},"returnParameters":{"id":722,"nodeType":"ParameterList","parameters":[],"src":"1928:0:4"},"scope":777,"src":"1868:111:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":736,"nodeType":"Block","src":"2055:39:4","statements":[{"expression":{"id":734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":732,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"2065:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":733,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"2075:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2065:22:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":735,"nodeType":"ExpressionStatement","src":"2065:22:4"}]},"id":737,"implemented":true,"kind":"function","modifiers":[{"id":730,"kind":"modifierInvocation","modifierName":{"id":729,"name":"onlyInitializing","nameLocations":["2038:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":522,"src":"2038:16:4"},"nodeType":"ModifierInvocation","src":"2038:16:4"}],"name":"__ReentrancyGuard_init_unchained","nameLocation":"1994:32:4","nodeType":"FunctionDefinition","parameters":{"id":728,"nodeType":"ParameterList","parameters":[],"src":"2026:2:4"},"returnParameters":{"id":731,"nodeType":"ParameterList","parameters":[],"src":"2055:0:4"},"scope":777,"src":"1985:109:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":747,"nodeType":"Block","src":"2495:79:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":740,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":763,"src":"2505:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2505:21:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":742,"nodeType":"ExpressionStatement","src":"2505:21:4"},{"id":743,"nodeType":"PlaceholderStatement","src":"2536:1:4"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":744,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":771,"src":"2547:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2547:20:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":746,"nodeType":"ExpressionStatement","src":"2547:20:4"}]},"documentation":{"id":738,"nodeType":"StructuredDocumentation","src":"2100:366:4","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":748,"name":"nonReentrant","nameLocation":"2480:12:4","nodeType":"ModifierDefinition","parameters":{"id":739,"nodeType":"ParameterList","parameters":[],"src":"2492:2:4"},"src":"2471:103:4","virtual":false,"visibility":"internal"},{"body":{"id":762,"nodeType":"Block","src":"2619:248:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":752,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"2712:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":753,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"2723:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2712:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2733:33:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":751,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2704:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2704:63:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":757,"nodeType":"ExpressionStatement","src":"2704:63:4"},{"expression":{"id":760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":758,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"2842:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":759,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"2852:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2842:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":761,"nodeType":"ExpressionStatement","src":"2842:18:4"}]},"id":763,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2589:19:4","nodeType":"FunctionDefinition","parameters":{"id":749,"nodeType":"ParameterList","parameters":[],"src":"2608:2:4"},"returnParameters":{"id":750,"nodeType":"ParameterList","parameters":[],"src":"2619:0:4"},"scope":777,"src":"2580:287:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":770,"nodeType":"Block","src":"2911:171:4","statements":[{"expression":{"id":768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":766,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"3053:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":767,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"3063:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3053:22:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":769,"nodeType":"ExpressionStatement","src":"3053:22:4"}]},"id":771,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2882:18:4","nodeType":"FunctionDefinition","parameters":{"id":764,"nodeType":"ParameterList","parameters":[],"src":"2900:2:4"},"returnParameters":{"id":765,"nodeType":"ParameterList","parameters":[],"src":"2911:0:4"},"scope":777,"src":"2873:209:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"constant":false,"documentation":{"id":772,"nodeType":"StructuredDocumentation","src":"3088:254:4","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":776,"mutability":"mutable","name":"__gap","nameLocation":"3367:5:4","nodeType":"VariableDeclaration","scope":777,"src":"3347:25:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":773,"name":"uint256","nodeType":"ElementaryTypeName","src":"3347:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":775,"length":{"hexValue":"3439","id":774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3355:2:4","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3347:11:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":778,"src":"931:2444:4","usedErrors":[]}],"src":"112:3264:4"},"id":4},"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2284],"ContextUpgradeable":[2326],"ERC20Upgradeable":[1389],"IERC20MetadataUpgradeable":[1492],"IERC20Upgradeable":[1467],"Initializable":[577]},"id":1390,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":779,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:5"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"./IERC20Upgradeable.sol","id":780,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1390,"sourceUnit":1468,"src":"130:33:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol","file":"./extensions/IERC20MetadataUpgradeable.sol","id":781,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1390,"sourceUnit":1493,"src":"164:52:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../../utils/ContextUpgradeable.sol","id":782,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1390,"sourceUnit":2327,"src":"217:44:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":783,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1390,"sourceUnit":578,"src":"262:45:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":785,"name":"Initializable","nameLocations":["1509:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":577,"src":"1509:13:5"},"id":786,"nodeType":"InheritanceSpecifier","src":"1509:13:5"},{"baseName":{"id":787,"name":"ContextUpgradeable","nameLocations":["1524:18:5"],"nodeType":"IdentifierPath","referencedDeclaration":2326,"src":"1524:18:5"},"id":788,"nodeType":"InheritanceSpecifier","src":"1524:18:5"},{"baseName":{"id":789,"name":"IERC20Upgradeable","nameLocations":["1544:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":1467,"src":"1544:17:5"},"id":790,"nodeType":"InheritanceSpecifier","src":"1544:17:5"},{"baseName":{"id":791,"name":"IERC20MetadataUpgradeable","nameLocations":["1563:25:5"],"nodeType":"IdentifierPath","referencedDeclaration":1492,"src":"1563:25:5"},"id":792,"nodeType":"InheritanceSpecifier","src":"1563:25:5"}],"canonicalName":"ERC20Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":784,"nodeType":"StructuredDocumentation","src":"309:1170:5","text":" @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."},"fullyImplemented":true,"id":1389,"linearizedBaseContracts":[1389,1492,1467,2326,577],"name":"ERC20Upgradeable","nameLocation":"1489:16:5","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":796,"mutability":"mutable","name":"_balances","nameLocation":"1631:9:5","nodeType":"VariableDeclaration","scope":1389,"src":"1595:45:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":795,"keyType":{"id":793,"name":"address","nodeType":"ElementaryTypeName","src":"1603:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1595:27:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":794,"name":"uint256","nodeType":"ElementaryTypeName","src":"1614:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":802,"mutability":"mutable","name":"_allowances","nameLocation":"1703:11:5","nodeType":"VariableDeclaration","scope":1389,"src":"1647:67:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":801,"keyType":{"id":797,"name":"address","nodeType":"ElementaryTypeName","src":"1655:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1647:47:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueType":{"id":800,"keyType":{"id":798,"name":"address","nodeType":"ElementaryTypeName","src":"1674:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1666:27:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":799,"name":"uint256","nodeType":"ElementaryTypeName","src":"1685:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":804,"mutability":"mutable","name":"_totalSupply","nameLocation":"1737:12:5","nodeType":"VariableDeclaration","scope":1389,"src":"1721:28:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":803,"name":"uint256","nodeType":"ElementaryTypeName","src":"1721:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":806,"mutability":"mutable","name":"_name","nameLocation":"1771:5:5","nodeType":"VariableDeclaration","scope":1389,"src":"1756:20:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":805,"name":"string","nodeType":"ElementaryTypeName","src":"1756:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":808,"mutability":"mutable","name":"_symbol","nameLocation":"1797:7:5","nodeType":"VariableDeclaration","scope":1389,"src":"1782:22:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":807,"name":"string","nodeType":"ElementaryTypeName","src":"1782:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":823,"nodeType":"Block","src":"2206:55:5","statements":[{"expression":{"arguments":[{"id":819,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"2239:5:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":820,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"2246:7:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":818,"name":"__ERC20_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":842,"src":"2216:22:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2216:38:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":822,"nodeType":"ExpressionStatement","src":"2216:38:5"}]},"documentation":{"id":809,"nodeType":"StructuredDocumentation","src":"1811:298:5","text":" @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."},"id":824,"implemented":true,"kind":"function","modifiers":[{"id":816,"kind":"modifierInvocation","modifierName":{"id":815,"name":"onlyInitializing","nameLocations":["2189:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":522,"src":"2189:16:5"},"nodeType":"ModifierInvocation","src":"2189:16:5"}],"name":"__ERC20_init","nameLocation":"2123:12:5","nodeType":"FunctionDefinition","parameters":{"id":814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":811,"mutability":"mutable","name":"name_","nameLocation":"2150:5:5","nodeType":"VariableDeclaration","scope":824,"src":"2136:19:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":810,"name":"string","nodeType":"ElementaryTypeName","src":"2136:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":813,"mutability":"mutable","name":"symbol_","nameLocation":"2171:7:5","nodeType":"VariableDeclaration","scope":824,"src":"2157:21:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":812,"name":"string","nodeType":"ElementaryTypeName","src":"2157:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2135:44:5"},"returnParameters":{"id":817,"nodeType":"ParameterList","parameters":[],"src":"2206:0:5"},"scope":1389,"src":"2114:147:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":841,"nodeType":"Block","src":"2369:57:5","statements":[{"expression":{"id":835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":833,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"2379:5:5","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":834,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":826,"src":"2387:5:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2379:13:5","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":836,"nodeType":"ExpressionStatement","src":"2379:13:5"},{"expression":{"id":839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":837,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"2402:7:5","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":838,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"2412:7:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2402:17:5","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":840,"nodeType":"ExpressionStatement","src":"2402:17:5"}]},"id":842,"implemented":true,"kind":"function","modifiers":[{"id":831,"kind":"modifierInvocation","modifierName":{"id":830,"name":"onlyInitializing","nameLocations":["2352:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":522,"src":"2352:16:5"},"nodeType":"ModifierInvocation","src":"2352:16:5"}],"name":"__ERC20_init_unchained","nameLocation":"2276:22:5","nodeType":"FunctionDefinition","parameters":{"id":829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":826,"mutability":"mutable","name":"name_","nameLocation":"2313:5:5","nodeType":"VariableDeclaration","scope":842,"src":"2299:19:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":825,"name":"string","nodeType":"ElementaryTypeName","src":"2299:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":828,"mutability":"mutable","name":"symbol_","nameLocation":"2334:7:5","nodeType":"VariableDeclaration","scope":842,"src":"2320:21:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":827,"name":"string","nodeType":"ElementaryTypeName","src":"2320:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2298:44:5"},"returnParameters":{"id":832,"nodeType":"ParameterList","parameters":[],"src":"2369:0:5"},"scope":1389,"src":"2267:159:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1479],"body":{"id":851,"nodeType":"Block","src":"2560:29:5","statements":[{"expression":{"id":849,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"2577:5:5","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":848,"id":850,"nodeType":"Return","src":"2570:12:5"}]},"documentation":{"id":843,"nodeType":"StructuredDocumentation","src":"2432:54:5","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":852,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2500:4:5","nodeType":"FunctionDefinition","overrides":{"id":845,"nodeType":"OverrideSpecifier","overrides":[],"src":"2527:8:5"},"parameters":{"id":844,"nodeType":"ParameterList","parameters":[],"src":"2504:2:5"},"returnParameters":{"id":848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":847,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":852,"src":"2545:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":846,"name":"string","nodeType":"ElementaryTypeName","src":"2545:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2544:15:5"},"scope":1389,"src":"2491:98:5","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1485],"body":{"id":861,"nodeType":"Block","src":"2773:31:5","statements":[{"expression":{"id":859,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"2790:7:5","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":858,"id":860,"nodeType":"Return","src":"2783:14:5"}]},"documentation":{"id":853,"nodeType":"StructuredDocumentation","src":"2595:102:5","text":" @dev Returns the symbol of the token, usually a shorter version of the\n name."},"functionSelector":"95d89b41","id":862,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2711:6:5","nodeType":"FunctionDefinition","overrides":{"id":855,"nodeType":"OverrideSpecifier","overrides":[],"src":"2740:8:5"},"parameters":{"id":854,"nodeType":"ParameterList","parameters":[],"src":"2717:2:5"},"returnParameters":{"id":858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":857,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":862,"src":"2758:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":856,"name":"string","nodeType":"ElementaryTypeName","src":"2758:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2757:15:5"},"scope":1389,"src":"2702:102:5","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1491],"body":{"id":871,"nodeType":"Block","src":"3493:26:5","statements":[{"expression":{"hexValue":"3138","id":869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3510:2:5","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"functionReturnParameters":868,"id":870,"nodeType":"Return","src":"3503:9:5"}]},"documentation":{"id":863,"nodeType":"StructuredDocumentation","src":"2810:613:5","text":" @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."},"functionSelector":"313ce567","id":872,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"3437:8:5","nodeType":"FunctionDefinition","overrides":{"id":865,"nodeType":"OverrideSpecifier","overrides":[],"src":"3468:8:5"},"parameters":{"id":864,"nodeType":"ParameterList","parameters":[],"src":"3445:2:5"},"returnParameters":{"id":868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":867,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":872,"src":"3486:5:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":866,"name":"uint8","nodeType":"ElementaryTypeName","src":"3486:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3485:7:5"},"scope":1389,"src":"3428:91:5","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1416],"body":{"id":881,"nodeType":"Block","src":"3649:36:5","statements":[{"expression":{"id":879,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"3666:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":878,"id":880,"nodeType":"Return","src":"3659:19:5"}]},"documentation":{"id":873,"nodeType":"StructuredDocumentation","src":"3525:49:5","text":" @dev See {IERC20-totalSupply}."},"functionSelector":"18160ddd","id":882,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"3588:11:5","nodeType":"FunctionDefinition","overrides":{"id":875,"nodeType":"OverrideSpecifier","overrides":[],"src":"3622:8:5"},"parameters":{"id":874,"nodeType":"ParameterList","parameters":[],"src":"3599:2:5"},"returnParameters":{"id":878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":877,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":882,"src":"3640:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":876,"name":"uint256","nodeType":"ElementaryTypeName","src":"3640:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3639:9:5"},"scope":1389,"src":"3579:106:5","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1424],"body":{"id":895,"nodeType":"Block","src":"3826:42:5","statements":[{"expression":{"baseExpression":{"id":891,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":796,"src":"3843:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":893,"indexExpression":{"id":892,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"3853:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3843:18:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":890,"id":894,"nodeType":"Return","src":"3836:25:5"}]},"documentation":{"id":883,"nodeType":"StructuredDocumentation","src":"3691:47:5","text":" @dev See {IERC20-balanceOf}."},"functionSelector":"70a08231","id":896,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3752:9:5","nodeType":"FunctionDefinition","overrides":{"id":887,"nodeType":"OverrideSpecifier","overrides":[],"src":"3799:8:5"},"parameters":{"id":886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":885,"mutability":"mutable","name":"account","nameLocation":"3770:7:5","nodeType":"VariableDeclaration","scope":896,"src":"3762:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":884,"name":"address","nodeType":"ElementaryTypeName","src":"3762:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3761:17:5"},"returnParameters":{"id":890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":889,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":896,"src":"3817:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":888,"name":"uint256","nodeType":"ElementaryTypeName","src":"3817:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3816:9:5"},"scope":1389,"src":"3743:125:5","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1434],"body":{"id":920,"nodeType":"Block","src":"4149:104:5","statements":[{"assignments":[908],"declarations":[{"constant":false,"id":908,"mutability":"mutable","name":"owner","nameLocation":"4167:5:5","nodeType":"VariableDeclaration","scope":920,"src":"4159:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":907,"name":"address","nodeType":"ElementaryTypeName","src":"4159:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":911,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":909,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"4175:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4175:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4159:28:5"},{"expression":{"arguments":[{"id":913,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":908,"src":"4207:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":914,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":899,"src":"4214:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":915,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":901,"src":"4218:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":912,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"4197:9:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4197:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":917,"nodeType":"ExpressionStatement","src":"4197:28:5"},{"expression":{"hexValue":"74727565","id":918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4242:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":906,"id":919,"nodeType":"Return","src":"4235:11:5"}]},"documentation":{"id":897,"nodeType":"StructuredDocumentation","src":"3874:185:5","text":" @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."},"functionSelector":"a9059cbb","id":921,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"4073:8:5","nodeType":"FunctionDefinition","overrides":{"id":903,"nodeType":"OverrideSpecifier","overrides":[],"src":"4125:8:5"},"parameters":{"id":902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":899,"mutability":"mutable","name":"to","nameLocation":"4090:2:5","nodeType":"VariableDeclaration","scope":921,"src":"4082:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":898,"name":"address","nodeType":"ElementaryTypeName","src":"4082:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":901,"mutability":"mutable","name":"amount","nameLocation":"4102:6:5","nodeType":"VariableDeclaration","scope":921,"src":"4094:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":900,"name":"uint256","nodeType":"ElementaryTypeName","src":"4094:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4081:28:5"},"returnParameters":{"id":906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":905,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":921,"src":"4143:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":904,"name":"bool","nodeType":"ElementaryTypeName","src":"4143:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4142:6:5"},"scope":1389,"src":"4064:189:5","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1444],"body":{"id":938,"nodeType":"Block","src":"4409:51:5","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":932,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":802,"src":"4426:11:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":934,"indexExpression":{"id":933,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"4438:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4426:18:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":936,"indexExpression":{"id":935,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"4445:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4426:27:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":931,"id":937,"nodeType":"Return","src":"4419:34:5"}]},"documentation":{"id":922,"nodeType":"StructuredDocumentation","src":"4259:47:5","text":" @dev See {IERC20-allowance}."},"functionSelector":"dd62ed3e","id":939,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"4320:9:5","nodeType":"FunctionDefinition","overrides":{"id":928,"nodeType":"OverrideSpecifier","overrides":[],"src":"4382:8:5"},"parameters":{"id":927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":924,"mutability":"mutable","name":"owner","nameLocation":"4338:5:5","nodeType":"VariableDeclaration","scope":939,"src":"4330:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":923,"name":"address","nodeType":"ElementaryTypeName","src":"4330:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":926,"mutability":"mutable","name":"spender","nameLocation":"4353:7:5","nodeType":"VariableDeclaration","scope":939,"src":"4345:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":925,"name":"address","nodeType":"ElementaryTypeName","src":"4345:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4329:32:5"},"returnParameters":{"id":931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":930,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":939,"src":"4400:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":929,"name":"uint256","nodeType":"ElementaryTypeName","src":"4400:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4399:9:5"},"scope":1389,"src":"4311:149:5","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1454],"body":{"id":963,"nodeType":"Block","src":"4857:108:5","statements":[{"assignments":[951],"declarations":[{"constant":false,"id":951,"mutability":"mutable","name":"owner","nameLocation":"4875:5:5","nodeType":"VariableDeclaration","scope":963,"src":"4867:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":950,"name":"address","nodeType":"ElementaryTypeName","src":"4867:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":954,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":952,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"4883:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":953,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4883:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4867:28:5"},{"expression":{"arguments":[{"id":956,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"4914:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":957,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":942,"src":"4921:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":958,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"4930:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":955,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"4905:8:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4905:32:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":960,"nodeType":"ExpressionStatement","src":"4905:32:5"},{"expression":{"hexValue":"74727565","id":961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4954:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":949,"id":962,"nodeType":"Return","src":"4947:11:5"}]},"documentation":{"id":940,"nodeType":"StructuredDocumentation","src":"4466:297:5","text":" @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"095ea7b3","id":964,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4777:7:5","nodeType":"FunctionDefinition","overrides":{"id":946,"nodeType":"OverrideSpecifier","overrides":[],"src":"4833:8:5"},"parameters":{"id":945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":942,"mutability":"mutable","name":"spender","nameLocation":"4793:7:5","nodeType":"VariableDeclaration","scope":964,"src":"4785:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":941,"name":"address","nodeType":"ElementaryTypeName","src":"4785:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":944,"mutability":"mutable","name":"amount","nameLocation":"4810:6:5","nodeType":"VariableDeclaration","scope":964,"src":"4802:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":943,"name":"uint256","nodeType":"ElementaryTypeName","src":"4802:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4784:33:5"},"returnParameters":{"id":949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":948,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":964,"src":"4851:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":947,"name":"bool","nodeType":"ElementaryTypeName","src":"4851:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4850:6:5"},"scope":1389,"src":"4768:197:5","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1466],"body":{"id":996,"nodeType":"Block","src":"5660:153:5","statements":[{"assignments":[978],"declarations":[{"constant":false,"id":978,"mutability":"mutable","name":"spender","nameLocation":"5678:7:5","nodeType":"VariableDeclaration","scope":996,"src":"5670:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":977,"name":"address","nodeType":"ElementaryTypeName","src":"5670:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":981,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":979,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"5688:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5688:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5670:30:5"},{"expression":{"arguments":[{"id":983,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"5726:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":984,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":978,"src":"5732:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":985,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":971,"src":"5741:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":982,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"5710:15:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5710:38:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":987,"nodeType":"ExpressionStatement","src":"5710:38:5"},{"expression":{"arguments":[{"id":989,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"5768:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":990,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"5774:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":991,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":971,"src":"5778:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":988,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"5758:9:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5758:27:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":993,"nodeType":"ExpressionStatement","src":"5758:27:5"},{"expression":{"hexValue":"74727565","id":994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5802:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":976,"id":995,"nodeType":"Return","src":"5795:11:5"}]},"documentation":{"id":965,"nodeType":"StructuredDocumentation","src":"4971:551:5","text":" @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."},"functionSelector":"23b872dd","id":997,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"5536:12:5","nodeType":"FunctionDefinition","overrides":{"id":973,"nodeType":"OverrideSpecifier","overrides":[],"src":"5636:8:5"},"parameters":{"id":972,"nodeType":"ParameterList","parameters":[{"constant":false,"id":967,"mutability":"mutable","name":"from","nameLocation":"5566:4:5","nodeType":"VariableDeclaration","scope":997,"src":"5558:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":966,"name":"address","nodeType":"ElementaryTypeName","src":"5558:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":969,"mutability":"mutable","name":"to","nameLocation":"5588:2:5","nodeType":"VariableDeclaration","scope":997,"src":"5580:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":968,"name":"address","nodeType":"ElementaryTypeName","src":"5580:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":971,"mutability":"mutable","name":"amount","nameLocation":"5608:6:5","nodeType":"VariableDeclaration","scope":997,"src":"5600:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":970,"name":"uint256","nodeType":"ElementaryTypeName","src":"5600:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5548:72:5"},"returnParameters":{"id":976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":975,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":997,"src":"5654:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":974,"name":"bool","nodeType":"ElementaryTypeName","src":"5654:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5653:6:5"},"scope":1389,"src":"5527:286:5","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1025,"nodeType":"Block","src":"6302:140:5","statements":[{"assignments":[1008],"declarations":[{"constant":false,"id":1008,"mutability":"mutable","name":"owner","nameLocation":"6320:5:5","nodeType":"VariableDeclaration","scope":1025,"src":"6312:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1007,"name":"address","nodeType":"ElementaryTypeName","src":"6312:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1011,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1009,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"6328:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6328:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6312:28:5"},{"expression":{"arguments":[{"id":1013,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1008,"src":"6359:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1014,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"6366:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1016,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1008,"src":"6385:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1017,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"6392:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1015,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":939,"src":"6375:9:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":1018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6375:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1019,"name":"addedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1002,"src":"6403:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6375:38:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1012,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"6350:8:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6350:64:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1022,"nodeType":"ExpressionStatement","src":"6350:64:5"},{"expression":{"hexValue":"74727565","id":1023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6431:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1006,"id":1024,"nodeType":"Return","src":"6424:11:5"}]},"documentation":{"id":998,"nodeType":"StructuredDocumentation","src":"5819:384:5","text":" @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"39509351","id":1026,"implemented":true,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"6217:17:5","nodeType":"FunctionDefinition","parameters":{"id":1003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1000,"mutability":"mutable","name":"spender","nameLocation":"6243:7:5","nodeType":"VariableDeclaration","scope":1026,"src":"6235:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":999,"name":"address","nodeType":"ElementaryTypeName","src":"6235:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1002,"mutability":"mutable","name":"addedValue","nameLocation":"6260:10:5","nodeType":"VariableDeclaration","scope":1026,"src":"6252:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1001,"name":"uint256","nodeType":"ElementaryTypeName","src":"6252:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6234:37:5"},"returnParameters":{"id":1006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1005,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1026,"src":"6296:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1004,"name":"bool","nodeType":"ElementaryTypeName","src":"6296:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6295:6:5"},"scope":1389,"src":"6208:234:5","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1066,"nodeType":"Block","src":"7028:328:5","statements":[{"assignments":[1037],"declarations":[{"constant":false,"id":1037,"mutability":"mutable","name":"owner","nameLocation":"7046:5:5","nodeType":"VariableDeclaration","scope":1066,"src":"7038:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1036,"name":"address","nodeType":"ElementaryTypeName","src":"7038:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1040,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1038,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"7054:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7054:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7038:28:5"},{"assignments":[1042],"declarations":[{"constant":false,"id":1042,"mutability":"mutable","name":"currentAllowance","nameLocation":"7084:16:5","nodeType":"VariableDeclaration","scope":1066,"src":"7076:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1041,"name":"uint256","nodeType":"ElementaryTypeName","src":"7076:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1047,"initialValue":{"arguments":[{"id":1044,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"7113:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1045,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1029,"src":"7120:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1043,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":939,"src":"7103:9:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":1046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7103:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7076:52:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1049,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"7146:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1050,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1031,"src":"7166:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7146:35:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":1052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7183:39:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""},"value":"ERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""}],"id":1048,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7138:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7138:85:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1054,"nodeType":"ExpressionStatement","src":"7138:85:5"},{"id":1063,"nodeType":"UncheckedBlock","src":"7233:95:5","statements":[{"expression":{"arguments":[{"id":1056,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"7266:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1057,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1029,"src":"7273:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1058,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"7282:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1059,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1031,"src":"7301:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7282:34:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1055,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"7257:8:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7257:60:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1062,"nodeType":"ExpressionStatement","src":"7257:60:5"}]},{"expression":{"hexValue":"74727565","id":1064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7345:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1035,"id":1065,"nodeType":"Return","src":"7338:11:5"}]},"documentation":{"id":1027,"nodeType":"StructuredDocumentation","src":"6448:476:5","text":" @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."},"functionSelector":"a457c2d7","id":1067,"implemented":true,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"6938:17:5","nodeType":"FunctionDefinition","parameters":{"id":1032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1029,"mutability":"mutable","name":"spender","nameLocation":"6964:7:5","nodeType":"VariableDeclaration","scope":1067,"src":"6956:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1028,"name":"address","nodeType":"ElementaryTypeName","src":"6956:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1031,"mutability":"mutable","name":"subtractedValue","nameLocation":"6981:15:5","nodeType":"VariableDeclaration","scope":1067,"src":"6973:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1030,"name":"uint256","nodeType":"ElementaryTypeName","src":"6973:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6955:42:5"},"returnParameters":{"id":1035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1034,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1067,"src":"7022:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1033,"name":"bool","nodeType":"ElementaryTypeName","src":"7022:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7021:6:5"},"scope":1389,"src":"6929:427:5","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1143,"nodeType":"Block","src":"7918:710:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1078,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"7936:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7952:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1080,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7944:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1079,"name":"address","nodeType":"ElementaryTypeName","src":"7944:7:5","typeDescriptions":{}}},"id":1082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7944:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7936:18:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373","id":1084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7956:39:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""},"value":"ERC20: transfer from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""}],"id":1077,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7928:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7928:68:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1086,"nodeType":"ExpressionStatement","src":"7928:68:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1088,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"8014:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8028:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1090,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8020:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1089,"name":"address","nodeType":"ElementaryTypeName","src":"8020:7:5","typeDescriptions":{}}},"id":1092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8020:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8014:16:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472657373","id":1094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8032:37:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""},"value":"ERC20: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""}],"id":1087,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8006:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8006:64:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1096,"nodeType":"ExpressionStatement","src":"8006:64:5"},{"expression":{"arguments":[{"id":1098,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"8102:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1099,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"8108:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1100,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1074,"src":"8112:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1097,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"8081:20:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8081:38:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1102,"nodeType":"ExpressionStatement","src":"8081:38:5"},{"assignments":[1104],"declarations":[{"constant":false,"id":1104,"mutability":"mutable","name":"fromBalance","nameLocation":"8138:11:5","nodeType":"VariableDeclaration","scope":1143,"src":"8130:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1103,"name":"uint256","nodeType":"ElementaryTypeName","src":"8130:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1108,"initialValue":{"baseExpression":{"id":1105,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":796,"src":"8152:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1107,"indexExpression":{"id":1106,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"8162:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8152:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8130:37:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1110,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1104,"src":"8185:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1111,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1074,"src":"8200:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8185:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365","id":1113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8208:40:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""},"value":"ERC20: transfer amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""}],"id":1109,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8177:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8177:72:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1115,"nodeType":"ExpressionStatement","src":"8177:72:5"},{"id":1130,"nodeType":"UncheckedBlock","src":"8259:273:5","statements":[{"expression":{"id":1122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1116,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":796,"src":"8283:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1118,"indexExpression":{"id":1117,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"8293:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8283:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1119,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1104,"src":"8301:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1120,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1074,"src":"8315:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8301:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8283:38:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1123,"nodeType":"ExpressionStatement","src":"8283:38:5"},{"expression":{"id":1128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1124,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":796,"src":"8498:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1126,"indexExpression":{"id":1125,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"8508:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8498:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1127,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1074,"src":"8515:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8498:23:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1129,"nodeType":"ExpressionStatement","src":"8498:23:5"}]},{"eventCall":{"arguments":[{"id":1132,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"8556:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1133,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"8562:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1134,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1074,"src":"8566:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1131,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"8547:8:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8547:26:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1136,"nodeType":"EmitStatement","src":"8542:31:5"},{"expression":{"arguments":[{"id":1138,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"8604:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1139,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"8610:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1140,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1074,"src":"8614:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1137,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"8584:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8584:37:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1142,"nodeType":"ExpressionStatement","src":"8584:37:5"}]},"documentation":{"id":1068,"nodeType":"StructuredDocumentation","src":"7362:443:5","text":" @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."},"id":1144,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"7819:9:5","nodeType":"FunctionDefinition","parameters":{"id":1075,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1070,"mutability":"mutable","name":"from","nameLocation":"7846:4:5","nodeType":"VariableDeclaration","scope":1144,"src":"7838:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1069,"name":"address","nodeType":"ElementaryTypeName","src":"7838:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1072,"mutability":"mutable","name":"to","nameLocation":"7868:2:5","nodeType":"VariableDeclaration","scope":1144,"src":"7860:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1071,"name":"address","nodeType":"ElementaryTypeName","src":"7860:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1074,"mutability":"mutable","name":"amount","nameLocation":"7888:6:5","nodeType":"VariableDeclaration","scope":1144,"src":"7880:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1073,"name":"uint256","nodeType":"ElementaryTypeName","src":"7880:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7828:72:5"},"returnParameters":{"id":1076,"nodeType":"ParameterList","parameters":[],"src":"7918:0:5"},"scope":1389,"src":"7810:818:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1200,"nodeType":"Block","src":"8969:470:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1153,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"8987:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9006:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1155,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8998:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1154,"name":"address","nodeType":"ElementaryTypeName","src":"8998:7:5","typeDescriptions":{}}},"id":1157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8998:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8987:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","id":1159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9010:33:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""},"value":"ERC20: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""}],"id":1152,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8979:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8979:65:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1161,"nodeType":"ExpressionStatement","src":"8979:65:5"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9084:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1164,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9076:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1163,"name":"address","nodeType":"ElementaryTypeName","src":"9076:7:5","typeDescriptions":{}}},"id":1166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9076:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1167,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"9088:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1168,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1149,"src":"9097:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1162,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"9055:20:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9055:49:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1170,"nodeType":"ExpressionStatement","src":"9055:49:5"},{"expression":{"id":1173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1171,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"9115:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1172,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1149,"src":"9131:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9115:22:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1174,"nodeType":"ExpressionStatement","src":"9115:22:5"},{"id":1181,"nodeType":"UncheckedBlock","src":"9147:175:5","statements":[{"expression":{"id":1179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1175,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":796,"src":"9283:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1177,"indexExpression":{"id":1176,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"9293:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9283:18:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1178,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1149,"src":"9305:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9283:28:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1180,"nodeType":"ExpressionStatement","src":"9283:28:5"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9353:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1184,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9345:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1183,"name":"address","nodeType":"ElementaryTypeName","src":"9345:7:5","typeDescriptions":{}}},"id":1186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9345:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1187,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"9357:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1188,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1149,"src":"9366:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1182,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"9336:8:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9336:37:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1190,"nodeType":"EmitStatement","src":"9331:42:5"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9412:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1193,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9404:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1192,"name":"address","nodeType":"ElementaryTypeName","src":"9404:7:5","typeDescriptions":{}}},"id":1195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9404:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1196,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"9416:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1197,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1149,"src":"9425:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1191,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"9384:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9384:48:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1199,"nodeType":"ExpressionStatement","src":"9384:48:5"}]},"documentation":{"id":1145,"nodeType":"StructuredDocumentation","src":"8634:265:5","text":"@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."},"id":1201,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"8913:5:5","nodeType":"FunctionDefinition","parameters":{"id":1150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1147,"mutability":"mutable","name":"account","nameLocation":"8927:7:5","nodeType":"VariableDeclaration","scope":1201,"src":"8919:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1146,"name":"address","nodeType":"ElementaryTypeName","src":"8919:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1149,"mutability":"mutable","name":"amount","nameLocation":"8944:6:5","nodeType":"VariableDeclaration","scope":1201,"src":"8936:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1148,"name":"uint256","nodeType":"ElementaryTypeName","src":"8936:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8918:33:5"},"returnParameters":{"id":1151,"nodeType":"ParameterList","parameters":[],"src":"8969:0:5"},"scope":1389,"src":"8904:535:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1272,"nodeType":"Block","src":"9824:594:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1210,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"9842:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9861:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1212,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9853:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1211,"name":"address","nodeType":"ElementaryTypeName","src":"9853:7:5","typeDescriptions":{}}},"id":1214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9853:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9842:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f2061646472657373","id":1216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9865:35:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""},"value":"ERC20: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""}],"id":1209,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9834:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9834:67:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1218,"nodeType":"ExpressionStatement","src":"9834:67:5"},{"expression":{"arguments":[{"id":1220,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"9933:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9950:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9942:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1221,"name":"address","nodeType":"ElementaryTypeName","src":"9942:7:5","typeDescriptions":{}}},"id":1224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9942:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1225,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"9954:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1219,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"9912:20:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9912:49:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1227,"nodeType":"ExpressionStatement","src":"9912:49:5"},{"assignments":[1229],"declarations":[{"constant":false,"id":1229,"mutability":"mutable","name":"accountBalance","nameLocation":"9980:14:5","nodeType":"VariableDeclaration","scope":1272,"src":"9972:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1228,"name":"uint256","nodeType":"ElementaryTypeName","src":"9972:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1233,"initialValue":{"baseExpression":{"id":1230,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":796,"src":"9997:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1232,"indexExpression":{"id":1231,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"10007:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9997:18:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9972:43:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1235,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1229,"src":"10033:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1236,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"10051:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10033:24:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365","id":1238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10059:36:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""},"value":"ERC20: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""}],"id":1234,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10025:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10025:71:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1240,"nodeType":"ExpressionStatement","src":"10025:71:5"},{"id":1253,"nodeType":"UncheckedBlock","src":"10106:194:5","statements":[{"expression":{"id":1247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1241,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":796,"src":"10130:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1243,"indexExpression":{"id":1242,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"10140:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10130:18:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1244,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1229,"src":"10151:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1245,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"10168:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10151:23:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10130:44:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1248,"nodeType":"ExpressionStatement","src":"10130:44:5"},{"expression":{"id":1251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1249,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"10267:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1250,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"10283:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10267:22:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1252,"nodeType":"ExpressionStatement","src":"10267:22:5"}]},{"eventCall":{"arguments":[{"id":1255,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"10324:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10341:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1257,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10333:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1256,"name":"address","nodeType":"ElementaryTypeName","src":"10333:7:5","typeDescriptions":{}}},"id":1259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10333:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1260,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"10345:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1254,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"10315:8:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10315:37:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1262,"nodeType":"EmitStatement","src":"10310:42:5"},{"expression":{"arguments":[{"id":1264,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"10383:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1266,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10392:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1265,"name":"address","nodeType":"ElementaryTypeName","src":"10392:7:5","typeDescriptions":{}}},"id":1268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10392:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1269,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"10404:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1263,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"10363:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10363:48:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1271,"nodeType":"ExpressionStatement","src":"10363:48:5"}]},"documentation":{"id":1202,"nodeType":"StructuredDocumentation","src":"9445:309:5","text":" @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."},"id":1273,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"9768:5:5","nodeType":"FunctionDefinition","parameters":{"id":1207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1204,"mutability":"mutable","name":"account","nameLocation":"9782:7:5","nodeType":"VariableDeclaration","scope":1273,"src":"9774:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1203,"name":"address","nodeType":"ElementaryTypeName","src":"9774:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1206,"mutability":"mutable","name":"amount","nameLocation":"9799:6:5","nodeType":"VariableDeclaration","scope":1273,"src":"9791:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1205,"name":"uint256","nodeType":"ElementaryTypeName","src":"9791:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9773:33:5"},"returnParameters":{"id":1208,"nodeType":"ParameterList","parameters":[],"src":"9824:0:5"},"scope":1389,"src":"9759:659:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1317,"nodeType":"Block","src":"10954:257:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1284,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1276,"src":"10972:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10989:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1286,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10981:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1285,"name":"address","nodeType":"ElementaryTypeName","src":"10981:7:5","typeDescriptions":{}}},"id":1288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10981:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10972:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373","id":1290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10993:38:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""},"value":"ERC20: approve from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""}],"id":1283,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10964:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10964:68:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1292,"nodeType":"ExpressionStatement","src":"10964:68:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1294,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"11050:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11069:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1296,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11061:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1295,"name":"address","nodeType":"ElementaryTypeName","src":"11061:7:5","typeDescriptions":{}}},"id":1298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11061:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11050:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f2061646472657373","id":1300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11073:36:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""},"value":"ERC20: approve to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""}],"id":1293,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11042:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11042:68:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1302,"nodeType":"ExpressionStatement","src":"11042:68:5"},{"expression":{"id":1309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1303,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":802,"src":"11121:11:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":1306,"indexExpression":{"id":1304,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1276,"src":"11133:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11121:18:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1307,"indexExpression":{"id":1305,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"11140:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11121:27:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1308,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"11151:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11121:36:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1310,"nodeType":"ExpressionStatement","src":"11121:36:5"},{"eventCall":{"arguments":[{"id":1312,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1276,"src":"11181:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1313,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"11188:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1314,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"11197:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1311,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"11172:8:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11172:32:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1316,"nodeType":"EmitStatement","src":"11167:37:5"}]},"documentation":{"id":1274,"nodeType":"StructuredDocumentation","src":"10424:412:5","text":" @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."},"id":1318,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"10850:8:5","nodeType":"FunctionDefinition","parameters":{"id":1281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1276,"mutability":"mutable","name":"owner","nameLocation":"10876:5:5","nodeType":"VariableDeclaration","scope":1318,"src":"10868:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1275,"name":"address","nodeType":"ElementaryTypeName","src":"10868:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1278,"mutability":"mutable","name":"spender","nameLocation":"10899:7:5","nodeType":"VariableDeclaration","scope":1318,"src":"10891:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1277,"name":"address","nodeType":"ElementaryTypeName","src":"10891:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1280,"mutability":"mutable","name":"amount","nameLocation":"10924:6:5","nodeType":"VariableDeclaration","scope":1318,"src":"10916:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1279,"name":"uint256","nodeType":"ElementaryTypeName","src":"10916:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10858:78:5"},"returnParameters":{"id":1282,"nodeType":"ParameterList","parameters":[],"src":"10954:0:5"},"scope":1389,"src":"10841:370:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1360,"nodeType":"Block","src":"11612:321:5","statements":[{"assignments":[1329],"declarations":[{"constant":false,"id":1329,"mutability":"mutable","name":"currentAllowance","nameLocation":"11630:16:5","nodeType":"VariableDeclaration","scope":1360,"src":"11622:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1328,"name":"uint256","nodeType":"ElementaryTypeName","src":"11622:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1334,"initialValue":{"arguments":[{"id":1331,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"11659:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1332,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1323,"src":"11666:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1330,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":939,"src":"11649:9:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11649:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11622:52:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1335,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"11688:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":1338,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11713:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1337,"name":"uint256","nodeType":"ElementaryTypeName","src":"11713:7:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":1336,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11708:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11708:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":1340,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11722:3:5","memberName":"max","nodeType":"MemberAccess","src":"11708:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11688:37:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1359,"nodeType":"IfStatement","src":"11684:243:5","trueBody":{"id":1358,"nodeType":"Block","src":"11727:200:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1343,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"11749:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1344,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"11769:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11749:26:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","id":1346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11777:31:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""},"value":"ERC20: insufficient allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""}],"id":1342,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11741:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11741:68:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1348,"nodeType":"ExpressionStatement","src":"11741:68:5"},{"id":1357,"nodeType":"UncheckedBlock","src":"11823:94:5","statements":[{"expression":{"arguments":[{"id":1350,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"11860:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1351,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1323,"src":"11867:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1352,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"11876:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1353,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"11895:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11876:25:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1349,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"11851:8:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11851:51:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1356,"nodeType":"ExpressionStatement","src":"11851:51:5"}]}]}}]},"documentation":{"id":1319,"nodeType":"StructuredDocumentation","src":"11217:270:5","text":" @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."},"id":1361,"implemented":true,"kind":"function","modifiers":[],"name":"_spendAllowance","nameLocation":"11501:15:5","nodeType":"FunctionDefinition","parameters":{"id":1326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1321,"mutability":"mutable","name":"owner","nameLocation":"11534:5:5","nodeType":"VariableDeclaration","scope":1361,"src":"11526:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1320,"name":"address","nodeType":"ElementaryTypeName","src":"11526:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1323,"mutability":"mutable","name":"spender","nameLocation":"11557:7:5","nodeType":"VariableDeclaration","scope":1361,"src":"11549:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1322,"name":"address","nodeType":"ElementaryTypeName","src":"11549:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1325,"mutability":"mutable","name":"amount","nameLocation":"11582:6:5","nodeType":"VariableDeclaration","scope":1361,"src":"11574:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1324,"name":"uint256","nodeType":"ElementaryTypeName","src":"11574:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11516:78:5"},"returnParameters":{"id":1327,"nodeType":"ParameterList","parameters":[],"src":"11612:0:5"},"scope":1389,"src":"11492:441:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1371,"nodeType":"Block","src":"12636:2:5","statements":[]},"documentation":{"id":1362,"nodeType":"StructuredDocumentation","src":"11939:573:5","text":" @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1372,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"12526:20:5","nodeType":"FunctionDefinition","parameters":{"id":1369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1364,"mutability":"mutable","name":"from","nameLocation":"12564:4:5","nodeType":"VariableDeclaration","scope":1372,"src":"12556:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1363,"name":"address","nodeType":"ElementaryTypeName","src":"12556:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1366,"mutability":"mutable","name":"to","nameLocation":"12586:2:5","nodeType":"VariableDeclaration","scope":1372,"src":"12578:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1365,"name":"address","nodeType":"ElementaryTypeName","src":"12578:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1368,"mutability":"mutable","name":"amount","nameLocation":"12606:6:5","nodeType":"VariableDeclaration","scope":1372,"src":"12598:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1367,"name":"uint256","nodeType":"ElementaryTypeName","src":"12598:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12546:72:5"},"returnParameters":{"id":1370,"nodeType":"ParameterList","parameters":[],"src":"12636:0:5"},"scope":1389,"src":"12517:121:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1382,"nodeType":"Block","src":"13344:2:5","statements":[]},"documentation":{"id":1373,"nodeType":"StructuredDocumentation","src":"12644:577:5","text":" @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1383,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"13235:19:5","nodeType":"FunctionDefinition","parameters":{"id":1380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1375,"mutability":"mutable","name":"from","nameLocation":"13272:4:5","nodeType":"VariableDeclaration","scope":1383,"src":"13264:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1374,"name":"address","nodeType":"ElementaryTypeName","src":"13264:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1377,"mutability":"mutable","name":"to","nameLocation":"13294:2:5","nodeType":"VariableDeclaration","scope":1383,"src":"13286:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1376,"name":"address","nodeType":"ElementaryTypeName","src":"13286:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1379,"mutability":"mutable","name":"amount","nameLocation":"13314:6:5","nodeType":"VariableDeclaration","scope":1383,"src":"13306:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1378,"name":"uint256","nodeType":"ElementaryTypeName","src":"13306:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13254:72:5"},"returnParameters":{"id":1381,"nodeType":"ParameterList","parameters":[],"src":"13344:0:5"},"scope":1389,"src":"13226:120:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1384,"nodeType":"StructuredDocumentation","src":"13352:254:5","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1388,"mutability":"mutable","name":"__gap","nameLocation":"13631:5:5","nodeType":"VariableDeclaration","scope":1389,"src":"13611:25:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$45_storage","typeString":"uint256[45]"},"typeName":{"baseType":{"id":1385,"name":"uint256","nodeType":"ElementaryTypeName","src":"13611:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1387,"length":{"hexValue":"3435","id":1386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13619:2:5","typeDescriptions":{"typeIdentifier":"t_rational_45_by_1","typeString":"int_const 45"},"value":"45"},"nodeType":"ArrayTypeName","src":"13611:11:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$45_storage_ptr","typeString":"uint256[45]"}},"visibility":"private"}],"scope":1390,"src":"1480:12159:5","usedErrors":[]}],"src":"105:13535:5"},"id":5},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","exportedSymbols":{"IERC20Upgradeable":[1467]},"id":1468,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1391,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1392,"nodeType":"StructuredDocumentation","src":"131:70:6","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":1467,"linearizedBaseContracts":[1467],"name":"IERC20Upgradeable","nameLocation":"212:17:6","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1393,"nodeType":"StructuredDocumentation","src":"236:158:6","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1401,"name":"Transfer","nameLocation":"405:8:6","nodeType":"EventDefinition","parameters":{"id":1400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1395,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"430:4:6","nodeType":"VariableDeclaration","scope":1401,"src":"414:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1394,"name":"address","nodeType":"ElementaryTypeName","src":"414:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1397,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"452:2:6","nodeType":"VariableDeclaration","scope":1401,"src":"436:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1396,"name":"address","nodeType":"ElementaryTypeName","src":"436:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1399,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"464:5:6","nodeType":"VariableDeclaration","scope":1401,"src":"456:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1398,"name":"uint256","nodeType":"ElementaryTypeName","src":"456:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"413:57:6"},"src":"399:72:6"},{"anonymous":false,"documentation":{"id":1402,"nodeType":"StructuredDocumentation","src":"477:148:6","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1410,"name":"Approval","nameLocation":"636:8:6","nodeType":"EventDefinition","parameters":{"id":1409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1404,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"661:5:6","nodeType":"VariableDeclaration","scope":1410,"src":"645:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1403,"name":"address","nodeType":"ElementaryTypeName","src":"645:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1406,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"684:7:6","nodeType":"VariableDeclaration","scope":1410,"src":"668:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1405,"name":"address","nodeType":"ElementaryTypeName","src":"668:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1408,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"701:5:6","nodeType":"VariableDeclaration","scope":1410,"src":"693:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1407,"name":"uint256","nodeType":"ElementaryTypeName","src":"693:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"644:63:6"},"src":"630:78:6"},{"documentation":{"id":1411,"nodeType":"StructuredDocumentation","src":"714:66:6","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":1416,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"794:11:6","nodeType":"FunctionDefinition","parameters":{"id":1412,"nodeType":"ParameterList","parameters":[],"src":"805:2:6"},"returnParameters":{"id":1415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1414,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1416,"src":"831:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1413,"name":"uint256","nodeType":"ElementaryTypeName","src":"831:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"830:9:6"},"scope":1467,"src":"785:55:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1417,"nodeType":"StructuredDocumentation","src":"846:72:6","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":1424,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"932:9:6","nodeType":"FunctionDefinition","parameters":{"id":1420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1419,"mutability":"mutable","name":"account","nameLocation":"950:7:6","nodeType":"VariableDeclaration","scope":1424,"src":"942:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1418,"name":"address","nodeType":"ElementaryTypeName","src":"942:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"941:17:6"},"returnParameters":{"id":1423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1422,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1424,"src":"982:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1421,"name":"uint256","nodeType":"ElementaryTypeName","src":"982:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"981:9:6"},"scope":1467,"src":"923:68:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1425,"nodeType":"StructuredDocumentation","src":"997:202:6","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":1434,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1213:8:6","nodeType":"FunctionDefinition","parameters":{"id":1430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1427,"mutability":"mutable","name":"to","nameLocation":"1230:2:6","nodeType":"VariableDeclaration","scope":1434,"src":"1222:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1426,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1429,"mutability":"mutable","name":"amount","nameLocation":"1242:6:6","nodeType":"VariableDeclaration","scope":1434,"src":"1234:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1428,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1221:28:6"},"returnParameters":{"id":1433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1432,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1434,"src":"1268:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1431,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1267:6:6"},"scope":1467,"src":"1204:70:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1435,"nodeType":"StructuredDocumentation","src":"1280:264:6","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":1444,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1558:9:6","nodeType":"FunctionDefinition","parameters":{"id":1440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1437,"mutability":"mutable","name":"owner","nameLocation":"1576:5:6","nodeType":"VariableDeclaration","scope":1444,"src":"1568:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1436,"name":"address","nodeType":"ElementaryTypeName","src":"1568:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1439,"mutability":"mutable","name":"spender","nameLocation":"1591:7:6","nodeType":"VariableDeclaration","scope":1444,"src":"1583:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1438,"name":"address","nodeType":"ElementaryTypeName","src":"1583:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1567:32:6"},"returnParameters":{"id":1443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1442,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1444,"src":"1623:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1441,"name":"uint256","nodeType":"ElementaryTypeName","src":"1623:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1622:9:6"},"scope":1467,"src":"1549:83:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1445,"nodeType":"StructuredDocumentation","src":"1638:642:6","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1454,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2294:7:6","nodeType":"FunctionDefinition","parameters":{"id":1450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1447,"mutability":"mutable","name":"spender","nameLocation":"2310:7:6","nodeType":"VariableDeclaration","scope":1454,"src":"2302:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1446,"name":"address","nodeType":"ElementaryTypeName","src":"2302:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1449,"mutability":"mutable","name":"amount","nameLocation":"2327:6:6","nodeType":"VariableDeclaration","scope":1454,"src":"2319:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1448,"name":"uint256","nodeType":"ElementaryTypeName","src":"2319:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2301:33:6"},"returnParameters":{"id":1453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1452,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1454,"src":"2353:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1451,"name":"bool","nodeType":"ElementaryTypeName","src":"2353:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2352:6:6"},"scope":1467,"src":"2285:74:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1455,"nodeType":"StructuredDocumentation","src":"2365:287:6","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1466,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2666:12:6","nodeType":"FunctionDefinition","parameters":{"id":1462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1457,"mutability":"mutable","name":"from","nameLocation":"2696:4:6","nodeType":"VariableDeclaration","scope":1466,"src":"2688:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1456,"name":"address","nodeType":"ElementaryTypeName","src":"2688:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1459,"mutability":"mutable","name":"to","nameLocation":"2718:2:6","nodeType":"VariableDeclaration","scope":1466,"src":"2710:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1458,"name":"address","nodeType":"ElementaryTypeName","src":"2710:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1461,"mutability":"mutable","name":"amount","nameLocation":"2738:6:6","nodeType":"VariableDeclaration","scope":1466,"src":"2730:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1460,"name":"uint256","nodeType":"ElementaryTypeName","src":"2730:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2678:72:6"},"returnParameters":{"id":1465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1464,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1466,"src":"2769:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1463,"name":"bool","nodeType":"ElementaryTypeName","src":"2769:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2768:6:6"},"scope":1467,"src":"2657:118:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1468,"src":"202:2575:6","usedErrors":[]}],"src":"106:2672:6"},"id":6},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol","exportedSymbols":{"IERC20MetadataUpgradeable":[1492],"IERC20Upgradeable":[1467]},"id":1493,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1469,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:7"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"../IERC20Upgradeable.sol","id":1470,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1493,"sourceUnit":1468,"src":"135:34:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1472,"name":"IERC20Upgradeable","nameLocations":["327:17:7"],"nodeType":"IdentifierPath","referencedDeclaration":1467,"src":"327:17:7"},"id":1473,"nodeType":"InheritanceSpecifier","src":"327:17:7"}],"canonicalName":"IERC20MetadataUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1471,"nodeType":"StructuredDocumentation","src":"171:116:7","text":" @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"},"fullyImplemented":false,"id":1492,"linearizedBaseContracts":[1492,1467],"name":"IERC20MetadataUpgradeable","nameLocation":"298:25:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1474,"nodeType":"StructuredDocumentation","src":"351:54:7","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":1479,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"419:4:7","nodeType":"FunctionDefinition","parameters":{"id":1475,"nodeType":"ParameterList","parameters":[],"src":"423:2:7"},"returnParameters":{"id":1478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1477,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1479,"src":"449:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1476,"name":"string","nodeType":"ElementaryTypeName","src":"449:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"448:15:7"},"scope":1492,"src":"410:54:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1480,"nodeType":"StructuredDocumentation","src":"470:56:7","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":1485,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"540:6:7","nodeType":"FunctionDefinition","parameters":{"id":1481,"nodeType":"ParameterList","parameters":[],"src":"546:2:7"},"returnParameters":{"id":1484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1483,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1485,"src":"572:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1482,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"571:15:7"},"scope":1492,"src":"531:56:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1486,"nodeType":"StructuredDocumentation","src":"593:65:7","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":1491,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"672:8:7","nodeType":"FunctionDefinition","parameters":{"id":1487,"nodeType":"ParameterList","parameters":[],"src":"680:2:7"},"returnParameters":{"id":1490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1489,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1491,"src":"706:5:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1488,"name":"uint8","nodeType":"ElementaryTypeName","src":"706:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"705:7:7"},"scope":1492,"src":"663:50:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1493,"src":"288:427:7","usedErrors":[]}],"src":"110:606:7"},"id":7},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2284],"ContextUpgradeable":[2326],"CountersUpgradeable":[2400],"ECDSAUpgradeable":[2936],"EIP712Upgradeable":[3086],"ERC20PermitUpgradeable":[1683],"ERC20Upgradeable":[1389],"IERC20MetadataUpgradeable":[1492],"IERC20PermitUpgradeable":[1719],"IERC20Upgradeable":[1467],"Initializable":[577],"MathUpgradeable":[4007],"StringsUpgradeable":[2575]},"id":1684,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1494,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"128:23:8"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol","file":"./draft-IERC20PermitUpgradeable.sol","id":1495,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1684,"sourceUnit":1720,"src":"153:45:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol","file":"../ERC20Upgradeable.sol","id":1496,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1684,"sourceUnit":1390,"src":"199:33:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","file":"../../../utils/cryptography/ECDSAUpgradeable.sol","id":1497,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1684,"sourceUnit":2937,"src":"233:58:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol","file":"../../../utils/cryptography/EIP712Upgradeable.sol","id":1498,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1684,"sourceUnit":3087,"src":"292:59:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol","file":"../../../utils/CountersUpgradeable.sol","id":1499,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1684,"sourceUnit":2401,"src":"352:48:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../../proxy/utils/Initializable.sol","id":1500,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1684,"sourceUnit":578,"src":"401:48:8","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1502,"name":"Initializable","nameLocations":["1043:13:8"],"nodeType":"IdentifierPath","referencedDeclaration":577,"src":"1043:13:8"},"id":1503,"nodeType":"InheritanceSpecifier","src":"1043:13:8"},{"baseName":{"id":1504,"name":"ERC20Upgradeable","nameLocations":["1058:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":1389,"src":"1058:16:8"},"id":1505,"nodeType":"InheritanceSpecifier","src":"1058:16:8"},{"baseName":{"id":1506,"name":"IERC20PermitUpgradeable","nameLocations":["1076:23:8"],"nodeType":"IdentifierPath","referencedDeclaration":1719,"src":"1076:23:8"},"id":1507,"nodeType":"InheritanceSpecifier","src":"1076:23:8"},{"baseName":{"id":1508,"name":"EIP712Upgradeable","nameLocations":["1101:17:8"],"nodeType":"IdentifierPath","referencedDeclaration":3086,"src":"1101:17:8"},"id":1509,"nodeType":"InheritanceSpecifier","src":"1101:17:8"}],"canonicalName":"ERC20PermitUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1501,"nodeType":"StructuredDocumentation","src":"451:547:8","text":" @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n _Available since v3.4._\n @custom:storage-size 51"},"fullyImplemented":true,"id":1683,"linearizedBaseContracts":[1683,3086,1719,1389,1492,1467,2326,577],"name":"ERC20PermitUpgradeable","nameLocation":"1017:22:8","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1513,"libraryName":{"id":1510,"name":"CountersUpgradeable","nameLocations":["1131:19:8"],"nodeType":"IdentifierPath","referencedDeclaration":2400,"src":"1131:19:8"},"nodeType":"UsingForDirective","src":"1125:58:8","typeName":{"id":1512,"nodeType":"UserDefinedTypeName","pathNode":{"id":1511,"name":"CountersUpgradeable.Counter","nameLocations":["1155:19:8","1175:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":2332,"src":"1155:27:8"},"referencedDeclaration":2332,"src":"1155:27:8","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2332_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}}},{"constant":false,"id":1518,"mutability":"mutable","name":"_nonces","nameLocation":"1245:7:8","nodeType":"VariableDeclaration","scope":1683,"src":"1189:63:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$2332_storage_$","typeString":"mapping(address => struct CountersUpgradeable.Counter)"},"typeName":{"id":1517,"keyType":{"id":1514,"name":"address","nodeType":"ElementaryTypeName","src":"1197:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1189:47:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$2332_storage_$","typeString":"mapping(address => struct CountersUpgradeable.Counter)"},"valueType":{"id":1516,"nodeType":"UserDefinedTypeName","pathNode":{"id":1515,"name":"CountersUpgradeable.Counter","nameLocations":["1208:19:8","1228:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":2332,"src":"1208:27:8"},"referencedDeclaration":2332,"src":"1208:27:8","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2332_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}}},"visibility":"private"},{"constant":true,"id":1523,"mutability":"constant","name":"_PERMIT_TYPEHASH","nameLocation":"1336:16:8","nodeType":"VariableDeclaration","scope":1683,"src":"1311:147:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1519,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1311:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529","id":1521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1373:84:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9","typeString":"literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""},"value":"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9","typeString":"literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""}],"id":1520,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1363:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1363:95:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"documentation":{"id":1524,"nodeType":"StructuredDocumentation","src":"1464:254:8","text":" @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n However, to ensure consistency with the upgradeable transpiler, we will continue\n to reserve a slot.\n @custom:oz-renamed-from _PERMIT_TYPEHASH"},"id":1526,"mutability":"mutable","name":"_PERMIT_TYPEHASH_DEPRECATED_SLOT","nameLocation":"1791:32:8","nodeType":"VariableDeclaration","scope":1683,"src":"1775:48:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1525,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1775:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"body":{"id":1539,"nodeType":"Block","src":"2129:51:8","statements":[{"expression":{"arguments":[{"id":1535,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"2163:4:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"31","id":1536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2169:3:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6","typeString":"literal_string \"1\""},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6","typeString":"literal_string \"1\""}],"id":1534,"name":"__EIP712_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3004,"src":"2139:23:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":1537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2139:34:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1538,"nodeType":"ExpressionStatement","src":"2139:34:8"}]},"documentation":{"id":1527,"nodeType":"StructuredDocumentation","src":"1830:220:8","text":" @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n It's a good idea to use the same `name` that is defined as the ERC20 token name."},"id":1540,"implemented":true,"kind":"function","modifiers":[{"id":1532,"kind":"modifierInvocation","modifierName":{"id":1531,"name":"onlyInitializing","nameLocations":["2112:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":522,"src":"2112:16:8"},"nodeType":"ModifierInvocation","src":"2112:16:8"}],"name":"__ERC20Permit_init","nameLocation":"2064:18:8","nodeType":"FunctionDefinition","parameters":{"id":1530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1529,"mutability":"mutable","name":"name","nameLocation":"2097:4:8","nodeType":"VariableDeclaration","scope":1540,"src":"2083:18:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1528,"name":"string","nodeType":"ElementaryTypeName","src":"2083:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2082:20:8"},"returnParameters":{"id":1533,"nodeType":"ParameterList","parameters":[],"src":"2129:0:8"},"scope":1683,"src":"2055:125:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1547,"nodeType":"Block","src":"2265:2:8","statements":[]},"id":1548,"implemented":true,"kind":"function","modifiers":[{"id":1545,"kind":"modifierInvocation","modifierName":{"id":1544,"name":"onlyInitializing","nameLocations":["2248:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":522,"src":"2248:16:8"},"nodeType":"ModifierInvocation","src":"2248:16:8"}],"name":"__ERC20Permit_init_unchained","nameLocation":"2195:28:8","nodeType":"FunctionDefinition","parameters":{"id":1543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1542,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1548,"src":"2224:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1541,"name":"string","nodeType":"ElementaryTypeName","src":"2224:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2223:15:8"},"returnParameters":{"id":1546,"nodeType":"ParameterList","parameters":[],"src":"2265:0:8"},"scope":1683,"src":"2186:81:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1704],"body":{"id":1620,"nodeType":"Block","src":"2526:439:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1568,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2544:5:8","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2550:9:8","memberName":"timestamp","nodeType":"MemberAccess","src":"2544:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":1570,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1557,"src":"2563:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2544:27:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332305065726d69743a206578706972656420646561646c696e65","id":1572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2573:31:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd","typeString":"literal_string \"ERC20Permit: expired deadline\""},"value":"ERC20Permit: expired deadline"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd","typeString":"literal_string \"ERC20Permit: expired deadline\""}],"id":1567,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2536:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2536:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1574,"nodeType":"ExpressionStatement","src":"2536:69:8"},{"assignments":[1576],"declarations":[{"constant":false,"id":1576,"mutability":"mutable","name":"structHash","nameLocation":"2624:10:8","nodeType":"VariableDeclaration","scope":1620,"src":"2616:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1575,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2616:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1590,"initialValue":{"arguments":[{"arguments":[{"id":1580,"name":"_PERMIT_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"2658:16:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1581,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1551,"src":"2676:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1582,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1553,"src":"2683:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1583,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"2692:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":1585,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1551,"src":"2709:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1584,"name":"_useNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1677,"src":"2699:9:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$","typeString":"function (address) returns (uint256)"}},"id":1586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2699:16:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1587,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1557,"src":"2717:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1578,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2647:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1579,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2651:6:8","memberName":"encode","nodeType":"MemberAccess","src":"2647:10:8","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2647:79:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1577,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2637:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2637:90:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2616:111:8"},{"assignments":[1592],"declarations":[{"constant":false,"id":1592,"mutability":"mutable","name":"hash","nameLocation":"2746:4:8","nodeType":"VariableDeclaration","scope":1620,"src":"2738:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1591,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2738:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1596,"initialValue":{"arguments":[{"id":1594,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"2770:10:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1593,"name":"_hashTypedDataV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3062,"src":"2753:16:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":1595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2753:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2738:43:8"},{"assignments":[1598],"declarations":[{"constant":false,"id":1598,"mutability":"mutable","name":"signer","nameLocation":"2800:6:8","nodeType":"VariableDeclaration","scope":1620,"src":"2792:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1597,"name":"address","nodeType":"ElementaryTypeName","src":"2792:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1606,"initialValue":{"arguments":[{"id":1601,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1592,"src":"2834:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1602,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1559,"src":"2840:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1603,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1561,"src":"2843:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1604,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1563,"src":"2846:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1599,"name":"ECDSAUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2936,"src":"2809:16:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSAUpgradeable_$2936_$","typeString":"type(library ECDSAUpgradeable)"}},"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2826:7:8","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":2876,"src":"2809:24:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2809:39:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2792:56:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1608,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"2866:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1609,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1551,"src":"2876:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2866:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332305065726d69743a20696e76616c6964207369676e6174757265","id":1611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2883:32:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124","typeString":"literal_string \"ERC20Permit: invalid signature\""},"value":"ERC20Permit: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124","typeString":"literal_string \"ERC20Permit: invalid signature\""}],"id":1607,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2858:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2858:58:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1613,"nodeType":"ExpressionStatement","src":"2858:58:8"},{"expression":{"arguments":[{"id":1615,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1551,"src":"2936:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1616,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1553,"src":"2943:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1617,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"2952:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1614,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"2927:8:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2927:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1619,"nodeType":"ExpressionStatement","src":"2927:31:8"}]},"documentation":{"id":1549,"nodeType":"StructuredDocumentation","src":"2273:50:8","text":" @dev See {IERC20Permit-permit}."},"functionSelector":"d505accf","id":1621,"implemented":true,"kind":"function","modifiers":[],"name":"permit","nameLocation":"2337:6:8","nodeType":"FunctionDefinition","overrides":{"id":1565,"nodeType":"OverrideSpecifier","overrides":[],"src":"2517:8:8"},"parameters":{"id":1564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1551,"mutability":"mutable","name":"owner","nameLocation":"2361:5:8","nodeType":"VariableDeclaration","scope":1621,"src":"2353:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1550,"name":"address","nodeType":"ElementaryTypeName","src":"2353:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1553,"mutability":"mutable","name":"spender","nameLocation":"2384:7:8","nodeType":"VariableDeclaration","scope":1621,"src":"2376:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1552,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1555,"mutability":"mutable","name":"value","nameLocation":"2409:5:8","nodeType":"VariableDeclaration","scope":1621,"src":"2401:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1554,"name":"uint256","nodeType":"ElementaryTypeName","src":"2401:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1557,"mutability":"mutable","name":"deadline","nameLocation":"2432:8:8","nodeType":"VariableDeclaration","scope":1621,"src":"2424:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1556,"name":"uint256","nodeType":"ElementaryTypeName","src":"2424:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1559,"mutability":"mutable","name":"v","nameLocation":"2456:1:8","nodeType":"VariableDeclaration","scope":1621,"src":"2450:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1558,"name":"uint8","nodeType":"ElementaryTypeName","src":"2450:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1561,"mutability":"mutable","name":"r","nameLocation":"2475:1:8","nodeType":"VariableDeclaration","scope":1621,"src":"2467:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1560,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2467:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1563,"mutability":"mutable","name":"s","nameLocation":"2494:1:8","nodeType":"VariableDeclaration","scope":1621,"src":"2486:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1562,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2486:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2343:158:8"},"returnParameters":{"id":1566,"nodeType":"ParameterList","parameters":[],"src":"2526:0:8"},"scope":1683,"src":"2328:637:8","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1712],"body":{"id":1636,"nodeType":"Block","src":"3104:48:8","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":1630,"name":"_nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"3121:7:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$2332_storage_$","typeString":"mapping(address => struct CountersUpgradeable.Counter storage ref)"}},"id":1632,"indexExpression":{"id":1631,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"3129:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3121:14:8","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2332_storage","typeString":"struct CountersUpgradeable.Counter storage ref"}},"id":1633,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3136:7:8","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":2344,"src":"3121:22:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$2332_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$2332_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer) view returns (uint256)"}},"id":1634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3121:24:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1629,"id":1635,"nodeType":"Return","src":"3114:31:8"}]},"documentation":{"id":1622,"nodeType":"StructuredDocumentation","src":"2971:50:8","text":" @dev See {IERC20Permit-nonces}."},"functionSelector":"7ecebe00","id":1637,"implemented":true,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"3035:6:8","nodeType":"FunctionDefinition","overrides":{"id":1626,"nodeType":"OverrideSpecifier","overrides":[],"src":"3077:8:8"},"parameters":{"id":1625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1624,"mutability":"mutable","name":"owner","nameLocation":"3050:5:8","nodeType":"VariableDeclaration","scope":1637,"src":"3042:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1623,"name":"address","nodeType":"ElementaryTypeName","src":"3042:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3041:15:8"},"returnParameters":{"id":1629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1628,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1637,"src":"3095:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1627,"name":"uint256","nodeType":"ElementaryTypeName","src":"3095:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3094:9:8"},"scope":1683,"src":"3026:126:8","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1718],"body":{"id":1647,"nodeType":"Block","src":"3345:44:8","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1644,"name":"_domainSeparatorV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3019,"src":"3362:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":1645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3362:20:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1643,"id":1646,"nodeType":"Return","src":"3355:27:8"}]},"documentation":{"id":1638,"nodeType":"StructuredDocumentation","src":"3158:60:8","text":" @dev See {IERC20Permit-DOMAIN_SEPARATOR}."},"functionSelector":"3644e515","id":1648,"implemented":true,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"3285:16:8","nodeType":"FunctionDefinition","overrides":{"id":1640,"nodeType":"OverrideSpecifier","overrides":[],"src":"3318:8:8"},"parameters":{"id":1639,"nodeType":"ParameterList","parameters":[],"src":"3301:2:8"},"returnParameters":{"id":1643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1642,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1648,"src":"3336:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1641,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3336:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3335:9:8"},"scope":1683,"src":"3276:113:8","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":1676,"nodeType":"Block","src":"3597:137:8","statements":[{"assignments":[1660],"declarations":[{"constant":false,"id":1660,"mutability":"mutable","name":"nonce","nameLocation":"3643:5:8","nodeType":"VariableDeclaration","scope":1676,"src":"3607:41:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2332_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":1659,"nodeType":"UserDefinedTypeName","pathNode":{"id":1658,"name":"CountersUpgradeable.Counter","nameLocations":["3607:19:8","3627:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":2332,"src":"3607:27:8"},"referencedDeclaration":2332,"src":"3607:27:8","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2332_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"id":1664,"initialValue":{"baseExpression":{"id":1661,"name":"_nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"3651:7:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$2332_storage_$","typeString":"mapping(address => struct CountersUpgradeable.Counter storage ref)"}},"id":1663,"indexExpression":{"id":1662,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1651,"src":"3659:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3651:14:8","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2332_storage","typeString":"struct CountersUpgradeable.Counter storage ref"}},"nodeType":"VariableDeclarationStatement","src":"3607:58:8"},{"expression":{"id":1669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1665,"name":"current","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1654,"src":"3675:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1666,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"3685:5:8","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2332_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":1667,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3691:7:8","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":2344,"src":"3685:13:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$2332_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$2332_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer) view returns (uint256)"}},"id":1668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3685:15:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3675:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1670,"nodeType":"ExpressionStatement","src":"3675:25:8"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1671,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"3710:5:8","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2332_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":1673,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3716:9:8","memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":2358,"src":"3710:15:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$2332_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$2332_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer)"}},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3710:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1675,"nodeType":"ExpressionStatement","src":"3710:17:8"}]},"documentation":{"id":1649,"nodeType":"StructuredDocumentation","src":"3395:120:8","text":" @dev \"Consume a nonce\": return the current value and increment.\n _Available since v4.1._"},"id":1677,"implemented":true,"kind":"function","modifiers":[],"name":"_useNonce","nameLocation":"3529:9:8","nodeType":"FunctionDefinition","parameters":{"id":1652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1651,"mutability":"mutable","name":"owner","nameLocation":"3547:5:8","nodeType":"VariableDeclaration","scope":1677,"src":"3539:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1650,"name":"address","nodeType":"ElementaryTypeName","src":"3539:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3538:15:8"},"returnParameters":{"id":1655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1654,"mutability":"mutable","name":"current","nameLocation":"3588:7:8","nodeType":"VariableDeclaration","scope":1677,"src":"3580:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1653,"name":"uint256","nodeType":"ElementaryTypeName","src":"3580:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3579:17:8"},"scope":1683,"src":"3520:214:8","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1678,"nodeType":"StructuredDocumentation","src":"3740:254:8","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1682,"mutability":"mutable","name":"__gap","nameLocation":"4019:5:8","nodeType":"VariableDeclaration","scope":1683,"src":"3999:25:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":1679,"name":"uint256","nodeType":"ElementaryTypeName","src":"3999:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1681,"length":{"hexValue":"3439","id":1680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4007:2:8","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3999:11:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":1684,"src":"999:3028:8","usedErrors":[]}],"src":"128:3900:8"},"id":8},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol","exportedSymbols":{"IERC20PermitUpgradeable":[1719]},"id":1720,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1685,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"114:23:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20PermitUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1686,"nodeType":"StructuredDocumentation","src":"139:480:9","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":1719,"linearizedBaseContracts":[1719],"name":"IERC20PermitUpgradeable","nameLocation":"630:23:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1687,"nodeType":"StructuredDocumentation","src":"660:792:9","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":1704,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1466:6:9","nodeType":"FunctionDefinition","parameters":{"id":1702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1689,"mutability":"mutable","name":"owner","nameLocation":"1490:5:9","nodeType":"VariableDeclaration","scope":1704,"src":"1482:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1688,"name":"address","nodeType":"ElementaryTypeName","src":"1482:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1691,"mutability":"mutable","name":"spender","nameLocation":"1513:7:9","nodeType":"VariableDeclaration","scope":1704,"src":"1505:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1690,"name":"address","nodeType":"ElementaryTypeName","src":"1505:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1693,"mutability":"mutable","name":"value","nameLocation":"1538:5:9","nodeType":"VariableDeclaration","scope":1704,"src":"1530:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1692,"name":"uint256","nodeType":"ElementaryTypeName","src":"1530:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1695,"mutability":"mutable","name":"deadline","nameLocation":"1561:8:9","nodeType":"VariableDeclaration","scope":1704,"src":"1553:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1694,"name":"uint256","nodeType":"ElementaryTypeName","src":"1553:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1697,"mutability":"mutable","name":"v","nameLocation":"1585:1:9","nodeType":"VariableDeclaration","scope":1704,"src":"1579:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1696,"name":"uint8","nodeType":"ElementaryTypeName","src":"1579:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1699,"mutability":"mutable","name":"r","nameLocation":"1604:1:9","nodeType":"VariableDeclaration","scope":1704,"src":"1596:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1698,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1596:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1701,"mutability":"mutable","name":"s","nameLocation":"1623:1:9","nodeType":"VariableDeclaration","scope":1704,"src":"1615:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1700,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1615:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1472:158:9"},"returnParameters":{"id":1703,"nodeType":"ParameterList","parameters":[],"src":"1639:0:9"},"scope":1719,"src":"1457:183:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1705,"nodeType":"StructuredDocumentation","src":"1646:294:9","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":1712,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1954:6:9","nodeType":"FunctionDefinition","parameters":{"id":1708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1707,"mutability":"mutable","name":"owner","nameLocation":"1969:5:9","nodeType":"VariableDeclaration","scope":1712,"src":"1961:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1706,"name":"address","nodeType":"ElementaryTypeName","src":"1961:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1960:15:9"},"returnParameters":{"id":1711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1710,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1712,"src":"1999:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1709,"name":"uint256","nodeType":"ElementaryTypeName","src":"1999:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1998:9:9"},"scope":1719,"src":"1945:63:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1713,"nodeType":"StructuredDocumentation","src":"2014:128:9","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":1718,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2209:16:9","nodeType":"FunctionDefinition","parameters":{"id":1714,"nodeType":"ParameterList","parameters":[],"src":"2225:2:9"},"returnParameters":{"id":1717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1716,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1718,"src":"2251:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1715,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2251:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2250:9:9"},"scope":1719,"src":"2200:60:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1720,"src":"620:1642:9","usedErrors":[]}],"src":"114:2149:9"},"id":9},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2284],"IERC20PermitUpgradeable":[1719],"IERC20Upgradeable":[1467],"SafeERC20Upgradeable":[2000]},"id":2001,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1721,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:10"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"../IERC20Upgradeable.sol","id":1722,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2001,"sourceUnit":1468,"src":"140:34:10","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol","file":"../extensions/draft-IERC20PermitUpgradeable.sol","id":1723,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2001,"sourceUnit":1720,"src":"175:57:10","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../../utils/AddressUpgradeable.sol","id":1724,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2001,"sourceUnit":2285,"src":"233:47:10","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20Upgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1725,"nodeType":"StructuredDocumentation","src":"282:457:10","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":2000,"linearizedBaseContracts":[2000],"name":"SafeERC20Upgradeable","nameLocation":"748:20:10","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1728,"libraryName":{"id":1726,"name":"AddressUpgradeable","nameLocations":["781:18:10"],"nodeType":"IdentifierPath","referencedDeclaration":2284,"src":"781:18:10"},"nodeType":"UsingForDirective","src":"775:37:10","typeName":{"id":1727,"name":"address","nodeType":"ElementaryTypeName","src":"804:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":1750,"nodeType":"Block","src":"931:103:10","statements":[{"expression":{"arguments":[{"id":1739,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"961:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":1742,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"991:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}},"id":1743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"997:8:10","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":1434,"src":"991:14:10","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1006:8:10","memberName":"selector","nodeType":"MemberAccess","src":"991:23:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1745,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1733,"src":"1016:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1746,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"1020:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1740,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"968:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1741,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"972:18:10","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"968:22:10","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"968:58:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1738,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"941:19:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1467_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":1748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"941:86:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1749,"nodeType":"ExpressionStatement","src":"941:86:10"}]},"id":1751,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"827:12:10","nodeType":"FunctionDefinition","parameters":{"id":1736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1731,"mutability":"mutable","name":"token","nameLocation":"867:5:10","nodeType":"VariableDeclaration","scope":1751,"src":"849:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"},"typeName":{"id":1730,"nodeType":"UserDefinedTypeName","pathNode":{"id":1729,"name":"IERC20Upgradeable","nameLocations":["849:17:10"],"nodeType":"IdentifierPath","referencedDeclaration":1467,"src":"849:17:10"},"referencedDeclaration":1467,"src":"849:17:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":1733,"mutability":"mutable","name":"to","nameLocation":"890:2:10","nodeType":"VariableDeclaration","scope":1751,"src":"882:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1732,"name":"address","nodeType":"ElementaryTypeName","src":"882:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1735,"mutability":"mutable","name":"value","nameLocation":"910:5:10","nodeType":"VariableDeclaration","scope":1751,"src":"902:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1734,"name":"uint256","nodeType":"ElementaryTypeName","src":"902:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"839:82:10"},"returnParameters":{"id":1737,"nodeType":"ParameterList","parameters":[],"src":"931:0:10"},"scope":2000,"src":"818:216:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1776,"nodeType":"Block","src":"1179:113:10","statements":[{"expression":{"arguments":[{"id":1764,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"1209:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":1767,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"1239:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}},"id":1768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1245:12:10","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":1466,"src":"1239:18:10","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":1769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1258:8:10","memberName":"selector","nodeType":"MemberAccess","src":"1239:27:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1770,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"1268:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1771,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1758,"src":"1274:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1772,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"1278:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1765,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1216:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1766,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1220:18:10","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1216:22:10","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1216:68:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1763,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"1189:19:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1467_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":1774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1189:96:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1775,"nodeType":"ExpressionStatement","src":"1189:96:10"}]},"id":1777,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1049:16:10","nodeType":"FunctionDefinition","parameters":{"id":1761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1754,"mutability":"mutable","name":"token","nameLocation":"1093:5:10","nodeType":"VariableDeclaration","scope":1777,"src":"1075:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"},"typeName":{"id":1753,"nodeType":"UserDefinedTypeName","pathNode":{"id":1752,"name":"IERC20Upgradeable","nameLocations":["1075:17:10"],"nodeType":"IdentifierPath","referencedDeclaration":1467,"src":"1075:17:10"},"referencedDeclaration":1467,"src":"1075:17:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":1756,"mutability":"mutable","name":"from","nameLocation":"1116:4:10","nodeType":"VariableDeclaration","scope":1777,"src":"1108:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1755,"name":"address","nodeType":"ElementaryTypeName","src":"1108:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1758,"mutability":"mutable","name":"to","nameLocation":"1138:2:10","nodeType":"VariableDeclaration","scope":1777,"src":"1130:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1757,"name":"address","nodeType":"ElementaryTypeName","src":"1130:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1760,"mutability":"mutable","name":"value","nameLocation":"1158:5:10","nodeType":"VariableDeclaration","scope":1777,"src":"1150:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1759,"name":"uint256","nodeType":"ElementaryTypeName","src":"1150:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1065:104:10"},"returnParameters":{"id":1762,"nodeType":"ParameterList","parameters":[],"src":"1179:0:10"},"scope":2000,"src":"1040:252:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1820,"nodeType":"Block","src":"1669:497:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1789,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"1918:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1927:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1918:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1792,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1917:12:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1797,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1958:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$2000","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$2000","typeString":"library SafeERC20Upgradeable"}],"id":1796,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1950:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1795,"name":"address","nodeType":"ElementaryTypeName","src":"1950:7:10","typeDescriptions":{}}},"id":1798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1950:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1799,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1783,"src":"1965:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1793,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1781,"src":"1934:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1940:9:10","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1444,"src":"1934:15:10","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1934:39:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1977:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1934:44:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1803,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1933:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1917:62:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":1805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1993:56:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":1788,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1896:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1896:163:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1807,"nodeType":"ExpressionStatement","src":"1896:163:10"},{"expression":{"arguments":[{"id":1809,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1781,"src":"2089:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":1812,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1781,"src":"2119:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}},"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2125:7:10","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1454,"src":"2119:13:10","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2133:8:10","memberName":"selector","nodeType":"MemberAccess","src":"2119:22:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1815,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1783,"src":"2143:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1816,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"2152:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1810,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2096:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1811,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2100:18:10","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2096:22:10","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2096:62:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1808,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"2069:19:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1467_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":1818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2069:90:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1819,"nodeType":"ExpressionStatement","src":"2069:90:10"}]},"documentation":{"id":1778,"nodeType":"StructuredDocumentation","src":"1298:249:10","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":1821,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1561:11:10","nodeType":"FunctionDefinition","parameters":{"id":1786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1781,"mutability":"mutable","name":"token","nameLocation":"1600:5:10","nodeType":"VariableDeclaration","scope":1821,"src":"1582:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"},"typeName":{"id":1780,"nodeType":"UserDefinedTypeName","pathNode":{"id":1779,"name":"IERC20Upgradeable","nameLocations":["1582:17:10"],"nodeType":"IdentifierPath","referencedDeclaration":1467,"src":"1582:17:10"},"referencedDeclaration":1467,"src":"1582:17:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":1783,"mutability":"mutable","name":"spender","nameLocation":"1623:7:10","nodeType":"VariableDeclaration","scope":1821,"src":"1615:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1782,"name":"address","nodeType":"ElementaryTypeName","src":"1615:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1785,"mutability":"mutable","name":"value","nameLocation":"1648:5:10","nodeType":"VariableDeclaration","scope":1821,"src":"1640:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1784,"name":"uint256","nodeType":"ElementaryTypeName","src":"1640:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1572:87:10"},"returnParameters":{"id":1787,"nodeType":"ParameterList","parameters":[],"src":"1669:0:10"},"scope":2000,"src":"1552:614:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1856,"nodeType":"Block","src":"2299:194:10","statements":[{"assignments":[1832],"declarations":[{"constant":false,"id":1832,"mutability":"mutable","name":"newAllowance","nameLocation":"2317:12:10","nodeType":"VariableDeclaration","scope":1856,"src":"2309:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1831,"name":"uint256","nodeType":"ElementaryTypeName","src":"2309:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1843,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1837,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2356:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$2000","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$2000","typeString":"library SafeERC20Upgradeable"}],"id":1836,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2348:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1835,"name":"address","nodeType":"ElementaryTypeName","src":"2348:7:10","typeDescriptions":{}}},"id":1838,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2348:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1839,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1826,"src":"2363:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1833,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"2332:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}},"id":1834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2338:9:10","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1444,"src":"2332:15:10","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2332:39:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1841,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"2374:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2332:47:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2309:70:10"},{"expression":{"arguments":[{"id":1845,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"2409:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":1848,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"2439:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}},"id":1849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2445:7:10","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1454,"src":"2439:13:10","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2453:8:10","memberName":"selector","nodeType":"MemberAccess","src":"2439:22:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1851,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1826,"src":"2463:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1852,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1832,"src":"2472:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1846,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2416:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1847,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2420:18:10","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2416:22:10","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2416:69:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1844,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"2389:19:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1467_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":1854,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2389:97:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1855,"nodeType":"ExpressionStatement","src":"2389:97:10"}]},"id":1857,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2181:21:10","nodeType":"FunctionDefinition","parameters":{"id":1829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1824,"mutability":"mutable","name":"token","nameLocation":"2230:5:10","nodeType":"VariableDeclaration","scope":1857,"src":"2212:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"},"typeName":{"id":1823,"nodeType":"UserDefinedTypeName","pathNode":{"id":1822,"name":"IERC20Upgradeable","nameLocations":["2212:17:10"],"nodeType":"IdentifierPath","referencedDeclaration":1467,"src":"2212:17:10"},"referencedDeclaration":1467,"src":"2212:17:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":1826,"mutability":"mutable","name":"spender","nameLocation":"2253:7:10","nodeType":"VariableDeclaration","scope":1857,"src":"2245:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1825,"name":"address","nodeType":"ElementaryTypeName","src":"2245:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1828,"mutability":"mutable","name":"value","nameLocation":"2278:5:10","nodeType":"VariableDeclaration","scope":1857,"src":"2270:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1827,"name":"uint256","nodeType":"ElementaryTypeName","src":"2270:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2202:87:10"},"returnParameters":{"id":1830,"nodeType":"ParameterList","parameters":[],"src":"2299:0:10"},"scope":2000,"src":"2172:321:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1904,"nodeType":"Block","src":"2626:370:10","statements":[{"id":1903,"nodeType":"UncheckedBlock","src":"2636:354:10","statements":[{"assignments":[1868],"declarations":[{"constant":false,"id":1868,"mutability":"mutable","name":"oldAllowance","nameLocation":"2668:12:10","nodeType":"VariableDeclaration","scope":1903,"src":"2660:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1867,"name":"uint256","nodeType":"ElementaryTypeName","src":"2660:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1877,"initialValue":{"arguments":[{"arguments":[{"id":1873,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2707:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$2000","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$2000","typeString":"library SafeERC20Upgradeable"}],"id":1872,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2699:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1871,"name":"address","nodeType":"ElementaryTypeName","src":"2699:7:10","typeDescriptions":{}}},"id":1874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2699:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1875,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"2714:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1869,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1860,"src":"2683:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}},"id":1870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2689:9:10","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1444,"src":"2683:15:10","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2683:39:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2660:62:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1879,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1868,"src":"2744:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1880,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"2760:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2744:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":1882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2767:43:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":1878,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2736:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:75:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1884,"nodeType":"ExpressionStatement","src":"2736:75:10"},{"assignments":[1886],"declarations":[{"constant":false,"id":1886,"mutability":"mutable","name":"newAllowance","nameLocation":"2833:12:10","nodeType":"VariableDeclaration","scope":1903,"src":"2825:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1885,"name":"uint256","nodeType":"ElementaryTypeName","src":"2825:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1890,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1887,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1868,"src":"2848:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1888,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"2863:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2848:20:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2825:43:10"},{"expression":{"arguments":[{"id":1892,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1860,"src":"2902:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":1895,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1860,"src":"2932:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}},"id":1896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2938:7:10","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1454,"src":"2932:13:10","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2946:8:10","memberName":"selector","nodeType":"MemberAccess","src":"2932:22:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1898,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"2956:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1899,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"2965:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1893,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2909:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1894,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2913:18:10","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2909:22:10","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2909:69:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1891,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"2882:19:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1467_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":1901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2882:97:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1902,"nodeType":"ExpressionStatement","src":"2882:97:10"}]}]},"id":1905,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"2508:21:10","nodeType":"FunctionDefinition","parameters":{"id":1865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1860,"mutability":"mutable","name":"token","nameLocation":"2557:5:10","nodeType":"VariableDeclaration","scope":1905,"src":"2539:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"},"typeName":{"id":1859,"nodeType":"UserDefinedTypeName","pathNode":{"id":1858,"name":"IERC20Upgradeable","nameLocations":["2539:17:10"],"nodeType":"IdentifierPath","referencedDeclaration":1467,"src":"2539:17:10"},"referencedDeclaration":1467,"src":"2539:17:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":1862,"mutability":"mutable","name":"spender","nameLocation":"2580:7:10","nodeType":"VariableDeclaration","scope":1905,"src":"2572:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1861,"name":"address","nodeType":"ElementaryTypeName","src":"2572:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1864,"mutability":"mutable","name":"value","nameLocation":"2605:5:10","nodeType":"VariableDeclaration","scope":1905,"src":"2597:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1863,"name":"uint256","nodeType":"ElementaryTypeName","src":"2597:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2529:87:10"},"returnParameters":{"id":1866,"nodeType":"ParameterList","parameters":[],"src":"2626:0:10"},"scope":2000,"src":"2499:497:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1960,"nodeType":"Block","src":"3228:257:10","statements":[{"assignments":[1926],"declarations":[{"constant":false,"id":1926,"mutability":"mutable","name":"nonceBefore","nameLocation":"3246:11:10","nodeType":"VariableDeclaration","scope":1960,"src":"3238:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1925,"name":"uint256","nodeType":"ElementaryTypeName","src":"3238:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1931,"initialValue":{"arguments":[{"id":1929,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"3273:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1927,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"3260:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1719","typeString":"contract IERC20PermitUpgradeable"}},"id":1928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3266:6:10","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":1712,"src":"3260:12:10","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3260:19:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3238:41:10"},{"expression":{"arguments":[{"id":1935,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"3302:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1936,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"3309:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1937,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1914,"src":"3318:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1938,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"3325:8:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1939,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1918,"src":"3335:1:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1940,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"3338:1:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1941,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1922,"src":"3341:1:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1932,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"3289:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1719","typeString":"contract IERC20PermitUpgradeable"}},"id":1934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3295:6:10","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":1704,"src":"3289:12:10","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":1942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3289:54:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1943,"nodeType":"ExpressionStatement","src":"3289:54:10"},{"assignments":[1945],"declarations":[{"constant":false,"id":1945,"mutability":"mutable","name":"nonceAfter","nameLocation":"3361:10:10","nodeType":"VariableDeclaration","scope":1960,"src":"3353:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1944,"name":"uint256","nodeType":"ElementaryTypeName","src":"3353:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1950,"initialValue":{"arguments":[{"id":1948,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"3387:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1946,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"3374:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1719","typeString":"contract IERC20PermitUpgradeable"}},"id":1947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3380:6:10","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":1712,"src":"3374:12:10","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3374:19:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3353:40:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1952,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"3411:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1953,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"3425:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3439:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3425:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3411:29:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":1957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3442:35:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":1951,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3403:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3403:75:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1959,"nodeType":"ExpressionStatement","src":"3403:75:10"}]},"id":1961,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"3011:10:10","nodeType":"FunctionDefinition","parameters":{"id":1923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1908,"mutability":"mutable","name":"token","nameLocation":"3055:5:10","nodeType":"VariableDeclaration","scope":1961,"src":"3031:29:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1719","typeString":"contract IERC20PermitUpgradeable"},"typeName":{"id":1907,"nodeType":"UserDefinedTypeName","pathNode":{"id":1906,"name":"IERC20PermitUpgradeable","nameLocations":["3031:23:10"],"nodeType":"IdentifierPath","referencedDeclaration":1719,"src":"3031:23:10"},"referencedDeclaration":1719,"src":"3031:23:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1719","typeString":"contract IERC20PermitUpgradeable"}},"visibility":"internal"},{"constant":false,"id":1910,"mutability":"mutable","name":"owner","nameLocation":"3078:5:10","nodeType":"VariableDeclaration","scope":1961,"src":"3070:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1909,"name":"address","nodeType":"ElementaryTypeName","src":"3070:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1912,"mutability":"mutable","name":"spender","nameLocation":"3101:7:10","nodeType":"VariableDeclaration","scope":1961,"src":"3093:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1911,"name":"address","nodeType":"ElementaryTypeName","src":"3093:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1914,"mutability":"mutable","name":"value","nameLocation":"3126:5:10","nodeType":"VariableDeclaration","scope":1961,"src":"3118:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1913,"name":"uint256","nodeType":"ElementaryTypeName","src":"3118:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1916,"mutability":"mutable","name":"deadline","nameLocation":"3149:8:10","nodeType":"VariableDeclaration","scope":1961,"src":"3141:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1915,"name":"uint256","nodeType":"ElementaryTypeName","src":"3141:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1918,"mutability":"mutable","name":"v","nameLocation":"3173:1:10","nodeType":"VariableDeclaration","scope":1961,"src":"3167:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1917,"name":"uint8","nodeType":"ElementaryTypeName","src":"3167:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1920,"mutability":"mutable","name":"r","nameLocation":"3192:1:10","nodeType":"VariableDeclaration","scope":1961,"src":"3184:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1919,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3184:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1922,"mutability":"mutable","name":"s","nameLocation":"3211:1:10","nodeType":"VariableDeclaration","scope":1961,"src":"3203:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1921,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3203:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3021:197:10"},"returnParameters":{"id":1924,"nodeType":"ParameterList","parameters":[],"src":"3228:0:10"},"scope":2000,"src":"3002:483:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1998,"nodeType":"Block","src":"3949:636:10","statements":[{"assignments":[1971],"declarations":[{"constant":false,"id":1971,"mutability":"mutable","name":"returndata","nameLocation":"4311:10:10","nodeType":"VariableDeclaration","scope":1998,"src":"4298:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1970,"name":"bytes","nodeType":"ElementaryTypeName","src":"4298:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1980,"initialValue":{"arguments":[{"id":1977,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"4352:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":1978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4358:34:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":1974,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1965,"src":"4332:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}],"id":1973,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4324:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1972,"name":"address","nodeType":"ElementaryTypeName","src":"4324:7:10","typeDescriptions":{}}},"id":1975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4324:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4339:12:10","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":2090,"src":"4324:27:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4324:69:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4298:95:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1981,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"4407:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4418:6:10","memberName":"length","nodeType":"MemberAccess","src":"4407:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4427:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4407:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1997,"nodeType":"IfStatement","src":"4403:176:10","trueBody":{"id":1996,"nodeType":"Block","src":"4430:149:10","statements":[{"expression":{"arguments":[{"arguments":[{"id":1988,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"4502:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1990,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4515:4:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":1989,"name":"bool","nodeType":"ElementaryTypeName","src":"4515:4:10","typeDescriptions":{}}}],"id":1991,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4514:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":1986,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4491:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1987,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4495:6:10","memberName":"decode","nodeType":"MemberAccess","src":"4491:10:10","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4491:30:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":1993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4523:44:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":1985,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4483:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4483:85:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1995,"nodeType":"ExpressionStatement","src":"4483:85:10"}]}}]},"documentation":{"id":1962,"nodeType":"StructuredDocumentation","src":"3491:372:10","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":1999,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"3877:19:10","nodeType":"FunctionDefinition","parameters":{"id":1968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1965,"mutability":"mutable","name":"token","nameLocation":"3915:5:10","nodeType":"VariableDeclaration","scope":1999,"src":"3897:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"},"typeName":{"id":1964,"nodeType":"UserDefinedTypeName","pathNode":{"id":1963,"name":"IERC20Upgradeable","nameLocations":["3897:17:10"],"nodeType":"IdentifierPath","referencedDeclaration":1467,"src":"3897:17:10"},"referencedDeclaration":1467,"src":"3897:17:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":1967,"mutability":"mutable","name":"data","nameLocation":"3935:4:10","nodeType":"VariableDeclaration","scope":1999,"src":"3922:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1966,"name":"bytes","nodeType":"ElementaryTypeName","src":"3922:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3896:44:10"},"returnParameters":{"id":1969,"nodeType":"ParameterList","parameters":[],"src":"3949:0:10"},"scope":2000,"src":"3868:717:10","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":2001,"src":"740:3847:10","usedErrors":[]}],"src":"115:4473:10"},"id":10},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2284]},"id":2285,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2002,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2003,"nodeType":"StructuredDocumentation","src":"126:67:11","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":2284,"linearizedBaseContracts":[2284],"name":"AddressUpgradeable","nameLocation":"202:18:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":2017,"nodeType":"Block","src":"1252:254:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2011,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2006,"src":"1476:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1484:4:11","memberName":"code","nodeType":"MemberAccess","src":"1476:12:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1489:6:11","memberName":"length","nodeType":"MemberAccess","src":"1476:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1498:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1476:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2010,"id":2016,"nodeType":"Return","src":"1469:30:11"}]},"documentation":{"id":2004,"nodeType":"StructuredDocumentation","src":"227:954:11","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":2018,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1195:10:11","nodeType":"FunctionDefinition","parameters":{"id":2007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2006,"mutability":"mutable","name":"account","nameLocation":"1214:7:11","nodeType":"VariableDeclaration","scope":2018,"src":"1206:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2005,"name":"address","nodeType":"ElementaryTypeName","src":"1206:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1205:17:11"},"returnParameters":{"id":2010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2009,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2018,"src":"1246:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2008,"name":"bool","nodeType":"ElementaryTypeName","src":"1246:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1245:6:11"},"scope":2284,"src":"1186:320:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2051,"nodeType":"Block","src":"2494:241:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2029,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2520:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$2284","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$2284","typeString":"library AddressUpgradeable"}],"id":2028,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2512:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2027,"name":"address","nodeType":"ElementaryTypeName","src":"2512:7:11","typeDescriptions":{}}},"id":2030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2512:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2526:7:11","memberName":"balance","nodeType":"MemberAccess","src":"2512:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2032,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2023,"src":"2537:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2512:31:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":2034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2545:31:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":2026,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2504:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2504:73:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2036,"nodeType":"ExpressionStatement","src":"2504:73:11"},{"assignments":[2038,null],"declarations":[{"constant":false,"id":2038,"mutability":"mutable","name":"success","nameLocation":"2594:7:11","nodeType":"VariableDeclaration","scope":2051,"src":"2589:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2037,"name":"bool","nodeType":"ElementaryTypeName","src":"2589:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":2045,"initialValue":{"arguments":[{"hexValue":"","id":2043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2637:2:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2039,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2021,"src":"2607:9:11","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2617:4:11","memberName":"call","nodeType":"MemberAccess","src":"2607:14:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2041,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2023,"src":"2629:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2607:29:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2607:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2588:52:11"},{"expression":{"arguments":[{"id":2047,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"2658:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":2048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2667:60:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":2046,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2650:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2650:78:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2050,"nodeType":"ExpressionStatement","src":"2650:78:11"}]},"documentation":{"id":2019,"nodeType":"StructuredDocumentation","src":"1512:906:11","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":2052,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2432:9:11","nodeType":"FunctionDefinition","parameters":{"id":2024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2021,"mutability":"mutable","name":"recipient","nameLocation":"2458:9:11","nodeType":"VariableDeclaration","scope":2052,"src":"2442:25:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2020,"name":"address","nodeType":"ElementaryTypeName","src":"2442:15:11","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":2023,"mutability":"mutable","name":"amount","nameLocation":"2477:6:11","nodeType":"VariableDeclaration","scope":2052,"src":"2469:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2022,"name":"uint256","nodeType":"ElementaryTypeName","src":"2469:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2441:43:11"},"returnParameters":{"id":2025,"nodeType":"ParameterList","parameters":[],"src":"2494:0:11"},"scope":2284,"src":"2423:312:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2069,"nodeType":"Block","src":"3566:96:11","statements":[{"expression":{"arguments":[{"id":2063,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2055,"src":"3605:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2064,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2057,"src":"3613:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3619:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":2066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3622:32:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":2062,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2110,2154],"referencedDeclaration":2154,"src":"3583:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3583:72:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2061,"id":2068,"nodeType":"Return","src":"3576:79:11"}]},"documentation":{"id":2053,"nodeType":"StructuredDocumentation","src":"2741:731:11","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":2070,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3486:12:11","nodeType":"FunctionDefinition","parameters":{"id":2058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2055,"mutability":"mutable","name":"target","nameLocation":"3507:6:11","nodeType":"VariableDeclaration","scope":2070,"src":"3499:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2054,"name":"address","nodeType":"ElementaryTypeName","src":"3499:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2057,"mutability":"mutable","name":"data","nameLocation":"3528:4:11","nodeType":"VariableDeclaration","scope":2070,"src":"3515:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2056,"name":"bytes","nodeType":"ElementaryTypeName","src":"3515:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3498:35:11"},"returnParameters":{"id":2061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2060,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2070,"src":"3552:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2059,"name":"bytes","nodeType":"ElementaryTypeName","src":"3552:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3551:14:11"},"scope":2284,"src":"3477:185:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2089,"nodeType":"Block","src":"4031:76:11","statements":[{"expression":{"arguments":[{"id":2083,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2073,"src":"4070:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2084,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2075,"src":"4078:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4084:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2086,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2077,"src":"4087:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2082,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2110,2154],"referencedDeclaration":2154,"src":"4048:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4048:52:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2081,"id":2088,"nodeType":"Return","src":"4041:59:11"}]},"documentation":{"id":2071,"nodeType":"StructuredDocumentation","src":"3668:211:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2090,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3893:12:11","nodeType":"FunctionDefinition","parameters":{"id":2078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2073,"mutability":"mutable","name":"target","nameLocation":"3923:6:11","nodeType":"VariableDeclaration","scope":2090,"src":"3915:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2072,"name":"address","nodeType":"ElementaryTypeName","src":"3915:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2075,"mutability":"mutable","name":"data","nameLocation":"3952:4:11","nodeType":"VariableDeclaration","scope":2090,"src":"3939:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2074,"name":"bytes","nodeType":"ElementaryTypeName","src":"3939:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2077,"mutability":"mutable","name":"errorMessage","nameLocation":"3980:12:11","nodeType":"VariableDeclaration","scope":2090,"src":"3966:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2076,"name":"string","nodeType":"ElementaryTypeName","src":"3966:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3905:93:11"},"returnParameters":{"id":2081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2080,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2090,"src":"4017:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2079,"name":"bytes","nodeType":"ElementaryTypeName","src":"4017:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4016:14:11"},"scope":2284,"src":"3884:223:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2109,"nodeType":"Block","src":"4612:111:11","statements":[{"expression":{"arguments":[{"id":2103,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2093,"src":"4651:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2104,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"4659:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2105,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2097,"src":"4665:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":2106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4672:43:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":2102,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2110,2154],"referencedDeclaration":2154,"src":"4629:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4629:87:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2101,"id":2108,"nodeType":"Return","src":"4622:94:11"}]},"documentation":{"id":2091,"nodeType":"StructuredDocumentation","src":"4113:351:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":2110,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4478:21:11","nodeType":"FunctionDefinition","parameters":{"id":2098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2093,"mutability":"mutable","name":"target","nameLocation":"4517:6:11","nodeType":"VariableDeclaration","scope":2110,"src":"4509:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2092,"name":"address","nodeType":"ElementaryTypeName","src":"4509:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2095,"mutability":"mutable","name":"data","nameLocation":"4546:4:11","nodeType":"VariableDeclaration","scope":2110,"src":"4533:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2094,"name":"bytes","nodeType":"ElementaryTypeName","src":"4533:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2097,"mutability":"mutable","name":"value","nameLocation":"4568:5:11","nodeType":"VariableDeclaration","scope":2110,"src":"4560:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2096,"name":"uint256","nodeType":"ElementaryTypeName","src":"4560:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4499:80:11"},"returnParameters":{"id":2101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2100,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2110,"src":"4598:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2099,"name":"bytes","nodeType":"ElementaryTypeName","src":"4598:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4597:14:11"},"scope":2284,"src":"4469:254:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2153,"nodeType":"Block","src":"5150:267:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2127,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5176:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$2284","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$2284","typeString":"library AddressUpgradeable"}],"id":2126,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5168:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2125,"name":"address","nodeType":"ElementaryTypeName","src":"5168:7:11","typeDescriptions":{}}},"id":2128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5168:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5182:7:11","memberName":"balance","nodeType":"MemberAccess","src":"5168:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2130,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2117,"src":"5193:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5168:30:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":2132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5200:40:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":2124,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5160:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5160:81:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2134,"nodeType":"ExpressionStatement","src":"5160:81:11"},{"assignments":[2136,2138],"declarations":[{"constant":false,"id":2136,"mutability":"mutable","name":"success","nameLocation":"5257:7:11","nodeType":"VariableDeclaration","scope":2153,"src":"5252:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2135,"name":"bool","nodeType":"ElementaryTypeName","src":"5252:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2138,"mutability":"mutable","name":"returndata","nameLocation":"5279:10:11","nodeType":"VariableDeclaration","scope":2153,"src":"5266:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2137,"name":"bytes","nodeType":"ElementaryTypeName","src":"5266:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2145,"initialValue":{"arguments":[{"id":2143,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"5319:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2139,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"5293:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5300:4:11","memberName":"call","nodeType":"MemberAccess","src":"5293:11:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2141,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2117,"src":"5312:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5293:25:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5293:31:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5251:73:11"},{"expression":{"arguments":[{"id":2147,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"5368:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2148,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2136,"src":"5376:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2149,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2138,"src":"5385:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2150,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"5397:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2146,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2239,"src":"5341:26:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5341:69:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2123,"id":2152,"nodeType":"Return","src":"5334:76:11"}]},"documentation":{"id":2111,"nodeType":"StructuredDocumentation","src":"4729:237:11","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2154,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4980:21:11","nodeType":"FunctionDefinition","parameters":{"id":2120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2113,"mutability":"mutable","name":"target","nameLocation":"5019:6:11","nodeType":"VariableDeclaration","scope":2154,"src":"5011:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2112,"name":"address","nodeType":"ElementaryTypeName","src":"5011:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2115,"mutability":"mutable","name":"data","nameLocation":"5048:4:11","nodeType":"VariableDeclaration","scope":2154,"src":"5035:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2114,"name":"bytes","nodeType":"ElementaryTypeName","src":"5035:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2117,"mutability":"mutable","name":"value","nameLocation":"5070:5:11","nodeType":"VariableDeclaration","scope":2154,"src":"5062:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2116,"name":"uint256","nodeType":"ElementaryTypeName","src":"5062:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2119,"mutability":"mutable","name":"errorMessage","nameLocation":"5099:12:11","nodeType":"VariableDeclaration","scope":2154,"src":"5085:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2118,"name":"string","nodeType":"ElementaryTypeName","src":"5085:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5001:116:11"},"returnParameters":{"id":2123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2122,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2154,"src":"5136:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2121,"name":"bytes","nodeType":"ElementaryTypeName","src":"5136:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5135:14:11"},"scope":2284,"src":"4971:446:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2170,"nodeType":"Block","src":"5694:97:11","statements":[{"expression":{"arguments":[{"id":2165,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"5730:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2166,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"5738:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":2167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5744:39:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":2164,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[2171,2200],"referencedDeclaration":2200,"src":"5711:18:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":2168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5711:73:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2163,"id":2169,"nodeType":"Return","src":"5704:80:11"}]},"documentation":{"id":2155,"nodeType":"StructuredDocumentation","src":"5423:166:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2171,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5603:18:11","nodeType":"FunctionDefinition","parameters":{"id":2160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2157,"mutability":"mutable","name":"target","nameLocation":"5630:6:11","nodeType":"VariableDeclaration","scope":2171,"src":"5622:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2156,"name":"address","nodeType":"ElementaryTypeName","src":"5622:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2159,"mutability":"mutable","name":"data","nameLocation":"5651:4:11","nodeType":"VariableDeclaration","scope":2171,"src":"5638:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2158,"name":"bytes","nodeType":"ElementaryTypeName","src":"5638:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5621:35:11"},"returnParameters":{"id":2163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2162,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2171,"src":"5680:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2161,"name":"bytes","nodeType":"ElementaryTypeName","src":"5680:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5679:14:11"},"scope":2284,"src":"5594:197:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2199,"nodeType":"Block","src":"6133:168:11","statements":[{"assignments":[2184,2186],"declarations":[{"constant":false,"id":2184,"mutability":"mutable","name":"success","nameLocation":"6149:7:11","nodeType":"VariableDeclaration","scope":2199,"src":"6144:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2183,"name":"bool","nodeType":"ElementaryTypeName","src":"6144:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2186,"mutability":"mutable","name":"returndata","nameLocation":"6171:10:11","nodeType":"VariableDeclaration","scope":2199,"src":"6158:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2185,"name":"bytes","nodeType":"ElementaryTypeName","src":"6158:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2191,"initialValue":{"arguments":[{"id":2189,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"6203:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2187,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2174,"src":"6185:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6192:10:11","memberName":"staticcall","nodeType":"MemberAccess","src":"6185:17:11","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6185:23:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6143:65:11"},{"expression":{"arguments":[{"id":2193,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2174,"src":"6252:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2194,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2184,"src":"6260:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2195,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2186,"src":"6269:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2196,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2178,"src":"6281:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2192,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2239,"src":"6225:26:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6225:69:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2182,"id":2198,"nodeType":"Return","src":"6218:76:11"}]},"documentation":{"id":2172,"nodeType":"StructuredDocumentation","src":"5797:173:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2200,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5984:18:11","nodeType":"FunctionDefinition","parameters":{"id":2179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2174,"mutability":"mutable","name":"target","nameLocation":"6020:6:11","nodeType":"VariableDeclaration","scope":2200,"src":"6012:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2173,"name":"address","nodeType":"ElementaryTypeName","src":"6012:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2176,"mutability":"mutable","name":"data","nameLocation":"6049:4:11","nodeType":"VariableDeclaration","scope":2200,"src":"6036:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2175,"name":"bytes","nodeType":"ElementaryTypeName","src":"6036:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2178,"mutability":"mutable","name":"errorMessage","nameLocation":"6077:12:11","nodeType":"VariableDeclaration","scope":2200,"src":"6063:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2177,"name":"string","nodeType":"ElementaryTypeName","src":"6063:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6002:93:11"},"returnParameters":{"id":2182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2181,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2200,"src":"6119:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2180,"name":"bytes","nodeType":"ElementaryTypeName","src":"6119:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6118:14:11"},"scope":2284,"src":"5975:326:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2238,"nodeType":"Block","src":"6783:434:11","statements":[{"condition":{"id":2214,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"6797:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2236,"nodeType":"Block","src":"7153:58:11","statements":[{"expression":{"arguments":[{"id":2232,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"7175:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2233,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"7187:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2231,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2283,"src":"7167:7:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7167:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2235,"nodeType":"ExpressionStatement","src":"7167:33:11"}]},"id":2237,"nodeType":"IfStatement","src":"6793:418:11","trueBody":{"id":2230,"nodeType":"Block","src":"6806:341:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2215,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"6824:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6835:6:11","memberName":"length","nodeType":"MemberAccess","src":"6824:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6845:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6824:22:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2227,"nodeType":"IfStatement","src":"6820:286:11","trueBody":{"id":2226,"nodeType":"Block","src":"6848:258:11","statements":[{"expression":{"arguments":[{"arguments":[{"id":2221,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"7050:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2220,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"7039:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7039:18:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":2223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7059:31:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":2219,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7031:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7031:60:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2225,"nodeType":"ExpressionStatement","src":"7031:60:11"}]}},{"expression":{"id":2228,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"7126:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2213,"id":2229,"nodeType":"Return","src":"7119:17:11"}]}}]},"documentation":{"id":2201,"nodeType":"StructuredDocumentation","src":"6307:277:11","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":2239,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"6598:26:11","nodeType":"FunctionDefinition","parameters":{"id":2210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2203,"mutability":"mutable","name":"target","nameLocation":"6642:6:11","nodeType":"VariableDeclaration","scope":2239,"src":"6634:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2202,"name":"address","nodeType":"ElementaryTypeName","src":"6634:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2205,"mutability":"mutable","name":"success","nameLocation":"6663:7:11","nodeType":"VariableDeclaration","scope":2239,"src":"6658:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2204,"name":"bool","nodeType":"ElementaryTypeName","src":"6658:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2207,"mutability":"mutable","name":"returndata","nameLocation":"6693:10:11","nodeType":"VariableDeclaration","scope":2239,"src":"6680:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2206,"name":"bytes","nodeType":"ElementaryTypeName","src":"6680:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2209,"mutability":"mutable","name":"errorMessage","nameLocation":"6727:12:11","nodeType":"VariableDeclaration","scope":2239,"src":"6713:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2208,"name":"string","nodeType":"ElementaryTypeName","src":"6713:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6624:121:11"},"returnParameters":{"id":2213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2212,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2239,"src":"6769:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2211,"name":"bytes","nodeType":"ElementaryTypeName","src":"6769:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6768:14:11"},"scope":2284,"src":"6589:628:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2262,"nodeType":"Block","src":"7598:135:11","statements":[{"condition":{"id":2251,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2242,"src":"7612:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2260,"nodeType":"Block","src":"7669:58:11","statements":[{"expression":{"arguments":[{"id":2256,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2244,"src":"7691:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2257,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"7703:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2255,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2283,"src":"7683:7:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7683:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2259,"nodeType":"ExpressionStatement","src":"7683:33:11"}]},"id":2261,"nodeType":"IfStatement","src":"7608:119:11","trueBody":{"id":2254,"nodeType":"Block","src":"7621:42:11","statements":[{"expression":{"id":2252,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2244,"src":"7642:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2250,"id":2253,"nodeType":"Return","src":"7635:17:11"}]}}]},"documentation":{"id":2240,"nodeType":"StructuredDocumentation","src":"7223:210:11","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":2263,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"7447:16:11","nodeType":"FunctionDefinition","parameters":{"id":2247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2242,"mutability":"mutable","name":"success","nameLocation":"7478:7:11","nodeType":"VariableDeclaration","scope":2263,"src":"7473:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2241,"name":"bool","nodeType":"ElementaryTypeName","src":"7473:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2244,"mutability":"mutable","name":"returndata","nameLocation":"7508:10:11","nodeType":"VariableDeclaration","scope":2263,"src":"7495:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2243,"name":"bytes","nodeType":"ElementaryTypeName","src":"7495:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2246,"mutability":"mutable","name":"errorMessage","nameLocation":"7542:12:11","nodeType":"VariableDeclaration","scope":2263,"src":"7528:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2245,"name":"string","nodeType":"ElementaryTypeName","src":"7528:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7463:97:11"},"returnParameters":{"id":2250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2249,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2263,"src":"7584:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2248,"name":"bytes","nodeType":"ElementaryTypeName","src":"7584:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7583:14:11"},"scope":2284,"src":"7438:295:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2282,"nodeType":"Block","src":"7822:457:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2270,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2265,"src":"7898:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7909:6:11","memberName":"length","nodeType":"MemberAccess","src":"7898:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7918:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7898:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2280,"nodeType":"Block","src":"8228:45:11","statements":[{"expression":{"arguments":[{"id":2277,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"8249:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2276,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"8242:6:11","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8242:20:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2279,"nodeType":"ExpressionStatement","src":"8242:20:11"}]},"id":2281,"nodeType":"IfStatement","src":"7894:379:11","trueBody":{"id":2275,"nodeType":"Block","src":"7921:301:11","statements":[{"AST":{"nodeType":"YulBlock","src":"8079:133:11","statements":[{"nodeType":"YulVariableDeclaration","src":"8097:40:11","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"8126:10:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8120:5:11"},"nodeType":"YulFunctionCall","src":"8120:17:11"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8101:15:11","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8165:2:11","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"8169:10:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8161:3:11"},"nodeType":"YulFunctionCall","src":"8161:19:11"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"8182:15:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8154:6:11"},"nodeType":"YulFunctionCall","src":"8154:44:11"},"nodeType":"YulExpressionStatement","src":"8154:44:11"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2265,"isOffset":false,"isSlot":false,"src":"8126:10:11","valueSize":1},{"declaration":2265,"isOffset":false,"isSlot":false,"src":"8169:10:11","valueSize":1}],"id":2274,"nodeType":"InlineAssembly","src":"8070:142:11"}]}}]},"id":2283,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"7748:7:11","nodeType":"FunctionDefinition","parameters":{"id":2268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2265,"mutability":"mutable","name":"returndata","nameLocation":"7769:10:11","nodeType":"VariableDeclaration","scope":2283,"src":"7756:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2264,"name":"bytes","nodeType":"ElementaryTypeName","src":"7756:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2267,"mutability":"mutable","name":"errorMessage","nameLocation":"7795:12:11","nodeType":"VariableDeclaration","scope":2283,"src":"7781:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2266,"name":"string","nodeType":"ElementaryTypeName","src":"7781:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7755:53:11"},"returnParameters":{"id":2269,"nodeType":"ParameterList","parameters":[],"src":"7822:0:11"},"scope":2284,"src":"7739:540:11","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2285,"src":"194:8087:11","usedErrors":[]}],"src":"101:8181:11"},"id":11},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2284],"ContextUpgradeable":[2326],"Initializable":[577]},"id":2327,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2286,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:12"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":2287,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2327,"sourceUnit":578,"src":"110:42:12","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2289,"name":"Initializable","nameLocations":["691:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":577,"src":"691:13:12"},"id":2290,"nodeType":"InheritanceSpecifier","src":"691:13:12"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2288,"nodeType":"StructuredDocumentation","src":"154:496:12","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2326,"linearizedBaseContracts":[2326,577],"name":"ContextUpgradeable","nameLocation":"669:18:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":2295,"nodeType":"Block","src":"763:7:12","statements":[]},"id":2296,"implemented":true,"kind":"function","modifiers":[{"id":2293,"kind":"modifierInvocation","modifierName":{"id":2292,"name":"onlyInitializing","nameLocations":["746:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":522,"src":"746:16:12"},"nodeType":"ModifierInvocation","src":"746:16:12"}],"name":"__Context_init","nameLocation":"720:14:12","nodeType":"FunctionDefinition","parameters":{"id":2291,"nodeType":"ParameterList","parameters":[],"src":"734:2:12"},"returnParameters":{"id":2294,"nodeType":"ParameterList","parameters":[],"src":"763:0:12"},"scope":2326,"src":"711:59:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2301,"nodeType":"Block","src":"838:7:12","statements":[]},"id":2302,"implemented":true,"kind":"function","modifiers":[{"id":2299,"kind":"modifierInvocation","modifierName":{"id":2298,"name":"onlyInitializing","nameLocations":["821:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":522,"src":"821:16:12"},"nodeType":"ModifierInvocation","src":"821:16:12"}],"name":"__Context_init_unchained","nameLocation":"785:24:12","nodeType":"FunctionDefinition","parameters":{"id":2297,"nodeType":"ParameterList","parameters":[],"src":"809:2:12"},"returnParameters":{"id":2300,"nodeType":"ParameterList","parameters":[],"src":"838:0:12"},"scope":2326,"src":"776:69:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2310,"nodeType":"Block","src":"912:34:12","statements":[{"expression":{"expression":{"id":2307,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:6:12","memberName":"sender","nodeType":"MemberAccess","src":"929:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2306,"id":2309,"nodeType":"Return","src":"922:17:12"}]},"id":2311,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:12","nodeType":"FunctionDefinition","parameters":{"id":2303,"nodeType":"ParameterList","parameters":[],"src":"869:2:12"},"returnParameters":{"id":2306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2305,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2311,"src":"903:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2304,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:12"},"scope":2326,"src":"850:96:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2319,"nodeType":"Block","src":"1019:32:12","statements":[{"expression":{"expression":{"id":2316,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:4:12","memberName":"data","nodeType":"MemberAccess","src":"1036:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2315,"id":2318,"nodeType":"Return","src":"1029:15:12"}]},"id":2320,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:12","nodeType":"FunctionDefinition","parameters":{"id":2312,"nodeType":"ParameterList","parameters":[],"src":"969:2:12"},"returnParameters":{"id":2315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2314,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2320,"src":"1003:14:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2313,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:12"},"scope":2326,"src":"952:99:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":2321,"nodeType":"StructuredDocumentation","src":"1057:254:12","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2325,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:12","nodeType":"VariableDeclaration","scope":2326,"src":"1316:25:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":2322,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2324,"length":{"hexValue":"3530","id":2323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:12","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":2327,"src":"651:693:12","usedErrors":[]}],"src":"86:1259:12"},"id":12},"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol","exportedSymbols":{"CountersUpgradeable":[2400]},"id":2401,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2328,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"87:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"CountersUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2329,"nodeType":"StructuredDocumentation","src":"112:311:13","text":" @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"},"fullyImplemented":true,"id":2400,"linearizedBaseContracts":[2400],"name":"CountersUpgradeable","nameLocation":"432:19:13","nodeType":"ContractDefinition","nodes":[{"canonicalName":"CountersUpgradeable.Counter","id":2332,"members":[{"constant":false,"id":2331,"mutability":"mutable","name":"_value","nameLocation":"805:6:13","nodeType":"VariableDeclaration","scope":2332,"src":"797:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2330,"name":"uint256","nodeType":"ElementaryTypeName","src":"797:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Counter","nameLocation":"465:7:13","nodeType":"StructDefinition","scope":2400,"src":"458:374:13","visibility":"public"},{"body":{"id":2343,"nodeType":"Block","src":"912:38:13","statements":[{"expression":{"expression":{"id":2340,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"929:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2332_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":2341,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"937:6:13","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2331,"src":"929:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2339,"id":2342,"nodeType":"Return","src":"922:21:13"}]},"id":2344,"implemented":true,"kind":"function","modifiers":[],"name":"current","nameLocation":"847:7:13","nodeType":"FunctionDefinition","parameters":{"id":2336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2335,"mutability":"mutable","name":"counter","nameLocation":"871:7:13","nodeType":"VariableDeclaration","scope":2344,"src":"855:23:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2332_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":2334,"nodeType":"UserDefinedTypeName","pathNode":{"id":2333,"name":"Counter","nameLocations":["855:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":2332,"src":"855:7:13"},"referencedDeclaration":2332,"src":"855:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2332_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"src":"854:25:13"},"returnParameters":{"id":2339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2338,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2344,"src":"903:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2337,"name":"uint256","nodeType":"ElementaryTypeName","src":"903:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"902:9:13"},"scope":2400,"src":"838:112:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2357,"nodeType":"Block","src":"1009:70:13","statements":[{"id":2356,"nodeType":"UncheckedBlock","src":"1019:54:13","statements":[{"expression":{"id":2354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2350,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2347,"src":"1043:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2332_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":2352,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1051:6:13","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2331,"src":"1043:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1061:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1043:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2355,"nodeType":"ExpressionStatement","src":"1043:19:13"}]}]},"id":2358,"implemented":true,"kind":"function","modifiers":[],"name":"increment","nameLocation":"965:9:13","nodeType":"FunctionDefinition","parameters":{"id":2348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2347,"mutability":"mutable","name":"counter","nameLocation":"991:7:13","nodeType":"VariableDeclaration","scope":2358,"src":"975:23:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2332_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":2346,"nodeType":"UserDefinedTypeName","pathNode":{"id":2345,"name":"Counter","nameLocations":["975:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":2332,"src":"975:7:13"},"referencedDeclaration":2332,"src":"975:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2332_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"src":"974:25:13"},"returnParameters":{"id":2349,"nodeType":"ParameterList","parameters":[],"src":"1009:0:13"},"scope":2400,"src":"956:123:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2385,"nodeType":"Block","src":"1138:176:13","statements":[{"assignments":[2365],"declarations":[{"constant":false,"id":2365,"mutability":"mutable","name":"value","nameLocation":"1156:5:13","nodeType":"VariableDeclaration","scope":2385,"src":"1148:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2364,"name":"uint256","nodeType":"ElementaryTypeName","src":"1148:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2368,"initialValue":{"expression":{"id":2366,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"1164:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2332_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":2367,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1172:6:13","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2331,"src":"1164:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1148:30:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2370,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2365,"src":"1196:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1204:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1196:9:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f756e7465723a2064656372656d656e74206f766572666c6f77","id":2373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1207:29:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""},"value":"Counter: decrement overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""}],"id":2369,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1188:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1188:49:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2375,"nodeType":"ExpressionStatement","src":"1188:49:13"},{"id":2384,"nodeType":"UncheckedBlock","src":"1247:61:13","statements":[{"expression":{"id":2382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2376,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"1271:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2332_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":2378,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1279:6:13","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2331,"src":"1271:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2379,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2365,"src":"1288:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1296:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1288:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1271:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2383,"nodeType":"ExpressionStatement","src":"1271:26:13"}]}]},"id":2386,"implemented":true,"kind":"function","modifiers":[],"name":"decrement","nameLocation":"1094:9:13","nodeType":"FunctionDefinition","parameters":{"id":2362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2361,"mutability":"mutable","name":"counter","nameLocation":"1120:7:13","nodeType":"VariableDeclaration","scope":2386,"src":"1104:23:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2332_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":2360,"nodeType":"UserDefinedTypeName","pathNode":{"id":2359,"name":"Counter","nameLocations":["1104:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":2332,"src":"1104:7:13"},"referencedDeclaration":2332,"src":"1104:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2332_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"src":"1103:25:13"},"returnParameters":{"id":2363,"nodeType":"ParameterList","parameters":[],"src":"1138:0:13"},"scope":2400,"src":"1085:229:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2398,"nodeType":"Block","src":"1369:35:13","statements":[{"expression":{"id":2396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2392,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"1379:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2332_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":2394,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1387:6:13","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2331,"src":"1379:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1396:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1379:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2397,"nodeType":"ExpressionStatement","src":"1379:18:13"}]},"id":2399,"implemented":true,"kind":"function","modifiers":[],"name":"reset","nameLocation":"1329:5:13","nodeType":"FunctionDefinition","parameters":{"id":2390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2389,"mutability":"mutable","name":"counter","nameLocation":"1351:7:13","nodeType":"VariableDeclaration","scope":2399,"src":"1335:23:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2332_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":2388,"nodeType":"UserDefinedTypeName","pathNode":{"id":2387,"name":"Counter","nameLocations":["1335:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":2332,"src":"1335:7:13"},"referencedDeclaration":2332,"src":"1335:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2332_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"src":"1334:25:13"},"returnParameters":{"id":2391,"nodeType":"ParameterList","parameters":[],"src":"1369:0:13"},"scope":2400,"src":"1320:84:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":2401,"src":"424:982:13","usedErrors":[]}],"src":"87:1320:13"},"id":13},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[4007],"StringsUpgradeable":[2575]},"id":2576,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2402,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:14"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","id":2403,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2576,"sourceUnit":4008,"src":"126:36:14","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"StringsUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2404,"nodeType":"StructuredDocumentation","src":"164:34:14","text":" @dev String operations."},"fullyImplemented":true,"id":2575,"linearizedBaseContracts":[2575],"name":"StringsUpgradeable","nameLocation":"207:18:14","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2407,"mutability":"constant","name":"_SYMBOLS","nameLocation":"257:8:14","nodeType":"VariableDeclaration","scope":2575,"src":"232:54:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":2405,"name":"bytes16","nodeType":"ElementaryTypeName","src":"232:7:14","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":2406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"268:18:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":2410,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"315:15:14","nodeType":"VariableDeclaration","scope":2575,"src":"292:43:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2408,"name":"uint8","nodeType":"ElementaryTypeName","src":"292:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":2409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"333:2:14","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":2457,"nodeType":"Block","src":"508:636:14","statements":[{"id":2456,"nodeType":"UncheckedBlock","src":"518:620:14","statements":[{"assignments":[2419],"declarations":[{"constant":false,"id":2419,"mutability":"mutable","name":"length","nameLocation":"550:6:14","nodeType":"VariableDeclaration","scope":2456,"src":"542:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2418,"name":"uint256","nodeType":"ElementaryTypeName","src":"542:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2426,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2422,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2413,"src":"581:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2420,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4007,"src":"559:15:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$4007_$","typeString":"type(library MathUpgradeable)"}},"id":2421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"575:5:14","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":3844,"src":"559:21:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"559:28:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"590:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"559:32:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"542:49:14"},{"assignments":[2428],"declarations":[{"constant":false,"id":2428,"mutability":"mutable","name":"buffer","nameLocation":"619:6:14","nodeType":"VariableDeclaration","scope":2456,"src":"605:20:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2427,"name":"string","nodeType":"ElementaryTypeName","src":"605:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2433,"initialValue":{"arguments":[{"id":2431,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"639:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2430,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"628:10:14","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":2429,"name":"string","nodeType":"ElementaryTypeName","src":"632:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":2432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"628:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"605:41:14"},{"assignments":[2435],"declarations":[{"constant":false,"id":2435,"mutability":"mutable","name":"ptr","nameLocation":"668:3:14","nodeType":"VariableDeclaration","scope":2456,"src":"660:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2434,"name":"uint256","nodeType":"ElementaryTypeName","src":"660:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2436,"nodeType":"VariableDeclarationStatement","src":"660:11:14"},{"AST":{"nodeType":"YulBlock","src":"741:67:14","statements":[{"nodeType":"YulAssignment","src":"759:35:14","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"770:6:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"782:2:14","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"786:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"778:3:14"},"nodeType":"YulFunctionCall","src":"778:15:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"766:3:14"},"nodeType":"YulFunctionCall","src":"766:28:14"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"759:3:14"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2428,"isOffset":false,"isSlot":false,"src":"770:6:14","valueSize":1},{"declaration":2419,"isOffset":false,"isSlot":false,"src":"786:6:14","valueSize":1},{"declaration":2435,"isOffset":false,"isSlot":false,"src":"759:3:14","valueSize":1}],"id":2437,"nodeType":"InlineAssembly","src":"732:76:14"},{"body":{"id":2452,"nodeType":"Block","src":"834:267:14","statements":[{"expression":{"id":2440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"852:5:14","subExpression":{"id":2439,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2435,"src":"852:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2441,"nodeType":"ExpressionStatement","src":"852:5:14"},{"AST":{"nodeType":"YulBlock","src":"935:84:14","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"965:3:14"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"979:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"986:2:14","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"975:3:14"},"nodeType":"YulFunctionCall","src":"975:14:14"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"991:8:14"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"970:4:14"},"nodeType":"YulFunctionCall","src":"970:30:14"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"957:7:14"},"nodeType":"YulFunctionCall","src":"957:44:14"},"nodeType":"YulExpressionStatement","src":"957:44:14"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2407,"isOffset":false,"isSlot":false,"src":"991:8:14","valueSize":1},{"declaration":2435,"isOffset":false,"isSlot":false,"src":"965:3:14","valueSize":1},{"declaration":2413,"isOffset":false,"isSlot":false,"src":"979:5:14","valueSize":1}],"id":2442,"nodeType":"InlineAssembly","src":"926:93:14"},{"expression":{"id":2445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2443,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2413,"src":"1036:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":2444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1036:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2446,"nodeType":"ExpressionStatement","src":"1036:11:14"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2447,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2413,"src":"1069:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1078:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1069:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2451,"nodeType":"IfStatement","src":"1065:21:14","trueBody":{"id":2450,"nodeType":"Break","src":"1081:5:14"}}]},"condition":{"hexValue":"74727565","id":2438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"828:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":2453,"nodeType":"WhileStatement","src":"821:280:14"},{"expression":{"id":2454,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"1121:6:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2417,"id":2455,"nodeType":"Return","src":"1114:13:14"}]}]},"documentation":{"id":2411,"nodeType":"StructuredDocumentation","src":"342:90:14","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":2458,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"446:8:14","nodeType":"FunctionDefinition","parameters":{"id":2414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2413,"mutability":"mutable","name":"value","nameLocation":"463:5:14","nodeType":"VariableDeclaration","scope":2458,"src":"455:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2412,"name":"uint256","nodeType":"ElementaryTypeName","src":"455:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"454:15:14"},"returnParameters":{"id":2417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2416,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2458,"src":"493:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2415,"name":"string","nodeType":"ElementaryTypeName","src":"493:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"492:15:14"},"scope":2575,"src":"437:707:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2477,"nodeType":"Block","src":"1323:111:14","statements":[{"id":2476,"nodeType":"UncheckedBlock","src":"1333:95:14","statements":[{"expression":{"arguments":[{"id":2467,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"1376:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2470,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"1406:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2468,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4007,"src":"1383:15:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$4007_$","typeString":"type(library MathUpgradeable)"}},"id":2469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1399:6:14","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":3967,"src":"1383:22:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1383:29:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1415:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1383:33:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2466,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2478,2554,2574],"referencedDeclaration":2554,"src":"1364:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1364:53:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2465,"id":2475,"nodeType":"Return","src":"1357:60:14"}]}]},"documentation":{"id":2459,"nodeType":"StructuredDocumentation","src":"1150:94:14","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":2478,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1258:11:14","nodeType":"FunctionDefinition","parameters":{"id":2462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2461,"mutability":"mutable","name":"value","nameLocation":"1278:5:14","nodeType":"VariableDeclaration","scope":2478,"src":"1270:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2460,"name":"uint256","nodeType":"ElementaryTypeName","src":"1270:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1269:15:14"},"returnParameters":{"id":2465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2464,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2478,"src":"1308:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2463,"name":"string","nodeType":"ElementaryTypeName","src":"1308:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1307:15:14"},"scope":2575,"src":"1249:185:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2553,"nodeType":"Block","src":"1647:347:14","statements":[{"assignments":[2489],"declarations":[{"constant":false,"id":2489,"mutability":"mutable","name":"buffer","nameLocation":"1670:6:14","nodeType":"VariableDeclaration","scope":2553,"src":"1657:19:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2488,"name":"bytes","nodeType":"ElementaryTypeName","src":"1657:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2498,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1689:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2493,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"1693:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1689:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":2495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1689:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2491,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1679:9:14","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2490,"name":"bytes","nodeType":"ElementaryTypeName","src":"1683:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1679:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1657:47:14"},{"expression":{"id":2503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2499,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2489,"src":"1714:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2501,"indexExpression":{"hexValue":"30","id":2500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1721:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1714:9:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1726:3:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1714:15:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2504,"nodeType":"ExpressionStatement","src":"1714:15:14"},{"expression":{"id":2509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2505,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2489,"src":"1739:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2507,"indexExpression":{"hexValue":"31","id":2506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1746:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1739:9:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":2508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1751:3:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1739:15:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2510,"nodeType":"ExpressionStatement","src":"1739:15:14"},{"body":{"id":2539,"nodeType":"Block","src":"1809:83:14","statements":[{"expression":{"id":2533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2525,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2489,"src":"1823:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2527,"indexExpression":{"id":2526,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"1830:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1823:9:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2528,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2407,"src":"1835:8:14","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":2532,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2529,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"1844:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":2530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1852:3:14","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1844:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1835:21:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1823:33:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2534,"nodeType":"ExpressionStatement","src":"1823:33:14"},{"expression":{"id":2537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2535,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"1870:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1880:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1870:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2538,"nodeType":"ExpressionStatement","src":"1870:11:14"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2519,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"1797:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1801:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1797:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2540,"initializationExpression":{"assignments":[2512],"declarations":[{"constant":false,"id":2512,"mutability":"mutable","name":"i","nameLocation":"1777:1:14","nodeType":"VariableDeclaration","scope":2540,"src":"1769:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2511,"name":"uint256","nodeType":"ElementaryTypeName","src":"1769:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2518,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1781:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2514,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"1785:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1781:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1794:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1781:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1769:26:14"},"loopExpression":{"expression":{"id":2523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1804:3:14","subExpression":{"id":2522,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"1806:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2524,"nodeType":"ExpressionStatement","src":"1804:3:14"},"nodeType":"ForStatement","src":"1764:128:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2542,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"1909:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1918:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1909:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":2545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1921:34:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":2541,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1901:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:55:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2547,"nodeType":"ExpressionStatement","src":"1901:55:14"},{"expression":{"arguments":[{"id":2550,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2489,"src":"1980:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2549,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1973:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2548,"name":"string","nodeType":"ElementaryTypeName","src":"1973:6:14","typeDescriptions":{}}},"id":2551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1973:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2487,"id":2552,"nodeType":"Return","src":"1966:21:14"}]},"documentation":{"id":2479,"nodeType":"StructuredDocumentation","src":"1440:112:14","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":2554,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1566:11:14","nodeType":"FunctionDefinition","parameters":{"id":2484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2481,"mutability":"mutable","name":"value","nameLocation":"1586:5:14","nodeType":"VariableDeclaration","scope":2554,"src":"1578:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2480,"name":"uint256","nodeType":"ElementaryTypeName","src":"1578:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2483,"mutability":"mutable","name":"length","nameLocation":"1601:6:14","nodeType":"VariableDeclaration","scope":2554,"src":"1593:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2482,"name":"uint256","nodeType":"ElementaryTypeName","src":"1593:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1577:31:14"},"returnParameters":{"id":2487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2486,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2554,"src":"1632:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2485,"name":"string","nodeType":"ElementaryTypeName","src":"1632:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1631:15:14"},"scope":2575,"src":"1557:437:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2573,"nodeType":"Block","src":"2219:76:14","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":2567,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2557,"src":"2264:4:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2566,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2256:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2565,"name":"uint160","nodeType":"ElementaryTypeName","src":"2256:7:14","typeDescriptions":{}}},"id":2568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2256:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2564,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2248:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2563,"name":"uint256","nodeType":"ElementaryTypeName","src":"2248:7:14","typeDescriptions":{}}},"id":2569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2248:22:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2570,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2410,"src":"2272:15:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2562,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2478,2554,2574],"referencedDeclaration":2554,"src":"2236:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2236:52:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2561,"id":2572,"nodeType":"Return","src":"2229:59:14"}]},"documentation":{"id":2555,"nodeType":"StructuredDocumentation","src":"2000:141:14","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":2574,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2155:11:14","nodeType":"FunctionDefinition","parameters":{"id":2558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2557,"mutability":"mutable","name":"addr","nameLocation":"2175:4:14","nodeType":"VariableDeclaration","scope":2574,"src":"2167:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2556,"name":"address","nodeType":"ElementaryTypeName","src":"2167:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2166:14:14"},"returnParameters":{"id":2561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2560,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2574,"src":"2204:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2559,"name":"string","nodeType":"ElementaryTypeName","src":"2204:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2203:15:14"},"scope":2575,"src":"2146:149:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2576,"src":"199:2098:14","usedErrors":[]}],"src":"101:2197:14"},"id":14},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","exportedSymbols":{"ECDSAUpgradeable":[2936],"MathUpgradeable":[4007],"StringsUpgradeable":[2575]},"id":2937,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2577,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:15"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"../StringsUpgradeable.sol","id":2578,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2937,"sourceUnit":2576,"src":"137:35:15","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSAUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2579,"nodeType":"StructuredDocumentation","src":"174:205:15","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":2936,"linearizedBaseContracts":[2936],"name":"ECDSAUpgradeable","nameLocation":"388:16:15","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSAUpgradeable.RecoverError","id":2585,"members":[{"id":2580,"name":"NoError","nameLocation":"439:7:15","nodeType":"EnumValue","src":"439:7:15"},{"id":2581,"name":"InvalidSignature","nameLocation":"456:16:15","nodeType":"EnumValue","src":"456:16:15"},{"id":2582,"name":"InvalidSignatureLength","nameLocation":"482:22:15","nodeType":"EnumValue","src":"482:22:15"},{"id":2583,"name":"InvalidSignatureS","nameLocation":"514:17:15","nodeType":"EnumValue","src":"514:17:15"},{"id":2584,"name":"InvalidSignatureV","nameLocation":"541:17:15","nodeType":"EnumValue","src":"541:17:15"}],"name":"RecoverError","nameLocation":"416:12:15","nodeType":"EnumDefinition","src":"411:175:15"},{"body":{"id":2628,"nodeType":"Block","src":"646:457:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":2594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2591,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"660:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2592,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"669:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2585_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2593,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"682:7:15","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"669:20:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"660:29:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":2600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2597,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"756:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2598,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"765:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2585_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2599,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"778:16:15","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":2581,"src":"765:29:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"756:38:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":2609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2606,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"865:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2607,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"874:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2585_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2608,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"887:22:15","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":2582,"src":"874:35:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"865:44:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":2618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2615,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"987:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2616,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"996:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2585_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2617,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1009:17:15","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":2583,"src":"996:30:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"987:39:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2624,"nodeType":"IfStatement","src":"983:114:15","trueBody":{"id":2623,"nodeType":"Block","src":"1028:69:15","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":2620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1049:36:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":2619,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1042:6:15","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1042:44:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2622,"nodeType":"ExpressionStatement","src":"1042:44:15"}]}},"id":2625,"nodeType":"IfStatement","src":"861:236:15","trueBody":{"id":2614,"nodeType":"Block","src":"911:66:15","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":2611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"932:33:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":2610,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"925:6:15","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:41:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2613,"nodeType":"ExpressionStatement","src":"925:41:15"}]}},"id":2626,"nodeType":"IfStatement","src":"752:345:15","trueBody":{"id":2605,"nodeType":"Block","src":"796:59:15","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":2602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"817:26:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":2601,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"810:6:15","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"810:34:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2604,"nodeType":"ExpressionStatement","src":"810:34:15"}]}},"id":2627,"nodeType":"IfStatement","src":"656:441:15","trueBody":{"id":2596,"nodeType":"Block","src":"691:55:15","statements":[{"functionReturnParameters":2590,"id":2595,"nodeType":"Return","src":"705:7:15"}]}}]},"id":2629,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"601:11:15","nodeType":"FunctionDefinition","parameters":{"id":2589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2588,"mutability":"mutable","name":"error","nameLocation":"626:5:15","nodeType":"VariableDeclaration","scope":2629,"src":"613:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":2587,"nodeType":"UserDefinedTypeName","pathNode":{"id":2586,"name":"RecoverError","nameLocations":["613:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":2585,"src":"613:12:15"},"referencedDeclaration":2585,"src":"613:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"612:20:15"},"returnParameters":{"id":2590,"nodeType":"ParameterList","parameters":[],"src":"646:0:15"},"scope":2936,"src":"592:511:15","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2674,"nodeType":"Block","src":"2271:626:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2642,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2634,"src":"2285:9:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2295:6:15","memberName":"length","nodeType":"MemberAccess","src":"2285:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":2644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2305:2:15","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2285:22:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2672,"nodeType":"Block","src":"2810:81:15","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2840:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2665,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2832:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2664,"name":"address","nodeType":"ElementaryTypeName","src":"2832:7:15","typeDescriptions":{}}},"id":2667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2832:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2668,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"2844:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2585_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2669,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2857:22:15","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":2582,"src":"2844:35:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":2670,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2831:49:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2585_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":2641,"id":2671,"nodeType":"Return","src":"2824:56:15"}]},"id":2673,"nodeType":"IfStatement","src":"2281:610:15","trueBody":{"id":2663,"nodeType":"Block","src":"2309:495:15","statements":[{"assignments":[2647],"declarations":[{"constant":false,"id":2647,"mutability":"mutable","name":"r","nameLocation":"2331:1:15","nodeType":"VariableDeclaration","scope":2663,"src":"2323:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2646,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2323:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2648,"nodeType":"VariableDeclarationStatement","src":"2323:9:15"},{"assignments":[2650],"declarations":[{"constant":false,"id":2650,"mutability":"mutable","name":"s","nameLocation":"2354:1:15","nodeType":"VariableDeclaration","scope":2663,"src":"2346:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2649,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2346:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2651,"nodeType":"VariableDeclarationStatement","src":"2346:9:15"},{"assignments":[2653],"declarations":[{"constant":false,"id":2653,"mutability":"mutable","name":"v","nameLocation":"2375:1:15","nodeType":"VariableDeclaration","scope":2663,"src":"2369:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2652,"name":"uint8","nodeType":"ElementaryTypeName","src":"2369:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":2654,"nodeType":"VariableDeclarationStatement","src":"2369:7:15"},{"AST":{"nodeType":"YulBlock","src":"2577:171:15","statements":[{"nodeType":"YulAssignment","src":"2595:32:15","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2610:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2621:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2606:3:15"},"nodeType":"YulFunctionCall","src":"2606:20:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2600:5:15"},"nodeType":"YulFunctionCall","src":"2600:27:15"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2595:1:15"}]},{"nodeType":"YulAssignment","src":"2644:32:15","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2659:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2670:4:15","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2655:3:15"},"nodeType":"YulFunctionCall","src":"2655:20:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2649:5:15"},"nodeType":"YulFunctionCall","src":"2649:27:15"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2644:1:15"}]},{"nodeType":"YulAssignment","src":"2693:41:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2703:1:15","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2716:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2727:4:15","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:15"},"nodeType":"YulFunctionCall","src":"2712:20:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2706:5:15"},"nodeType":"YulFunctionCall","src":"2706:27:15"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2698:4:15"},"nodeType":"YulFunctionCall","src":"2698:36:15"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2693:1:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2647,"isOffset":false,"isSlot":false,"src":"2595:1:15","valueSize":1},{"declaration":2650,"isOffset":false,"isSlot":false,"src":"2644:1:15","valueSize":1},{"declaration":2634,"isOffset":false,"isSlot":false,"src":"2610:9:15","valueSize":1},{"declaration":2634,"isOffset":false,"isSlot":false,"src":"2659:9:15","valueSize":1},{"declaration":2634,"isOffset":false,"isSlot":false,"src":"2716:9:15","valueSize":1},{"declaration":2653,"isOffset":false,"isSlot":false,"src":"2693:1:15","valueSize":1}],"id":2655,"nodeType":"InlineAssembly","src":"2568:180:15"},{"expression":{"arguments":[{"id":2657,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2632,"src":"2779:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2658,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2653,"src":"2785:1:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2659,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"2788:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2660,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"2791:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2656,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2675,2749,2843],"referencedDeclaration":2843,"src":"2768:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2585_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":2661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2768:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2585_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":2641,"id":2662,"nodeType":"Return","src":"2761:32:15"}]}}]},"documentation":{"id":2630,"nodeType":"StructuredDocumentation","src":"1109:1053:15","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":2675,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2176:10:15","nodeType":"FunctionDefinition","parameters":{"id":2635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2632,"mutability":"mutable","name":"hash","nameLocation":"2195:4:15","nodeType":"VariableDeclaration","scope":2675,"src":"2187:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2631,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2187:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2634,"mutability":"mutable","name":"signature","nameLocation":"2214:9:15","nodeType":"VariableDeclaration","scope":2675,"src":"2201:22:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2633,"name":"bytes","nodeType":"ElementaryTypeName","src":"2201:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2186:38:15"},"returnParameters":{"id":2641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2637,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2675,"src":"2248:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2636,"name":"address","nodeType":"ElementaryTypeName","src":"2248:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2640,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2675,"src":"2257:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":2639,"nodeType":"UserDefinedTypeName","pathNode":{"id":2638,"name":"RecoverError","nameLocations":["2257:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":2585,"src":"2257:12:15"},"referencedDeclaration":2585,"src":"2257:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"2247:23:15"},"scope":2936,"src":"2167:730:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2701,"nodeType":"Block","src":"3770:140:15","statements":[{"assignments":[2686,2689],"declarations":[{"constant":false,"id":2686,"mutability":"mutable","name":"recovered","nameLocation":"3789:9:15","nodeType":"VariableDeclaration","scope":2701,"src":"3781:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2685,"name":"address","nodeType":"ElementaryTypeName","src":"3781:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2689,"mutability":"mutable","name":"error","nameLocation":"3813:5:15","nodeType":"VariableDeclaration","scope":2701,"src":"3800:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":2688,"nodeType":"UserDefinedTypeName","pathNode":{"id":2687,"name":"RecoverError","nameLocations":["3800:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":2585,"src":"3800:12:15"},"referencedDeclaration":2585,"src":"3800:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":2694,"initialValue":{"arguments":[{"id":2691,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"3833:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2692,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2680,"src":"3839:9:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2690,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2675,2749,2843],"referencedDeclaration":2675,"src":"3822:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$2585_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":2693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:27:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2585_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3780:69:15"},{"expression":{"arguments":[{"id":2696,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"3871:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":2695,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"3859:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$2585_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":2697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3859:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2698,"nodeType":"ExpressionStatement","src":"3859:18:15"},{"expression":{"id":2699,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2686,"src":"3894:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2684,"id":2700,"nodeType":"Return","src":"3887:16:15"}]},"documentation":{"id":2676,"nodeType":"StructuredDocumentation","src":"2903:775:15","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":2702,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3692:7:15","nodeType":"FunctionDefinition","parameters":{"id":2681,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2678,"mutability":"mutable","name":"hash","nameLocation":"3708:4:15","nodeType":"VariableDeclaration","scope":2702,"src":"3700:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2677,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3700:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2680,"mutability":"mutable","name":"signature","nameLocation":"3727:9:15","nodeType":"VariableDeclaration","scope":2702,"src":"3714:22:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2679,"name":"bytes","nodeType":"ElementaryTypeName","src":"3714:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3699:38:15"},"returnParameters":{"id":2684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2683,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2702,"src":"3761:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2682,"name":"address","nodeType":"ElementaryTypeName","src":"3761:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3760:9:15"},"scope":2936,"src":"3683:227:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2748,"nodeType":"Block","src":"4297:203:15","statements":[{"assignments":[2718],"declarations":[{"constant":false,"id":2718,"mutability":"mutable","name":"s","nameLocation":"4315:1:15","nodeType":"VariableDeclaration","scope":2748,"src":"4307:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2717,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4307:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2725,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2719,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"4319:2:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":2722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4332:66:15","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":2721,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4324:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2720,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4324:7:15","typeDescriptions":{}}},"id":2723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4324:75:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4319:80:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4307:92:15"},{"assignments":[2727],"declarations":[{"constant":false,"id":2727,"mutability":"mutable","name":"v","nameLocation":"4415:1:15","nodeType":"VariableDeclaration","scope":2748,"src":"4409:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2726,"name":"uint8","nodeType":"ElementaryTypeName","src":"4409:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":2740,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2732,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"4434:2:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2731,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4426:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2730,"name":"uint256","nodeType":"ElementaryTypeName","src":"4426:7:15","typeDescriptions":{}}},"id":2733,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4426:11:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4441:3:15","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4426:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2736,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4425:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":2737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4448:2:15","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4425:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2729,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4419:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2728,"name":"uint8","nodeType":"ElementaryTypeName","src":"4419:5:15","typeDescriptions":{}}},"id":2739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4419:32:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4409:42:15"},{"expression":{"arguments":[{"id":2742,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2705,"src":"4479:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2743,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2727,"src":"4485:1:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2744,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"4488:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2745,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2718,"src":"4491:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2741,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2675,2749,2843],"referencedDeclaration":2843,"src":"4468:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2585_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":2746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4468:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2585_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":2716,"id":2747,"nodeType":"Return","src":"4461:32:15"}]},"documentation":{"id":2703,"nodeType":"StructuredDocumentation","src":"3916:243:15","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":2749,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4173:10:15","nodeType":"FunctionDefinition","parameters":{"id":2710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2705,"mutability":"mutable","name":"hash","nameLocation":"4201:4:15","nodeType":"VariableDeclaration","scope":2749,"src":"4193:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2704,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4193:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2707,"mutability":"mutable","name":"r","nameLocation":"4223:1:15","nodeType":"VariableDeclaration","scope":2749,"src":"4215:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2706,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4215:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2709,"mutability":"mutable","name":"vs","nameLocation":"4242:2:15","nodeType":"VariableDeclaration","scope":2749,"src":"4234:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2708,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4234:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4183:67:15"},"returnParameters":{"id":2716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2712,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2749,"src":"4274:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2711,"name":"address","nodeType":"ElementaryTypeName","src":"4274:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2715,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2749,"src":"4283:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":2714,"nodeType":"UserDefinedTypeName","pathNode":{"id":2713,"name":"RecoverError","nameLocations":["4283:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":2585,"src":"4283:12:15"},"referencedDeclaration":2585,"src":"4283:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"4273:23:15"},"scope":2936,"src":"4164:336:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2778,"nodeType":"Block","src":"4781:136:15","statements":[{"assignments":[2762,2765],"declarations":[{"constant":false,"id":2762,"mutability":"mutable","name":"recovered","nameLocation":"4800:9:15","nodeType":"VariableDeclaration","scope":2778,"src":"4792:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2761,"name":"address","nodeType":"ElementaryTypeName","src":"4792:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2765,"mutability":"mutable","name":"error","nameLocation":"4824:5:15","nodeType":"VariableDeclaration","scope":2778,"src":"4811:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":2764,"nodeType":"UserDefinedTypeName","pathNode":{"id":2763,"name":"RecoverError","nameLocations":["4811:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":2585,"src":"4811:12:15"},"referencedDeclaration":2585,"src":"4811:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":2771,"initialValue":{"arguments":[{"id":2767,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"4844:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2768,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"4850:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2769,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2756,"src":"4853:2:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2766,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2675,2749,2843],"referencedDeclaration":2749,"src":"4833:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2585_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":2770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4833:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2585_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4791:65:15"},{"expression":{"arguments":[{"id":2773,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"4878:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":2772,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"4866:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$2585_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":2774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4866:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2775,"nodeType":"ExpressionStatement","src":"4866:18:15"},{"expression":{"id":2776,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2762,"src":"4901:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2760,"id":2777,"nodeType":"Return","src":"4894:16:15"}]},"documentation":{"id":2750,"nodeType":"StructuredDocumentation","src":"4506:154:15","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":2779,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4674:7:15","nodeType":"FunctionDefinition","parameters":{"id":2757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2752,"mutability":"mutable","name":"hash","nameLocation":"4699:4:15","nodeType":"VariableDeclaration","scope":2779,"src":"4691:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2751,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4691:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2754,"mutability":"mutable","name":"r","nameLocation":"4721:1:15","nodeType":"VariableDeclaration","scope":2779,"src":"4713:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2753,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4713:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2756,"mutability":"mutable","name":"vs","nameLocation":"4740:2:15","nodeType":"VariableDeclaration","scope":2779,"src":"4732:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2755,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4732:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4681:67:15"},"returnParameters":{"id":2760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2759,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2779,"src":"4772:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2758,"name":"address","nodeType":"ElementaryTypeName","src":"4772:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4771:9:15"},"scope":2936,"src":"4665:252:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2842,"nodeType":"Block","src":"5240:1345:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2798,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2788,"src":"6136:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2797,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6128:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2796,"name":"uint256","nodeType":"ElementaryTypeName","src":"6128:7:15","typeDescriptions":{}}},"id":2799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6128:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":2800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6141:66:15","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6128:79:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2811,"nodeType":"IfStatement","src":"6124:161:15","trueBody":{"id":2810,"nodeType":"Block","src":"6209:76:15","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6239:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2803,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6231:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2802,"name":"address","nodeType":"ElementaryTypeName","src":"6231:7:15","typeDescriptions":{}}},"id":2805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6231:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2806,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"6243:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2585_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2807,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6256:17:15","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":2583,"src":"6243:30:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":2808,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6230:44:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2585_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":2795,"id":2809,"nodeType":"Return","src":"6223:51:15"}]}},{"assignments":[2813],"declarations":[{"constant":false,"id":2813,"mutability":"mutable","name":"signer","nameLocation":"6387:6:15","nodeType":"VariableDeclaration","scope":2842,"src":"6379:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2812,"name":"address","nodeType":"ElementaryTypeName","src":"6379:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2820,"initialValue":{"arguments":[{"id":2815,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2782,"src":"6406:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2816,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2784,"src":"6412:1:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2817,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2786,"src":"6415:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2818,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2788,"src":"6418:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2814,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6396:9:15","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":2819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6396:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6379:41:15"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2821,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2813,"src":"6434:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6452:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2823,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6444:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2822,"name":"address","nodeType":"ElementaryTypeName","src":"6444:7:15","typeDescriptions":{}}},"id":2825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6444:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6434:20:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2836,"nodeType":"IfStatement","src":"6430:101:15","trueBody":{"id":2835,"nodeType":"Block","src":"6456:75:15","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6486:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2828,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6478:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2827,"name":"address","nodeType":"ElementaryTypeName","src":"6478:7:15","typeDescriptions":{}}},"id":2830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6478:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2831,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"6490:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2585_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2832,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6503:16:15","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":2581,"src":"6490:29:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":2833,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6477:43:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2585_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":2795,"id":2834,"nodeType":"Return","src":"6470:50:15"}]}},{"expression":{"components":[{"id":2837,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2813,"src":"6549:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2838,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"6557:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2585_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2839,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6570:7:15","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"6557:20:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":2840,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6548:30:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2585_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":2795,"id":2841,"nodeType":"Return","src":"6541:37:15"}]},"documentation":{"id":2780,"nodeType":"StructuredDocumentation","src":"4923:163:15","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":2843,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5100:10:15","nodeType":"FunctionDefinition","parameters":{"id":2789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2782,"mutability":"mutable","name":"hash","nameLocation":"5128:4:15","nodeType":"VariableDeclaration","scope":2843,"src":"5120:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2781,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5120:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2784,"mutability":"mutable","name":"v","nameLocation":"5148:1:15","nodeType":"VariableDeclaration","scope":2843,"src":"5142:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2783,"name":"uint8","nodeType":"ElementaryTypeName","src":"5142:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2786,"mutability":"mutable","name":"r","nameLocation":"5167:1:15","nodeType":"VariableDeclaration","scope":2843,"src":"5159:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2785,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5159:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2788,"mutability":"mutable","name":"s","nameLocation":"5186:1:15","nodeType":"VariableDeclaration","scope":2843,"src":"5178:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2787,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5178:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5110:83:15"},"returnParameters":{"id":2795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2791,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2843,"src":"5217:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2790,"name":"address","nodeType":"ElementaryTypeName","src":"5217:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2794,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2843,"src":"5226:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":2793,"nodeType":"UserDefinedTypeName","pathNode":{"id":2792,"name":"RecoverError","nameLocations":["5226:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":2585,"src":"5226:12:15"},"referencedDeclaration":2585,"src":"5226:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"5216:23:15"},"scope":2936,"src":"5091:1494:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2875,"nodeType":"Block","src":"6850:138:15","statements":[{"assignments":[2858,2861],"declarations":[{"constant":false,"id":2858,"mutability":"mutable","name":"recovered","nameLocation":"6869:9:15","nodeType":"VariableDeclaration","scope":2875,"src":"6861:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2857,"name":"address","nodeType":"ElementaryTypeName","src":"6861:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2861,"mutability":"mutable","name":"error","nameLocation":"6893:5:15","nodeType":"VariableDeclaration","scope":2875,"src":"6880:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":2860,"nodeType":"UserDefinedTypeName","pathNode":{"id":2859,"name":"RecoverError","nameLocations":["6880:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":2585,"src":"6880:12:15"},"referencedDeclaration":2585,"src":"6880:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":2868,"initialValue":{"arguments":[{"id":2863,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2846,"src":"6913:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2864,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2848,"src":"6919:1:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2865,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2850,"src":"6922:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2866,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2852,"src":"6925:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2862,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2675,2749,2843],"referencedDeclaration":2843,"src":"6902:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2585_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":2867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6902:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2585_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6860:67:15"},{"expression":{"arguments":[{"id":2870,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"6949:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$2585","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":2869,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"6937:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$2585_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":2871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6937:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2872,"nodeType":"ExpressionStatement","src":"6937:18:15"},{"expression":{"id":2873,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2858,"src":"6972:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2856,"id":2874,"nodeType":"Return","src":"6965:16:15"}]},"documentation":{"id":2844,"nodeType":"StructuredDocumentation","src":"6591:122:15","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":2876,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6727:7:15","nodeType":"FunctionDefinition","parameters":{"id":2853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2846,"mutability":"mutable","name":"hash","nameLocation":"6752:4:15","nodeType":"VariableDeclaration","scope":2876,"src":"6744:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2845,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6744:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2848,"mutability":"mutable","name":"v","nameLocation":"6772:1:15","nodeType":"VariableDeclaration","scope":2876,"src":"6766:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2847,"name":"uint8","nodeType":"ElementaryTypeName","src":"6766:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2850,"mutability":"mutable","name":"r","nameLocation":"6791:1:15","nodeType":"VariableDeclaration","scope":2876,"src":"6783:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2849,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6783:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2852,"mutability":"mutable","name":"s","nameLocation":"6810:1:15","nodeType":"VariableDeclaration","scope":2876,"src":"6802:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2851,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6802:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6734:83:15"},"returnParameters":{"id":2856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2855,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2876,"src":"6841:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2854,"name":"address","nodeType":"ElementaryTypeName","src":"6841:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6840:9:15"},"scope":2936,"src":"6718:270:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2892,"nodeType":"Block","src":"7356:187:15","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","id":2887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7494:34:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},"value":"\u0019Ethereum Signed Message:\n32"},{"id":2888,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"7530:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2885,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7477:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2886,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7481:12:15","memberName":"encodePacked","nodeType":"MemberAccess","src":"7477:16:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7477:58:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2884,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7467:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7467:69:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2883,"id":2891,"nodeType":"Return","src":"7460:76:15"}]},"documentation":{"id":2877,"nodeType":"StructuredDocumentation","src":"6994:279:15","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":2893,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7287:22:15","nodeType":"FunctionDefinition","parameters":{"id":2880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2879,"mutability":"mutable","name":"hash","nameLocation":"7318:4:15","nodeType":"VariableDeclaration","scope":2893,"src":"7310:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2878,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7310:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7309:14:15"},"returnParameters":{"id":2883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2882,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2893,"src":"7347:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2881,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7347:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7346:9:15"},"scope":2936,"src":"7278:265:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2914,"nodeType":"Block","src":"7908:127:15","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":2904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7952:32:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":2907,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2896,"src":"8014:1:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8016:6:15","memberName":"length","nodeType":"MemberAccess","src":"8014:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2905,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2575,"src":"7986:18:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$2575_$","typeString":"type(library StringsUpgradeable)"}},"id":2906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8005:8:15","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":2458,"src":"7986:27:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7986:37:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2910,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2896,"src":"8025:1:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2902,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7935:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2903,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7939:12:15","memberName":"encodePacked","nodeType":"MemberAccess","src":"7935:16:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7935:92:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2901,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7925:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7925:103:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2900,"id":2913,"nodeType":"Return","src":"7918:110:15"}]},"documentation":{"id":2894,"nodeType":"StructuredDocumentation","src":"7549:274:15","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":2915,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7837:22:15","nodeType":"FunctionDefinition","parameters":{"id":2897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2896,"mutability":"mutable","name":"s","nameLocation":"7873:1:15","nodeType":"VariableDeclaration","scope":2915,"src":"7860:14:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2895,"name":"bytes","nodeType":"ElementaryTypeName","src":"7860:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7859:16:15"},"returnParameters":{"id":2900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2899,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2915,"src":"7899:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2898,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7899:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7898:9:15"},"scope":2936,"src":"7828:207:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2934,"nodeType":"Block","src":"8476:92:15","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1901","id":2928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8520:10:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},"value":"\u0019\u0001"},{"id":2929,"name":"domainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2918,"src":"8532:15:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2930,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"8549:10:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2926,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8503:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2927,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8507:12:15","memberName":"encodePacked","nodeType":"MemberAccess","src":"8503:16:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8503:57:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2925,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"8493:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8493:68:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2924,"id":2933,"nodeType":"Return","src":"8486:75:15"}]},"documentation":{"id":2916,"nodeType":"StructuredDocumentation","src":"8041:328:15","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":2935,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8383:15:15","nodeType":"FunctionDefinition","parameters":{"id":2921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2918,"mutability":"mutable","name":"domainSeparator","nameLocation":"8407:15:15","nodeType":"VariableDeclaration","scope":2935,"src":"8399:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2917,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8399:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2920,"mutability":"mutable","name":"structHash","nameLocation":"8432:10:15","nodeType":"VariableDeclaration","scope":2935,"src":"8424:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2919,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8424:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8398:45:15"},"returnParameters":{"id":2924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2923,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2935,"src":"8467:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2922,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8467:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8466:9:15"},"scope":2936,"src":"8374:194:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2937,"src":"380:8190:15","usedErrors":[]}],"src":"112:8459:15"},"id":15},"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2284],"ECDSAUpgradeable":[2936],"EIP712Upgradeable":[3086],"Initializable":[577],"MathUpgradeable":[4007],"StringsUpgradeable":[2575]},"id":3087,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2938,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"113:23:16"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","file":"./ECDSAUpgradeable.sol","id":2939,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3087,"sourceUnit":2937,"src":"138:32:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":2940,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3087,"sourceUnit":578,"src":"171:45:16","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2942,"name":"Initializable","nameLocations":["1430:13:16"],"nodeType":"IdentifierPath","referencedDeclaration":577,"src":"1430:13:16"},"id":2943,"nodeType":"InheritanceSpecifier","src":"1430:13:16"}],"canonicalName":"EIP712Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2941,"nodeType":"StructuredDocumentation","src":"218:1172:16","text":" @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n they need in their contracts using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n _Available since v3.4._\n @custom:storage-size 52"},"fullyImplemented":true,"id":3086,"linearizedBaseContracts":[3086,577],"name":"EIP712Upgradeable","nameLocation":"1409:17:16","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":2945,"mutability":"mutable","name":"_HASHED_NAME","nameLocation":"1511:12:16","nodeType":"VariableDeclaration","scope":3086,"src":"1495:28:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2944,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1495:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":2947,"mutability":"mutable","name":"_HASHED_VERSION","nameLocation":"1545:15:16","nodeType":"VariableDeclaration","scope":3086,"src":"1529:31:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2946,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1529:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":true,"id":2952,"mutability":"constant","name":"_TYPE_HASH","nameLocation":"1591:10:16","nodeType":"VariableDeclaration","scope":3086,"src":"1566:133:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2948,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1566:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","id":2950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1614:84:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""},"value":"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""}],"id":2949,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1604:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1604:95:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"body":{"id":2967,"nodeType":"Block","src":"2407:55:16","statements":[{"expression":{"arguments":[{"id":2963,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2955,"src":"2441:4:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2964,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2957,"src":"2447:7:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2962,"name":"__EIP712_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3004,"src":"2417:23:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":2965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2417:38:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2966,"nodeType":"ExpressionStatement","src":"2417:38:16"}]},"documentation":{"id":2953,"nodeType":"StructuredDocumentation","src":"1751:559:16","text":" @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."},"id":2968,"implemented":true,"kind":"function","modifiers":[{"id":2960,"kind":"modifierInvocation","modifierName":{"id":2959,"name":"onlyInitializing","nameLocations":["2390:16:16"],"nodeType":"IdentifierPath","referencedDeclaration":522,"src":"2390:16:16"},"nodeType":"ModifierInvocation","src":"2390:16:16"}],"name":"__EIP712_init","nameLocation":"2324:13:16","nodeType":"FunctionDefinition","parameters":{"id":2958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2955,"mutability":"mutable","name":"name","nameLocation":"2352:4:16","nodeType":"VariableDeclaration","scope":2968,"src":"2338:18:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2954,"name":"string","nodeType":"ElementaryTypeName","src":"2338:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2957,"mutability":"mutable","name":"version","nameLocation":"2372:7:16","nodeType":"VariableDeclaration","scope":2968,"src":"2358:21:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2956,"name":"string","nodeType":"ElementaryTypeName","src":"2358:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2337:43:16"},"returnParameters":{"id":2961,"nodeType":"ParameterList","parameters":[],"src":"2407:0:16"},"scope":3086,"src":"2315:147:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3003,"nodeType":"Block","src":"2570:195:16","statements":[{"assignments":[2978],"declarations":[{"constant":false,"id":2978,"mutability":"mutable","name":"hashedName","nameLocation":"2588:10:16","nodeType":"VariableDeclaration","scope":3003,"src":"2580:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2977,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2580:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2985,"initialValue":{"arguments":[{"arguments":[{"id":2982,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2970,"src":"2617:4:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2981,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2611:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2980,"name":"bytes","nodeType":"ElementaryTypeName","src":"2611:5:16","typeDescriptions":{}}},"id":2983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2611:11:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2979,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2601:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2601:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2580:43:16"},{"assignments":[2987],"declarations":[{"constant":false,"id":2987,"mutability":"mutable","name":"hashedVersion","nameLocation":"2641:13:16","nodeType":"VariableDeclaration","scope":3003,"src":"2633:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2986,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2633:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2994,"initialValue":{"arguments":[{"arguments":[{"id":2991,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2972,"src":"2673:7:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2990,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2667:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2989,"name":"bytes","nodeType":"ElementaryTypeName","src":"2667:5:16","typeDescriptions":{}}},"id":2992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2667:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2988,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2657:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2657:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2633:49:16"},{"expression":{"id":2997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2995,"name":"_HASHED_NAME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2945,"src":"2692:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2996,"name":"hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2978,"src":"2707:10:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2692:25:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2998,"nodeType":"ExpressionStatement","src":"2692:25:16"},{"expression":{"id":3001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2999,"name":"_HASHED_VERSION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2947,"src":"2727:15:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3000,"name":"hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"2745:13:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2727:31:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3002,"nodeType":"ExpressionStatement","src":"2727:31:16"}]},"id":3004,"implemented":true,"kind":"function","modifiers":[{"id":2975,"kind":"modifierInvocation","modifierName":{"id":2974,"name":"onlyInitializing","nameLocations":["2553:16:16"],"nodeType":"IdentifierPath","referencedDeclaration":522,"src":"2553:16:16"},"nodeType":"ModifierInvocation","src":"2553:16:16"}],"name":"__EIP712_init_unchained","nameLocation":"2477:23:16","nodeType":"FunctionDefinition","parameters":{"id":2973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2970,"mutability":"mutable","name":"name","nameLocation":"2515:4:16","nodeType":"VariableDeclaration","scope":3004,"src":"2501:18:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2969,"name":"string","nodeType":"ElementaryTypeName","src":"2501:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2972,"mutability":"mutable","name":"version","nameLocation":"2535:7:16","nodeType":"VariableDeclaration","scope":3004,"src":"2521:21:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2971,"name":"string","nodeType":"ElementaryTypeName","src":"2521:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2500:43:16"},"returnParameters":{"id":2976,"nodeType":"ParameterList","parameters":[],"src":"2570:0:16"},"scope":3086,"src":"2468:297:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3018,"nodeType":"Block","src":"2913:98:16","statements":[{"expression":{"arguments":[{"id":3011,"name":"_TYPE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"2952:10:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":3012,"name":"_EIP712NameHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3071,"src":"2964:15:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":3013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2964:17:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":3014,"name":"_EIP712VersionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3080,"src":"2983:18:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":3015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2983:20:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3010,"name":"_buildDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"2930:21:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32,bytes32) view returns (bytes32)"}},"id":3016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2930:74:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3009,"id":3017,"nodeType":"Return","src":"2923:81:16"}]},"documentation":{"id":3005,"nodeType":"StructuredDocumentation","src":"2771:75:16","text":" @dev Returns the domain separator for the current chain."},"id":3019,"implemented":true,"kind":"function","modifiers":[],"name":"_domainSeparatorV4","nameLocation":"2860:18:16","nodeType":"FunctionDefinition","parameters":{"id":3006,"nodeType":"ParameterList","parameters":[],"src":"2878:2:16"},"returnParameters":{"id":3009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3008,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3019,"src":"2904:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3007,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2904:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2903:9:16"},"scope":3086,"src":"2851:160:16","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3045,"nodeType":"Block","src":"3166:108:16","statements":[{"expression":{"arguments":[{"arguments":[{"id":3033,"name":"typeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3021,"src":"3204:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3034,"name":"nameHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3023,"src":"3214:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3035,"name":"versionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3025,"src":"3224:11:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3036,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3237:5:16","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3243:7:16","memberName":"chainid","nodeType":"MemberAccess","src":"3237:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":3040,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3260:4:16","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712Upgradeable_$3086","typeString":"contract EIP712Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712Upgradeable_$3086","typeString":"contract EIP712Upgradeable"}],"id":3039,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3252:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3038,"name":"address","nodeType":"ElementaryTypeName","src":"3252:7:16","typeDescriptions":{}}},"id":3041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3252:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3031,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3193:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3032,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3197:6:16","memberName":"encode","nodeType":"MemberAccess","src":"3193:10:16","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3193:73:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3030,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3183:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3183:84:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3029,"id":3044,"nodeType":"Return","src":"3176:91:16"}]},"id":3046,"implemented":true,"kind":"function","modifiers":[],"name":"_buildDomainSeparator","nameLocation":"3026:21:16","nodeType":"FunctionDefinition","parameters":{"id":3026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3021,"mutability":"mutable","name":"typeHash","nameLocation":"3065:8:16","nodeType":"VariableDeclaration","scope":3046,"src":"3057:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3020,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3057:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3023,"mutability":"mutable","name":"nameHash","nameLocation":"3091:8:16","nodeType":"VariableDeclaration","scope":3046,"src":"3083:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3022,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3083:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3025,"mutability":"mutable","name":"versionHash","nameLocation":"3117:11:16","nodeType":"VariableDeclaration","scope":3046,"src":"3109:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3024,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3109:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3047:87:16"},"returnParameters":{"id":3029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3028,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3046,"src":"3157:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3027,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3157:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3156:9:16"},"scope":3086,"src":"3017:257:16","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":3061,"nodeType":"Block","src":"3985:90:16","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3056,"name":"_domainSeparatorV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3019,"src":"4035:18:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":3057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4035:20:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3058,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3049,"src":"4057:10:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3054,"name":"ECDSAUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2936,"src":"4002:16:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSAUpgradeable_$2936_$","typeString":"type(library ECDSAUpgradeable)"}},"id":3055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4019:15:16","memberName":"toTypedDataHash","nodeType":"MemberAccess","referencedDeclaration":2935,"src":"4002:32:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":3059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4002:66:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3053,"id":3060,"nodeType":"Return","src":"3995:73:16"}]},"documentation":{"id":3047,"nodeType":"StructuredDocumentation","src":"3280:614:16","text":" @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"},"id":3062,"implemented":true,"kind":"function","modifiers":[],"name":"_hashTypedDataV4","nameLocation":"3908:16:16","nodeType":"FunctionDefinition","parameters":{"id":3050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3049,"mutability":"mutable","name":"structHash","nameLocation":"3933:10:16","nodeType":"VariableDeclaration","scope":3062,"src":"3925:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3048,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3925:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3924:20:16"},"returnParameters":{"id":3053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3052,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3062,"src":"3976:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3051,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3976:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3975:9:16"},"scope":3086,"src":"3899:176:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3070,"nodeType":"Block","src":"4378:36:16","statements":[{"expression":{"id":3068,"name":"_HASHED_NAME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2945,"src":"4395:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3067,"id":3069,"nodeType":"Return","src":"4388:19:16"}]},"documentation":{"id":3063,"nodeType":"StructuredDocumentation","src":"4081:225:16","text":" @dev The hash of the name parameter for the EIP712 domain.\n NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n are a concern."},"id":3071,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712NameHash","nameLocation":"4320:15:16","nodeType":"FunctionDefinition","parameters":{"id":3064,"nodeType":"ParameterList","parameters":[],"src":"4335:2:16"},"returnParameters":{"id":3067,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3066,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3071,"src":"4369:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3065,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4369:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4368:9:16"},"scope":3086,"src":"4311:103:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3079,"nodeType":"Block","src":"4723:39:16","statements":[{"expression":{"id":3077,"name":"_HASHED_VERSION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2947,"src":"4740:15:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3076,"id":3078,"nodeType":"Return","src":"4733:22:16"}]},"documentation":{"id":3072,"nodeType":"StructuredDocumentation","src":"4420:228:16","text":" @dev The hash of the version parameter for the EIP712 domain.\n NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n are a concern."},"id":3080,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712VersionHash","nameLocation":"4662:18:16","nodeType":"FunctionDefinition","parameters":{"id":3073,"nodeType":"ParameterList","parameters":[],"src":"4680:2:16"},"returnParameters":{"id":3076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3075,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3080,"src":"4714:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3074,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4714:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4713:9:16"},"scope":3086,"src":"4653:109:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":3081,"nodeType":"StructuredDocumentation","src":"4768:254:16","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":3085,"mutability":"mutable","name":"__gap","nameLocation":"5047:5:16","nodeType":"VariableDeclaration","scope":3086,"src":"5027:25:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":3082,"name":"uint256","nodeType":"ElementaryTypeName","src":"5027:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3084,"length":{"hexValue":"3530","id":3083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5035:2:16","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"5027:11:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":3087,"src":"1391:3664:16","usedErrors":[]}],"src":"113:4943:16"},"id":16},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2284],"ERC165Upgradeable":[3130],"IERC165Upgradeable":[3142],"Initializable":[577]},"id":3131,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3088,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:17"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","file":"./IERC165Upgradeable.sol","id":3089,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3131,"sourceUnit":3143,"src":"124:34:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":3090,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3131,"sourceUnit":578,"src":"159:45:17","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3092,"name":"Initializable","nameLocations":["822:13:17"],"nodeType":"IdentifierPath","referencedDeclaration":577,"src":"822:13:17"},"id":3093,"nodeType":"InheritanceSpecifier","src":"822:13:17"},{"baseName":{"id":3094,"name":"IERC165Upgradeable","nameLocations":["837:18:17"],"nodeType":"IdentifierPath","referencedDeclaration":3142,"src":"837:18:17"},"id":3095,"nodeType":"InheritanceSpecifier","src":"837:18:17"}],"canonicalName":"ERC165Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3091,"nodeType":"StructuredDocumentation","src":"206:576:17","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":3130,"linearizedBaseContracts":[3130,3142,577],"name":"ERC165Upgradeable","nameLocation":"801:17:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":3100,"nodeType":"Block","src":"913:7:17","statements":[]},"id":3101,"implemented":true,"kind":"function","modifiers":[{"id":3098,"kind":"modifierInvocation","modifierName":{"id":3097,"name":"onlyInitializing","nameLocations":["896:16:17"],"nodeType":"IdentifierPath","referencedDeclaration":522,"src":"896:16:17"},"nodeType":"ModifierInvocation","src":"896:16:17"}],"name":"__ERC165_init","nameLocation":"871:13:17","nodeType":"FunctionDefinition","parameters":{"id":3096,"nodeType":"ParameterList","parameters":[],"src":"884:2:17"},"returnParameters":{"id":3099,"nodeType":"ParameterList","parameters":[],"src":"913:0:17"},"scope":3130,"src":"862:58:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3106,"nodeType":"Block","src":"987:7:17","statements":[]},"id":3107,"implemented":true,"kind":"function","modifiers":[{"id":3104,"kind":"modifierInvocation","modifierName":{"id":3103,"name":"onlyInitializing","nameLocations":["970:16:17"],"nodeType":"IdentifierPath","referencedDeclaration":522,"src":"970:16:17"},"nodeType":"ModifierInvocation","src":"970:16:17"}],"name":"__ERC165_init_unchained","nameLocation":"935:23:17","nodeType":"FunctionDefinition","parameters":{"id":3102,"nodeType":"ParameterList","parameters":[],"src":"958:2:17"},"returnParameters":{"id":3105,"nodeType":"ParameterList","parameters":[],"src":"987:0:17"},"scope":3130,"src":"926:68:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3141],"body":{"id":3123,"nodeType":"Block","src":"1151:75:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3116,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3110,"src":"1168:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3118,"name":"IERC165Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"1188:18:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$3142_$","typeString":"type(contract IERC165Upgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$3142_$","typeString":"type(contract IERC165Upgradeable)"}],"id":3117,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1183:4:17","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1183:24:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165Upgradeable_$3142","typeString":"type(contract IERC165Upgradeable)"}},"id":3120,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1208:11:17","memberName":"interfaceId","nodeType":"MemberAccess","src":"1183:36:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1168:51:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3115,"id":3122,"nodeType":"Return","src":"1161:58:17"}]},"documentation":{"id":3108,"nodeType":"StructuredDocumentation","src":"999:56:17","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":3124,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1069:17:17","nodeType":"FunctionDefinition","overrides":{"id":3112,"nodeType":"OverrideSpecifier","overrides":[],"src":"1127:8:17"},"parameters":{"id":3111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3110,"mutability":"mutable","name":"interfaceId","nameLocation":"1094:11:17","nodeType":"VariableDeclaration","scope":3124,"src":"1087:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3109,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1087:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1086:20:17"},"returnParameters":{"id":3115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3114,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3124,"src":"1145:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3113,"name":"bool","nodeType":"ElementaryTypeName","src":"1145:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1144:6:17"},"scope":3130,"src":"1060:166:17","stateMutability":"view","virtual":true,"visibility":"public"},{"constant":false,"documentation":{"id":3125,"nodeType":"StructuredDocumentation","src":"1232:254:17","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":3129,"mutability":"mutable","name":"__gap","nameLocation":"1511:5:17","nodeType":"VariableDeclaration","scope":3130,"src":"1491:25:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":3126,"name":"uint256","nodeType":"ElementaryTypeName","src":"1491:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3128,"length":{"hexValue":"3530","id":3127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1499:2:17","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1491:11:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":3131,"src":"783:736:17","usedErrors":[]}],"src":"99:1421:17"},"id":17},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","exportedSymbols":{"IERC165Upgradeable":[3142]},"id":3143,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3132,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:18"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":3133,"nodeType":"StructuredDocumentation","src":"125:279:18","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":3142,"linearizedBaseContracts":[3142],"name":"IERC165Upgradeable","nameLocation":"415:18:18","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3134,"nodeType":"StructuredDocumentation","src":"440:340:18","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":3141,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"794:17:18","nodeType":"FunctionDefinition","parameters":{"id":3137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3136,"mutability":"mutable","name":"interfaceId","nameLocation":"819:11:18","nodeType":"VariableDeclaration","scope":3141,"src":"812:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3135,"name":"bytes4","nodeType":"ElementaryTypeName","src":"812:6:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"811:20:18"},"returnParameters":{"id":3140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3139,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3141,"src":"855:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3138,"name":"bool","nodeType":"ElementaryTypeName","src":"855:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"854:6:18"},"scope":3142,"src":"785:76:18","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3143,"src":"405:458:18","usedErrors":[]}],"src":"100:764:18"},"id":18},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[4007]},"id":4008,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3144,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:19"},{"abstract":false,"baseContracts":[],"canonicalName":"MathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":3145,"nodeType":"StructuredDocumentation","src":"128:73:19","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4007,"linearizedBaseContracts":[4007],"name":"MathUpgradeable","nameLocation":"210:15:19","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MathUpgradeable.Rounding","id":3149,"members":[{"id":3146,"name":"Down","nameLocation":"256:4:19","nodeType":"EnumValue","src":"256:4:19"},{"id":3147,"name":"Up","nameLocation":"298:2:19","nodeType":"EnumValue","src":"298:2:19"},{"id":3148,"name":"Zero","nameLocation":"329:4:19","nodeType":"EnumValue","src":"329:4:19"}],"name":"Rounding","nameLocation":"237:8:19","nodeType":"EnumDefinition","src":"232:122:19"},{"body":{"id":3166,"nodeType":"Block","src":"491:37:19","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3159,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"508:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3160,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"512:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"508:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3163,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"520:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"508:13:19","trueExpression":{"id":3162,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"516:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3158,"id":3165,"nodeType":"Return","src":"501:20:19"}]},"documentation":{"id":3150,"nodeType":"StructuredDocumentation","src":"360:59:19","text":" @dev Returns the largest of two numbers."},"id":3167,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"433:3:19","nodeType":"FunctionDefinition","parameters":{"id":3155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3152,"mutability":"mutable","name":"a","nameLocation":"445:1:19","nodeType":"VariableDeclaration","scope":3167,"src":"437:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3151,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3154,"mutability":"mutable","name":"b","nameLocation":"456:1:19","nodeType":"VariableDeclaration","scope":3167,"src":"448:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3153,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"436:22:19"},"returnParameters":{"id":3158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3157,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3167,"src":"482:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3156,"name":"uint256","nodeType":"ElementaryTypeName","src":"482:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"481:9:19"},"scope":4007,"src":"424:104:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3184,"nodeType":"Block","src":"666:37:19","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3177,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3170,"src":"683:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3178,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"687:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"683:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3181,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"695:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"683:13:19","trueExpression":{"id":3180,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3170,"src":"691:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3176,"id":3183,"nodeType":"Return","src":"676:20:19"}]},"documentation":{"id":3168,"nodeType":"StructuredDocumentation","src":"534:60:19","text":" @dev Returns the smallest of two numbers."},"id":3185,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"608:3:19","nodeType":"FunctionDefinition","parameters":{"id":3173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3170,"mutability":"mutable","name":"a","nameLocation":"620:1:19","nodeType":"VariableDeclaration","scope":3185,"src":"612:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3169,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3172,"mutability":"mutable","name":"b","nameLocation":"631:1:19","nodeType":"VariableDeclaration","scope":3185,"src":"623:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3171,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"611:22:19"},"returnParameters":{"id":3176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3175,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3185,"src":"657:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3174,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:9:19"},"scope":4007,"src":"599:104:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3207,"nodeType":"Block","src":"887:82:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3195,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3188,"src":"942:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3196,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3190,"src":"946:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3198,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"941:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3199,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3188,"src":"952:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3200,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3190,"src":"956:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"952:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3202,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"951:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"961:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"951:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3194,"id":3206,"nodeType":"Return","src":"934:28:19"}]},"documentation":{"id":3186,"nodeType":"StructuredDocumentation","src":"709:102:19","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":3208,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"825:7:19","nodeType":"FunctionDefinition","parameters":{"id":3191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3188,"mutability":"mutable","name":"a","nameLocation":"841:1:19","nodeType":"VariableDeclaration","scope":3208,"src":"833:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3187,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3190,"mutability":"mutable","name":"b","nameLocation":"852:1:19","nodeType":"VariableDeclaration","scope":3208,"src":"844:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3189,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:22:19"},"returnParameters":{"id":3194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3193,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3208,"src":"878:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3192,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"877:9:19"},"scope":4007,"src":"816:153:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3232,"nodeType":"Block","src":"1239:123:19","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3218,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3211,"src":"1327:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1332:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1327:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3222,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3211,"src":"1341:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1345:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1341:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3225,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1340:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3226,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3213,"src":"1350:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1340:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1340:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1327:28:19","trueExpression":{"hexValue":"30","id":3221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1336:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3217,"id":3231,"nodeType":"Return","src":"1320:35:19"}]},"documentation":{"id":3209,"nodeType":"StructuredDocumentation","src":"975:188:19","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":3233,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1177:7:19","nodeType":"FunctionDefinition","parameters":{"id":3214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3211,"mutability":"mutable","name":"a","nameLocation":"1193:1:19","nodeType":"VariableDeclaration","scope":3233,"src":"1185:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3210,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3213,"mutability":"mutable","name":"b","nameLocation":"1204:1:19","nodeType":"VariableDeclaration","scope":3233,"src":"1196:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3212,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1184:22:19"},"returnParameters":{"id":3217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3216,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3233,"src":"1230:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3215,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1229:9:19"},"scope":4007,"src":"1168:194:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3354,"nodeType":"Block","src":"1806:3797:19","statements":[{"id":3353,"nodeType":"UncheckedBlock","src":"1816:3781:19","statements":[{"assignments":[3246],"declarations":[{"constant":false,"id":3246,"mutability":"mutable","name":"prod0","nameLocation":"2145:5:19","nodeType":"VariableDeclaration","scope":3353,"src":"2137:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3245,"name":"uint256","nodeType":"ElementaryTypeName","src":"2137:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3247,"nodeType":"VariableDeclarationStatement","src":"2137:13:19"},{"assignments":[3249],"declarations":[{"constant":false,"id":3249,"mutability":"mutable","name":"prod1","nameLocation":"2217:5:19","nodeType":"VariableDeclaration","scope":3353,"src":"2209:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3248,"name":"uint256","nodeType":"ElementaryTypeName","src":"2209:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3250,"nodeType":"VariableDeclarationStatement","src":"2209:13:19"},{"AST":{"nodeType":"YulBlock","src":"2289:157:19","statements":[{"nodeType":"YulVariableDeclaration","src":"2307:30:19","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2324:1:19"},{"name":"y","nodeType":"YulIdentifier","src":"2327:1:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2334:1:19","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2330:3:19"},"nodeType":"YulFunctionCall","src":"2330:6:19"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2317:6:19"},"nodeType":"YulFunctionCall","src":"2317:20:19"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2311:2:19","type":""}]},{"nodeType":"YulAssignment","src":"2354:18:19","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2367:1:19"},{"name":"y","nodeType":"YulIdentifier","src":"2370:1:19"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2363:3:19"},"nodeType":"YulFunctionCall","src":"2363:9:19"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2354:5:19"}]},{"nodeType":"YulAssignment","src":"2389:43:19","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2406:2:19"},{"name":"prod0","nodeType":"YulIdentifier","src":"2410:5:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2402:3:19"},"nodeType":"YulFunctionCall","src":"2402:14:19"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2421:2:19"},{"name":"prod0","nodeType":"YulIdentifier","src":"2425:5:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2418:2:19"},"nodeType":"YulFunctionCall","src":"2418:13:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2398:3:19"},"nodeType":"YulFunctionCall","src":"2398:34:19"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2389:5:19"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3246,"isOffset":false,"isSlot":false,"src":"2354:5:19","valueSize":1},{"declaration":3246,"isOffset":false,"isSlot":false,"src":"2410:5:19","valueSize":1},{"declaration":3246,"isOffset":false,"isSlot":false,"src":"2425:5:19","valueSize":1},{"declaration":3249,"isOffset":false,"isSlot":false,"src":"2389:5:19","valueSize":1},{"declaration":3236,"isOffset":false,"isSlot":false,"src":"2324:1:19","valueSize":1},{"declaration":3236,"isOffset":false,"isSlot":false,"src":"2367:1:19","valueSize":1},{"declaration":3238,"isOffset":false,"isSlot":false,"src":"2327:1:19","valueSize":1},{"declaration":3238,"isOffset":false,"isSlot":false,"src":"2370:1:19","valueSize":1}],"id":3251,"nodeType":"InlineAssembly","src":"2280:166:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3252,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"2527:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2536:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2527:10:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3260,"nodeType":"IfStatement","src":"2523:75:19","trueBody":{"id":3259,"nodeType":"Block","src":"2539:59:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3255,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"2564:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3256,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3240,"src":"2572:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2564:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3244,"id":3258,"nodeType":"Return","src":"2557:26:19"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3262,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3240,"src":"2708:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3263,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"2722:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2708:19:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3261,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2700:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2700:28:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3266,"nodeType":"ExpressionStatement","src":"2700:28:19"},{"assignments":[3268],"declarations":[{"constant":false,"id":3268,"mutability":"mutable","name":"remainder","nameLocation":"2992:9:19","nodeType":"VariableDeclaration","scope":3353,"src":"2984:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3267,"name":"uint256","nodeType":"ElementaryTypeName","src":"2984:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3269,"nodeType":"VariableDeclarationStatement","src":"2984:17:19"},{"AST":{"nodeType":"YulBlock","src":"3024:291:19","statements":[{"nodeType":"YulAssignment","src":"3093:38:19","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3113:1:19"},{"name":"y","nodeType":"YulIdentifier","src":"3116:1:19"},{"name":"denominator","nodeType":"YulIdentifier","src":"3119:11:19"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3106:6:19"},"nodeType":"YulFunctionCall","src":"3106:25:19"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3093:9:19"}]},{"nodeType":"YulAssignment","src":"3213:41:19","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3226:5:19"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3236:9:19"},{"name":"prod0","nodeType":"YulIdentifier","src":"3247:5:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3233:2:19"},"nodeType":"YulFunctionCall","src":"3233:20:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3222:3:19"},"nodeType":"YulFunctionCall","src":"3222:32:19"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3213:5:19"}]},{"nodeType":"YulAssignment","src":"3271:30:19","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3284:5:19"},{"name":"remainder","nodeType":"YulIdentifier","src":"3291:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3280:3:19"},"nodeType":"YulFunctionCall","src":"3280:21:19"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3271:5:19"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3240,"isOffset":false,"isSlot":false,"src":"3119:11:19","valueSize":1},{"declaration":3246,"isOffset":false,"isSlot":false,"src":"3247:5:19","valueSize":1},{"declaration":3246,"isOffset":false,"isSlot":false,"src":"3271:5:19","valueSize":1},{"declaration":3246,"isOffset":false,"isSlot":false,"src":"3284:5:19","valueSize":1},{"declaration":3249,"isOffset":false,"isSlot":false,"src":"3213:5:19","valueSize":1},{"declaration":3249,"isOffset":false,"isSlot":false,"src":"3226:5:19","valueSize":1},{"declaration":3268,"isOffset":false,"isSlot":false,"src":"3093:9:19","valueSize":1},{"declaration":3268,"isOffset":false,"isSlot":false,"src":"3236:9:19","valueSize":1},{"declaration":3268,"isOffset":false,"isSlot":false,"src":"3291:9:19","valueSize":1},{"declaration":3236,"isOffset":false,"isSlot":false,"src":"3113:1:19","valueSize":1},{"declaration":3238,"isOffset":false,"isSlot":false,"src":"3116:1:19","valueSize":1}],"id":3270,"nodeType":"InlineAssembly","src":"3015:300:19"},{"assignments":[3272],"declarations":[{"constant":false,"id":3272,"mutability":"mutable","name":"twos","nameLocation":"3630:4:19","nodeType":"VariableDeclaration","scope":3353,"src":"3622:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3271,"name":"uint256","nodeType":"ElementaryTypeName","src":"3622:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3280,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3273,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3240,"src":"3637:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3652:12:19","subExpression":{"id":3274,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3240,"src":"3653:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3667:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3652:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3278,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3651:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3637:32:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3622:47:19"},{"AST":{"nodeType":"YulBlock","src":"3692:362:19","statements":[{"nodeType":"YulAssignment","src":"3757:37:19","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3776:11:19"},{"name":"twos","nodeType":"YulIdentifier","src":"3789:4:19"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3772:3:19"},"nodeType":"YulFunctionCall","src":"3772:22:19"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3757:11:19"}]},{"nodeType":"YulAssignment","src":"3861:25:19","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3874:5:19"},{"name":"twos","nodeType":"YulIdentifier","src":"3881:4:19"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3870:3:19"},"nodeType":"YulFunctionCall","src":"3870:16:19"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3861:5:19"}]},{"nodeType":"YulAssignment","src":"4001:39:19","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4021:1:19","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4024:4:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4017:3:19"},"nodeType":"YulFunctionCall","src":"4017:12:19"},{"name":"twos","nodeType":"YulIdentifier","src":"4031:4:19"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4013:3:19"},"nodeType":"YulFunctionCall","src":"4013:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"4038:1:19","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4009:3:19"},"nodeType":"YulFunctionCall","src":"4009:31:19"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4001:4:19"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3240,"isOffset":false,"isSlot":false,"src":"3757:11:19","valueSize":1},{"declaration":3240,"isOffset":false,"isSlot":false,"src":"3776:11:19","valueSize":1},{"declaration":3246,"isOffset":false,"isSlot":false,"src":"3861:5:19","valueSize":1},{"declaration":3246,"isOffset":false,"isSlot":false,"src":"3874:5:19","valueSize":1},{"declaration":3272,"isOffset":false,"isSlot":false,"src":"3789:4:19","valueSize":1},{"declaration":3272,"isOffset":false,"isSlot":false,"src":"3881:4:19","valueSize":1},{"declaration":3272,"isOffset":false,"isSlot":false,"src":"4001:4:19","valueSize":1},{"declaration":3272,"isOffset":false,"isSlot":false,"src":"4024:4:19","valueSize":1},{"declaration":3272,"isOffset":false,"isSlot":false,"src":"4031:4:19","valueSize":1}],"id":3281,"nodeType":"InlineAssembly","src":"3683:371:19"},{"expression":{"id":3286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3282,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"4120:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3283,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"4129:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3284,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"4137:4:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4129:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4120:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3287,"nodeType":"ExpressionStatement","src":"4120:21:19"},{"assignments":[3289],"declarations":[{"constant":false,"id":3289,"mutability":"mutable","name":"inverse","nameLocation":"4467:7:19","nodeType":"VariableDeclaration","scope":3353,"src":"4459:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3288,"name":"uint256","nodeType":"ElementaryTypeName","src":"4459:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3296,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4478:1:19","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3291,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3240,"src":"4482:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4478:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3293,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4477:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":3294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4497:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4477:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4459:39:19"},{"expression":{"id":3303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3297,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"4715:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4726:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3299,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3240,"src":"4730:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3300,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"4744:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4730:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4726:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3304,"nodeType":"ExpressionStatement","src":"4715:36:19"},{"expression":{"id":3311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3305,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"4784:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4795:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3307,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3240,"src":"4799:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3308,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"4813:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4799:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4795:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3312,"nodeType":"ExpressionStatement","src":"4784:36:19"},{"expression":{"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3313,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"4854:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4865:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3315,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3240,"src":"4869:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3316,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"4883:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4869:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4865:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3320,"nodeType":"ExpressionStatement","src":"4854:36:19"},{"expression":{"id":3327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3321,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"4924:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4935:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3323,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3240,"src":"4939:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3324,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"4953:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4939:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4935:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3328,"nodeType":"ExpressionStatement","src":"4924:36:19"},{"expression":{"id":3335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3329,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"4994:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5005:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3331,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3240,"src":"5009:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3332,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"5023:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5009:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5005:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3336,"nodeType":"ExpressionStatement","src":"4994:36:19"},{"expression":{"id":3343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3337,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"5065:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5076:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3339,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3240,"src":"5080:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3340,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"5094:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5080:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3344,"nodeType":"ExpressionStatement","src":"5065:36:19"},{"expression":{"id":3349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3345,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3243,"src":"5535:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3346,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"5544:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3347,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"5552:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5544:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5535:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3350,"nodeType":"ExpressionStatement","src":"5535:24:19"},{"expression":{"id":3351,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3243,"src":"5580:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3244,"id":3352,"nodeType":"Return","src":"5573:13:19"}]}]},"documentation":{"id":3234,"nodeType":"StructuredDocumentation","src":"1368:305:19","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":3355,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1687:6:19","nodeType":"FunctionDefinition","parameters":{"id":3241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3236,"mutability":"mutable","name":"x","nameLocation":"1711:1:19","nodeType":"VariableDeclaration","scope":3355,"src":"1703:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3235,"name":"uint256","nodeType":"ElementaryTypeName","src":"1703:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3238,"mutability":"mutable","name":"y","nameLocation":"1730:1:19","nodeType":"VariableDeclaration","scope":3355,"src":"1722:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3237,"name":"uint256","nodeType":"ElementaryTypeName","src":"1722:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3240,"mutability":"mutable","name":"denominator","nameLocation":"1749:11:19","nodeType":"VariableDeclaration","scope":3355,"src":"1741:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3239,"name":"uint256","nodeType":"ElementaryTypeName","src":"1741:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1693:73:19"},"returnParameters":{"id":3244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3243,"mutability":"mutable","name":"result","nameLocation":"1798:6:19","nodeType":"VariableDeclaration","scope":3355,"src":"1790:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3242,"name":"uint256","nodeType":"ElementaryTypeName","src":"1790:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1789:16:19"},"scope":4007,"src":"1678:3925:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3398,"nodeType":"Block","src":"5883:189:19","statements":[{"assignments":[3371],"declarations":[{"constant":false,"id":3371,"mutability":"mutable","name":"result","nameLocation":"5901:6:19","nodeType":"VariableDeclaration","scope":3398,"src":"5893:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3370,"name":"uint256","nodeType":"ElementaryTypeName","src":"5893:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3377,"initialValue":{"arguments":[{"id":3373,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3358,"src":"5917:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3374,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3360,"src":"5920:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3375,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3362,"src":"5923:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3372,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[3355,3399],"referencedDeclaration":3355,"src":"5910:6:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5910:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5893:42:19"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"},"id":3381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3378,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"5949:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3379,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3149,"src":"5961:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3149_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3380,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5970:2:19","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3147,"src":"5961:11:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"}},"src":"5949:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3383,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3358,"src":"5983:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3384,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3360,"src":"5986:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3385,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3362,"src":"5989:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3382,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5976:6:19","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5976:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6004:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5976:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5949:56:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3395,"nodeType":"IfStatement","src":"5945:98:19","trueBody":{"id":3394,"nodeType":"Block","src":"6007:36:19","statements":[{"expression":{"id":3392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3390,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"6021:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6031:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6021:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3393,"nodeType":"ExpressionStatement","src":"6021:11:19"}]}},{"expression":{"id":3396,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"6059:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3369,"id":3397,"nodeType":"Return","src":"6052:13:19"}]},"documentation":{"id":3356,"nodeType":"StructuredDocumentation","src":"5609:121:19","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":3399,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5744:6:19","nodeType":"FunctionDefinition","parameters":{"id":3366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3358,"mutability":"mutable","name":"x","nameLocation":"5768:1:19","nodeType":"VariableDeclaration","scope":3399,"src":"5760:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3357,"name":"uint256","nodeType":"ElementaryTypeName","src":"5760:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3360,"mutability":"mutable","name":"y","nameLocation":"5787:1:19","nodeType":"VariableDeclaration","scope":3399,"src":"5779:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3359,"name":"uint256","nodeType":"ElementaryTypeName","src":"5779:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3362,"mutability":"mutable","name":"denominator","nameLocation":"5806:11:19","nodeType":"VariableDeclaration","scope":3399,"src":"5798:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3361,"name":"uint256","nodeType":"ElementaryTypeName","src":"5798:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3365,"mutability":"mutable","name":"rounding","nameLocation":"5836:8:19","nodeType":"VariableDeclaration","scope":3399,"src":"5827:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3364,"nodeType":"UserDefinedTypeName","pathNode":{"id":3363,"name":"Rounding","nameLocations":["5827:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":3149,"src":"5827:8:19"},"referencedDeclaration":3149,"src":"5827:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"5750:100:19"},"returnParameters":{"id":3369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3368,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3399,"src":"5874:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3367,"name":"uint256","nodeType":"ElementaryTypeName","src":"5874:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5873:9:19"},"scope":4007,"src":"5735:337:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3510,"nodeType":"Block","src":"6348:1585:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3407,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"6362:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6367:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6362:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3413,"nodeType":"IfStatement","src":"6358:45:19","trueBody":{"id":3412,"nodeType":"Block","src":"6370:33:19","statements":[{"expression":{"hexValue":"30","id":3410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6391:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3406,"id":3411,"nodeType":"Return","src":"6384:8:19"}]}},{"assignments":[3415],"declarations":[{"constant":false,"id":3415,"mutability":"mutable","name":"result","nameLocation":"7090:6:19","nodeType":"VariableDeclaration","scope":3510,"src":"7082:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3414,"name":"uint256","nodeType":"ElementaryTypeName","src":"7082:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3424,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7099:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3418,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"7110:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3417,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3679,3715],"referencedDeclaration":3679,"src":"7105:4:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7105:7:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7116:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7105:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3422,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7104:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7099:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7082:36:19"},{"id":3509,"nodeType":"UncheckedBlock","src":"7519:408:19","statements":[{"expression":{"id":3434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3425,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"7543:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3426,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"7553:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3427,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"7562:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3428,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"7566:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7562:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7553:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3431,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7552:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7577:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7552:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7543:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3435,"nodeType":"ExpressionStatement","src":"7543:35:19"},{"expression":{"id":3445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3436,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"7592:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3437,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"7602:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3438,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"7611:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3439,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"7615:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7611:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7602:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3442,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7601:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7626:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7601:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7592:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3446,"nodeType":"ExpressionStatement","src":"7592:35:19"},{"expression":{"id":3456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3447,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"7641:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3448,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"7651:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3449,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"7660:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3450,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"7664:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7660:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7651:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3453,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7650:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7675:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7650:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7641:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3457,"nodeType":"ExpressionStatement","src":"7641:35:19"},{"expression":{"id":3467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3458,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"7690:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3459,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"7700:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3460,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"7709:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3461,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"7713:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7709:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7700:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3464,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7699:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7724:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7699:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7690:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3468,"nodeType":"ExpressionStatement","src":"7690:35:19"},{"expression":{"id":3478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3469,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"7739:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3470,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"7749:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3471,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"7758:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3472,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"7762:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7758:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7749:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3475,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7748:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7773:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7748:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7739:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3479,"nodeType":"ExpressionStatement","src":"7739:35:19"},{"expression":{"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3480,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"7788:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3481,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"7798:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3482,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"7807:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3483,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"7811:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7807:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7798:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3486,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7797:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7822:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7797:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7788:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3490,"nodeType":"ExpressionStatement","src":"7788:35:19"},{"expression":{"id":3500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3491,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"7837:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3492,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"7847:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3493,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"7856:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3494,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"7860:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7856:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7847:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3497,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7846:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7871:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7846:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7837:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3501,"nodeType":"ExpressionStatement","src":"7837:35:19"},{"expression":{"arguments":[{"id":3503,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"7897:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3504,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"7905:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3505,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"7909:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7905:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3502,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3185,"src":"7893:3:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7893:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3406,"id":3508,"nodeType":"Return","src":"7886:30:19"}]}]},"documentation":{"id":3400,"nodeType":"StructuredDocumentation","src":"6078:208:19","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":3511,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6300:4:19","nodeType":"FunctionDefinition","parameters":{"id":3403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3402,"mutability":"mutable","name":"a","nameLocation":"6313:1:19","nodeType":"VariableDeclaration","scope":3511,"src":"6305:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3401,"name":"uint256","nodeType":"ElementaryTypeName","src":"6305:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6304:11:19"},"returnParameters":{"id":3406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3405,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3511,"src":"6339:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3404,"name":"uint256","nodeType":"ElementaryTypeName","src":"6339:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6338:9:19"},"scope":4007,"src":"6291:1642:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3546,"nodeType":"Block","src":"8109:161:19","statements":[{"id":3545,"nodeType":"UncheckedBlock","src":"8119:145:19","statements":[{"assignments":[3523],"declarations":[{"constant":false,"id":3523,"mutability":"mutable","name":"result","nameLocation":"8151:6:19","nodeType":"VariableDeclaration","scope":3545,"src":"8143:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3522,"name":"uint256","nodeType":"ElementaryTypeName","src":"8143:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3527,"initialValue":{"arguments":[{"id":3525,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"8165:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3524,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[3511,3547],"referencedDeclaration":3511,"src":"8160:4:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8160:7:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8143:24:19"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3528,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3523,"src":"8188:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"},"id":3532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3529,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3517,"src":"8198:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3530,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3149,"src":"8210:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3149_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3531,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8219:2:19","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3147,"src":"8210:11:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"}},"src":"8198:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3533,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3523,"src":"8225:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3534,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3523,"src":"8234:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8225:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3536,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"8243:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8225:19:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8198:46:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8251:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8198:54:19","trueExpression":{"hexValue":"31","id":3539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8247:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3542,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8197:56:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8188:65:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3521,"id":3544,"nodeType":"Return","src":"8181:72:19"}]}]},"documentation":{"id":3512,"nodeType":"StructuredDocumentation","src":"7939:89:19","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":3547,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8042:4:19","nodeType":"FunctionDefinition","parameters":{"id":3518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3514,"mutability":"mutable","name":"a","nameLocation":"8055:1:19","nodeType":"VariableDeclaration","scope":3547,"src":"8047:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3513,"name":"uint256","nodeType":"ElementaryTypeName","src":"8047:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3517,"mutability":"mutable","name":"rounding","nameLocation":"8067:8:19","nodeType":"VariableDeclaration","scope":3547,"src":"8058:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3516,"nodeType":"UserDefinedTypeName","pathNode":{"id":3515,"name":"Rounding","nameLocations":["8058:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":3149,"src":"8058:8:19"},"referencedDeclaration":3149,"src":"8058:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"8046:30:19"},"returnParameters":{"id":3521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3520,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3547,"src":"8100:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3519,"name":"uint256","nodeType":"ElementaryTypeName","src":"8100:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8099:9:19"},"scope":4007,"src":"8033:237:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3678,"nodeType":"Block","src":"8455:922:19","statements":[{"assignments":[3556],"declarations":[{"constant":false,"id":3556,"mutability":"mutable","name":"result","nameLocation":"8473:6:19","nodeType":"VariableDeclaration","scope":3678,"src":"8465:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3555,"name":"uint256","nodeType":"ElementaryTypeName","src":"8465:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3558,"initialValue":{"hexValue":"30","id":3557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8482:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8465:18:19"},{"id":3675,"nodeType":"UncheckedBlock","src":"8493:855:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3559,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"8521:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8530:3:19","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8521:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8536:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8521:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3573,"nodeType":"IfStatement","src":"8517:99:19","trueBody":{"id":3572,"nodeType":"Block","src":"8539:77:19","statements":[{"expression":{"id":3566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3564,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"8557:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8567:3:19","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8557:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3567,"nodeType":"ExpressionStatement","src":"8557:13:19"},{"expression":{"id":3570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3568,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"8588:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":3569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8598:3:19","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8588:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3571,"nodeType":"ExpressionStatement","src":"8588:13:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3574,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"8633:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8642:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8633:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8647:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8633:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3588,"nodeType":"IfStatement","src":"8629:96:19","trueBody":{"id":3587,"nodeType":"Block","src":"8650:75:19","statements":[{"expression":{"id":3581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3579,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"8668:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3580,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8678:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8668:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3582,"nodeType":"ExpressionStatement","src":"8668:12:19"},{"expression":{"id":3585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3583,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"8698:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8708:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8698:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3586,"nodeType":"ExpressionStatement","src":"8698:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3589,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"8742:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8751:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8742:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8756:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8742:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3603,"nodeType":"IfStatement","src":"8738:96:19","trueBody":{"id":3602,"nodeType":"Block","src":"8759:75:19","statements":[{"expression":{"id":3596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3594,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"8777:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8787:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8777:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3597,"nodeType":"ExpressionStatement","src":"8777:12:19"},{"expression":{"id":3600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3598,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"8807:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8817:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8807:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3601,"nodeType":"ExpressionStatement","src":"8807:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3604,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"8851:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8860:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8851:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8865:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8851:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3618,"nodeType":"IfStatement","src":"8847:96:19","trueBody":{"id":3617,"nodeType":"Block","src":"8868:75:19","statements":[{"expression":{"id":3611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3609,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"8886:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8896:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8886:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3612,"nodeType":"ExpressionStatement","src":"8886:12:19"},{"expression":{"id":3615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3613,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"8916:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8926:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8916:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3616,"nodeType":"ExpressionStatement","src":"8916:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3619,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"8960:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8969:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8960:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8973:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8960:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3633,"nodeType":"IfStatement","src":"8956:93:19","trueBody":{"id":3632,"nodeType":"Block","src":"8976:73:19","statements":[{"expression":{"id":3626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3624,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"8994:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":3625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9004:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8994:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3627,"nodeType":"ExpressionStatement","src":"8994:11:19"},{"expression":{"id":3630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3628,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"9023:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9033:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9023:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3631,"nodeType":"ExpressionStatement","src":"9023:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3634,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"9066:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":3635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9075:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9066:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9079:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9066:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3648,"nodeType":"IfStatement","src":"9062:93:19","trueBody":{"id":3647,"nodeType":"Block","src":"9082:73:19","statements":[{"expression":{"id":3641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3639,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"9100:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9110:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9100:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3642,"nodeType":"ExpressionStatement","src":"9100:11:19"},{"expression":{"id":3645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3643,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"9129:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9139:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9129:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3646,"nodeType":"ExpressionStatement","src":"9129:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3649,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"9172:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":3650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9181:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9172:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9185:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9172:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3663,"nodeType":"IfStatement","src":"9168:93:19","trueBody":{"id":3662,"nodeType":"Block","src":"9188:73:19","statements":[{"expression":{"id":3656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3654,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"9206:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":3655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9216:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9206:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3657,"nodeType":"ExpressionStatement","src":"9206:11:19"},{"expression":{"id":3660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3658,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"9235:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9245:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9235:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3661,"nodeType":"ExpressionStatement","src":"9235:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3664,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"9278:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9287:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9278:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9291:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9278:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3674,"nodeType":"IfStatement","src":"9274:64:19","trueBody":{"id":3673,"nodeType":"Block","src":"9294:44:19","statements":[{"expression":{"id":3671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3669,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"9312:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9322:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9312:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3672,"nodeType":"ExpressionStatement","src":"9312:11:19"}]}}]},{"expression":{"id":3676,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"9364:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3554,"id":3677,"nodeType":"Return","src":"9357:13:19"}]},"documentation":{"id":3548,"nodeType":"StructuredDocumentation","src":"8276:113:19","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3679,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8403:4:19","nodeType":"FunctionDefinition","parameters":{"id":3551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3550,"mutability":"mutable","name":"value","nameLocation":"8416:5:19","nodeType":"VariableDeclaration","scope":3679,"src":"8408:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3549,"name":"uint256","nodeType":"ElementaryTypeName","src":"8408:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8407:15:19"},"returnParameters":{"id":3554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3553,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3679,"src":"8446:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3552,"name":"uint256","nodeType":"ElementaryTypeName","src":"8446:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8445:9:19"},"scope":4007,"src":"8394:983:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3714,"nodeType":"Block","src":"9610:165:19","statements":[{"id":3713,"nodeType":"UncheckedBlock","src":"9620:149:19","statements":[{"assignments":[3691],"declarations":[{"constant":false,"id":3691,"mutability":"mutable","name":"result","nameLocation":"9652:6:19","nodeType":"VariableDeclaration","scope":3713,"src":"9644:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3690,"name":"uint256","nodeType":"ElementaryTypeName","src":"9644:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3695,"initialValue":{"arguments":[{"id":3693,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3682,"src":"9666:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3692,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3679,3715],"referencedDeclaration":3679,"src":"9661:4:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9661:11:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9644:28:19"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3696,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"9693:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"},"id":3700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3697,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3685,"src":"9703:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3698,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3149,"src":"9715:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3149_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3699,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9724:2:19","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3147,"src":"9715:11:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"}},"src":"9703:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9730:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":3702,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"9735:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9730:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3704,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3682,"src":"9744:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9730:19:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9703:46:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9756:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9703:54:19","trueExpression":{"hexValue":"31","id":3707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9752:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3710,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9702:56:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9693:65:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3689,"id":3712,"nodeType":"Return","src":"9686:72:19"}]}]},"documentation":{"id":3680,"nodeType":"StructuredDocumentation","src":"9383:142:19","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3715,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9539:4:19","nodeType":"FunctionDefinition","parameters":{"id":3686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3682,"mutability":"mutable","name":"value","nameLocation":"9552:5:19","nodeType":"VariableDeclaration","scope":3715,"src":"9544:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3681,"name":"uint256","nodeType":"ElementaryTypeName","src":"9544:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3685,"mutability":"mutable","name":"rounding","nameLocation":"9568:8:19","nodeType":"VariableDeclaration","scope":3715,"src":"9559:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3684,"nodeType":"UserDefinedTypeName","pathNode":{"id":3683,"name":"Rounding","nameLocations":["9559:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":3149,"src":"9559:8:19"},"referencedDeclaration":3149,"src":"9559:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"9543:34:19"},"returnParameters":{"id":3689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3688,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3715,"src":"9601:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3687,"name":"uint256","nodeType":"ElementaryTypeName","src":"9601:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9600:9:19"},"scope":4007,"src":"9530:245:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3843,"nodeType":"Block","src":"9962:828:19","statements":[{"assignments":[3724],"declarations":[{"constant":false,"id":3724,"mutability":"mutable","name":"result","nameLocation":"9980:6:19","nodeType":"VariableDeclaration","scope":3843,"src":"9972:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3723,"name":"uint256","nodeType":"ElementaryTypeName","src":"9972:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3726,"initialValue":{"hexValue":"30","id":3725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9989:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9972:18:19"},{"id":3840,"nodeType":"UncheckedBlock","src":"10000:761:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3727,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"10028:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3730,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10037:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10041:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10037:6:19","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10028:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3743,"nodeType":"IfStatement","src":"10024:99:19","trueBody":{"id":3742,"nodeType":"Block","src":"10045:78:19","statements":[{"expression":{"id":3736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3732,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"10063:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3735,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10072:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10076:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10072:6:19","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10063:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3737,"nodeType":"ExpressionStatement","src":"10063:15:19"},{"expression":{"id":3740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3738,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3724,"src":"10096:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10106:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10096:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3741,"nodeType":"ExpressionStatement","src":"10096:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3744,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"10140:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3747,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10149:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10153:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10149:6:19","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10140:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3760,"nodeType":"IfStatement","src":"10136:99:19","trueBody":{"id":3759,"nodeType":"Block","src":"10157:78:19","statements":[{"expression":{"id":3753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3749,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"10175:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3752,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10184:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10188:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10184:6:19","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10175:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3754,"nodeType":"ExpressionStatement","src":"10175:15:19"},{"expression":{"id":3757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3755,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3724,"src":"10208:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10218:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10208:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3758,"nodeType":"ExpressionStatement","src":"10208:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3761,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"10252:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3764,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10261:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10265:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10261:6:19","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10252:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3777,"nodeType":"IfStatement","src":"10248:99:19","trueBody":{"id":3776,"nodeType":"Block","src":"10269:78:19","statements":[{"expression":{"id":3770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3766,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"10287:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3769,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10296:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10300:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10296:6:19","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10287:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3771,"nodeType":"ExpressionStatement","src":"10287:15:19"},{"expression":{"id":3774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3772,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3724,"src":"10320:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10330:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10320:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3775,"nodeType":"ExpressionStatement","src":"10320:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3778,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"10364:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3781,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10373:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10377:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10373:5:19","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10364:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3794,"nodeType":"IfStatement","src":"10360:96:19","trueBody":{"id":3793,"nodeType":"Block","src":"10380:76:19","statements":[{"expression":{"id":3787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3783,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"10398:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3786,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10407:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10411:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10407:5:19","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10398:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3788,"nodeType":"ExpressionStatement","src":"10398:14:19"},{"expression":{"id":3791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3789,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3724,"src":"10430:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10440:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10430:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3792,"nodeType":"ExpressionStatement","src":"10430:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3795,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"10473:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3798,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10482:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10486:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10482:5:19","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10473:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3811,"nodeType":"IfStatement","src":"10469:96:19","trueBody":{"id":3810,"nodeType":"Block","src":"10489:76:19","statements":[{"expression":{"id":3804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3800,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"10507:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3803,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10516:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10520:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10516:5:19","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10507:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3805,"nodeType":"ExpressionStatement","src":"10507:14:19"},{"expression":{"id":3808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3806,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3724,"src":"10539:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10549:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10539:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3809,"nodeType":"ExpressionStatement","src":"10539:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3812,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"10582:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3815,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10591:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10595:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10591:5:19","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10582:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3828,"nodeType":"IfStatement","src":"10578:96:19","trueBody":{"id":3827,"nodeType":"Block","src":"10598:76:19","statements":[{"expression":{"id":3821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3817,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"10616:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3820,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10625:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10629:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10625:5:19","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10616:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3822,"nodeType":"ExpressionStatement","src":"10616:14:19"},{"expression":{"id":3825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3823,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3724,"src":"10648:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10658:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10648:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3826,"nodeType":"ExpressionStatement","src":"10648:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3829,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"10691:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":3832,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10700:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":3831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10704:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10700:5:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10691:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3839,"nodeType":"IfStatement","src":"10687:64:19","trueBody":{"id":3838,"nodeType":"Block","src":"10707:44:19","statements":[{"expression":{"id":3836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3834,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3724,"src":"10725:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10735:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10725:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3837,"nodeType":"ExpressionStatement","src":"10725:11:19"}]}}]},{"expression":{"id":3841,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3724,"src":"10777:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3722,"id":3842,"nodeType":"Return","src":"10770:13:19"}]},"documentation":{"id":3716,"nodeType":"StructuredDocumentation","src":"9781:114:19","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3844,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9909:5:19","nodeType":"FunctionDefinition","parameters":{"id":3719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3718,"mutability":"mutable","name":"value","nameLocation":"9923:5:19","nodeType":"VariableDeclaration","scope":3844,"src":"9915:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3717,"name":"uint256","nodeType":"ElementaryTypeName","src":"9915:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9914:15:19"},"returnParameters":{"id":3722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3721,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3844,"src":"9953:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3720,"name":"uint256","nodeType":"ElementaryTypeName","src":"9953:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9952:9:19"},"scope":4007,"src":"9900:890:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3879,"nodeType":"Block","src":"11025:165:19","statements":[{"id":3878,"nodeType":"UncheckedBlock","src":"11035:149:19","statements":[{"assignments":[3856],"declarations":[{"constant":false,"id":3856,"mutability":"mutable","name":"result","nameLocation":"11067:6:19","nodeType":"VariableDeclaration","scope":3878,"src":"11059:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3855,"name":"uint256","nodeType":"ElementaryTypeName","src":"11059:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3860,"initialValue":{"arguments":[{"id":3858,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3847,"src":"11082:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3857,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[3844,3880],"referencedDeclaration":3844,"src":"11076:5:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11076:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11059:29:19"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3861,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"11109:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"},"id":3865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3862,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3850,"src":"11119:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3863,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3149,"src":"11131:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3149_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3864,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11140:2:19","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3147,"src":"11131:11:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"}},"src":"11119:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11146:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":3867,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"11150:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11146:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3869,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3847,"src":"11159:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11146:18:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11119:45:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11171:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11119:53:19","trueExpression":{"hexValue":"31","id":3872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11167:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3875,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11118:55:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11109:64:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3854,"id":3877,"nodeType":"Return","src":"11102:71:19"}]}]},"documentation":{"id":3845,"nodeType":"StructuredDocumentation","src":"10796:143:19","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3880,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10953:5:19","nodeType":"FunctionDefinition","parameters":{"id":3851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3847,"mutability":"mutable","name":"value","nameLocation":"10967:5:19","nodeType":"VariableDeclaration","scope":3880,"src":"10959:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3846,"name":"uint256","nodeType":"ElementaryTypeName","src":"10959:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3850,"mutability":"mutable","name":"rounding","nameLocation":"10983:8:19","nodeType":"VariableDeclaration","scope":3880,"src":"10974:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3849,"nodeType":"UserDefinedTypeName","pathNode":{"id":3848,"name":"Rounding","nameLocations":["10974:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":3149,"src":"10974:8:19"},"referencedDeclaration":3149,"src":"10974:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"10958:34:19"},"returnParameters":{"id":3854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3853,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3880,"src":"11016:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3852,"name":"uint256","nodeType":"ElementaryTypeName","src":"11016:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11015:9:19"},"scope":4007,"src":"10944:246:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3966,"nodeType":"Block","src":"11504:600:19","statements":[{"assignments":[3889],"declarations":[{"constant":false,"id":3889,"mutability":"mutable","name":"result","nameLocation":"11522:6:19","nodeType":"VariableDeclaration","scope":3966,"src":"11514:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3888,"name":"uint256","nodeType":"ElementaryTypeName","src":"11514:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3891,"initialValue":{"hexValue":"30","id":3890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11531:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11514:18:19"},{"id":3963,"nodeType":"UncheckedBlock","src":"11542:533:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3892,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"11570:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11579:3:19","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11570:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11585:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11570:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3906,"nodeType":"IfStatement","src":"11566:98:19","trueBody":{"id":3905,"nodeType":"Block","src":"11588:76:19","statements":[{"expression":{"id":3899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3897,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"11606:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11616:3:19","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11606:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3900,"nodeType":"ExpressionStatement","src":"11606:13:19"},{"expression":{"id":3903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3901,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3889,"src":"11637:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11647:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11637:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3904,"nodeType":"ExpressionStatement","src":"11637:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3907,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"11681:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11690:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11681:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11695:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11681:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3921,"nodeType":"IfStatement","src":"11677:95:19","trueBody":{"id":3920,"nodeType":"Block","src":"11698:74:19","statements":[{"expression":{"id":3914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3912,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"11716:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11726:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11716:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3915,"nodeType":"ExpressionStatement","src":"11716:12:19"},{"expression":{"id":3918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3916,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3889,"src":"11746:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11756:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11746:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3919,"nodeType":"ExpressionStatement","src":"11746:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3922,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"11789:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11789:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11803:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11789:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3936,"nodeType":"IfStatement","src":"11785:95:19","trueBody":{"id":3935,"nodeType":"Block","src":"11806:74:19","statements":[{"expression":{"id":3929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3927,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"11824:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11834:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11824:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3930,"nodeType":"ExpressionStatement","src":"11824:12:19"},{"expression":{"id":3933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3931,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3889,"src":"11854:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11864:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11854:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3934,"nodeType":"ExpressionStatement","src":"11854:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3937,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"11897:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11906:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11897:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11911:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11897:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3951,"nodeType":"IfStatement","src":"11893:95:19","trueBody":{"id":3950,"nodeType":"Block","src":"11914:74:19","statements":[{"expression":{"id":3944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3942,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"11932:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11942:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11932:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3945,"nodeType":"ExpressionStatement","src":"11932:12:19"},{"expression":{"id":3948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3946,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3889,"src":"11962:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11972:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11962:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3949,"nodeType":"ExpressionStatement","src":"11962:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3952,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"12005:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12014:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12005:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12018:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12005:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3962,"nodeType":"IfStatement","src":"12001:64:19","trueBody":{"id":3961,"nodeType":"Block","src":"12021:44:19","statements":[{"expression":{"id":3959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3957,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3889,"src":"12039:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12049:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12039:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3960,"nodeType":"ExpressionStatement","src":"12039:11:19"}]}}]},{"expression":{"id":3964,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3889,"src":"12091:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3887,"id":3965,"nodeType":"Return","src":"12084:13:19"}]},"documentation":{"id":3881,"nodeType":"StructuredDocumentation","src":"11196:240:19","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":3967,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11450:6:19","nodeType":"FunctionDefinition","parameters":{"id":3884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3883,"mutability":"mutable","name":"value","nameLocation":"11465:5:19","nodeType":"VariableDeclaration","scope":3967,"src":"11457:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3882,"name":"uint256","nodeType":"ElementaryTypeName","src":"11457:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11456:15:19"},"returnParameters":{"id":3887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3886,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3967,"src":"11495:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3885,"name":"uint256","nodeType":"ElementaryTypeName","src":"11495:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11494:9:19"},"scope":4007,"src":"11441:663:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4005,"nodeType":"Block","src":"12340:173:19","statements":[{"id":4004,"nodeType":"UncheckedBlock","src":"12350:157:19","statements":[{"assignments":[3979],"declarations":[{"constant":false,"id":3979,"mutability":"mutable","name":"result","nameLocation":"12382:6:19","nodeType":"VariableDeclaration","scope":4004,"src":"12374:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3978,"name":"uint256","nodeType":"ElementaryTypeName","src":"12374:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3983,"initialValue":{"arguments":[{"id":3981,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3970,"src":"12398:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3980,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[3967,4006],"referencedDeclaration":3967,"src":"12391:6:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12391:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12374:30:19"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3984,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3979,"src":"12425:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"},"id":3988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3985,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3973,"src":"12435:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3986,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3149,"src":"12447:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3149_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3987,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12456:2:19","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3147,"src":"12447:11:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"}},"src":"12435:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12462:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3990,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3979,"src":"12468:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":3991,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12477:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12468:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3993,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12467:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12462:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3995,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3970,"src":"12482:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12462:25:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12435:52:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12494:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12435:60:19","trueExpression":{"hexValue":"31","id":3998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12490:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4001,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12434:62:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12425:71:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3977,"id":4003,"nodeType":"Return","src":"12418:78:19"}]}]},"documentation":{"id":3968,"nodeType":"StructuredDocumentation","src":"12110:143:19","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4006,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12267:6:19","nodeType":"FunctionDefinition","parameters":{"id":3974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3970,"mutability":"mutable","name":"value","nameLocation":"12282:5:19","nodeType":"VariableDeclaration","scope":4006,"src":"12274:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3969,"name":"uint256","nodeType":"ElementaryTypeName","src":"12274:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3973,"mutability":"mutable","name":"rounding","nameLocation":"12298:8:19","nodeType":"VariableDeclaration","scope":4006,"src":"12289:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3972,"nodeType":"UserDefinedTypeName","pathNode":{"id":3971,"name":"Rounding","nameLocations":["12289:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":3149,"src":"12289:8:19"},"referencedDeclaration":3149,"src":"12289:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3149","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"12273:34:19"},"returnParameters":{"id":3977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3976,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4006,"src":"12331:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3975,"name":"uint256","nodeType":"ElementaryTypeName","src":"12331:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12330:9:19"},"scope":4007,"src":"12258:255:19","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4008,"src":"202:12313:19","usedErrors":[]}],"src":"103:12413:19"},"id":19},"contracts/BaseUpgradeablePausable.sol":{"ast":{"absolutePath":"contracts/BaseUpgradeablePausable.sol","exportedSymbols":{"AccessControlUpgradeable":[335],"AddressUpgradeable":[2284],"BaseUpgradeablePausable":[4109],"BaseUpgradeablePausable__ZeroAddressError":[4016],"Constants":[4138],"ContextUpgradeable":[2326],"ERC165Upgradeable":[3130],"IAccessControlUpgradeable":[408],"IERC165Upgradeable":[3142],"Initializable":[577],"MathUpgradeable":[4007],"PausableUpgradeable":[704],"ReentrancyGuardUpgradeable":[777],"StringsUpgradeable":[2575]},"id":4110,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4009,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"33:23:20"},{"absolutePath":"contracts/Constants.sol","file":"./Constants.sol","id":4010,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4110,"sourceUnit":4139,"src":"58:25:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":4011,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4110,"sourceUnit":578,"src":"85:75:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","id":4012,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4110,"sourceUnit":705,"src":"161:78:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","id":4013,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4110,"sourceUnit":336,"src":"240:81:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","id":4014,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4110,"sourceUnit":778,"src":"322:85:20","symbolAliases":[],"unitAlias":""},{"errorSelector":"54151394","id":4016,"name":"BaseUpgradeablePausable__ZeroAddressError","nameLocation":"415:41:20","nodeType":"ErrorDefinition","parameters":{"id":4015,"nodeType":"ParameterList","parameters":[],"src":"456:2:20"},"src":"409:50:20"},{"abstract":false,"baseContracts":[{"baseName":{"id":4017,"name":"Initializable","nameLocations":["502:13:20"],"nodeType":"IdentifierPath","referencedDeclaration":577,"src":"502:13:20"},"id":4018,"nodeType":"InheritanceSpecifier","src":"502:13:20"},{"baseName":{"id":4019,"name":"PausableUpgradeable","nameLocations":["522:19:20"],"nodeType":"IdentifierPath","referencedDeclaration":704,"src":"522:19:20"},"id":4020,"nodeType":"InheritanceSpecifier","src":"522:19:20"},{"baseName":{"id":4021,"name":"AccessControlUpgradeable","nameLocations":["548:24:20"],"nodeType":"IdentifierPath","referencedDeclaration":335,"src":"548:24:20"},"id":4022,"nodeType":"InheritanceSpecifier","src":"548:24:20"},{"baseName":{"id":4023,"name":"ReentrancyGuardUpgradeable","nameLocations":["578:26:20"],"nodeType":"IdentifierPath","referencedDeclaration":777,"src":"578:26:20"},"id":4024,"nodeType":"InheritanceSpecifier","src":"578:26:20"}],"canonicalName":"BaseUpgradeablePausable","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4109,"linearizedBaseContracts":[4109,777,335,3130,3142,408,704,2326,577],"name":"BaseUpgradeablePausable","nameLocation":"470:23:20","nodeType":"ContractDefinition","nodes":[{"body":{"id":4033,"nodeType":"Block","src":"634:94:20","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4027,"name":"isAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4108,"src":"652:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":4028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"652:9:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d75737420686176652061646d696e20726f6c6520746f20706572666f726d207468697320616374696f6e2e","id":4029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"663:46:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","typeString":"literal_string \"Must have admin role to perform this action.\""},"value":"Must have admin role to perform this action."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","typeString":"literal_string \"Must have admin role to perform this action.\""}],"id":4026,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"644:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"644:66:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4031,"nodeType":"ExpressionStatement","src":"644:66:20"},{"id":4032,"nodeType":"PlaceholderStatement","src":"720:1:20"}]},"id":4034,"name":"onlyAdmin","nameLocation":"622:9:20","nodeType":"ModifierDefinition","parameters":{"id":4025,"nodeType":"ParameterList","parameters":[],"src":"631:2:20"},"src":"613:115:20","virtual":false,"visibility":"internal"},{"body":{"id":4093,"nodeType":"Block","src":"815:468:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4041,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4036,"src":"828:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"845:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4043,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"837:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4042,"name":"address","nodeType":"ElementaryTypeName","src":"837:7:20","typeDescriptions":{}}},"id":4045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"837:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"828:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4051,"nodeType":"IfStatement","src":"825:99:20","trueBody":{"id":4050,"nodeType":"Block","src":"849:75:20","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4047,"name":"BaseUpgradeablePausable__ZeroAddressError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"870:41:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4048,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"870:43:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4049,"nodeType":"RevertStatement","src":"863:50:20"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4052,"name":"__Pausable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"933:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"933:17:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4054,"nodeType":"ExpressionStatement","src":"933:17:20"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4055,"name":"__AccessControl_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"960:20:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"960:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4057,"nodeType":"ExpressionStatement","src":"960:22:20"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4058,"name":"__ReentrancyGuard_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"992:22:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"992:24:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4060,"nodeType":"ExpressionStatement","src":"992:24:20"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4062,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"1038:9:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$4138_$","typeString":"type(library Constants)"}},"id":4063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1048:12:20","memberName":"getAdminRole","nodeType":"MemberAccess","referencedDeclaration":4129,"src":"1038:22:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":4064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1038:24:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4065,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4036,"src":"1064:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4061,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"1027:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1027:43:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4067,"nodeType":"ExpressionStatement","src":"1027:43:20"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4069,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"1091:9:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$4138_$","typeString":"type(library Constants)"}},"id":4070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1101:13:20","memberName":"getPauserRole","nodeType":"MemberAccess","referencedDeclaration":4137,"src":"1091:23:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":4071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1091:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4072,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4036,"src":"1118:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4068,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"1080:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4073,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1080:44:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4074,"nodeType":"ExpressionStatement","src":"1080:44:20"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4076,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"1149:9:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$4138_$","typeString":"type(library Constants)"}},"id":4077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1159:13:20","memberName":"getPauserRole","nodeType":"MemberAccess","referencedDeclaration":4137,"src":"1149:23:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":4078,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1149:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4079,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"1176:9:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$4138_$","typeString":"type(library Constants)"}},"id":4080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1186:12:20","memberName":"getAdminRole","nodeType":"MemberAccess","referencedDeclaration":4129,"src":"1176:22:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":4081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1176:24:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4075,"name":"_setRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"1135:13:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32)"}},"id":4082,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1135:66:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4083,"nodeType":"ExpressionStatement","src":"1135:66:20"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4085,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"1225:9:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$4138_$","typeString":"type(library Constants)"}},"id":4086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1235:12:20","memberName":"getAdminRole","nodeType":"MemberAccess","referencedDeclaration":4129,"src":"1225:22:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":4087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1225:24:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4088,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"1251:9:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$4138_$","typeString":"type(library Constants)"}},"id":4089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1261:12:20","memberName":"getAdminRole","nodeType":"MemberAccess","referencedDeclaration":4129,"src":"1251:22:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":4090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1251:24:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4084,"name":"_setRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"1211:13:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32)"}},"id":4091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1211:65:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4092,"nodeType":"ExpressionStatement","src":"1211:65:20"}]},"functionSelector":"6e810b1a","id":4094,"implemented":true,"kind":"function","modifiers":[{"arguments":[],"id":4039,"kind":"modifierInvocation","modifierName":{"id":4038,"name":"onlyInitializing","nameLocations":["796:16:20"],"nodeType":"IdentifierPath","referencedDeclaration":522,"src":"796:16:20"},"nodeType":"ModifierInvocation","src":"796:18:20"}],"name":"__BaseUpgradeablePausable_init","nameLocation":"743:30:20","nodeType":"FunctionDefinition","parameters":{"id":4037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4036,"mutability":"mutable","name":"owner","nameLocation":"782:5:20","nodeType":"VariableDeclaration","scope":4094,"src":"774:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4035,"name":"address","nodeType":"ElementaryTypeName","src":"774:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"773:15:20"},"returnParameters":{"id":4040,"nodeType":"ParameterList","parameters":[],"src":"815:0:20"},"scope":4109,"src":"734:549:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4107,"nodeType":"Block","src":"1335:71:20","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4100,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"1360:9:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$4138_$","typeString":"type(library Constants)"}},"id":4101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1370:12:20","memberName":"getAdminRole","nodeType":"MemberAccess","referencedDeclaration":4129,"src":"1360:22:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":4102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1360:24:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":4103,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"1386:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1386:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4099,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"1352:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":4105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1352:47:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4098,"id":4106,"nodeType":"Return","src":"1345:54:20"}]},"functionSelector":"b6db75a0","id":4108,"implemented":true,"kind":"function","modifiers":[],"name":"isAdmin","nameLocation":"1298:7:20","nodeType":"FunctionDefinition","parameters":{"id":4095,"nodeType":"ParameterList","parameters":[],"src":"1305:2:20"},"returnParameters":{"id":4098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4097,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4108,"src":"1329:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4096,"name":"bool","nodeType":"ElementaryTypeName","src":"1329:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1328:6:20"},"scope":4109,"src":"1289:117:20","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":4110,"src":"461:951:20","usedErrors":[4016]}],"src":"33:1379:20"},"id":20},"contracts/Constants.sol":{"ast":{"absolutePath":"contracts/Constants.sol","exportedSymbols":{"Constants":[4138]},"id":4139,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":4111,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"37:23:21"},{"abstract":false,"baseContracts":[],"canonicalName":"Constants","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":4138,"linearizedBaseContracts":[4138],"name":"Constants","nameLocation":"70:9:21","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"75b238fc","id":4116,"mutability":"constant","name":"ADMIN_ROLE","nameLocation":"111:10:21","nodeType":"VariableDeclaration","scope":4138,"src":"87:60:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4112,"name":"bytes32","nodeType":"ElementaryTypeName","src":"87:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"41444d494e5f524f4c45","id":4114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"134:12:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""},"value":"ADMIN_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""}],"id":4113,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"124:9:21","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"124:23:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"e63ab1e9","id":4121,"mutability":"constant","name":"PAUSER_ROLE","nameLocation":"177:11:21","nodeType":"VariableDeclaration","scope":4138,"src":"153:62:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4117,"name":"bytes32","nodeType":"ElementaryTypeName","src":"153:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5041555345525f524f4c45","id":4119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"201:13:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a","typeString":"literal_string \"PAUSER_ROLE\""},"value":"PAUSER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a","typeString":"literal_string \"PAUSER_ROLE\""}],"id":4118,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"191:9:21","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"191:24:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"body":{"id":4128,"nodeType":"Block","src":"278:34:21","statements":[{"expression":{"id":4126,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4116,"src":"295:10:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4125,"id":4127,"nodeType":"Return","src":"288:17:21"}]},"id":4129,"implemented":true,"kind":"function","modifiers":[],"name":"getAdminRole","nameLocation":"231:12:21","nodeType":"FunctionDefinition","parameters":{"id":4122,"nodeType":"ParameterList","parameters":[],"src":"243:2:21"},"returnParameters":{"id":4125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4124,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4129,"src":"269:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4123,"name":"bytes32","nodeType":"ElementaryTypeName","src":"269:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"268:9:21"},"scope":4138,"src":"222:90:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4136,"nodeType":"Block","src":"375:35:21","statements":[{"expression":{"id":4134,"name":"PAUSER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4121,"src":"392:11:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4133,"id":4135,"nodeType":"Return","src":"385:18:21"}]},"id":4137,"implemented":true,"kind":"function","modifiers":[],"name":"getPauserRole","nameLocation":"327:13:21","nodeType":"FunctionDefinition","parameters":{"id":4130,"nodeType":"ParameterList","parameters":[],"src":"340:2:21"},"returnParameters":{"id":4133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4132,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4137,"src":"366:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4131,"name":"bytes32","nodeType":"ElementaryTypeName","src":"366:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"365:9:21"},"scope":4138,"src":"318:92:21","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4139,"src":"62:350:21","usedErrors":[]}],"src":"37:375:21"},"id":21},"contracts/core/payAsYouGo/ConstantFlowAgreement.sol":{"ast":{"absolutePath":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol","exportedSymbols":{"AccessControlUpgradeable":[335],"AddressUpgradeable":[2284],"BaseUpgradeablePausable":[4109],"BaseUpgradeablePausable__ZeroAddressError":[4016],"ConstantFlowAgreement":[5705],"Constants":[4138],"ContextUpgradeable":[2326],"ERC165Upgradeable":[3130],"IAccessControlUpgradeable":[408],"ICFA":[6135],"IERC165Upgradeable":[3142],"IERC20Extended":[6160],"IERC20PermitUpgradeable":[1719],"IERC20Upgradeable":[1467],"IInsuranceRegistry":[6279],"Initializable":[577],"MathUpgradeable":[4007],"PausableUpgradeable":[704],"ReentrancyGuardUpgradeable":[777],"SafeERC20Upgradeable":[2000],"StringsUpgradeable":[2575]},"id":5706,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":4140,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"37:23:22"},{"absolutePath":"contracts/interfaces/ICFA.sol","file":"./../../interfaces/ICFA.sol","id":4141,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5706,"sourceUnit":6136,"src":"192:37:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IERC20Extended.sol","file":"./../../interfaces/IERC20Extended.sol","id":4142,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5706,"sourceUnit":6161,"src":"230:47:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IInsuranceRegistry.sol","file":"./../../interfaces/IInsuranceRegistry.sol","id":4143,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5706,"sourceUnit":6280,"src":"278:51:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","id":4144,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5706,"sourceUnit":2001,"src":"364:88:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/BaseUpgradeablePausable.sol","file":"./../../BaseUpgradeablePausable.sol","id":4145,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5706,"sourceUnit":4110,"src":"487:45:22","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4147,"name":"ICFA","nameLocations":["654:4:22"],"nodeType":"IdentifierPath","referencedDeclaration":6135,"src":"654:4:22"},"id":4148,"nodeType":"InheritanceSpecifier","src":"654:4:22"},{"baseName":{"id":4149,"name":"BaseUpgradeablePausable","nameLocations":["660:23:22"],"nodeType":"IdentifierPath","referencedDeclaration":4109,"src":"660:23:22"},"id":4150,"nodeType":"InheritanceSpecifier","src":"660:23:22"}],"canonicalName":"ConstantFlowAgreement","contractDependencies":[],"contractKind":"contract","documentation":{"id":4146,"nodeType":"StructuredDocumentation","src":"534:85:22","text":"Report any bug or issues at:\n @custom:security-contact anshik@safezen.finance"},"fullyImplemented":true,"id":5705,"linearizedBaseContracts":[5705,4109,777,335,3130,3142,408,704,2326,577,6135],"name":"ConstantFlowAgreement","nameLocation":"629:21:22","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":4151,"nodeType":"StructuredDocumentation","src":"690:471:22","text":"_initVersion: counter to initialize the init one-time function, max value can be 1.\n _categoriesCount: counter to keep track of the available insurance categories.\n _maxInsuredDays: the maximum insurance period [in days], 90 days will be kept as default.\n _startWaitingTime: insurance activation waiting period, 4-8 hours will be kept as default.\n _minimumInsurancePeriod: the minimum insurance period, 120 minutes will be kept as default."},"id":4153,"mutability":"mutable","name":"_categoriesCount","nameLocation":"1182:16:22","nodeType":"VariableDeclaration","scope":5705,"src":"1166:32:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4152,"name":"uint256","nodeType":"ElementaryTypeName","src":"1166:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":4155,"mutability":"mutable","name":"_maxInsuredDays","nameLocation":"1220:15:22","nodeType":"VariableDeclaration","scope":5705,"src":"1204:31:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4154,"name":"uint256","nodeType":"ElementaryTypeName","src":"1204:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":4157,"mutability":"mutable","name":"_startWaitingTime","nameLocation":"1257:17:22","nodeType":"VariableDeclaration","scope":5705,"src":"1241:33:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4156,"name":"uint256","nodeType":"ElementaryTypeName","src":"1241:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":4159,"mutability":"mutable","name":"_minimumInsurancePeriod","nameLocation":"1296:23:22","nodeType":"VariableDeclaration","scope":5705,"src":"1280:39:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4158,"name":"uint256","nodeType":"ElementaryTypeName","src":"1280:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"global":false,"id":4163,"libraryName":{"id":4160,"name":"SafeERC20Upgradeable","nameLocations":["1332:20:22"],"nodeType":"IdentifierPath","referencedDeclaration":2000,"src":"1332:20:22"},"nodeType":"UsingForDirective","src":"1326:49:22","typeName":{"id":4162,"nodeType":"UserDefinedTypeName","pathNode":{"id":4161,"name":"IERC20Upgradeable","nameLocations":["1357:17:22"],"nodeType":"IdentifierPath","referencedDeclaration":1467,"src":"1357:17:22"},"referencedDeclaration":1467,"src":"1357:17:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}}},{"global":false,"id":4167,"libraryName":{"id":4164,"name":"SafeERC20Upgradeable","nameLocations":["1386:20:22"],"nodeType":"IdentifierPath","referencedDeclaration":2000,"src":"1386:20:22"},"nodeType":"UsingForDirective","src":"1380:55:22","typeName":{"id":4166,"nodeType":"UserDefinedTypeName","pathNode":{"id":4165,"name":"IERC20PermitUpgradeable","nameLocations":["1411:23:22"],"nodeType":"IdentifierPath","referencedDeclaration":1719,"src":"1411:23:22"},"referencedDeclaration":1719,"src":"1411:23:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1719","typeString":"contract IERC20PermitUpgradeable"}}},{"constant":false,"documentation":{"id":4168,"nodeType":"StructuredDocumentation","src":"1441:122:22","text":"_tokenDAI: DAI ERC20 token\n _sztDAI: sztDAI ERC20 token\n _insuranceRegistry: Insurance Registry Contract"},"id":4171,"mutability":"mutable","name":"_tokenDAI","nameLocation":"1594:9:22","nodeType":"VariableDeclaration","scope":5705,"src":"1568:35:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"},"typeName":{"id":4170,"nodeType":"UserDefinedTypeName","pathNode":{"id":4169,"name":"IERC20Upgradeable","nameLocations":["1568:17:22"],"nodeType":"IdentifierPath","referencedDeclaration":1467,"src":"1568:17:22"},"referencedDeclaration":1467,"src":"1568:17:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}},"visibility":"private"},{"constant":false,"id":4174,"mutability":"mutable","name":"_tokenPermitDAI","nameLocation":"1641:15:22","nodeType":"VariableDeclaration","scope":5705,"src":"1609:47:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1719","typeString":"contract IERC20PermitUpgradeable"},"typeName":{"id":4173,"nodeType":"UserDefinedTypeName","pathNode":{"id":4172,"name":"IERC20PermitUpgradeable","nameLocations":["1609:23:22"],"nodeType":"IdentifierPath","referencedDeclaration":1719,"src":"1609:23:22"},"referencedDeclaration":1719,"src":"1609:23:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1719","typeString":"contract IERC20PermitUpgradeable"}},"visibility":"private"},{"constant":false,"id":4177,"mutability":"mutable","name":"_sztDAI","nameLocation":"1685:7:22","nodeType":"VariableDeclaration","scope":5705,"src":"1662:30:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Extended_$6160","typeString":"contract IERC20Extended"},"typeName":{"id":4176,"nodeType":"UserDefinedTypeName","pathNode":{"id":4175,"name":"IERC20Extended","nameLocations":["1662:14:22"],"nodeType":"IdentifierPath","referencedDeclaration":6160,"src":"1662:14:22"},"referencedDeclaration":6160,"src":"1662:14:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Extended_$6160","typeString":"contract IERC20Extended"}},"visibility":"private"},{"constant":false,"id":4180,"mutability":"mutable","name":"_insuranceRegistry","nameLocation":"1725:18:22","nodeType":"VariableDeclaration","scope":5705,"src":"1698:45:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$6279","typeString":"contract IInsuranceRegistry"},"typeName":{"id":4179,"nodeType":"UserDefinedTypeName","pathNode":{"id":4178,"name":"IInsuranceRegistry","nameLocations":["1698:18:22"],"nodeType":"IdentifierPath","referencedDeclaration":6279,"src":"1698:18:22"},"referencedDeclaration":6279,"src":"1698:18:22","typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$6279","typeString":"contract IInsuranceRegistry"}},"visibility":"private"},{"canonicalName":"ConstantFlowAgreement.UserInsuranceInfo","id":4195,"members":[{"constant":false,"id":4182,"mutability":"mutable","name":"startTime","nameLocation":"2367:9:22","nodeType":"VariableDeclaration","scope":4195,"src":"2359:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4181,"name":"uint256","nodeType":"ElementaryTypeName","src":"2359:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4184,"mutability":"mutable","name":"validTill","nameLocation":"2394:9:22","nodeType":"VariableDeclaration","scope":4195,"src":"2386:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4183,"name":"uint256","nodeType":"ElementaryTypeName","src":"2386:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4186,"mutability":"mutable","name":"insuredAmount","nameLocation":"2421:13:22","nodeType":"VariableDeclaration","scope":4195,"src":"2413:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4185,"name":"uint256","nodeType":"ElementaryTypeName","src":"2413:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4188,"mutability":"mutable","name":"registrationTime","nameLocation":"2452:16:22","nodeType":"VariableDeclaration","scope":4195,"src":"2444:24:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4187,"name":"uint256","nodeType":"ElementaryTypeName","src":"2444:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4190,"mutability":"mutable","name":"insuranceFlowRate","nameLocation":"2486:17:22","nodeType":"VariableDeclaration","scope":4195,"src":"2478:25:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4189,"name":"uint256","nodeType":"ElementaryTypeName","src":"2478:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4192,"mutability":"mutable","name":"insuranceCost","nameLocation":"2521:13:22","nodeType":"VariableDeclaration","scope":4195,"src":"2513:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4191,"name":"uint256","nodeType":"ElementaryTypeName","src":"2513:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4194,"mutability":"mutable","name":"isValid","nameLocation":"2549:7:22","nodeType":"VariableDeclaration","scope":4195,"src":"2544:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4193,"name":"bool","nodeType":"ElementaryTypeName","src":"2544:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"UserInsuranceInfo","nameLocation":"2331:17:22","nodeType":"StructDefinition","scope":5705,"src":"2324:239:22","visibility":"public"},{"canonicalName":"ConstantFlowAgreement.UserGlobalInsuranceInfo","id":4202,"members":[{"constant":false,"id":4197,"mutability":"mutable","name":"validTill","nameLocation":"2909:9:22","nodeType":"VariableDeclaration","scope":4202,"src":"2901:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4196,"name":"uint256","nodeType":"ElementaryTypeName","src":"2901:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4199,"mutability":"mutable","name":"insuranceStreamRate","nameLocation":"2936:19:22","nodeType":"VariableDeclaration","scope":4202,"src":"2928:27:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4198,"name":"uint256","nodeType":"ElementaryTypeName","src":"2928:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4201,"mutability":"mutable","name":"globalInsuranceCost","nameLocation":"2973:19:22","nodeType":"VariableDeclaration","scope":4202,"src":"2965:27:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4200,"name":"uint256","nodeType":"ElementaryTypeName","src":"2965:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"UserGlobalInsuranceInfo","nameLocation":"2867:23:22","nodeType":"StructDefinition","scope":5705,"src":"2860:139:22","visibility":"public"},{"constant":false,"documentation":{"id":4203,"nodeType":"StructuredDocumentation","src":"3005:102:22","text":"@dev mapping to store UserGlobalInsuranceInfo\n maps: userAddress => UserGlobalInsuranceInfo"},"id":4208,"mutability":"mutable","name":"usersGlobalInsuranceInfo","nameLocation":"3164:24:22","nodeType":"VariableDeclaration","scope":5705,"src":"3112:76:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserGlobalInsuranceInfo_$4202_storage_$","typeString":"mapping(address => struct ConstantFlowAgreement.UserGlobalInsuranceInfo)"},"typeName":{"id":4207,"keyType":{"id":4204,"name":"address","nodeType":"ElementaryTypeName","src":"3120:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3112:43:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserGlobalInsuranceInfo_$4202_storage_$","typeString":"mapping(address => struct ConstantFlowAgreement.UserGlobalInsuranceInfo)"},"valueType":{"id":4206,"nodeType":"UserDefinedTypeName","pathNode":{"id":4205,"name":"UserGlobalInsuranceInfo","nameLocations":["3131:23:22"],"nodeType":"IdentifierPath","referencedDeclaration":4202,"src":"3131:23:22"},"referencedDeclaration":4202,"src":"3131:23:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$4202_storage_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo"}}},"visibility":"private"},{"constant":false,"documentation":{"id":4209,"nodeType":"StructuredDocumentation","src":"3195:122:22","text":"@dev mapping to store UserInsurance Info\n maps: userAddress => categoryID => subCategoryID => UserInsuranceInfo"},"id":4218,"mutability":"mutable","name":"usersInsuranceInfo","nameLocation":"3408:18:22","nodeType":"VariableDeclaration","scope":5705,"src":"3322:104:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo)))"},"typeName":{"id":4217,"keyType":{"id":4210,"name":"address","nodeType":"ElementaryTypeName","src":"3330:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3322:77:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo)))"},"valueType":{"id":4216,"keyType":{"id":4211,"name":"uint256","nodeType":"ElementaryTypeName","src":"3349:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"3341:57:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo))"},"valueType":{"id":4215,"keyType":{"id":4212,"name":"uint256","nodeType":"ElementaryTypeName","src":"3368:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"3360:37:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo)"},"valueType":{"id":4214,"nodeType":"UserDefinedTypeName","pathNode":{"id":4213,"name":"UserInsuranceInfo","nameLocations":["3379:17:22"],"nodeType":"IdentifierPath","referencedDeclaration":4195,"src":"3379:17:22"},"referencedDeclaration":4195,"src":"3379:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"}}}}},"visibility":"private"},{"body":{"id":4291,"nodeType":"Block","src":"4307:538:22","statements":[{"expression":{"id":4240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4238,"name":"_categoriesCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4153,"src":"4317:16:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":4239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4336:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4317:20:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4241,"nodeType":"ExpressionStatement","src":"4317:20:22"},{"expression":{"id":4246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4242,"name":"_maxInsuredDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"4347:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4243,"name":"maxInsuredDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4231,"src":"4365:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31","id":4244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4382:9:22","subdenomination":"minutes","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"1"},"src":"4365:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4347:44:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4247,"nodeType":"ExpressionStatement","src":"4347:44:22"},{"expression":{"id":4252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4248,"name":"_startWaitingTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4157,"src":"4401:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4249,"name":"startWaitingTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4229,"src":"4421:16:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31","id":4250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4440:9:22","subdenomination":"minutes","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"1"},"src":"4421:28:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4401:48:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4253,"nodeType":"ExpressionStatement","src":"4401:48:22"},{"expression":{"id":4258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4254,"name":"_minimumInsurancePeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4159,"src":"4460:23:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4255,"name":"minimumInsurancePeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4227,"src":"4486:22:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31","id":4256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4511:9:22","subdenomination":"minutes","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"1"},"src":"4486:34:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4460:60:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4259,"nodeType":"ExpressionStatement","src":"4460:60:22"},{"expression":{"id":4264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4260,"name":"_tokenDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4171,"src":"4530:9:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4262,"name":"tokenDAIaddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4221,"src":"4560:15:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4261,"name":"IERC20Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"4542:17:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Upgradeable_$1467_$","typeString":"type(contract IERC20Upgradeable)"}},"id":4263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4542:34:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}},"src":"4530:46:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1467","typeString":"contract IERC20Upgradeable"}},"id":4265,"nodeType":"ExpressionStatement","src":"4530:46:22"},{"expression":{"id":4270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4266,"name":"_tokenPermitDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"4586:15:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1719","typeString":"contract IERC20PermitUpgradeable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4268,"name":"tokenDAIaddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4221,"src":"4628:15:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4267,"name":"IERC20PermitUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"4604:23:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20PermitUpgradeable_$1719_$","typeString":"type(contract IERC20PermitUpgradeable)"}},"id":4269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4604:40:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1719","typeString":"contract IERC20PermitUpgradeable"}},"src":"4586:58:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1719","typeString":"contract IERC20PermitUpgradeable"}},"id":4271,"nodeType":"ExpressionStatement","src":"4586:58:22"},{"expression":{"id":4276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4272,"name":"_sztDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4177,"src":"4654:7:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Extended_$6160","typeString":"contract IERC20Extended"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4274,"name":"sztDAIAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4223,"src":"4679:13:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4273,"name":"IERC20Extended","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6160,"src":"4664:14:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Extended_$6160_$","typeString":"type(contract IERC20Extended)"}},"id":4275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4664:29:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Extended_$6160","typeString":"contract IERC20Extended"}},"src":"4654:39:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Extended_$6160","typeString":"contract IERC20Extended"}},"id":4277,"nodeType":"ExpressionStatement","src":"4654:39:22"},{"expression":{"id":4282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4278,"name":"_insuranceRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4180,"src":"4703:18:22","typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$6279","typeString":"contract IInsuranceRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4280,"name":"insuranceRegistryCA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4225,"src":"4743:19:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4279,"name":"IInsuranceRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6279,"src":"4724:18:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IInsuranceRegistry_$6279_$","typeString":"type(contract IInsuranceRegistry)"}},"id":4281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4724:39:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$6279","typeString":"contract IInsuranceRegistry"}},"src":"4703:60:22","typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$6279","typeString":"contract IInsuranceRegistry"}},"id":4283,"nodeType":"ExpressionStatement","src":"4703:60:22"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4285,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"4804:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4804:12:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4284,"name":"__BaseUpgradeablePausable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4094,"src":"4773:30:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4773:44:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4288,"nodeType":"ExpressionStatement","src":"4773:44:22"},{"expression":{"hexValue":"74727565","id":4289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4834:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4237,"id":4290,"nodeType":"Return","src":"4827:11:22"}]},"documentation":{"id":4219,"nodeType":"StructuredDocumentation","src":"3433:601:22","text":"@dev one-time function aims to initialize the contract\n @dev MUST revert if called more than once.\n @param tokenDAIaddress: address of the DAI ERC20 token\n @param sztDAIAddress address of the sztDAI ERC20 token\n @param insuranceRegistryCA: address of the Protocol Registry contract\n @param minimumInsurancePeriod: minimum insurance period\n @return bool: true if the function executues successfully else false.\n [PRODUCTION TODO: _startWaitingTime =  startWaitingTime * 1 hours;]\n [PRODUCTION TODO: _maxInsuredDays = maxInsuredDays * 1 days;]"},"functionSelector":"728cdbca","id":4292,"implemented":true,"kind":"function","modifiers":[{"id":4234,"kind":"modifierInvocation","modifierName":{"id":4233,"name":"initializer","nameLocations":["4281:11:22"],"nodeType":"IdentifierPath","referencedDeclaration":479,"src":"4281:11:22"},"nodeType":"ModifierInvocation","src":"4281:11:22"}],"name":"initialize","nameLocation":"4048:10:22","nodeType":"FunctionDefinition","parameters":{"id":4232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4221,"mutability":"mutable","name":"tokenDAIaddress","nameLocation":"4076:15:22","nodeType":"VariableDeclaration","scope":4292,"src":"4068:23:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4220,"name":"address","nodeType":"ElementaryTypeName","src":"4068:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4223,"mutability":"mutable","name":"sztDAIAddress","nameLocation":"4109:13:22","nodeType":"VariableDeclaration","scope":4292,"src":"4101:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4222,"name":"address","nodeType":"ElementaryTypeName","src":"4101:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4225,"mutability":"mutable","name":"insuranceRegistryCA","nameLocation":"4140:19:22","nodeType":"VariableDeclaration","scope":4292,"src":"4132:27:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4224,"name":"address","nodeType":"ElementaryTypeName","src":"4132:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4227,"mutability":"mutable","name":"minimumInsurancePeriod","nameLocation":"4177:22:22","nodeType":"VariableDeclaration","scope":4292,"src":"4169:30:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4226,"name":"uint256","nodeType":"ElementaryTypeName","src":"4169:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4229,"mutability":"mutable","name":"startWaitingTime","nameLocation":"4217:16:22","nodeType":"VariableDeclaration","scope":4292,"src":"4209:24:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4228,"name":"uint256","nodeType":"ElementaryTypeName","src":"4209:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4231,"mutability":"mutable","name":"maxInsuredDays","nameLocation":"4251:14:22","nodeType":"VariableDeclaration","scope":4292,"src":"4243:22:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4230,"name":"uint256","nodeType":"ElementaryTypeName","src":"4243:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4058:213:22"},"returnParameters":{"id":4237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4236,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4292,"src":"4301:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4235,"name":"bool","nodeType":"ElementaryTypeName","src":"4301:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4300:6:22"},"scope":5705,"src":"4039:806:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4300,"nodeType":"Block","src":"4887:25:22","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4297,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"4897:6:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4897:8:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4299,"nodeType":"ExpressionStatement","src":"4897:8:22"}]},"functionSelector":"8456cb59","id":4301,"implemented":true,"kind":"function","modifiers":[{"id":4295,"kind":"modifierInvocation","modifierName":{"id":4294,"name":"onlyAdmin","nameLocations":["4877:9:22"],"nodeType":"IdentifierPath","referencedDeclaration":4034,"src":"4877:9:22"},"nodeType":"ModifierInvocation","src":"4877:9:22"}],"name":"pause","nameLocation":"4860:5:22","nodeType":"FunctionDefinition","parameters":{"id":4293,"nodeType":"ParameterList","parameters":[],"src":"4865:2:22"},"returnParameters":{"id":4296,"nodeType":"ParameterList","parameters":[],"src":"4887:0:22"},"scope":5705,"src":"4851:61:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4309,"nodeType":"Block","src":"4956:27:22","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4306,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"4966:8:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4966:10:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4308,"nodeType":"ExpressionStatement","src":"4966:10:22"}]},"functionSelector":"3f4ba83a","id":4310,"implemented":true,"kind":"function","modifiers":[{"id":4304,"kind":"modifierInvocation","modifierName":{"id":4303,"name":"onlyAdmin","nameLocations":["4946:9:22"],"nodeType":"IdentifierPath","referencedDeclaration":4034,"src":"4946:9:22"},"nodeType":"ModifierInvocation","src":"4946:9:22"}],"name":"unpause","nameLocation":"4927:7:22","nodeType":"FunctionDefinition","parameters":{"id":4302,"nodeType":"ParameterList","parameters":[],"src":"4934:2:22"},"returnParameters":{"id":4305,"nodeType":"ParameterList","parameters":[],"src":"4956:0:22"},"scope":5705,"src":"4918:65:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4327,"nodeType":"Block","src":"5204:114:22","statements":[{"expression":{"id":4322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4318,"name":"_minimumInsurancePeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4159,"src":"5214:23:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4319,"name":"timeInMinutes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4313,"src":"5240:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31","id":4320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5256:9:22","subdenomination":"minutes","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"1"},"src":"5240:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5214:51:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4323,"nodeType":"ExpressionStatement","src":"5214:51:22"},{"eventCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4324,"name":"UpdatedMinimumInsurancePeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5997,"src":"5280:29:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5280:31:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4326,"nodeType":"EmitStatement","src":"5275:36:22"}]},"documentation":{"id":4311,"nodeType":"StructuredDocumentation","src":"4989:130:22","text":"@dev this function aims to updates minimum insurance period\n @param timeInMinutes: 120 minutes will be kept as default."},"functionSelector":"56eb66bb","id":4328,"implemented":true,"kind":"function","modifiers":[{"id":4316,"kind":"modifierInvocation","modifierName":{"id":4315,"name":"onlyAdmin","nameLocations":["5194:9:22"],"nodeType":"IdentifierPath","referencedDeclaration":4034,"src":"5194:9:22"},"nodeType":"ModifierInvocation","src":"5194:9:22"}],"name":"updateMinimumInsurancePeriod","nameLocation":"5133:28:22","nodeType":"FunctionDefinition","parameters":{"id":4314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4313,"mutability":"mutable","name":"timeInMinutes","nameLocation":"5170:13:22","nodeType":"VariableDeclaration","scope":4328,"src":"5162:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4312,"name":"uint256","nodeType":"ElementaryTypeName","src":"5162:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5161:23:22"},"returnParameters":{"id":4317,"nodeType":"ParameterList","parameters":[],"src":"5204:0:22"},"scope":5705,"src":"5124:194:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4345,"nodeType":"Block","src":"5542:98:22","statements":[{"expression":{"id":4340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4336,"name":"_startWaitingTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4157,"src":"5552:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4337,"name":"timeInHours","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4331,"src":"5572:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31","id":4338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5586:7:22","subdenomination":"hours","typeDescriptions":{"typeIdentifier":"t_rational_3600_by_1","typeString":"int_const 3600"},"value":"1"},"src":"5572:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5552:41:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4341,"nodeType":"ExpressionStatement","src":"5552:41:22"},{"eventCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4342,"name":"UpdatedStartWaitingTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5995,"src":"5608:23:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5608:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4344,"nodeType":"EmitStatement","src":"5603:30:22"}]},"documentation":{"id":4329,"nodeType":"StructuredDocumentation","src":"5324:141:22","text":"@dev this function aims to update the insurance activation waiting period\n @param timeInHours: 4-8 hours will be kept as default. "},"functionSelector":"24b7ab24","id":4346,"implemented":true,"kind":"function","modifiers":[{"id":4334,"kind":"modifierInvocation","modifierName":{"id":4333,"name":"onlyAdmin","nameLocations":["5532:9:22"],"nodeType":"IdentifierPath","referencedDeclaration":4034,"src":"5532:9:22"},"nodeType":"ModifierInvocation","src":"5532:9:22"}],"name":"updateStartWaitingTime","nameLocation":"5479:22:22","nodeType":"FunctionDefinition","parameters":{"id":4332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4331,"mutability":"mutable","name":"timeInHours","nameLocation":"5510:11:22","nodeType":"VariableDeclaration","scope":4346,"src":"5502:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4330,"name":"uint256","nodeType":"ElementaryTypeName","src":"5502:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5501:21:22"},"returnParameters":{"id":4335,"nodeType":"ParameterList","parameters":[],"src":"5542:0:22"},"scope":5705,"src":"5470:170:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4363,"nodeType":"Block","src":"5846:92:22","statements":[{"expression":{"id":4358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4354,"name":"_maxInsuredDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"5856:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4355,"name":"timeInDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"5874:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31","id":4356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5887:6:22","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_86400_by_1","typeString":"int_const 86400"},"value":"1"},"src":"5874:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5856:37:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4359,"nodeType":"ExpressionStatement","src":"5856:37:22"},{"eventCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4360,"name":"UpdatedMaxInsuredDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5993,"src":"5908:21:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5908:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4362,"nodeType":"EmitStatement","src":"5903:28:22"}]},"documentation":{"id":4347,"nodeType":"StructuredDocumentation","src":"5646:126:22","text":"@dev this function aims to update the maximum insurance period\n @param timeInDays: 90 days will be kept as default."},"functionSelector":"b4706268","id":4364,"implemented":true,"kind":"function","modifiers":[{"id":4352,"kind":"modifierInvocation","modifierName":{"id":4351,"name":"onlyAdmin","nameLocations":["5836:9:22"],"nodeType":"IdentifierPath","referencedDeclaration":4034,"src":"5836:9:22"},"nodeType":"ModifierInvocation","src":"5836:9:22"}],"name":"updateMaxInsuredDays","nameLocation":"5786:20:22","nodeType":"FunctionDefinition","parameters":{"id":4350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4349,"mutability":"mutable","name":"timeInDays","nameLocation":"5815:10:22","nodeType":"VariableDeclaration","scope":4364,"src":"5807:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4348,"name":"uint256","nodeType":"ElementaryTypeName","src":"5807:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5806:20:22"},"returnParameters":{"id":4353,"nodeType":"ParameterList","parameters":[],"src":"5846:0:22"},"scope":5705,"src":"5777:161:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[6028],"body":{"id":4398,"nodeType":"Block","src":"6576:126:22","statements":[{"assignments":[4386],"declarations":[{"constant":false,"id":4386,"mutability":"mutable","name":"success","nameLocation":"6591:7:22","nodeType":"VariableDeclaration","scope":4398,"src":"6586:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4385,"name":"bool","nodeType":"ElementaryTypeName","src":"6586:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4395,"initialValue":{"arguments":[{"id":4388,"name":"insuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4367,"src":"6621:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4389,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4369,"src":"6636:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4390,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4371,"src":"6648:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4391,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4373,"src":"6663:1:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":4392,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4375,"src":"6666:1:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4393,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4377,"src":"6669:1:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4387,"name":"_addInsuranceAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4502,"src":"6601:19:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (uint256,uint256,uint256,uint8,bytes32,bytes32) returns (bool)"}},"id":4394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6601:70:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"6586:85:22"},{"expression":{"id":4396,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4386,"src":"6688:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4384,"id":4397,"nodeType":"Return","src":"6681:14:22"}]},"documentation":{"id":4365,"nodeType":"StructuredDocumentation","src":"5944:398:22","text":"@dev this function aims to create or top-up user insurance coverage amount.\n @param insuredAmount: maximum user coverage amount\n @param categoryID: insurance category, e.g., stablecoin depeg insurance.\n @param subCategoryID: insurance sub-category, e.g., USDC depeg coverage, DAI depeg coverage.\n @return bool: true if the function executues successfully else false."},"functionSelector":"6e8847bd","id":4399,"implemented":true,"kind":"function","modifiers":[{"id":4381,"kind":"modifierInvocation","modifierName":{"id":4380,"name":"nonReentrant","nameLocations":["6549:12:22"],"nodeType":"IdentifierPath","referencedDeclaration":748,"src":"6549:12:22"},"nodeType":"ModifierInvocation","src":"6549:12:22"}],"name":"addInsuranceAmount","nameLocation":"6356:18:22","nodeType":"FunctionDefinition","overrides":{"id":4379,"nodeType":"OverrideSpecifier","overrides":[],"src":"6540:8:22"},"parameters":{"id":4378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4367,"mutability":"mutable","name":"insuredAmount","nameLocation":"6392:13:22","nodeType":"VariableDeclaration","scope":4399,"src":"6384:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4366,"name":"uint256","nodeType":"ElementaryTypeName","src":"6384:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4369,"mutability":"mutable","name":"categoryID","nameLocation":"6424:10:22","nodeType":"VariableDeclaration","scope":4399,"src":"6416:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4368,"name":"uint256","nodeType":"ElementaryTypeName","src":"6416:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4371,"mutability":"mutable","name":"subCategoryID","nameLocation":"6453:13:22","nodeType":"VariableDeclaration","scope":4399,"src":"6445:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4370,"name":"uint256","nodeType":"ElementaryTypeName","src":"6445:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4373,"mutability":"mutable","name":"v","nameLocation":"6483:1:22","nodeType":"VariableDeclaration","scope":4399,"src":"6477:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4372,"name":"uint8","nodeType":"ElementaryTypeName","src":"6477:5:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4375,"mutability":"mutable","name":"r","nameLocation":"6503:1:22","nodeType":"VariableDeclaration","scope":4399,"src":"6495:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4374,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6495:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4377,"mutability":"mutable","name":"s","nameLocation":"6523:1:22","nodeType":"VariableDeclaration","scope":4399,"src":"6515:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4376,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6515:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6374:156:22"},"returnParameters":{"id":4384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4383,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4399,"src":"6570:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4382,"name":"bool","nodeType":"ElementaryTypeName","src":"6570:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6569:6:22"},"scope":5705,"src":"6347:355:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4501,"nodeType":"Block","src":"6923:844:22","statements":[{"assignments":[4417],"declarations":[{"constant":false,"id":4417,"mutability":"mutable","name":"newInsuredAmount","nameLocation":"6941:16:22","nodeType":"VariableDeclaration","scope":4501,"src":"6933:24:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4416,"name":"uint256","nodeType":"ElementaryTypeName","src":"6933:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4429,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4418,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4218,"src":"6960:18:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":4421,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4419,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"6979:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6979:12:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6960:32:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":4423,"indexExpression":{"id":4422,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4403,"src":"6993:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6960:44:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":4425,"indexExpression":{"id":4424,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4405,"src":"7005:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6960:59:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"id":4426,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7020:13:22","memberName":"insuredAmount","nodeType":"MemberAccess","referencedDeclaration":4186,"src":"6960:73:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4427,"name":"insuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4401,"src":"7036:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6960:89:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6933:116:22"},{"condition":{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4430,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4218,"src":"7063:18:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":4433,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4431,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"7082:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7082:12:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7063:32:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":4435,"indexExpression":{"id":4434,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4403,"src":"7096:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7063:44:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":4437,"indexExpression":{"id":4436,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4405,"src":"7108:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7063:59:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"id":4438,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7123:7:22","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":4194,"src":"7063:67:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4456,"nodeType":"IfStatement","src":"7059:291:22","trueBody":{"id":4455,"nodeType":"Block","src":"7132:218:22","statements":[{"assignments":[4440],"declarations":[{"constant":false,"id":4440,"mutability":"mutable","name":"closeStreamSuccess","nameLocation":"7151:18:22","nodeType":"VariableDeclaration","scope":4455,"src":"7146:23:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4439,"name":"bool","nodeType":"ElementaryTypeName","src":"7146:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4447,"initialValue":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4442,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"7192:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7192:12:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4444,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4403,"src":"7206:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4445,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4405,"src":"7218:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4441,"name":"deactivateInsurance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5067,"src":"7172:19:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256,uint256) returns (bool)"}},"id":4446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7172:60:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"7146:86:22"},{"condition":{"id":4449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7250:19:22","subExpression":{"id":4448,"name":"closeStreamSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4440,"src":"7251:18:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4454,"nodeType":"IfStatement","src":"7246:94:22","trueBody":{"id":4453,"nodeType":"Block","src":"7271:69:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4450,"name":"CFA__TransactionFailedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6001,"src":"7296:27:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7296:29:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4452,"nodeType":"RevertStatement","src":"7289:36:22"}]}}]}},{"assignments":[4458],"declarations":[{"constant":false,"id":4458,"mutability":"mutable","name":"deadline","nameLocation":"7370:8:22","nodeType":"VariableDeclaration","scope":4501,"src":"7362:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4457,"name":"uint256","nodeType":"ElementaryTypeName","src":"7362:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4465,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4459,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"7381:5:22","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7387:9:22","memberName":"timestamp","nodeType":"MemberAccess","src":"7381:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4461,"name":"_maxInsuredDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"7399:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7381:33:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3330","id":4463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7417:7:22","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_2592000_by_1","typeString":"int_const 2592000"},"value":"30"},"src":"7381:43:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7362:62:22"},{"assignments":[4467,4469],"declarations":[{"constant":false,"id":4467,"mutability":"mutable","name":"activateSuccess","nameLocation":"7442:15:22","nodeType":"VariableDeclaration","scope":4501,"src":"7437:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4466,"name":"bool","nodeType":"ElementaryTypeName","src":"7437:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4469,"mutability":"mutable","name":"insuranceCost","nameLocation":"7467:13:22","nodeType":"VariableDeclaration","scope":4501,"src":"7459:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4468,"name":"uint256","nodeType":"ElementaryTypeName","src":"7459:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4475,"initialValue":{"arguments":[{"id":4471,"name":"newInsuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4417,"src":"7502:16:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4472,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4403,"src":"7520:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4473,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4405,"src":"7532:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4470,"name":"activateInsurance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"7484:17:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (uint256,uint256,uint256) returns (bool,uint256)"}},"id":4474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7484:62:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"7436:110:22"},{"condition":{"id":4477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7560:16:22","subExpression":{"id":4476,"name":"activateSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4467,"src":"7561:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4482,"nodeType":"IfStatement","src":"7556:83:22","trueBody":{"id":4481,"nodeType":"Block","src":"7578:61:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4478,"name":"CFA__TransactionFailedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6001,"src":"7599:27:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7599:29:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4480,"nodeType":"RevertStatement","src":"7592:36:22"}]}},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4486,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"7675:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7675:12:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":4490,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7697:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_ConstantFlowAgreement_$5705","typeString":"contract ConstantFlowAgreement"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ConstantFlowAgreement_$5705","typeString":"contract ConstantFlowAgreement"}],"id":4489,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7689:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4488,"name":"address","nodeType":"ElementaryTypeName","src":"7689:7:22","typeDescriptions":{}}},"id":4491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7689:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4492,"name":"insuranceCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4469,"src":"7704:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4493,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4458,"src":"7719:8:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4494,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4407,"src":"7729:1:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":4495,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4409,"src":"7732:1:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4496,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4411,"src":"7735:1:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4483,"name":"_tokenPermitDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"7648:15:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1719","typeString":"contract IERC20PermitUpgradeable"}},"id":4485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7664:10:22","memberName":"safePermit","nodeType":"MemberAccess","referencedDeclaration":1961,"src":"7648:26:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20PermitUpgradeable_$1719_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$bound_to$_t_contract$_IERC20PermitUpgradeable_$1719_$","typeString":"function (contract IERC20PermitUpgradeable,address,address,uint256,uint256,uint8,bytes32,bytes32)"}},"id":4497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7648:89:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4498,"nodeType":"ExpressionStatement","src":"7648:89:22"},{"expression":{"hexValue":"74727565","id":4499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7756:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4415,"id":4500,"nodeType":"Return","src":"7749:11:22"}]},"id":4502,"implemented":true,"kind":"function","modifiers":[],"name":"_addInsuranceAmount","nameLocation":"6726:19:22","nodeType":"FunctionDefinition","parameters":{"id":4412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4401,"mutability":"mutable","name":"insuredAmount","nameLocation":"6763:13:22","nodeType":"VariableDeclaration","scope":4502,"src":"6755:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4400,"name":"uint256","nodeType":"ElementaryTypeName","src":"6755:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4403,"mutability":"mutable","name":"categoryID","nameLocation":"6795:10:22","nodeType":"VariableDeclaration","scope":4502,"src":"6787:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4402,"name":"uint256","nodeType":"ElementaryTypeName","src":"6787:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4405,"mutability":"mutable","name":"subCategoryID","nameLocation":"6824:13:22","nodeType":"VariableDeclaration","scope":4502,"src":"6816:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4404,"name":"uint256","nodeType":"ElementaryTypeName","src":"6816:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4407,"mutability":"mutable","name":"v","nameLocation":"6853:1:22","nodeType":"VariableDeclaration","scope":4502,"src":"6847:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4406,"name":"uint8","nodeType":"ElementaryTypeName","src":"6847:5:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4409,"mutability":"mutable","name":"r","nameLocation":"6873:1:22","nodeType":"VariableDeclaration","scope":4502,"src":"6865:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4408,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6865:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4411,"mutability":"mutable","name":"s","nameLocation":"6893:1:22","nodeType":"VariableDeclaration","scope":4502,"src":"6885:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4410,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6885:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6745:155:22"},"returnParameters":{"id":4415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4414,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4502,"src":"6917:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4413,"name":"bool","nodeType":"ElementaryTypeName","src":"6917:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6916:6:22"},"scope":5705,"src":"6717:1050:22","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"baseFunctions":[6047],"body":{"id":4539,"nodeType":"Block","src":"8524:141:22","statements":[{"assignments":[4526],"declarations":[{"constant":false,"id":4526,"mutability":"mutable","name":"success","nameLocation":"8539:7:22","nodeType":"VariableDeclaration","scope":4539,"src":"8534:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4525,"name":"bool","nodeType":"ElementaryTypeName","src":"8534:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4536,"initialValue":{"arguments":[{"id":4528,"name":"insuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"8571:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4529,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4507,"src":"8586:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4530,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4509,"src":"8598:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4531,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4511,"src":"8613:1:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":4532,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4513,"src":"8616:1:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4533,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"8619:1:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4534,"name":"closeStream","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4517,"src":"8622:11:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4527,"name":"_minusInsuranceAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4653,"src":"8549:21:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$_t_bool_$returns$_t_bool_$","typeString":"function (uint256,uint256,uint256,uint8,bytes32,bytes32,bool) returns (bool)"}},"id":4535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8549:85:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"8534:100:22"},{"expression":{"id":4537,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4526,"src":"8651:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4524,"id":4538,"nodeType":"Return","src":"8644:14:22"}]},"documentation":{"id":4503,"nodeType":"StructuredDocumentation","src":"7773:490:22","text":"@dev this function aims to close or reduce user insurance coverage amount.\n @param insuredAmount: maximum user coverage amount\n @param categoryID: insurance category, e.g., stablecoin depeg insurance.\n @param subCategoryID: insurance sub-category, e.g., USDC depeg coverage, DAI depeg coverage.\n @param closeStream: checks whether user initiate to deactivate its insurance or not.\n @return bool: true if the function executues successfully else false."},"functionSelector":"642adc28","id":4540,"implemented":true,"kind":"function","modifiers":[{"id":4521,"kind":"modifierInvocation","modifierName":{"id":4520,"name":"nonReentrant","nameLocations":["8497:12:22"],"nodeType":"IdentifierPath","referencedDeclaration":748,"src":"8497:12:22"},"nodeType":"ModifierInvocation","src":"8497:12:22"}],"name":"minusInsuranceAmount","nameLocation":"8277:20:22","nodeType":"FunctionDefinition","overrides":{"id":4519,"nodeType":"OverrideSpecifier","overrides":[],"src":"8488:8:22"},"parameters":{"id":4518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4505,"mutability":"mutable","name":"insuredAmount","nameLocation":"8315:13:22","nodeType":"VariableDeclaration","scope":4540,"src":"8307:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4504,"name":"uint256","nodeType":"ElementaryTypeName","src":"8307:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4507,"mutability":"mutable","name":"categoryID","nameLocation":"8347:10:22","nodeType":"VariableDeclaration","scope":4540,"src":"8339:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4506,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4509,"mutability":"mutable","name":"subCategoryID","nameLocation":"8376:13:22","nodeType":"VariableDeclaration","scope":4540,"src":"8368:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4508,"name":"uint256","nodeType":"ElementaryTypeName","src":"8368:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4511,"mutability":"mutable","name":"v","nameLocation":"8405:1:22","nodeType":"VariableDeclaration","scope":4540,"src":"8399:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4510,"name":"uint8","nodeType":"ElementaryTypeName","src":"8399:5:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4513,"mutability":"mutable","name":"r","nameLocation":"8425:1:22","nodeType":"VariableDeclaration","scope":4540,"src":"8417:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4512,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8417:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4515,"mutability":"mutable","name":"s","nameLocation":"8445:1:22","nodeType":"VariableDeclaration","scope":4540,"src":"8437:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4514,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8437:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4517,"mutability":"mutable","name":"closeStream","nameLocation":"8461:11:22","nodeType":"VariableDeclaration","scope":4540,"src":"8456:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4516,"name":"bool","nodeType":"ElementaryTypeName","src":"8456:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8297:181:22"},"returnParameters":{"id":4524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4523,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4540,"src":"8518:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4522,"name":"bool","nodeType":"ElementaryTypeName","src":"8518:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8517:6:22"},"scope":5705,"src":"8268:397:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4652,"nodeType":"Block","src":"8914:941:22","statements":[{"condition":{"id":4568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"8928:68:22","subExpression":{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4559,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4218,"src":"8929:18:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":4562,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4560,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"8948:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8948:12:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8929:32:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":4564,"indexExpression":{"id":4563,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4544,"src":"8962:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8929:44:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":4566,"indexExpression":{"id":4565,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4546,"src":"8974:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8929:59:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"id":4567,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8989:7:22","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":4194,"src":"8929:67:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4573,"nodeType":"IfStatement","src":"8924:135:22","trueBody":{"id":4572,"nodeType":"Block","src":"8998:61:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4569,"name":"CFA__InactiveInsuranceError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6003,"src":"9019:27:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9019:29:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4571,"nodeType":"RevertStatement","src":"9012:36:22"}]}},{"assignments":[4575],"declarations":[{"constant":false,"id":4575,"mutability":"mutable","name":"closeStreamSuccess","nameLocation":"9073:18:22","nodeType":"VariableDeclaration","scope":4652,"src":"9068:23:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4574,"name":"bool","nodeType":"ElementaryTypeName","src":"9068:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4582,"initialValue":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4577,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"9114:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9114:12:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4579,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4544,"src":"9128:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4580,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4546,"src":"9140:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4576,"name":"deactivateInsurance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5067,"src":"9094:19:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256,uint256) returns (bool)"}},"id":4581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9094:60:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"9068:86:22"},{"condition":{"id":4584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9168:19:22","subExpression":{"id":4583,"name":"closeStreamSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4575,"src":"9169:18:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4589,"nodeType":"IfStatement","src":"9164:86:22","trueBody":{"id":4588,"nodeType":"Block","src":"9189:61:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4585,"name":"CFA__TransactionFailedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6001,"src":"9210:27:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9210:29:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4587,"nodeType":"RevertStatement","src":"9203:36:22"}]}},{"condition":{"id":4591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9263:12:22","subExpression":{"id":4590,"name":"closeStream","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4554,"src":"9264:11:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4649,"nodeType":"IfStatement","src":"9259:569:22","trueBody":{"id":4648,"nodeType":"Block","src":"9277:551:22","statements":[{"assignments":[4593],"declarations":[{"constant":false,"id":4593,"mutability":"mutable","name":"newInsuredAmount","nameLocation":"9299:16:22","nodeType":"VariableDeclaration","scope":4648,"src":"9291:24:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4592,"name":"uint256","nodeType":"ElementaryTypeName","src":"9291:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4605,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4594,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4218,"src":"9318:18:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":4597,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4595,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"9337:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4596,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9337:12:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9318:32:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":4599,"indexExpression":{"id":4598,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4544,"src":"9351:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9318:44:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":4601,"indexExpression":{"id":4600,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4546,"src":"9363:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9318:59:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"id":4602,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9378:13:22","memberName":"insuredAmount","nodeType":"MemberAccess","referencedDeclaration":4186,"src":"9318:73:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4603,"name":"insuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4542,"src":"9394:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9318:89:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9291:116:22"},{"assignments":[4607],"declarations":[{"constant":false,"id":4607,"mutability":"mutable","name":"deadline","nameLocation":"9429:8:22","nodeType":"VariableDeclaration","scope":4648,"src":"9421:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4606,"name":"uint256","nodeType":"ElementaryTypeName","src":"9421:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4614,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4608,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"9440:5:22","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9446:9:22","memberName":"timestamp","nodeType":"MemberAccess","src":"9440:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4610,"name":"_maxInsuredDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"9458:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9440:33:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3330","id":4612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9476:7:22","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_2592000_by_1","typeString":"int_const 2592000"},"value":"30"},"src":"9440:43:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9421:62:22"},{"assignments":[4616,4618],"declarations":[{"constant":false,"id":4616,"mutability":"mutable","name":"activateSuccess","nameLocation":"9503:15:22","nodeType":"VariableDeclaration","scope":4648,"src":"9498:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4615,"name":"bool","nodeType":"ElementaryTypeName","src":"9498:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4618,"mutability":"mutable","name":"insuranceCost","nameLocation":"9528:13:22","nodeType":"VariableDeclaration","scope":4648,"src":"9520:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4617,"name":"uint256","nodeType":"ElementaryTypeName","src":"9520:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4624,"initialValue":{"arguments":[{"id":4620,"name":"newInsuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4593,"src":"9563:16:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4621,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4544,"src":"9581:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4622,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4546,"src":"9593:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4619,"name":"activateInsurance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"9545:17:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (uint256,uint256,uint256) returns (bool,uint256)"}},"id":4623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9545:62:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"9497:110:22"},{"condition":{"id":4626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9625:16:22","subExpression":{"id":4625,"name":"activateSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4616,"src":"9626:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4631,"nodeType":"IfStatement","src":"9621:91:22","trueBody":{"id":4630,"nodeType":"Block","src":"9643:69:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4627,"name":"CFA__TransactionFailedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6001,"src":"9668:27:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9668:29:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4629,"nodeType":"RevertStatement","src":"9661:36:22"}]}},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4635,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"9752:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9752:12:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":4639,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"9774:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_ConstantFlowAgreement_$5705","typeString":"contract ConstantFlowAgreement"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ConstantFlowAgreement_$5705","typeString":"contract ConstantFlowAgreement"}],"id":4638,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9766:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4637,"name":"address","nodeType":"ElementaryTypeName","src":"9766:7:22","typeDescriptions":{}}},"id":4640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9766:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4641,"name":"insuranceCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4618,"src":"9781:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4642,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4607,"src":"9796:8:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4643,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4548,"src":"9806:1:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":4644,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4550,"src":"9809:1:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4645,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4552,"src":"9812:1:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4632,"name":"_tokenPermitDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"9725:15:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1719","typeString":"contract IERC20PermitUpgradeable"}},"id":4634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9741:10:22","memberName":"safePermit","nodeType":"MemberAccess","referencedDeclaration":1961,"src":"9725:26:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20PermitUpgradeable_$1719_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$bound_to$_t_contract$_IERC20PermitUpgradeable_$1719_$","typeString":"function (contract IERC20PermitUpgradeable,address,address,uint256,uint256,uint8,bytes32,bytes32)"}},"id":4646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9725:89:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4647,"nodeType":"ExpressionStatement","src":"9725:89:22"}]}},{"expression":{"hexValue":"74727565","id":4650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9844:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4558,"id":4651,"nodeType":"Return","src":"9837:11:22"}]},"id":4653,"implemented":true,"kind":"function","modifiers":[],"name":"_minusInsuranceAmount","nameLocation":"8689:21:22","nodeType":"FunctionDefinition","parameters":{"id":4555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4542,"mutability":"mutable","name":"insuredAmount","nameLocation":"8728:13:22","nodeType":"VariableDeclaration","scope":4653,"src":"8720:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4541,"name":"uint256","nodeType":"ElementaryTypeName","src":"8720:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4544,"mutability":"mutable","name":"categoryID","nameLocation":"8760:10:22","nodeType":"VariableDeclaration","scope":4653,"src":"8752:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4543,"name":"uint256","nodeType":"ElementaryTypeName","src":"8752:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4546,"mutability":"mutable","name":"subCategoryID","nameLocation":"8789:13:22","nodeType":"VariableDeclaration","scope":4653,"src":"8781:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4545,"name":"uint256","nodeType":"ElementaryTypeName","src":"8781:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4548,"mutability":"mutable","name":"v","nameLocation":"8818:1:22","nodeType":"VariableDeclaration","scope":4653,"src":"8812:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4547,"name":"uint8","nodeType":"ElementaryTypeName","src":"8812:5:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4550,"mutability":"mutable","name":"r","nameLocation":"8838:1:22","nodeType":"VariableDeclaration","scope":4653,"src":"8830:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4549,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8830:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4552,"mutability":"mutable","name":"s","nameLocation":"8858:1:22","nodeType":"VariableDeclaration","scope":4653,"src":"8850:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4551,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8850:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4554,"mutability":"mutable","name":"closeStream","nameLocation":"8874:11:22","nodeType":"VariableDeclaration","scope":4653,"src":"8869:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4553,"name":"bool","nodeType":"ElementaryTypeName","src":"8869:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8710:181:22"},"returnParameters":{"id":4558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4557,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4653,"src":"8908:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4556,"name":"bool","nodeType":"ElementaryTypeName","src":"8908:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8907:6:22"},"scope":5705,"src":"8680:1175:22","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4694,"nodeType":"Block","src":"10000:397:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4665,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4655,"src":"10057:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4666,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4657,"src":"10070:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4667,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4659,"src":"10082:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4664,"name":"getUserInsuranceValidTillInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5570,"src":"10027:29:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256,uint256) view returns (uint256)"}},"id":4668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10027:69:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":4669,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"10112:5:22","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10118:9:22","memberName":"timestamp","nodeType":"MemberAccess","src":"10112:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10027:100:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4676,"nodeType":"IfStatement","src":"10010:192:22","trueBody":{"id":4675,"nodeType":"Block","src":"10138:64:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4672,"name":"CFA__ActiveInsuranceExistError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6007,"src":"10159:30:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10159:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4674,"nodeType":"RevertStatement","src":"10152:39:22"}]}},{"assignments":[4678],"declarations":[{"constant":false,"id":4678,"mutability":"mutable","name":"success","nameLocation":"10216:7:22","nodeType":"VariableDeclaration","scope":4694,"src":"10211:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4677,"name":"bool","nodeType":"ElementaryTypeName","src":"10211:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4684,"initialValue":{"arguments":[{"id":4680,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4655,"src":"10246:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4681,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4657,"src":"10259:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4682,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4659,"src":"10271:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4679,"name":"deactivateInsurance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5067,"src":"10226:19:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256,uint256) returns (bool)"}},"id":4683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10226:59:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"10211:74:22"},{"condition":{"id":4686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"10299:8:22","subExpression":{"id":4685,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4678,"src":"10300:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4691,"nodeType":"IfStatement","src":"10295:75:22","trueBody":{"id":4690,"nodeType":"Block","src":"10309:61:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4687,"name":"CFA__TransactionFailedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6001,"src":"10330:27:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10330:29:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4689,"nodeType":"RevertStatement","src":"10323:36:22"}]}},{"expression":{"hexValue":"74727565","id":4692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10386:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4663,"id":4693,"nodeType":"Return","src":"10379:11:22"}]},"functionSelector":"f099dd50","id":4695,"implemented":true,"kind":"function","modifiers":[],"name":"claimPremium","nameLocation":"9870:12:22","nodeType":"FunctionDefinition","parameters":{"id":4660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4655,"mutability":"mutable","name":"userAddress","nameLocation":"9900:11:22","nodeType":"VariableDeclaration","scope":4695,"src":"9892:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4654,"name":"address","nodeType":"ElementaryTypeName","src":"9892:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4657,"mutability":"mutable","name":"categoryID","nameLocation":"9929:10:22","nodeType":"VariableDeclaration","scope":4695,"src":"9921:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4656,"name":"uint256","nodeType":"ElementaryTypeName","src":"9921:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4659,"mutability":"mutable","name":"subCategoryID","nameLocation":"9957:13:22","nodeType":"VariableDeclaration","scope":4695,"src":"9949:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4658,"name":"uint256","nodeType":"ElementaryTypeName","src":"9949:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9882:94:22"},"returnParameters":{"id":4663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4662,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4695,"src":"9994:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4661,"name":"bool","nodeType":"ElementaryTypeName","src":"9994:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9993:6:22"},"scope":5705,"src":"9861:536:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4704,"nodeType":"Block","src":"10511:8:22","statements":[]},"functionSelector":"77bd35fc","id":4705,"implemented":true,"kind":"function","modifiers":[],"name":"claimPremium","nameLocation":"10412:12:22","nodeType":"FunctionDefinition","parameters":{"id":4700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4697,"mutability":"mutable","name":"userAddress","nameLocation":"10442:11:22","nodeType":"VariableDeclaration","scope":4705,"src":"10434:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4696,"name":"address","nodeType":"ElementaryTypeName","src":"10434:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4699,"mutability":"mutable","name":"categoryID","nameLocation":"10471:10:22","nodeType":"VariableDeclaration","scope":4705,"src":"10463:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4698,"name":"uint256","nodeType":"ElementaryTypeName","src":"10463:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10424:63:22"},"returnParameters":{"id":4703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4702,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4705,"src":"10505:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4701,"name":"bool","nodeType":"ElementaryTypeName","src":"10505:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10504:6:22"},"scope":5705,"src":"10403:116:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4927,"nodeType":"Block","src":"10781:2549:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4719,"name":"insuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4708,"src":"10795:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31653138","id":4720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10811:4:22","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"10795:20:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4726,"nodeType":"IfStatement","src":"10791:96:22","trueBody":{"id":4725,"nodeType":"Block","src":"10817:70:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4722,"name":"CFA__InsuranceCoverNotAvailableError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6009,"src":"10838:36:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10838:38:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4724,"nodeType":"RevertStatement","src":"10831:45:22"}]}},{"condition":{"components":[{"id":4733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"10914:79:22","subExpression":{"arguments":[{"id":4729,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4710,"src":"10952:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4730,"name":"insuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4708,"src":"10964:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4731,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4712,"src":"10979:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4727,"name":"_insuranceRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4180,"src":"10915:18:22","typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$6279","typeString":"contract IInsuranceRegistry"}},"id":4728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10934:17:22","memberName":"ifEnoughLiquidity","nodeType":"MemberAccess","referencedDeclaration":6269,"src":"10915:36:22","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256,uint256,uint256) view external returns (bool)"}},"id":4732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10915:78:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4734,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10913:81:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4739,"nodeType":"IfStatement","src":"10896:177:22","trueBody":{"id":4738,"nodeType":"Block","src":"11009:64:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4735,"name":"CFA__SubCategoryNotActiveError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6005,"src":"11030:30:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11030:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4737,"nodeType":"RevertStatement","src":"11023:39:22"}]}},{"condition":{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4740,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4218,"src":"11086:18:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":4743,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4741,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"11105:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11105:12:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11086:32:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":4745,"indexExpression":{"id":4744,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4710,"src":"11119:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11086:44:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":4747,"indexExpression":{"id":4746,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4712,"src":"11131:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11086:59:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"id":4748,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11146:7:22","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":4194,"src":"11086:67:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4753,"nodeType":"IfStatement","src":"11082:137:22","trueBody":{"id":4752,"nodeType":"Block","src":"11155:64:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4749,"name":"CFA__ActiveInsuranceExistError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6007,"src":"11176:30:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11176:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4751,"nodeType":"RevertStatement","src":"11169:39:22"}]}},{"assignments":[4756],"declarations":[{"constant":false,"id":4756,"mutability":"mutable","name":"userInsuranceInfo","nameLocation":"11263:17:22","nodeType":"VariableDeclaration","scope":4927,"src":"11237:43:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"},"typeName":{"id":4755,"nodeType":"UserDefinedTypeName","pathNode":{"id":4754,"name":"UserInsuranceInfo","nameLocations":["11237:17:22"],"nodeType":"IdentifierPath","referencedDeclaration":4195,"src":"11237:17:22"},"referencedDeclaration":4195,"src":"11237:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"}},"visibility":"internal"}],"id":4765,"initialValue":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4757,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4218,"src":"11283:18:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":4760,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4758,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"11302:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11302:12:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11283:32:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":4762,"indexExpression":{"id":4761,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4710,"src":"11316:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11283:44:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":4764,"indexExpression":{"id":4763,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4712,"src":"11328:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11283:59:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"11237:105:22"},{"assignments":[4768],"declarations":[{"constant":false,"id":4768,"mutability":"mutable","name":"userGlobalInsuranceInfo","nameLocation":"11384:23:22","nodeType":"VariableDeclaration","scope":4927,"src":"11352:55:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$4202_storage_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo"},"typeName":{"id":4767,"nodeType":"UserDefinedTypeName","pathNode":{"id":4766,"name":"UserGlobalInsuranceInfo","nameLocations":["11352:23:22"],"nodeType":"IdentifierPath","referencedDeclaration":4202,"src":"11352:23:22"},"referencedDeclaration":4202,"src":"11352:23:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$4202_storage_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo"}},"visibility":"internal"}],"id":4773,"initialValue":{"baseExpression":{"id":4769,"name":"usersGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4208,"src":"11410:24:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserGlobalInsuranceInfo_$4202_storage_$","typeString":"mapping(address => struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage ref)"}},"id":4772,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4770,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"11435:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11435:12:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11410:38:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$4202_storage","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"11352:96:22"},{"assignments":[4775],"declarations":[{"constant":false,"id":4775,"mutability":"mutable","name":"userEstimatedBalance","nameLocation":"11475:20:22","nodeType":"VariableDeclaration","scope":4927,"src":"11467:28:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4774,"name":"uint256","nodeType":"ElementaryTypeName","src":"11467:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4784,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4778,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"11516:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11516:12:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4776,"name":"_sztDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4177,"src":"11498:7:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Extended_$6160","typeString":"contract IERC20Extended"}},"id":4777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11506:9:22","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":1424,"src":"11498:17:22","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":4780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11498:31:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":4781,"name":"userGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4768,"src":"11532:23:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$4202_storage_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage pointer"}},"id":4782,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11556:19:22","memberName":"globalInsuranceCost","nodeType":"MemberAccess","referencedDeclaration":4201,"src":"11532:43:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11498:77:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11467:108:22"},{"assignments":[4786],"declarations":[{"constant":false,"id":4786,"mutability":"mutable","name":"incomingAmountPerSec","nameLocation":"11593:20:22","nodeType":"VariableDeclaration","scope":4927,"src":"11585:28:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4785,"name":"uint256","nodeType":"ElementaryTypeName","src":"11585:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4797,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4789,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4710,"src":"11667:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4790,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4712,"src":"11679:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4787,"name":"_insuranceRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4180,"src":"11630:18:22","typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$6279","typeString":"contract IInsuranceRegistry"}},"id":4788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11649:17:22","memberName":"getStreamFlowRate","nodeType":"MemberAccess","referencedDeclaration":6278,"src":"11630:36:22","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) view external returns (uint256)"}},"id":4791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11630:63:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4792,"name":"insuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4708,"src":"11696:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11630:79:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4794,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11616:94:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"31653138","id":4795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11713:4:22","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"11616:101:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11585:132:22"},{"assignments":[4799],"declarations":[{"constant":false,"id":4799,"mutability":"mutable","name":"globalIncomingAmountPerSec","nameLocation":"11735:26:22","nodeType":"VariableDeclaration","scope":4927,"src":"11727:34:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4798,"name":"uint256","nodeType":"ElementaryTypeName","src":"11727:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4804,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4800,"name":"userGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4768,"src":"11764:23:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$4202_storage_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage pointer"}},"id":4801,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11788:19:22","memberName":"insuranceStreamRate","nodeType":"MemberAccess","referencedDeclaration":4199,"src":"11764:43:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4802,"name":"incomingAmountPerSec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4786,"src":"11810:20:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11764:66:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11727:103:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4805,"name":"globalIncomingAmountPerSec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4799,"src":"11951:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4806,"name":"_minimumInsurancePeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4159,"src":"11980:23:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11951:52:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4808,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11950:54:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4809,"name":"userEstimatedBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4775,"src":"12007:20:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11950:77:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4815,"nodeType":"IfStatement","src":"11946:157:22","trueBody":{"id":4814,"nodeType":"Block","src":"12029:74:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4811,"name":"CFA__NotEvenMinimumInsurancePeriodAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6011,"src":"12050:40:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12050:42:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4813,"nodeType":"RevertStatement","src":"12043:49:22"}]}},{"assignments":[4817],"declarations":[{"constant":false,"id":4817,"mutability":"mutable","name":"validTill","nameLocation":"12121:9:22","nodeType":"VariableDeclaration","scope":4927,"src":"12113:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4816,"name":"uint256","nodeType":"ElementaryTypeName","src":"12113:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4822,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4818,"name":"userEstimatedBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4775,"src":"12134:20:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4819,"name":"incomingAmountPerSec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4786,"src":"12157:20:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12134:43:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4821,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12133:45:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12113:65:22"},{"expression":{"id":4827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4823,"name":"userGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4768,"src":"12188:23:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$4202_storage_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage pointer"}},"id":4825,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12212:19:22","memberName":"insuranceStreamRate","nodeType":"MemberAccess","referencedDeclaration":4199,"src":"12188:43:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4826,"name":"incomingAmountPerSec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4786,"src":"12235:20:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12188:67:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4828,"nodeType":"ExpressionStatement","src":"12188:67:22"},{"expression":{"id":4833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4829,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4756,"src":"12265:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4831,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12283:13:22","memberName":"insuredAmount","nodeType":"MemberAccess","referencedDeclaration":4186,"src":"12265:31:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4832,"name":"insuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4708,"src":"12299:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12265:47:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4834,"nodeType":"ExpressionStatement","src":"12265:47:22"},{"expression":{"id":4839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4835,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4756,"src":"12322:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4837,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12340:17:22","memberName":"insuranceFlowRate","nodeType":"MemberAccess","referencedDeclaration":4190,"src":"12322:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4838,"name":"incomingAmountPerSec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4786,"src":"12360:20:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12322:58:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4840,"nodeType":"ExpressionStatement","src":"12322:58:22"},{"expression":{"id":4846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4841,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4756,"src":"12390:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4843,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12408:16:22","memberName":"registrationTime","nodeType":"MemberAccess","referencedDeclaration":4188,"src":"12390:34:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4844,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"12427:5:22","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12433:9:22","memberName":"timestamp","nodeType":"MemberAccess","src":"12427:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12390:52:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4847,"nodeType":"ExpressionStatement","src":"12390:52:22"},{"expression":{"id":4855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4848,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4756,"src":"12452:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4850,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12470:9:22","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":4182,"src":"12452:27:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4851,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"12482:5:22","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12488:9:22","memberName":"timestamp","nodeType":"MemberAccess","src":"12482:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4853,"name":"_startWaitingTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4157,"src":"12500:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12482:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12452:65:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4856,"nodeType":"ExpressionStatement","src":"12452:65:22"},{"expression":{"id":4873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4857,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4756,"src":"12527:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4859,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12545:9:22","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":4184,"src":"12527:27:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4860,"name":"validTill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4817,"src":"12571:9:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4861,"name":"_maxInsuredDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"12583:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12571:27:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4867,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4756,"src":"12656:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4868,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12674:9:22","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":4182,"src":"12656:27:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4869,"name":"_maxInsuredDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"12686:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12656:45:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12571:130:22","trueExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4863,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4756,"src":"12614:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4864,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12632:9:22","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":4182,"src":"12614:27:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4865,"name":"validTill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4817,"src":"12644:9:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12614:39:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4872,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12557:154:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12527:184:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4874,"nodeType":"ExpressionStatement","src":"12527:184:22"},{"expression":{"id":4881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4875,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4756,"src":"12721:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4877,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12739:13:22","memberName":"insuranceCost","nodeType":"MemberAccess","referencedDeclaration":4192,"src":"12721:31:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4878,"name":"validTill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4817,"src":"12755:9:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4879,"name":"incomingAmountPerSec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4786,"src":"12767:20:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12755:32:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12721:66:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4882,"nodeType":"ExpressionStatement","src":"12721:66:22"},{"expression":{"id":4887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4883,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4756,"src":"12797:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4885,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12815:7:22","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":4194,"src":"12797:25:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12825:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"12797:32:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4888,"nodeType":"ExpressionStatement","src":"12797:32:22"},{"expression":{"id":4894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4889,"name":"userGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4768,"src":"12848:23:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$4202_storage_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage pointer"}},"id":4891,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12872:19:22","memberName":"globalInsuranceCost","nodeType":"MemberAccess","referencedDeclaration":4201,"src":"12848:43:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":4892,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4756,"src":"12895:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4893,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12913:13:22","memberName":"insuranceCost","nodeType":"MemberAccess","referencedDeclaration":4192,"src":"12895:31:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12848:78:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4895,"nodeType":"ExpressionStatement","src":"12848:78:22"},{"expression":{"id":4910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4896,"name":"userGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4768,"src":"12936:23:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$4202_storage_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage pointer"}},"id":4898,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12960:9:22","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":4197,"src":"12936:33:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4899,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4756,"src":"12986:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4900,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13004:9:22","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":4184,"src":"12986:27:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4901,"name":"userGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4768,"src":"13016:23:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$4202_storage_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage pointer"}},"id":4902,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13040:9:22","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":4197,"src":"13016:33:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12986:63:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"id":4906,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4756,"src":"13101:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4907,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13119:9:22","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":4184,"src":"13101:27:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12986:142:22","trueExpression":{"expression":{"id":4904,"name":"userGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4768,"src":"13065:23:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$4202_storage_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage pointer"}},"id":4905,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13089:9:22","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":4197,"src":"13065:33:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4909,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12972:166:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12936:202:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4911,"nodeType":"ExpressionStatement","src":"12936:202:22"},{"assignments":[4913],"declarations":[{"constant":false,"id":4913,"mutability":"mutable","name":"success","nameLocation":"13153:7:22","nodeType":"VariableDeclaration","scope":4927,"src":"13148:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4912,"name":"bool","nodeType":"ElementaryTypeName","src":"13148:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4921,"initialValue":{"arguments":[{"id":4916,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4710,"src":"13201:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4917,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4712,"src":"13213:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4918,"name":"insuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4708,"src":"13228:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4919,"name":"incomingAmountPerSec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4786,"src":"13243:20:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4914,"name":"_insuranceRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4180,"src":"13163:18:22","typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$6279","typeString":"contract IInsuranceRegistry"}},"id":4915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13182:18:22","memberName":"addCoverageOffered","nodeType":"MemberAccess","referencedDeclaration":6206,"src":"13163:37:22","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256,uint256,uint256,uint256) external returns (bool)"}},"id":4920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13163:101:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"13148:116:22"},{"expression":{"components":[{"id":4922,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4913,"src":"13282:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"id":4923,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4756,"src":"13291:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4924,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13309:13:22","memberName":"insuranceCost","nodeType":"MemberAccess","referencedDeclaration":4192,"src":"13291:31:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4925,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13281:42:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":4718,"id":4926,"nodeType":"Return","src":"13274:49:22"}]},"documentation":{"id":4706,"nodeType":"StructuredDocumentation","src":"10525:97:22","text":"@param insuredAmount: insured amount\n @param categoryID: like Smart Contract Insurance"},"id":4928,"implemented":true,"kind":"function","modifiers":[],"name":"activateInsurance","nameLocation":"10636:17:22","nodeType":"FunctionDefinition","parameters":{"id":4713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4708,"mutability":"mutable","name":"insuredAmount","nameLocation":"10671:13:22","nodeType":"VariableDeclaration","scope":4928,"src":"10663:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4707,"name":"uint256","nodeType":"ElementaryTypeName","src":"10663:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4710,"mutability":"mutable","name":"categoryID","nameLocation":"10702:10:22","nodeType":"VariableDeclaration","scope":4928,"src":"10694:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4709,"name":"uint256","nodeType":"ElementaryTypeName","src":"10694:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4712,"mutability":"mutable","name":"subCategoryID","nameLocation":"10730:13:22","nodeType":"VariableDeclaration","scope":4928,"src":"10722:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4711,"name":"uint256","nodeType":"ElementaryTypeName","src":"10722:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10653:96:22"},"returnParameters":{"id":4718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4715,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4928,"src":"10766:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4714,"name":"bool","nodeType":"ElementaryTypeName","src":"10766:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4717,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4928,"src":"10772:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4716,"name":"uint256","nodeType":"ElementaryTypeName","src":"10772:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10765:15:22"},"scope":5705,"src":"10627:2703:22","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":5066,"nodeType":"Block","src":"13578:1353:22","statements":[{"assignments":[4942],"declarations":[{"constant":false,"id":4942,"mutability":"mutable","name":"userInsuranceInfo","nameLocation":"13614:17:22","nodeType":"VariableDeclaration","scope":5066,"src":"13588:43:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"},"typeName":{"id":4941,"nodeType":"UserDefinedTypeName","pathNode":{"id":4940,"name":"UserInsuranceInfo","nameLocations":["13588:17:22"],"nodeType":"IdentifierPath","referencedDeclaration":4195,"src":"13588:17:22"},"referencedDeclaration":4195,"src":"13588:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"}},"visibility":"internal"}],"id":4950,"initialValue":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4943,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4218,"src":"13634:18:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":4945,"indexExpression":{"id":4944,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4931,"src":"13653:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13634:31:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":4947,"indexExpression":{"id":4946,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4933,"src":"13666:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13634:43:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":4949,"indexExpression":{"id":4948,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4935,"src":"13678:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13634:58:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"13588:104:22"},{"condition":{"id":4953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"13706:26:22","subExpression":{"expression":{"id":4951,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4942,"src":"13707:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4952,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13725:7:22","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":4194,"src":"13707:25:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4958,"nodeType":"IfStatement","src":"13702:93:22","trueBody":{"id":4957,"nodeType":"Block","src":"13734:61:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4954,"name":"CFA__InactiveInsuranceError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6003,"src":"13755:27:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13755:29:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4956,"nodeType":"RevertStatement","src":"13748:36:22"}]}},{"expression":{"id":4963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4959,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4942,"src":"13804:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4961,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"13822:7:22","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":4194,"src":"13804:25:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":4962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13832:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"13804:33:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4964,"nodeType":"ExpressionStatement","src":"13804:33:22"},{"assignments":[4966],"declarations":[{"constant":false,"id":4966,"mutability":"mutable","name":"duration","nameLocation":"13855:8:22","nodeType":"VariableDeclaration","scope":5066,"src":"13847:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4965,"name":"uint256","nodeType":"ElementaryTypeName","src":"13847:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4992,"initialValue":{"components":[{"condition":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4967,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"13881:5:22","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13887:9:22","memberName":"timestamp","nodeType":"MemberAccess","src":"13881:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":4969,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4942,"src":"13899:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4970,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13917:9:22","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":4182,"src":"13899:27:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13881:45:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4972,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13880:47:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14109:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13880:230:22","trueExpression":{"components":[{"condition":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4973,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"13949:5:22","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13955:9:22","memberName":"timestamp","nodeType":"MemberAccess","src":"13949:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":4975,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4942,"src":"13967:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4976,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13985:9:22","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":4184,"src":"13967:27:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13949:45:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4978,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13948:47:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4981,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"14046:5:22","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14052:9:22","memberName":"timestamp","nodeType":"MemberAccess","src":"14046:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":4983,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4942,"src":"14064:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4984,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14082:9:22","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":4182,"src":"14064:27:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14046:45:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4986,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14045:47:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13948:144:22","trueExpression":{"expression":{"id":4979,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4942,"src":"14015:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4980,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14033:9:22","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":4184,"src":"14015:27:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4988,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13930:176:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4991,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13866:245:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13847:264:22"},{"assignments":[4994],"declarations":[{"constant":false,"id":4994,"mutability":"mutable","name":"amountToBeBurned","nameLocation":"14129:16:22","nodeType":"VariableDeclaration","scope":5066,"src":"14121:24:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4993,"name":"uint256","nodeType":"ElementaryTypeName","src":"14121:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5000,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4995,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4966,"src":"14149:8:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"id":4996,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4942,"src":"14160:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":4997,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14178:17:22","memberName":"insuranceFlowRate","nodeType":"MemberAccess","referencedDeclaration":4190,"src":"14160:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14149:46:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4999,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14148:48:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14121:75:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5001,"name":"amountToBeBurned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4994,"src":"14210:16:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14230:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14210:21:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5007,"nodeType":"IfStatement","src":"14206:63:22","trueBody":{"id":5006,"nodeType":"Block","src":"14233:36:22","statements":[{"expression":{"hexValue":"74727565","id":5004,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14254:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4939,"id":5005,"nodeType":"Return","src":"14247:11:22"}]}},{"expression":{"id":5014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":5008,"name":"usersGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4208,"src":"14279:24:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserGlobalInsuranceInfo_$4202_storage_$","typeString":"mapping(address => struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage ref)"}},"id":5010,"indexExpression":{"id":5009,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4931,"src":"14304:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14279:37:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$4202_storage","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage ref"}},"id":5011,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14317:19:22","memberName":"insuranceStreamRate","nodeType":"MemberAccess","referencedDeclaration":4199,"src":"14279:57:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"expression":{"id":5012,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4942,"src":"14340:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":5013,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14358:17:22","memberName":"insuranceFlowRate","nodeType":"MemberAccess","referencedDeclaration":4190,"src":"14340:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14279:96:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5015,"nodeType":"ExpressionStatement","src":"14279:96:22"},{"expression":{"id":5022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":5016,"name":"usersGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4208,"src":"14385:24:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserGlobalInsuranceInfo_$4202_storage_$","typeString":"mapping(address => struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage ref)"}},"id":5018,"indexExpression":{"id":5017,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4931,"src":"14410:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14385:37:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$4202_storage","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage ref"}},"id":5019,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14423:19:22","memberName":"globalInsuranceCost","nodeType":"MemberAccess","referencedDeclaration":4201,"src":"14385:57:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"expression":{"id":5020,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4942,"src":"14446:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":5021,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14464:13:22","memberName":"insuranceCost","nodeType":"MemberAccess","referencedDeclaration":4192,"src":"14446:31:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14385:92:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5023,"nodeType":"ExpressionStatement","src":"14385:92:22"},{"assignments":[5025],"declarations":[{"constant":false,"id":5025,"mutability":"mutable","name":"flowRate","nameLocation":"14495:8:22","nodeType":"VariableDeclaration","scope":5066,"src":"14487:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5024,"name":"uint256","nodeType":"ElementaryTypeName","src":"14487:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5028,"initialValue":{"expression":{"id":5026,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4942,"src":"14506:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":5027,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14524:17:22","memberName":"insuranceFlowRate","nodeType":"MemberAccess","referencedDeclaration":4190,"src":"14506:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14487:54:22"},{"assignments":[5030],"declarations":[{"constant":false,"id":5030,"mutability":"mutable","name":"insuredAmount","nameLocation":"14559:13:22","nodeType":"VariableDeclaration","scope":5066,"src":"14551:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5029,"name":"uint256","nodeType":"ElementaryTypeName","src":"14551:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5033,"initialValue":{"expression":{"id":5031,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4942,"src":"14575:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":5032,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14593:13:22","memberName":"insuredAmount","nodeType":"MemberAccess","referencedDeclaration":4186,"src":"14575:31:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14551:55:22"},{"assignments":[5035],"declarations":[{"constant":false,"id":5035,"mutability":"mutable","name":"success","nameLocation":"14621:7:22","nodeType":"VariableDeclaration","scope":5066,"src":"14616:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5034,"name":"bool","nodeType":"ElementaryTypeName","src":"14616:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":5043,"initialValue":{"arguments":[{"id":5038,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4933,"src":"14672:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5039,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4935,"src":"14684:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5040,"name":"insuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5030,"src":"14699:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5041,"name":"flowRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5025,"src":"14714:8:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5036,"name":"_insuranceRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4180,"src":"14631:18:22","typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$6279","typeString":"contract IInsuranceRegistry"}},"id":5037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14650:21:22","memberName":"removeCoverageOffered","nodeType":"MemberAccess","referencedDeclaration":6219,"src":"14631:40:22","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256,uint256,uint256,uint256) external returns (bool)"}},"id":5042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14631:92:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"14616:107:22"},{"assignments":[5045],"declarations":[{"constant":false,"id":5045,"mutability":"mutable","name":"burnSuccess","nameLocation":"14738:11:22","nodeType":"VariableDeclaration","scope":5066,"src":"14733:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5044,"name":"bool","nodeType":"ElementaryTypeName","src":"14733:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":5051,"initialValue":{"arguments":[{"id":5048,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4931,"src":"14769:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5049,"name":"amountToBeBurned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4994,"src":"14782:16:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5046,"name":"_sztDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4177,"src":"14752:7:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Extended_$6160","typeString":"contract IERC20Extended"}},"id":5047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14760:8:22","memberName":"burnFrom","nodeType":"MemberAccess","referencedDeclaration":6159,"src":"14752:16:22","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":5050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14752:47:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"14733:66:22"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":5053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"14814:8:22","subExpression":{"id":5052,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5035,"src":"14815:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5054,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14813:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"id":5056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"14828:12:22","subExpression":{"id":5055,"name":"burnSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5045,"src":"14829:11:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5057,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14827:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14813:28:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5063,"nodeType":"IfStatement","src":"14809:95:22","trueBody":{"id":5062,"nodeType":"Block","src":"14843:61:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5059,"name":"CFA__TransactionFailedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6001,"src":"14864:27:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14864:29:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5061,"nodeType":"RevertStatement","src":"14857:36:22"}]}},{"expression":{"hexValue":"74727565","id":5064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14920:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4939,"id":5065,"nodeType":"Return","src":"14913:11:22"}]},"documentation":{"id":4929,"nodeType":"StructuredDocumentation","src":"13336:90:22","text":"NOTE: few if and else to consider for globalinsuranceinfo like endtime and start time "},"id":5067,"implemented":true,"kind":"function","modifiers":[],"name":"deactivateInsurance","nameLocation":"13440:19:22","nodeType":"FunctionDefinition","parameters":{"id":4936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4931,"mutability":"mutable","name":"userAddress","nameLocation":"13477:11:22","nodeType":"VariableDeclaration","scope":5067,"src":"13469:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4930,"name":"address","nodeType":"ElementaryTypeName","src":"13469:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4933,"mutability":"mutable","name":"categoryID","nameLocation":"13507:10:22","nodeType":"VariableDeclaration","scope":5067,"src":"13499:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4932,"name":"uint256","nodeType":"ElementaryTypeName","src":"13499:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4935,"mutability":"mutable","name":"subCategoryID","nameLocation":"13536:13:22","nodeType":"VariableDeclaration","scope":5067,"src":"13528:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4934,"name":"uint256","nodeType":"ElementaryTypeName","src":"13528:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13459:96:22"},"returnParameters":{"id":4939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4938,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5067,"src":"13572:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4937,"name":"bool","nodeType":"ElementaryTypeName","src":"13572:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13571:6:22"},"scope":5705,"src":"13431:1500:22","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":5210,"nodeType":"Block","src":"15285:1290:22","statements":[{"assignments":[5081],"declarations":[{"constant":false,"id":5081,"mutability":"mutable","name":"activeID","nameLocation":"15312:8:22","nodeType":"VariableDeclaration","scope":5210,"src":"15295:25:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5079,"name":"uint256","nodeType":"ElementaryTypeName","src":"15295:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5080,"nodeType":"ArrayTypeName","src":"15295:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":5090,"initialValue":{"arguments":[{"id":5083,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5070,"src":"15345:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5084,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5072,"src":"15358:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":5087,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5072,"src":"15412:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5085,"name":"_insuranceRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4180,"src":"15370:18:22","typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$6279","typeString":"contract IInsuranceRegistry"}},"id":5086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15389:22:22","memberName":"getLatestSubCategoryID","nodeType":"MemberAccess","referencedDeclaration":6258,"src":"15370:41:22","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":5088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15370:53:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5082,"name":"findActivePremiumCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5313,"src":"15323:21:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (address,uint256,uint256) view returns (uint256[] memory)"}},"id":5089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15323:101:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"15295:129:22"},{"assignments":[5092],"declarations":[{"constant":false,"id":5092,"mutability":"mutable","name":"expectedAmountToBePaid","nameLocation":"15442:22:22","nodeType":"VariableDeclaration","scope":5210,"src":"15434:30:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5091,"name":"uint256","nodeType":"ElementaryTypeName","src":"15434:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5098,"initialValue":{"arguments":[{"id":5094,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5070,"src":"15491:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5095,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5072,"src":"15504:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5096,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5081,"src":"15516:8:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":5093,"name":"_calculateTotalFlowMade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5473,"src":"15467:23:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$_t_uint256_$","typeString":"function (address,uint256,uint256[] memory) view returns (uint256)"}},"id":5097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15467:58:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15434:91:22"},{"body":{"id":5168,"nodeType":"Block","src":"15574:572:22","statements":[{"expression":{"id":5118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":5107,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4218,"src":"15588:18:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":5113,"indexExpression":{"id":5108,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5070,"src":"15607:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15588:31:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":5114,"indexExpression":{"id":5109,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5072,"src":"15620:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15588:43:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":5115,"indexExpression":{"baseExpression":{"id":5110,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5081,"src":"15632:8:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5112,"indexExpression":{"id":5111,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5100,"src":"15641:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15632:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15588:56:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"id":5116,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"15645:7:22","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":4194,"src":"15588:64:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":5117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"15655:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"15588:72:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5119,"nodeType":"ExpressionStatement","src":"15588:72:22"},{"assignments":[5121],"declarations":[{"constant":false,"id":5121,"mutability":"mutable","name":"flowRate","nameLocation":"15682:8:22","nodeType":"VariableDeclaration","scope":5168,"src":"15674:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5120,"name":"uint256","nodeType":"ElementaryTypeName","src":"15674:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5132,"initialValue":{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":5122,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4218,"src":"15693:18:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":5124,"indexExpression":{"id":5123,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5070,"src":"15712:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15693:31:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":5126,"indexExpression":{"id":5125,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5072,"src":"15725:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15693:43:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":5130,"indexExpression":{"baseExpression":{"id":5127,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5081,"src":"15737:8:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5129,"indexExpression":{"id":5128,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5100,"src":"15746:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15737:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15693:56:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"id":5131,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15750:17:22","memberName":"insuranceFlowRate","nodeType":"MemberAccess","referencedDeclaration":4190,"src":"15693:74:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15674:93:22"},{"assignments":[5134],"declarations":[{"constant":false,"id":5134,"mutability":"mutable","name":"insuredAmount","nameLocation":"15789:13:22","nodeType":"VariableDeclaration","scope":5168,"src":"15781:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5133,"name":"uint256","nodeType":"ElementaryTypeName","src":"15781:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5145,"initialValue":{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":5135,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4218,"src":"15805:18:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":5137,"indexExpression":{"id":5136,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5070,"src":"15824:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15805:31:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":5139,"indexExpression":{"id":5138,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5072,"src":"15837:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15805:43:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":5143,"indexExpression":{"baseExpression":{"id":5140,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5081,"src":"15849:8:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5142,"indexExpression":{"id":5141,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5100,"src":"15858:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15849:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15805:56:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"id":5144,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15862:13:22","memberName":"insuredAmount","nodeType":"MemberAccess","referencedDeclaration":4186,"src":"15805:70:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15781:94:22"},{"assignments":[5147],"declarations":[{"constant":false,"id":5147,"mutability":"mutable","name":"coverageRemoveSuccess","nameLocation":"15894:21:22","nodeType":"VariableDeclaration","scope":5168,"src":"15889:26:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5146,"name":"bool","nodeType":"ElementaryTypeName","src":"15889:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":5157,"initialValue":{"arguments":[{"id":5150,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5072,"src":"15959:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":5151,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5081,"src":"15971:8:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5153,"indexExpression":{"id":5152,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5100,"src":"15980:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15971:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5154,"name":"insuredAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5134,"src":"15984:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5155,"name":"flowRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5121,"src":"15999:8:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5148,"name":"_insuranceRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4180,"src":"15918:18:22","typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$6279","typeString":"contract IInsuranceRegistry"}},"id":5149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15937:21:22","memberName":"removeCoverageOffered","nodeType":"MemberAccess","referencedDeclaration":6219,"src":"15918:40:22","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256,uint256,uint256,uint256) external returns (bool)"}},"id":5156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15918:90:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"15889:119:22"},{"condition":{"id":5159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"16026:22:22","subExpression":{"id":5158,"name":"coverageRemoveSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5147,"src":"16027:21:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5164,"nodeType":"IfStatement","src":"16022:97:22","trueBody":{"id":5163,"nodeType":"Block","src":"16050:69:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5160,"name":"CFA__TransactionFailedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6001,"src":"16075:27:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16075:29:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5162,"nodeType":"RevertStatement","src":"16068:36:22"}]}},{"expression":{"id":5166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"16132:3:22","subExpression":{"id":5165,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5100,"src":"16134:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5167,"nodeType":"ExpressionStatement","src":"16132:3:22"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5103,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5100,"src":"15552:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5104,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5081,"src":"15556:8:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15565:6:22","memberName":"length","nodeType":"MemberAccess","src":"15556:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15552:19:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5169,"initializationExpression":{"assignments":[5100],"declarations":[{"constant":false,"id":5100,"mutability":"mutable","name":"i","nameLocation":"15547:1:22","nodeType":"VariableDeclaration","scope":5169,"src":"15539:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5099,"name":"uint256","nodeType":"ElementaryTypeName","src":"15539:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5102,"initialValue":{"hexValue":"30","id":5101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15549:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"15539:11:22"},"nodeType":"ForStatement","src":"15535:611:22"},{"assignments":[5171],"declarations":[{"constant":false,"id":5171,"mutability":"mutable","name":"userBalance","nameLocation":"16163:11:22","nodeType":"VariableDeclaration","scope":5210,"src":"16155:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5170,"name":"uint256","nodeType":"ElementaryTypeName","src":"16155:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5176,"initialValue":{"arguments":[{"id":5174,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5070,"src":"16195:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5172,"name":"_sztDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4177,"src":"16177:7:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Extended_$6160","typeString":"contract IERC20Extended"}},"id":5173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16185:9:22","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":1424,"src":"16177:17:22","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":5175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16177:30:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16155:52:22"},{"assignments":[5178],"declarations":[{"constant":false,"id":5178,"mutability":"mutable","name":"amountToBeBurned","nameLocation":"16226:16:22","nodeType":"VariableDeclaration","scope":5210,"src":"16218:24:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5177,"name":"uint256","nodeType":"ElementaryTypeName","src":"16218:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5185,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5179,"name":"expectedAmountToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5092,"src":"16245:22:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5180,"name":"userBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5171,"src":"16270:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16245:36:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5183,"name":"expectedAmountToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5092,"src":"16298:22:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"16245:75:22","trueExpression":{"id":5182,"name":"userBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5171,"src":"16284:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16218:102:22"},{"expression":{"id":5191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":5186,"name":"usersGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4208,"src":"16330:24:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserGlobalInsuranceInfo_$4202_storage_$","typeString":"mapping(address => struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage ref)"}},"id":5188,"indexExpression":{"id":5187,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5070,"src":"16355:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16330:37:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$4202_storage","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage ref"}},"id":5189,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"16368:19:22","memberName":"insuranceStreamRate","nodeType":"MemberAccess","referencedDeclaration":4199,"src":"16330:57:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":5190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16390:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"16330:61:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5192,"nodeType":"ExpressionStatement","src":"16330:61:22"},{"assignments":[5194],"declarations":[{"constant":false,"id":5194,"mutability":"mutable","name":"success","nameLocation":"16406:7:22","nodeType":"VariableDeclaration","scope":5210,"src":"16401:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5193,"name":"bool","nodeType":"ElementaryTypeName","src":"16401:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":5200,"initialValue":{"arguments":[{"id":5197,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5070,"src":"16433:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5198,"name":"amountToBeBurned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5178,"src":"16446:16:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5195,"name":"_sztDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4177,"src":"16416:7:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Extended_$6160","typeString":"contract IERC20Extended"}},"id":5196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16424:8:22","memberName":"burnFrom","nodeType":"MemberAccess","referencedDeclaration":6159,"src":"16416:16:22","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":5199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16416:47:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"16401:62:22"},{"condition":{"id":5202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"16477:8:22","subExpression":{"id":5201,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5194,"src":"16478:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5207,"nodeType":"IfStatement","src":"16473:75:22","trueBody":{"id":5206,"nodeType":"Block","src":"16487:61:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5203,"name":"CFA__TransactionFailedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6001,"src":"16508:27:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16508:29:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5205,"nodeType":"RevertStatement","src":"16501:36:22"}]}},{"expression":{"hexValue":"74727565","id":5208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"16564:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":5076,"id":5209,"nodeType":"Return","src":"16557:11:22"}]},"documentation":{"id":5068,"nodeType":"StructuredDocumentation","src":"14937:219:22","text":"@dev this function aims to deactivate user's all activated insurance in a single-call.\n @param userAddress: user wallet address\n @param categoryID: insurance category, e.g., stablecoin depeg insurance."},"id":5211,"implemented":true,"kind":"function","modifiers":[],"name":"deactivateCategoryInsurance","nameLocation":"15170:27:22","nodeType":"FunctionDefinition","parameters":{"id":5073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5070,"mutability":"mutable","name":"userAddress","nameLocation":"15215:11:22","nodeType":"VariableDeclaration","scope":5211,"src":"15207:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5069,"name":"address","nodeType":"ElementaryTypeName","src":"15207:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5072,"mutability":"mutable","name":"categoryID","nameLocation":"15245:10:22","nodeType":"VariableDeclaration","scope":5211,"src":"15237:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5071,"name":"uint256","nodeType":"ElementaryTypeName","src":"15237:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15197:64:22"},"returnParameters":{"id":5076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5075,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5211,"src":"15279:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5074,"name":"bool","nodeType":"ElementaryTypeName","src":"15279:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15278:6:22"},"scope":5705,"src":"15161:1414:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[6059],"body":{"id":5312,"nodeType":"Block","src":"16782:758:22","statements":[{"assignments":[5226],"declarations":[{"constant":false,"id":5226,"mutability":"mutable","name":"activeProtocolCount","nameLocation":"16800:19:22","nodeType":"VariableDeclaration","scope":5312,"src":"16792:27:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5225,"name":"uint256","nodeType":"ElementaryTypeName","src":"16792:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5228,"initialValue":{"hexValue":"30","id":5227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16822:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"16792:31:22"},{"body":{"id":5257,"nodeType":"Block","src":"16872:231:22","statements":[{"assignments":[5238],"declarations":[{"constant":false,"id":5238,"mutability":"mutable","name":"userInsuranceInfo","nameLocation":"16911:17:22","nodeType":"VariableDeclaration","scope":5257,"src":"16886:42:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_memory_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"},"typeName":{"id":5237,"nodeType":"UserDefinedTypeName","pathNode":{"id":5236,"name":"UserInsuranceInfo","nameLocations":["16886:17:22"],"nodeType":"IdentifierPath","referencedDeclaration":4195,"src":"16886:17:22"},"referencedDeclaration":4195,"src":"16886:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"}},"visibility":"internal"}],"id":5246,"initialValue":{"baseExpression":{"baseExpression":{"baseExpression":{"id":5239,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4218,"src":"16931:18:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":5241,"indexExpression":{"id":5240,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5214,"src":"16950:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16931:31:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":5243,"indexExpression":{"id":5242,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5216,"src":"16963:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16931:43:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":5245,"indexExpression":{"id":5244,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5230,"src":"16975:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16931:46:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"16886:91:22"},{"condition":{"expression":{"id":5247,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5238,"src":"16995:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_memory_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo memory"}},"id":5248,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17013:7:22","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":4194,"src":"16995:25:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5253,"nodeType":"IfStatement","src":"16991:85:22","trueBody":{"id":5252,"nodeType":"Block","src":"17022:54:22","statements":[{"expression":{"id":5250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"17040:21:22","subExpression":{"id":5249,"name":"activeProtocolCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5226,"src":"17042:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5251,"nodeType":"ExpressionStatement","src":"17040:21:22"}]}},{"expression":{"id":5255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"17089:3:22","subExpression":{"id":5254,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5230,"src":"17091:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5256,"nodeType":"ExpressionStatement","src":"17089:3:22"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5233,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5230,"src":"16849:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5234,"name":"subCategoryCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5218,"src":"16853:16:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16849:20:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5258,"initializationExpression":{"assignments":[5230],"declarations":[{"constant":false,"id":5230,"mutability":"mutable","name":"i","nameLocation":"16842:1:22","nodeType":"VariableDeclaration","scope":5258,"src":"16837:6:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5229,"name":"uint","nodeType":"ElementaryTypeName","src":"16837:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5232,"initialValue":{"hexValue":"30","id":5231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16846:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"16837:10:22"},"nodeType":"ForStatement","src":"16833:270:22"},{"assignments":[5263],"declarations":[{"constant":false,"id":5263,"mutability":"mutable","name":"activeID","nameLocation":"17129:8:22","nodeType":"VariableDeclaration","scope":5312,"src":"17112:25:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5261,"name":"uint256","nodeType":"ElementaryTypeName","src":"17112:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5262,"nodeType":"ArrayTypeName","src":"17112:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":5269,"initialValue":{"arguments":[{"id":5267,"name":"activeProtocolCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5226,"src":"17154:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5266,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"17140:13:22","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":5264,"name":"uint256","nodeType":"ElementaryTypeName","src":"17144:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5265,"nodeType":"ArrayTypeName","src":"17144:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":5268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17140:34:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"17112:62:22"},{"assignments":[5271],"declarations":[{"constant":false,"id":5271,"mutability":"mutable","name":"counter","nameLocation":"17192:7:22","nodeType":"VariableDeclaration","scope":5312,"src":"17184:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5270,"name":"uint256","nodeType":"ElementaryTypeName","src":"17184:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5273,"initialValue":{"hexValue":"30","id":5272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17202:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"17184:19:22"},{"body":{"id":5308,"nodeType":"Block","src":"17252:259:22","statements":[{"assignments":[5283],"declarations":[{"constant":false,"id":5283,"mutability":"mutable","name":"userInsuranceInfo","nameLocation":"17292:17:22","nodeType":"VariableDeclaration","scope":5308,"src":"17266:43:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"},"typeName":{"id":5282,"nodeType":"UserDefinedTypeName","pathNode":{"id":5281,"name":"UserInsuranceInfo","nameLocations":["17266:17:22"],"nodeType":"IdentifierPath","referencedDeclaration":4195,"src":"17266:17:22"},"referencedDeclaration":4195,"src":"17266:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"}},"visibility":"internal"}],"id":5291,"initialValue":{"baseExpression":{"baseExpression":{"baseExpression":{"id":5284,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4218,"src":"17312:18:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":5286,"indexExpression":{"id":5285,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5214,"src":"17331:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17312:31:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":5288,"indexExpression":{"id":5287,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5216,"src":"17344:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17312:43:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":5290,"indexExpression":{"id":5289,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5275,"src":"17356:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17312:46:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"17266:92:22"},{"condition":{"expression":{"id":5292,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5283,"src":"17376:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":5293,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17394:7:22","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":4194,"src":"17376:25:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5304,"nodeType":"IfStatement","src":"17372:112:22","trueBody":{"id":5303,"nodeType":"Block","src":"17403:81:22","statements":[{"expression":{"id":5298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5294,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5263,"src":"17421:8:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5296,"indexExpression":{"id":5295,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5271,"src":"17430:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17421:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5297,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5275,"src":"17441:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17421:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5299,"nodeType":"ExpressionStatement","src":"17421:21:22"},{"expression":{"id":5301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"17460:9:22","subExpression":{"id":5300,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5271,"src":"17462:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5302,"nodeType":"ExpressionStatement","src":"17460:9:22"}]}},{"expression":{"id":5306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"17497:3:22","subExpression":{"id":5305,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5275,"src":"17499:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5307,"nodeType":"ExpressionStatement","src":"17497:3:22"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5278,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5275,"src":"17229:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5279,"name":"subCategoryCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5218,"src":"17233:16:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17229:20:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5309,"initializationExpression":{"assignments":[5275],"declarations":[{"constant":false,"id":5275,"mutability":"mutable","name":"i","nameLocation":"17222:1:22","nodeType":"VariableDeclaration","scope":5309,"src":"17217:6:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5274,"name":"uint","nodeType":"ElementaryTypeName","src":"17217:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5277,"initialValue":{"hexValue":"30","id":5276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17226:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"17217:10:22"},"nodeType":"ForStatement","src":"17213:298:22"},{"expression":{"id":5310,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5263,"src":"17525:8:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":5224,"id":5311,"nodeType":"Return","src":"17518:15:22"}]},"documentation":{"id":5212,"nodeType":"StructuredDocumentation","src":"16581:19:22","text":"VIEW FUNCTIONS"},"functionSelector":"1a5c8f28","id":5313,"implemented":true,"kind":"function","modifiers":[],"name":"findActivePremiumCost","nameLocation":"16614:21:22","nodeType":"FunctionDefinition","overrides":{"id":5220,"nodeType":"OverrideSpecifier","overrides":[],"src":"16747:8:22"},"parameters":{"id":5219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5214,"mutability":"mutable","name":"userAddress","nameLocation":"16653:11:22","nodeType":"VariableDeclaration","scope":5313,"src":"16645:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5213,"name":"address","nodeType":"ElementaryTypeName","src":"16645:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5216,"mutability":"mutable","name":"categoryID","nameLocation":"16683:10:22","nodeType":"VariableDeclaration","scope":5313,"src":"16675:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5215,"name":"uint256","nodeType":"ElementaryTypeName","src":"16675:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5218,"mutability":"mutable","name":"subCategoryCount","nameLocation":"16712:16:22","nodeType":"VariableDeclaration","scope":5313,"src":"16704:24:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5217,"name":"uint256","nodeType":"ElementaryTypeName","src":"16704:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16635:99:22"},"returnParameters":{"id":5224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5223,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5313,"src":"16764:16:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5221,"name":"uint256","nodeType":"ElementaryTypeName","src":"16764:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5222,"nodeType":"ArrayTypeName","src":"16764:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"16763:18:22"},"scope":5705,"src":"16605:935:22","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[6075],"body":{"id":5410,"nodeType":"Block","src":"17661:827:22","statements":[{"assignments":[5322],"declarations":[{"constant":false,"id":5322,"mutability":"mutable","name":"globalBalanceToBePaid","nameLocation":"17679:21:22","nodeType":"VariableDeclaration","scope":5410,"src":"17671:29:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5321,"name":"uint256","nodeType":"ElementaryTypeName","src":"17671:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5324,"initialValue":{"hexValue":"30","id":5323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17703:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"17671:33:22"},{"body":{"id":5406,"nodeType":"Block","src":"17754:690:22","statements":[{"assignments":[5333],"declarations":[{"constant":false,"id":5333,"mutability":"mutable","name":"balanceToBePaid","nameLocation":"17776:15:22","nodeType":"VariableDeclaration","scope":5406,"src":"17768:23:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5332,"name":"uint256","nodeType":"ElementaryTypeName","src":"17768:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5335,"initialValue":{"hexValue":"30","id":5334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17794:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"17768:27:22"},{"assignments":[5340],"declarations":[{"constant":false,"id":5340,"mutability":"mutable","name":"activeID","nameLocation":"17826:8:22","nodeType":"VariableDeclaration","scope":5406,"src":"17809:25:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5338,"name":"uint256","nodeType":"ElementaryTypeName","src":"17809:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5339,"nodeType":"ArrayTypeName","src":"17809:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":5349,"initialValue":{"arguments":[{"id":5342,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5316,"src":"17859:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5343,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5326,"src":"17872:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":5346,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5326,"src":"17917:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5344,"name":"_insuranceRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4180,"src":"17875:18:22","typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$6279","typeString":"contract IInsuranceRegistry"}},"id":5345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17894:22:22","memberName":"getLatestSubCategoryID","nodeType":"MemberAccess","referencedDeclaration":6258,"src":"17875:41:22","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":5347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17875:44:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5341,"name":"findActivePremiumCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5313,"src":"17837:21:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (address,uint256,uint256) view returns (uint256[] memory)"}},"id":5348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17837:83:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"17809:111:22"},{"body":{"id":5397,"nodeType":"Block","src":"17973:390:22","statements":[{"assignments":[5360],"declarations":[{"constant":false,"id":5360,"mutability":"mutable","name":"userActiveInsuranceInfo","nameLocation":"18017:23:22","nodeType":"VariableDeclaration","scope":5397,"src":"17991:49:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"},"typeName":{"id":5359,"nodeType":"UserDefinedTypeName","pathNode":{"id":5358,"name":"UserInsuranceInfo","nameLocations":["17991:17:22"],"nodeType":"IdentifierPath","referencedDeclaration":4195,"src":"17991:17:22"},"referencedDeclaration":4195,"src":"17991:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"}},"visibility":"internal"}],"id":5370,"initialValue":{"baseExpression":{"baseExpression":{"baseExpression":{"id":5361,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4218,"src":"18043:18:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":5363,"indexExpression":{"id":5362,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5316,"src":"18062:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18043:31:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":5365,"indexExpression":{"id":5364,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5326,"src":"18075:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18043:34:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":5369,"indexExpression":{"baseExpression":{"id":5366,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5340,"src":"18078:8:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5368,"indexExpression":{"id":5367,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5351,"src":"18087:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18078:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18043:47:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"17991:99:22"},{"assignments":[5372],"declarations":[{"constant":false,"id":5372,"mutability":"mutable","name":"duration","nameLocation":"18116:8:22","nodeType":"VariableDeclaration","scope":5397,"src":"18108:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5371,"name":"uint256","nodeType":"ElementaryTypeName","src":"18108:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5385,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5373,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"18127:5:22","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18133:9:22","memberName":"timestamp","nodeType":"MemberAccess","src":"18127:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":5375,"name":"userActiveInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5360,"src":"18145:23:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":5376,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18169:9:22","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":4182,"src":"18145:33:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18127:51:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":5383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18235:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":5384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"18127:109:22","trueExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5378,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"18181:5:22","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18187:9:22","memberName":"timestamp","nodeType":"MemberAccess","src":"18181:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":5380,"name":"userActiveInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5360,"src":"18199:23:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":5381,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18223:9:22","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":4182,"src":"18199:33:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18181:51:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18108:128:22"},{"expression":{"id":5392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5386,"name":"balanceToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5333,"src":"18254:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5387,"name":"userActiveInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5360,"src":"18274:23:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":5388,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18298:17:22","memberName":"insuranceFlowRate","nodeType":"MemberAccess","referencedDeclaration":4190,"src":"18274:41:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5389,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5372,"src":"18318:8:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18274:52:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5391,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18273:54:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18254:73:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5393,"nodeType":"ExpressionStatement","src":"18254:73:22"},{"expression":{"id":5395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"18345:3:22","subExpression":{"id":5394,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5351,"src":"18347:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5396,"nodeType":"ExpressionStatement","src":"18345:3:22"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5354,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5351,"src":"17951:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5355,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5340,"src":"17955:8:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17964:6:22","memberName":"length","nodeType":"MemberAccess","src":"17955:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17951:19:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5398,"initializationExpression":{"assignments":[5351],"declarations":[{"constant":false,"id":5351,"mutability":"mutable","name":"j","nameLocation":"17946:1:22","nodeType":"VariableDeclaration","scope":5398,"src":"17938:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5350,"name":"uint256","nodeType":"ElementaryTypeName","src":"17938:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5353,"initialValue":{"hexValue":"30","id":5352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17948:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"17938:11:22"},"nodeType":"ForStatement","src":"17934:429:22"},{"expression":{"id":5401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5399,"name":"globalBalanceToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5322,"src":"18376:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":5400,"name":"balanceToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5333,"src":"18401:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18376:40:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5402,"nodeType":"ExpressionStatement","src":"18376:40:22"},{"expression":{"id":5404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"18430:3:22","subExpression":{"id":5403,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5326,"src":"18432:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5405,"nodeType":"ExpressionStatement","src":"18430:3:22"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5329,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5326,"src":"17731:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5330,"name":"_categoriesCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4153,"src":"17735:16:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17731:20:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5407,"initializationExpression":{"assignments":[5326],"declarations":[{"constant":false,"id":5326,"mutability":"mutable","name":"i","nameLocation":"17726:1:22","nodeType":"VariableDeclaration","scope":5407,"src":"17718:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5325,"name":"uint256","nodeType":"ElementaryTypeName","src":"17718:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5328,"initialValue":{"hexValue":"30","id":5327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17728:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"17718:11:22"},"nodeType":"ForStatement","src":"17714:730:22"},{"expression":{"id":5408,"name":"globalBalanceToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5322,"src":"18460:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5320,"id":5409,"nodeType":"Return","src":"18453:28:22"}]},"documentation":{"id":5314,"nodeType":"StructuredDocumentation","src":"17546:12:22","text":"DURATION"},"functionSelector":"cff5eede","id":5411,"implemented":true,"kind":"function","modifiers":[],"name":"calculateTotalFlowMade","nameLocation":"17572:22:22","nodeType":"FunctionDefinition","parameters":{"id":5317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5316,"mutability":"mutable","name":"userAddress","nameLocation":"17612:11:22","nodeType":"VariableDeclaration","scope":5411,"src":"17604:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5315,"name":"address","nodeType":"ElementaryTypeName","src":"17604:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17594:35:22"},"returnParameters":{"id":5320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5319,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5411,"src":"17652:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5318,"name":"uint256","nodeType":"ElementaryTypeName","src":"17652:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17651:9:22"},"scope":5705,"src":"17563:925:22","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5472,"nodeType":"Block","src":"18657:463:22","statements":[{"assignments":[5424],"declarations":[{"constant":false,"id":5424,"mutability":"mutable","name":"balanceToBePaid","nameLocation":"18675:15:22","nodeType":"VariableDeclaration","scope":5472,"src":"18667:23:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5423,"name":"uint256","nodeType":"ElementaryTypeName","src":"18667:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5426,"initialValue":{"hexValue":"30","id":5425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18693:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18667:27:22"},{"body":{"id":5468,"nodeType":"Block","src":"18741:341:22","statements":[{"assignments":[5437],"declarations":[{"constant":false,"id":5437,"mutability":"mutable","name":"userActiveInsuranceInfo","nameLocation":"18781:23:22","nodeType":"VariableDeclaration","scope":5468,"src":"18755:49:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"},"typeName":{"id":5436,"nodeType":"UserDefinedTypeName","pathNode":{"id":5435,"name":"UserInsuranceInfo","nameLocations":["18755:17:22"],"nodeType":"IdentifierPath","referencedDeclaration":4195,"src":"18755:17:22"},"referencedDeclaration":4195,"src":"18755:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"}},"visibility":"internal"}],"id":5447,"initialValue":{"baseExpression":{"baseExpression":{"baseExpression":{"id":5438,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4218,"src":"18807:18:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":5440,"indexExpression":{"id":5439,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5413,"src":"18826:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18807:31:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":5442,"indexExpression":{"id":5441,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5415,"src":"18839:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18807:43:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":5446,"indexExpression":{"baseExpression":{"id":5443,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5418,"src":"18851:8:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5445,"indexExpression":{"id":5444,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5428,"src":"18860:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18851:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18807:56:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"18755:108:22"},{"assignments":[5449],"declarations":[{"constant":false,"id":5449,"mutability":"mutable","name":"duration","nameLocation":"18885:8:22","nodeType":"VariableDeclaration","scope":5468,"src":"18877:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5448,"name":"uint256","nodeType":"ElementaryTypeName","src":"18877:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5456,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5450,"name":"userActiveInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5437,"src":"18897:23:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":5451,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18921:9:22","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":4184,"src":"18897:33:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":5452,"name":"userActiveInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5437,"src":"18933:23:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":5453,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18957:9:22","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":4182,"src":"18933:33:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18897:69:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5455,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18896:71:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18877:90:22"},{"expression":{"id":5463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5457,"name":"balanceToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5424,"src":"18981:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5458,"name":"userActiveInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5437,"src":"19001:23:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":5459,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19025:17:22","memberName":"insuranceFlowRate","nodeType":"MemberAccess","referencedDeclaration":4190,"src":"19001:41:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5460,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5449,"src":"19045:8:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19001:52:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5462,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19000:54:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18981:73:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5464,"nodeType":"ExpressionStatement","src":"18981:73:22"},{"expression":{"id":5466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"19068:3:22","subExpression":{"id":5465,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5428,"src":"19070:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5467,"nodeType":"ExpressionStatement","src":"19068:3:22"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5431,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5428,"src":"18721:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5432,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5418,"src":"18724:8:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18733:6:22","memberName":"length","nodeType":"MemberAccess","src":"18724:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18721:18:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5469,"initializationExpression":{"assignments":[5428],"declarations":[{"constant":false,"id":5428,"mutability":"mutable","name":"i","nameLocation":"18716:1:22","nodeType":"VariableDeclaration","scope":5469,"src":"18708:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5427,"name":"uint256","nodeType":"ElementaryTypeName","src":"18708:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5430,"initialValue":{"hexValue":"30","id":5429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18718:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18708:11:22"},"nodeType":"ForStatement","src":"18704:378:22"},{"expression":{"id":5470,"name":"balanceToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5424,"src":"19098:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5422,"id":5471,"nodeType":"Return","src":"19091:22:22"}]},"id":5473,"implemented":true,"kind":"function","modifiers":[],"name":"_calculateTotalFlowMade","nameLocation":"18503:23:22","nodeType":"FunctionDefinition","parameters":{"id":5419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5413,"mutability":"mutable","name":"userAddress","nameLocation":"18544:11:22","nodeType":"VariableDeclaration","scope":5473,"src":"18536:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5412,"name":"address","nodeType":"ElementaryTypeName","src":"18536:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5415,"mutability":"mutable","name":"categoryID","nameLocation":"18574:10:22","nodeType":"VariableDeclaration","scope":5473,"src":"18566:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5414,"name":"uint256","nodeType":"ElementaryTypeName","src":"18566:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5418,"mutability":"mutable","name":"activeID","nameLocation":"18611:8:22","nodeType":"VariableDeclaration","scope":5473,"src":"18594:25:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5416,"name":"uint256","nodeType":"ElementaryTypeName","src":"18594:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5417,"nodeType":"ArrayTypeName","src":"18594:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"18526:99:22"},"returnParameters":{"id":5422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5421,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5473,"src":"18648:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5420,"name":"uint256","nodeType":"ElementaryTypeName","src":"18648:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18647:9:22"},"scope":5705,"src":"18494:626:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[6068],"body":{"id":5547,"nodeType":"Block","src":"19279:602:22","statements":[{"assignments":[5485],"declarations":[{"constant":false,"id":5485,"mutability":"mutable","name":"balanceToBePaid","nameLocation":"19297:15:22","nodeType":"VariableDeclaration","scope":5547,"src":"19289:23:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5484,"name":"uint256","nodeType":"ElementaryTypeName","src":"19289:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5487,"initialValue":{"hexValue":"30","id":5486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19315:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"19289:27:22"},{"assignments":[5492],"declarations":[{"constant":false,"id":5492,"mutability":"mutable","name":"activeID","nameLocation":"19343:8:22","nodeType":"VariableDeclaration","scope":5547,"src":"19326:25:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5490,"name":"uint256","nodeType":"ElementaryTypeName","src":"19326:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5491,"nodeType":"ArrayTypeName","src":"19326:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":5501,"initialValue":{"arguments":[{"id":5494,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5476,"src":"19376:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5495,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5478,"src":"19389:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":5498,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5478,"src":"19443:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5496,"name":"_insuranceRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4180,"src":"19401:18:22","typeDescriptions":{"typeIdentifier":"t_contract$_IInsuranceRegistry_$6279","typeString":"contract IInsuranceRegistry"}},"id":5497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19420:22:22","memberName":"getLatestSubCategoryID","nodeType":"MemberAccess","referencedDeclaration":6258,"src":"19401:41:22","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":5499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19401:53:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5493,"name":"findActivePremiumCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5313,"src":"19354:21:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (address,uint256,uint256) view returns (uint256[] memory)"}},"id":5500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19354:101:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"19326:129:22"},{"body":{"id":5543,"nodeType":"Block","src":"19502:341:22","statements":[{"assignments":[5512],"declarations":[{"constant":false,"id":5512,"mutability":"mutable","name":"userActiveInsuranceInfo","nameLocation":"19542:23:22","nodeType":"VariableDeclaration","scope":5543,"src":"19516:49:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"},"typeName":{"id":5511,"nodeType":"UserDefinedTypeName","pathNode":{"id":5510,"name":"UserInsuranceInfo","nameLocations":["19516:17:22"],"nodeType":"IdentifierPath","referencedDeclaration":4195,"src":"19516:17:22"},"referencedDeclaration":4195,"src":"19516:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"}},"visibility":"internal"}],"id":5522,"initialValue":{"baseExpression":{"baseExpression":{"baseExpression":{"id":5513,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4218,"src":"19568:18:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":5515,"indexExpression":{"id":5514,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5476,"src":"19587:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19568:31:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":5517,"indexExpression":{"id":5516,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5478,"src":"19600:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19568:43:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":5521,"indexExpression":{"baseExpression":{"id":5518,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5492,"src":"19612:8:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5520,"indexExpression":{"id":5519,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5503,"src":"19621:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19612:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19568:56:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"19516:108:22"},{"assignments":[5524],"declarations":[{"constant":false,"id":5524,"mutability":"mutable","name":"duration","nameLocation":"19646:8:22","nodeType":"VariableDeclaration","scope":5543,"src":"19638:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5523,"name":"uint256","nodeType":"ElementaryTypeName","src":"19638:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5531,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5525,"name":"userActiveInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"19658:23:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":5526,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19682:9:22","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":4184,"src":"19658:33:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":5527,"name":"userActiveInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"19694:23:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":5528,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19718:9:22","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":4182,"src":"19694:33:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19658:69:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5530,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19657:71:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"19638:90:22"},{"expression":{"id":5538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5532,"name":"balanceToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5485,"src":"19742:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5533,"name":"userActiveInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"19762:23:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage pointer"}},"id":5534,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19786:17:22","memberName":"insuranceFlowRate","nodeType":"MemberAccess","referencedDeclaration":4190,"src":"19762:41:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5535,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5524,"src":"19806:8:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19762:52:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5537,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19761:54:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19742:73:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5539,"nodeType":"ExpressionStatement","src":"19742:73:22"},{"expression":{"id":5541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"19829:3:22","subExpression":{"id":5540,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5503,"src":"19831:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5542,"nodeType":"ExpressionStatement","src":"19829:3:22"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5506,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5503,"src":"19482:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5507,"name":"activeID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5492,"src":"19485:8:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19494:6:22","memberName":"length","nodeType":"MemberAccess","src":"19485:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19482:18:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5544,"initializationExpression":{"assignments":[5503],"declarations":[{"constant":false,"id":5503,"mutability":"mutable","name":"i","nameLocation":"19477:1:22","nodeType":"VariableDeclaration","scope":5544,"src":"19469:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5502,"name":"uint256","nodeType":"ElementaryTypeName","src":"19469:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5505,"initialValue":{"hexValue":"30","id":5504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19479:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"19469:11:22"},"nodeType":"ForStatement","src":"19465:378:22"},{"expression":{"id":5545,"name":"balanceToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5485,"src":"19859:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5483,"id":5546,"nodeType":"Return","src":"19852:22:22"}]},"documentation":{"id":5474,"nodeType":"StructuredDocumentation","src":"19126:12:22","text":"DURATION"},"functionSelector":"4e94c048","id":5548,"implemented":true,"kind":"function","modifiers":[],"name":"calculateTotalFlowMade","nameLocation":"19152:22:22","nodeType":"FunctionDefinition","overrides":{"id":5480,"nodeType":"OverrideSpecifier","overrides":[],"src":"19253:8:22"},"parameters":{"id":5479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5476,"mutability":"mutable","name":"userAddress","nameLocation":"19192:11:22","nodeType":"VariableDeclaration","scope":5548,"src":"19184:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5475,"name":"address","nodeType":"ElementaryTypeName","src":"19184:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5478,"mutability":"mutable","name":"categoryID","nameLocation":"19222:10:22","nodeType":"VariableDeclaration","scope":5548,"src":"19214:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5477,"name":"uint256","nodeType":"ElementaryTypeName","src":"19214:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19174:64:22"},"returnParameters":{"id":5483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5482,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5548,"src":"19270:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5481,"name":"uint256","nodeType":"ElementaryTypeName","src":"19270:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19269:9:22"},"scope":5705,"src":"19143:738:22","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[6086],"body":{"id":5569,"nodeType":"Block","src":"20061:92:22","statements":[{"expression":{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":5560,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4218,"src":"20078:18:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":5562,"indexExpression":{"id":5561,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5550,"src":"20097:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20078:31:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":5564,"indexExpression":{"id":5563,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5552,"src":"20110:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20078:43:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":5566,"indexExpression":{"id":5565,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5554,"src":"20122:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20078:58:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"id":5567,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20137:9:22","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":4184,"src":"20078:68:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5559,"id":5568,"nodeType":"Return","src":"20071:75:22"}]},"functionSelector":"c392e850","id":5570,"implemented":true,"kind":"function","modifiers":[],"name":"getUserInsuranceValidTillInfo","nameLocation":"19897:29:22","nodeType":"FunctionDefinition","overrides":{"id":5556,"nodeType":"OverrideSpecifier","overrides":[],"src":"20035:8:22"},"parameters":{"id":5555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5550,"mutability":"mutable","name":"userAddress","nameLocation":"19944:11:22","nodeType":"VariableDeclaration","scope":5570,"src":"19936:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5549,"name":"address","nodeType":"ElementaryTypeName","src":"19936:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5552,"mutability":"mutable","name":"categoryID","nameLocation":"19974:10:22","nodeType":"VariableDeclaration","scope":5570,"src":"19966:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5551,"name":"uint256","nodeType":"ElementaryTypeName","src":"19966:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5554,"mutability":"mutable","name":"subCategoryID","nameLocation":"20003:13:22","nodeType":"VariableDeclaration","scope":5570,"src":"19995:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5553,"name":"uint256","nodeType":"ElementaryTypeName","src":"19995:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19926:96:22"},"returnParameters":{"id":5559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5558,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5570,"src":"20052:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5557,"name":"uint256","nodeType":"ElementaryTypeName","src":"20052:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20051:9:22"},"scope":5705,"src":"19888:265:22","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[6097],"body":{"id":5591,"nodeType":"Block","src":"20324:90:22","statements":[{"expression":{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":5582,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4218,"src":"20341:18:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":5584,"indexExpression":{"id":5583,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5572,"src":"20360:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20341:31:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":5586,"indexExpression":{"id":5585,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5574,"src":"20373:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20341:43:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":5588,"indexExpression":{"id":5587,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5576,"src":"20385:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20341:58:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"id":5589,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20400:7:22","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":4194,"src":"20341:66:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5581,"id":5590,"nodeType":"Return","src":"20334:73:22"}]},"functionSelector":"81280d2b","id":5592,"implemented":true,"kind":"function","modifiers":[],"name":"getUserInsuranceStatus","nameLocation":"20168:22:22","nodeType":"FunctionDefinition","overrides":{"id":5578,"nodeType":"OverrideSpecifier","overrides":[],"src":"20301:8:22"},"parameters":{"id":5577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5572,"mutability":"mutable","name":"userAddress","nameLocation":"20208:11:22","nodeType":"VariableDeclaration","scope":5592,"src":"20200:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5571,"name":"address","nodeType":"ElementaryTypeName","src":"20200:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5574,"mutability":"mutable","name":"categoryID","nameLocation":"20238:10:22","nodeType":"VariableDeclaration","scope":5592,"src":"20230:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5573,"name":"uint256","nodeType":"ElementaryTypeName","src":"20230:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5576,"mutability":"mutable","name":"subCategoryID","nameLocation":"20267:13:22","nodeType":"VariableDeclaration","scope":5592,"src":"20259:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5575,"name":"uint256","nodeType":"ElementaryTypeName","src":"20259:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20190:96:22"},"returnParameters":{"id":5581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5580,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5592,"src":"20318:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5579,"name":"bool","nodeType":"ElementaryTypeName","src":"20318:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"20317:6:22"},"scope":5705,"src":"20159:255:22","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[6118],"body":{"id":5639,"nodeType":"Block","src":"20628:415:22","statements":[{"assignments":[5616],"declarations":[{"constant":false,"id":5616,"mutability":"mutable","name":"userInsuranceInfo","nameLocation":"20663:17:22","nodeType":"VariableDeclaration","scope":5639,"src":"20638:42:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_memory_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"},"typeName":{"id":5615,"nodeType":"UserDefinedTypeName","pathNode":{"id":5614,"name":"UserInsuranceInfo","nameLocations":["20638:17:22"],"nodeType":"IdentifierPath","referencedDeclaration":4195,"src":"20638:17:22"},"referencedDeclaration":4195,"src":"20638:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo"}},"visibility":"internal"}],"id":5624,"initialValue":{"baseExpression":{"baseExpression":{"baseExpression":{"id":5617,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4218,"src":"20683:18:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":5619,"indexExpression":{"id":5618,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5594,"src":"20702:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20683:31:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":5621,"indexExpression":{"id":5620,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5596,"src":"20715:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20683:43:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":5623,"indexExpression":{"id":5622,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5598,"src":"20727:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20683:58:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"20638:103:22"},{"expression":{"components":[{"expression":{"id":5625,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5616,"src":"20772:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_memory_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo memory"}},"id":5626,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20790:13:22","memberName":"insuredAmount","nodeType":"MemberAccess","referencedDeclaration":4186,"src":"20772:31:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5627,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5616,"src":"20818:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_memory_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo memory"}},"id":5628,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20836:17:22","memberName":"insuranceFlowRate","nodeType":"MemberAccess","referencedDeclaration":4190,"src":"20818:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5629,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5616,"src":"20867:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_memory_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo memory"}},"id":5630,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20885:16:22","memberName":"registrationTime","nodeType":"MemberAccess","referencedDeclaration":4188,"src":"20867:34:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5631,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5616,"src":"20915:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_memory_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo memory"}},"id":5632,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20933:9:22","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":4182,"src":"20915:27:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5633,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5616,"src":"20956:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_memory_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo memory"}},"id":5634,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20974:9:22","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":4184,"src":"20956:27:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5635,"name":"userInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5616,"src":"20997:17:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_memory_ptr","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo memory"}},"id":5636,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21015:7:22","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":4194,"src":"20997:25:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5637,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"20758:278:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_bool_$","typeString":"tuple(uint256,uint256,uint256,uint256,uint256,bool)"}},"functionReturnParameters":5613,"id":5638,"nodeType":"Return","src":"20751:285:22"}]},"functionSelector":"88295fb2","id":5640,"implemented":true,"kind":"function","modifiers":[],"name":"getUserInsuranceInfo","nameLocation":"20429:20:22","nodeType":"FunctionDefinition","overrides":{"id":5600,"nodeType":"OverrideSpecifier","overrides":[],"src":"20560:8:22"},"parameters":{"id":5599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5594,"mutability":"mutable","name":"userAddress","nameLocation":"20467:11:22","nodeType":"VariableDeclaration","scope":5640,"src":"20459:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5593,"name":"address","nodeType":"ElementaryTypeName","src":"20459:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5596,"mutability":"mutable","name":"categoryID","nameLocation":"20497:10:22","nodeType":"VariableDeclaration","scope":5640,"src":"20489:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5595,"name":"uint256","nodeType":"ElementaryTypeName","src":"20489:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5598,"mutability":"mutable","name":"subCategoryID","nameLocation":"20526:13:22","nodeType":"VariableDeclaration","scope":5640,"src":"20518:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5597,"name":"uint256","nodeType":"ElementaryTypeName","src":"20518:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20449:96:22"},"returnParameters":{"id":5613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5602,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5640,"src":"20577:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5601,"name":"uint256","nodeType":"ElementaryTypeName","src":"20577:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5604,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5640,"src":"20586:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5603,"name":"uint256","nodeType":"ElementaryTypeName","src":"20586:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5606,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5640,"src":"20595:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5605,"name":"uint256","nodeType":"ElementaryTypeName","src":"20595:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5608,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5640,"src":"20604:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5607,"name":"uint256","nodeType":"ElementaryTypeName","src":"20604:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5610,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5640,"src":"20613:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5609,"name":"uint256","nodeType":"ElementaryTypeName","src":"20613:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5612,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5640,"src":"20622:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5611,"name":"bool","nodeType":"ElementaryTypeName","src":"20622:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"20576:51:22"},"scope":5705,"src":"20420:623:22","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[6127],"body":{"id":5663,"nodeType":"Block","src":"21171:209:22","statements":[{"assignments":[5652],"declarations":[{"constant":false,"id":5652,"mutability":"mutable","name":"userGlobalInsuranceInfo","nameLocation":"21212:23:22","nodeType":"VariableDeclaration","scope":5663,"src":"21181:54:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$4202_memory_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo"},"typeName":{"id":5651,"nodeType":"UserDefinedTypeName","pathNode":{"id":5650,"name":"UserGlobalInsuranceInfo","nameLocations":["21181:23:22"],"nodeType":"IdentifierPath","referencedDeclaration":4202,"src":"21181:23:22"},"referencedDeclaration":4202,"src":"21181:23:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$4202_storage_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo"}},"visibility":"internal"}],"id":5656,"initialValue":{"baseExpression":{"id":5653,"name":"usersGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4208,"src":"21238:24:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserGlobalInsuranceInfo_$4202_storage_$","typeString":"mapping(address => struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage ref)"}},"id":5655,"indexExpression":{"id":5654,"name":"_userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5642,"src":"21263:12:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21238:38:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$4202_storage","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"21181:95:22"},{"expression":{"components":[{"expression":{"id":5657,"name":"userGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5652,"src":"21294:23:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$4202_memory_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo memory"}},"id":5658,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21318:19:22","memberName":"insuranceStreamRate","nodeType":"MemberAccess","referencedDeclaration":4199,"src":"21294:43:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5659,"name":"userGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5652,"src":"21339:23:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$4202_memory_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo memory"}},"id":5660,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21363:9:22","memberName":"validTill","nodeType":"MemberAccess","referencedDeclaration":4197,"src":"21339:33:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5661,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21293:80:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":5649,"id":5662,"nodeType":"Return","src":"21286:87:22"}]},"functionSelector":"ec249164","id":5664,"implemented":true,"kind":"function","modifiers":[],"name":"getGlobalUserInsuranceInfo","nameLocation":"21058:26:22","nodeType":"FunctionDefinition","overrides":{"id":5644,"nodeType":"OverrideSpecifier","overrides":[],"src":"21135:8:22"},"parameters":{"id":5643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5642,"mutability":"mutable","name":"_userAddress","nameLocation":"21102:12:22","nodeType":"VariableDeclaration","scope":5664,"src":"21094:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5641,"name":"address","nodeType":"ElementaryTypeName","src":"21094:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"21084:36:22"},"returnParameters":{"id":5649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5646,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5664,"src":"21153:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5645,"name":"uint256","nodeType":"ElementaryTypeName","src":"21153:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5648,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5664,"src":"21162:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5647,"name":"uint256","nodeType":"ElementaryTypeName","src":"21162:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21152:18:22"},"scope":5705,"src":"21049:331:22","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[6134],"body":{"id":5682,"nodeType":"Block","src":"21504:171:22","statements":[{"assignments":[5674],"declarations":[{"constant":false,"id":5674,"mutability":"mutable","name":"userGlobalInsuranceInfo","nameLocation":"21544:23:22","nodeType":"VariableDeclaration","scope":5682,"src":"21513:54:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$4202_memory_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo"},"typeName":{"id":5673,"nodeType":"UserDefinedTypeName","pathNode":{"id":5672,"name":"UserGlobalInsuranceInfo","nameLocations":["21513:23:22"],"nodeType":"IdentifierPath","referencedDeclaration":4202,"src":"21513:23:22"},"referencedDeclaration":4202,"src":"21513:23:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$4202_storage_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo"}},"visibility":"internal"}],"id":5678,"initialValue":{"baseExpression":{"id":5675,"name":"usersGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4208,"src":"21570:24:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserGlobalInsuranceInfo_$4202_storage_$","typeString":"mapping(address => struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage ref)"}},"id":5677,"indexExpression":{"id":5676,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5666,"src":"21595:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21570:37:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$4202_storage","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"21513:94:22"},{"expression":{"expression":{"id":5679,"name":"userGlobalInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5674,"src":"21624:23:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserGlobalInsuranceInfo_$4202_memory_ptr","typeString":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo memory"}},"id":5680,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21648:19:22","memberName":"globalInsuranceCost","nodeType":"MemberAccess","referencedDeclaration":4201,"src":"21624:43:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5671,"id":5681,"nodeType":"Return","src":"21617:50:22"}]},"functionSelector":"42f6b8a7","id":5683,"implemented":true,"kind":"function","modifiers":[],"name":"getGlobalUserInsurancePremiumCost","nameLocation":"21395:33:22","nodeType":"FunctionDefinition","overrides":{"id":5668,"nodeType":"OverrideSpecifier","overrides":[],"src":"21478:8:22"},"parameters":{"id":5667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5666,"mutability":"mutable","name":"userAddress","nameLocation":"21446:11:22","nodeType":"VariableDeclaration","scope":5683,"src":"21438:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5665,"name":"address","nodeType":"ElementaryTypeName","src":"21438:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"21428:35:22"},"returnParameters":{"id":5671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5670,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5683,"src":"21495:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5669,"name":"uint256","nodeType":"ElementaryTypeName","src":"21495:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21494:9:22"},"scope":5705,"src":"21386:289:22","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5703,"nodeType":"Block","src":"21838:96:22","statements":[{"expression":{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":5694,"name":"usersInsuranceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4218,"src":"21855:18:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)))"}},"id":5696,"indexExpression":{"id":5695,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5685,"src":"21874:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21855:31:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$_$","typeString":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref))"}},"id":5698,"indexExpression":{"id":5697,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5687,"src":"21887:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21855:43:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserInsuranceInfo_$4195_storage_$","typeString":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo storage ref)"}},"id":5700,"indexExpression":{"id":5699,"name":"subCategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5689,"src":"21899:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21855:58:22","typeDescriptions":{"typeIdentifier":"t_struct$_UserInsuranceInfo_$4195_storage","typeString":"struct ConstantFlowAgreement.UserInsuranceInfo storage ref"}},"id":5701,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21914:13:22","memberName":"insuredAmount","nodeType":"MemberAccess","referencedDeclaration":4186,"src":"21855:72:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5693,"id":5702,"nodeType":"Return","src":"21848:79:22"}]},"functionSelector":"6b6d105e","id":5704,"implemented":true,"kind":"function","modifiers":[],"name":"getUserInsuredAmount","nameLocation":"21690:20:22","nodeType":"FunctionDefinition","parameters":{"id":5690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5685,"mutability":"mutable","name":"userAddress","nameLocation":"21728:11:22","nodeType":"VariableDeclaration","scope":5704,"src":"21720:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5684,"name":"address","nodeType":"ElementaryTypeName","src":"21720:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5687,"mutability":"mutable","name":"categoryID","nameLocation":"21758:10:22","nodeType":"VariableDeclaration","scope":5704,"src":"21750:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5686,"name":"uint256","nodeType":"ElementaryTypeName","src":"21750:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5689,"mutability":"mutable","name":"subCategoryID","nameLocation":"21787:13:22","nodeType":"VariableDeclaration","scope":5704,"src":"21779:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5688,"name":"uint256","nodeType":"ElementaryTypeName","src":"21779:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21710:96:22"},"returnParameters":{"id":5693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5692,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5704,"src":"21829:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5691,"name":"uint256","nodeType":"ElementaryTypeName","src":"21829:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21828:9:22"},"scope":5705,"src":"21681:253:22","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5706,"src":"620:21316:22","usedErrors":[4016,5999,6001,6003,6005,6007,6009,6011]}],"src":"37:21899:22"},"id":22},"contracts/core/token/SZTDAIERC20.sol":{"ast":{"absolutePath":"contracts/core/token/SZTDAIERC20.sol","exportedSymbols":{"AccessControlUpgradeable":[335],"AddressUpgradeable":[2284],"BaseUpgradeablePausable":[4109],"BaseUpgradeablePausable__ZeroAddressError":[4016],"Constants":[4138],"ContextUpgradeable":[2326],"CountersUpgradeable":[2400],"ECDSAUpgradeable":[2936],"EIP712Upgradeable":[3086],"ERC165Upgradeable":[3130],"ERC20PermitUpgradeable":[1683],"ERC20Upgradeable":[1389],"ERC20__ImmutableChangesError":[5715],"ERC20__InsufficientBalanceError":[5719],"ERC20__SameAdressTransferError":[5717],"IAccessControlUpgradeable":[408],"ICFA":[6135],"IERC165Upgradeable":[3142],"IERC20Extended":[6160],"IERC20MetadataUpgradeable":[1492],"IERC20PermitUpgradeable":[1719],"IERC20Upgradeable":[1467],"Initializable":[577],"MathUpgradeable":[4007],"PausableUpgradeable":[704],"ReentrancyGuardUpgradeable":[777],"SZTDAI":[5989],"StringsUpgradeable":[2575]},"id":5990,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5707,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"32:23:23"},{"absolutePath":"contracts/interfaces/ICFA.sol","file":"./../../interfaces/ICFA.sol","id":5708,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5990,"sourceUnit":6136,"src":"184:37:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IERC20Extended.sol","file":"./../../interfaces/IERC20Extended.sol","id":5709,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5990,"sourceUnit":6161,"src":"222:47:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/BaseUpgradeablePausable.sol","file":"./../../BaseUpgradeablePausable.sol","id":5710,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5990,"sourceUnit":4110,"src":"304:45:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol","id":5711,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5990,"sourceUnit":1390,"src":"350:78:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol","id":5712,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5990,"sourceUnit":1684,"src":"429:101:23","symbolAliases":[],"unitAlias":""},{"documentation":{"id":5713,"nodeType":"StructuredDocumentation","src":"532:23:23","text":"Custom Error Codes"},"errorSelector":"2669450e","id":5715,"name":"ERC20__ImmutableChangesError","nameLocation":"561:28:23","nodeType":"ErrorDefinition","parameters":{"id":5714,"nodeType":"ParameterList","parameters":[],"src":"589:2:23"},"src":"555:37:23"},{"errorSelector":"ced4ef35","id":5717,"name":"ERC20__SameAdressTransferError","nameLocation":"599:30:23","nodeType":"ErrorDefinition","parameters":{"id":5716,"nodeType":"ParameterList","parameters":[],"src":"629:2:23"},"src":"593:39:23"},{"errorSelector":"99502527","id":5719,"name":"ERC20__InsufficientBalanceError","nameLocation":"639:31:23","nodeType":"ErrorDefinition","parameters":{"id":5718,"nodeType":"ParameterList","parameters":[],"src":"670:2:23"},"src":"633:40:23"},{"abstract":false,"baseContracts":[{"baseName":{"id":5721,"name":"ERC20Upgradeable","nameLocations":["780:16:23"],"nodeType":"IdentifierPath","referencedDeclaration":1389,"src":"780:16:23"},"id":5722,"nodeType":"InheritanceSpecifier","src":"780:16:23"},{"baseName":{"id":5723,"name":"IERC20Extended","nameLocations":["798:14:23"],"nodeType":"IdentifierPath","referencedDeclaration":6160,"src":"798:14:23"},"id":5724,"nodeType":"InheritanceSpecifier","src":"798:14:23"},{"baseName":{"id":5725,"name":"ERC20PermitUpgradeable","nameLocations":["814:22:23"],"nodeType":"IdentifierPath","referencedDeclaration":1683,"src":"814:22:23"},"id":5726,"nodeType":"InheritanceSpecifier","src":"814:22:23"},{"baseName":{"id":5727,"name":"BaseUpgradeablePausable","nameLocations":["838:23:23"],"nodeType":"IdentifierPath","referencedDeclaration":4109,"src":"838:23:23"},"id":5728,"nodeType":"InheritanceSpecifier","src":"838:23:23"}],"canonicalName":"SZTDAI","contractDependencies":[],"contractKind":"contract","documentation":{"id":5720,"nodeType":"StructuredDocumentation","src":"675:85:23","text":"Report any bug or issues at:\n @custom:security-contact anshik@safezen.finance"},"fullyImplemented":true,"id":5989,"linearizedBaseContracts":[5989,4109,777,335,3130,3142,408,704,1683,3086,1719,6160,1389,1492,1467,2326,577],"name":"SZTDAI","nameLocation":"770:6:23","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":5730,"mutability":"mutable","name":"_initVersion","nameLocation":"884:12:23","nodeType":"VariableDeclaration","scope":5989,"src":"868:28:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5729,"name":"uint256","nodeType":"ElementaryTypeName","src":"868:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"functionSelector":"276ec86a","id":5732,"mutability":"mutable","name":"swapContractDAI","nameLocation":"917:15:23","nodeType":"VariableDeclaration","scope":5989,"src":"902:30:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5731,"name":"address","nodeType":"ElementaryTypeName","src":"902:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"id":5735,"mutability":"mutable","name":"_contractFlowAgreement","nameLocation":"951:22:23","nodeType":"VariableDeclaration","scope":5989,"src":"938:35:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ICFA_$6135","typeString":"contract ICFA"},"typeName":{"id":5734,"nodeType":"UserDefinedTypeName","pathNode":{"id":5733,"name":"ICFA","nameLocations":["938:4:23"],"nodeType":"IdentifierPath","referencedDeclaration":6135,"src":"938:4:23"},"referencedDeclaration":6135,"src":"938:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_ICFA_$6135","typeString":"contract ICFA"}},"visibility":"private"},{"body":{"id":5755,"nodeType":"Block","src":"1008:158:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5738,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"1040:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1040:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5740,"name":"swapContractDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5732,"src":"1056:15:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1040:31:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5742,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1039:33:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5743,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"1090:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1090:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":5747,"name":"_contractFlowAgreement","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5735,"src":"1114:22:23","typeDescriptions":{"typeIdentifier":"t_contract$_ICFA_$6135","typeString":"contract ICFA"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ICFA_$6135","typeString":"contract ICFA"}],"id":5746,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1106:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5745,"name":"address","nodeType":"ElementaryTypeName","src":"1106:7:23","typeDescriptions":{}}},"id":5748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1106:31:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1090:47:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5750,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1089:49:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1039:99:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5737,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1018:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":5752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1018:130:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5753,"nodeType":"ExpressionStatement","src":"1018:130:23"},{"id":5754,"nodeType":"PlaceholderStatement","src":"1158:1:23"}]},"id":5756,"name":"onlyPermissioned","nameLocation":"989:16:23","nodeType":"ModifierDefinition","parameters":{"id":5736,"nodeType":"ParameterList","parameters":[],"src":"1005:2:23"},"src":"980:186:23","virtual":false,"visibility":"internal"},{"body":{"id":5775,"nodeType":"Block","src":"1215:155:23","statements":[{"expression":{"arguments":[{"hexValue":"535a54204441492053747265616d20546f6b656e","id":5762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1238:22:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_5f586bb4ed7548461b1c8871822b3a54e83b3fe9aaccc88630a6f1ad02452661","typeString":"literal_string \"SZT DAI Stream Token\""},"value":"SZT DAI Stream Token"},{"hexValue":"535a54444149","id":5763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1262:8:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_e3b2558db28332e9d82c9efee6f4d961905519ec143b82be8d074fd0d8b957c9","typeString":"literal_string \"SZTDAI\""},"value":"SZTDAI"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5f586bb4ed7548461b1c8871822b3a54e83b3fe9aaccc88630a6f1ad02452661","typeString":"literal_string \"SZT DAI Stream Token\""},{"typeIdentifier":"t_stringliteral_e3b2558db28332e9d82c9efee6f4d961905519ec143b82be8d074fd0d8b957c9","typeString":"literal_string \"SZTDAI\""}],"id":5761,"name":"__ERC20_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"1225:12:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":5764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1225:46:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5765,"nodeType":"ExpressionStatement","src":"1225:46:23"},{"expression":{"arguments":[{"hexValue":"535a54444149","id":5767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1300:8:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_e3b2558db28332e9d82c9efee6f4d961905519ec143b82be8d074fd0d8b957c9","typeString":"literal_string \"SZTDAI\""},"value":"SZTDAI"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_e3b2558db28332e9d82c9efee6f4d961905519ec143b82be8d074fd0d8b957c9","typeString":"literal_string \"SZTDAI\""}],"id":5766,"name":"__ERC20Permit_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1540,"src":"1281:18:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":5768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1281:28:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5769,"nodeType":"ExpressionStatement","src":"1281:28:23"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5771,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"1350:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1350:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5770,"name":"__BaseUpgradeablePausable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4094,"src":"1319:30:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":5773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1319:44:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5774,"nodeType":"ExpressionStatement","src":"1319:44:23"}]},"functionSelector":"8129fc1c","id":5776,"implemented":true,"kind":"function","modifiers":[{"id":5759,"kind":"modifierInvocation","modifierName":{"id":5758,"name":"initializer","nameLocations":["1203:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":479,"src":"1203:11:23"},"nodeType":"ModifierInvocation","src":"1203:11:23"}],"name":"initialize","nameLocation":"1181:10:23","nodeType":"FunctionDefinition","parameters":{"id":5757,"nodeType":"ParameterList","parameters":[],"src":"1191:2:23"},"returnParameters":{"id":5760,"nodeType":"ParameterList","parameters":[],"src":"1215:0:23"},"scope":5989,"src":"1172:198:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5806,"nodeType":"Block","src":"1477:219:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5785,"name":"_initVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5730,"src":"1491:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1506:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1491:16:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5792,"nodeType":"IfStatement","src":"1487:84:23","trueBody":{"id":5791,"nodeType":"Block","src":"1509:62:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5788,"name":"ERC20__ImmutableChangesError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5715,"src":"1530:28:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1530:30:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5790,"nodeType":"RevertStatement","src":"1523:37:23"}]}},{"expression":{"id":5794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"1580:14:23","subExpression":{"id":5793,"name":"_initVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5730,"src":"1582:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5795,"nodeType":"ExpressionStatement","src":"1580:14:23"},{"expression":{"id":5798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5796,"name":"swapContractDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5732,"src":"1604:15:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5797,"name":"_addressSwapDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5778,"src":"1622:15:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1604:33:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5799,"nodeType":"ExpressionStatement","src":"1604:33:23"},{"expression":{"id":5804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5800,"name":"_contractFlowAgreement","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5735,"src":"1647:22:23","typeDescriptions":{"typeIdentifier":"t_contract$_ICFA_$6135","typeString":"contract ICFA"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5802,"name":"_addressCFA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"1677:11:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5801,"name":"ICFA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6135,"src":"1672:4:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ICFA_$6135_$","typeString":"type(contract ICFA)"}},"id":5803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1672:17:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ICFA_$6135","typeString":"contract ICFA"}},"src":"1647:42:23","typeDescriptions":{"typeIdentifier":"t_contract$_ICFA_$6135","typeString":"contract ICFA"}},"id":5805,"nodeType":"ExpressionStatement","src":"1647:42:23"}]},"functionSelector":"f09a4016","id":5807,"implemented":true,"kind":"function","modifiers":[{"id":5783,"kind":"modifierInvocation","modifierName":{"id":5782,"name":"onlyAdmin","nameLocations":["1467:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":4034,"src":"1467:9:23"},"nodeType":"ModifierInvocation","src":"1467:9:23"}],"name":"init","nameLocation":"1385:4:23","nodeType":"FunctionDefinition","parameters":{"id":5781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5778,"mutability":"mutable","name":"_addressSwapDAI","nameLocation":"1407:15:23","nodeType":"VariableDeclaration","scope":5807,"src":"1399:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5777,"name":"address","nodeType":"ElementaryTypeName","src":"1399:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5780,"mutability":"mutable","name":"_addressCFA","nameLocation":"1440:11:23","nodeType":"VariableDeclaration","scope":5807,"src":"1432:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5779,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1389:68:23"},"returnParameters":{"id":5784,"nodeType":"ParameterList","parameters":[],"src":"1477:0:23"},"scope":5989,"src":"1376:320:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5815,"nodeType":"Block","src":"1738:25:23","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5812,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"1748:6:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1748:8:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5814,"nodeType":"ExpressionStatement","src":"1748:8:23"}]},"functionSelector":"8456cb59","id":5816,"implemented":true,"kind":"function","modifiers":[{"id":5810,"kind":"modifierInvocation","modifierName":{"id":5809,"name":"onlyAdmin","nameLocations":["1728:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":4034,"src":"1728:9:23"},"nodeType":"ModifierInvocation","src":"1728:9:23"}],"name":"pause","nameLocation":"1711:5:23","nodeType":"FunctionDefinition","parameters":{"id":5808,"nodeType":"ParameterList","parameters":[],"src":"1716:2:23"},"returnParameters":{"id":5811,"nodeType":"ParameterList","parameters":[],"src":"1738:0:23"},"scope":5989,"src":"1702:61:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5824,"nodeType":"Block","src":"1807:27:23","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5821,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"1817:8:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1817:10:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5823,"nodeType":"ExpressionStatement","src":"1817:10:23"}]},"functionSelector":"3f4ba83a","id":5825,"implemented":true,"kind":"function","modifiers":[{"id":5819,"kind":"modifierInvocation","modifierName":{"id":5818,"name":"onlyAdmin","nameLocations":["1797:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":4034,"src":"1797:9:23"},"nodeType":"ModifierInvocation","src":"1797:9:23"}],"name":"unpause","nameLocation":"1778:7:23","nodeType":"FunctionDefinition","parameters":{"id":5817,"nodeType":"ParameterList","parameters":[],"src":"1785:2:23"},"returnParameters":{"id":5820,"nodeType":"ParameterList","parameters":[],"src":"1807:0:23"},"scope":5989,"src":"1769:65:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[6150],"body":{"id":5844,"nodeType":"Block","src":"1984:55:23","statements":[{"expression":{"arguments":[{"id":5838,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5827,"src":"2000:2:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5839,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5829,"src":"2004:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5837,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1201,"src":"1994:5:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1994:17:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5841,"nodeType":"ExpressionStatement","src":"1994:17:23"},{"expression":{"hexValue":"74727565","id":5842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2028:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":5836,"id":5843,"nodeType":"Return","src":"2021:11:23"}]},"functionSelector":"40c10f19","id":5845,"implemented":true,"kind":"function","modifiers":[{"id":5832,"kind":"modifierInvocation","modifierName":{"id":5831,"name":"onlyPermissioned","nameLocations":["1944:16:23"],"nodeType":"IdentifierPath","referencedDeclaration":5756,"src":"1944:16:23"},"nodeType":"ModifierInvocation","src":"1944:16:23"}],"name":"mint","nameLocation":"1902:4:23","nodeType":"FunctionDefinition","overrides":{"id":5833,"nodeType":"OverrideSpecifier","overrides":[],"src":"1961:8:23"},"parameters":{"id":5830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5827,"mutability":"mutable","name":"to","nameLocation":"1915:2:23","nodeType":"VariableDeclaration","scope":5845,"src":"1907:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5826,"name":"address","nodeType":"ElementaryTypeName","src":"1907:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5829,"mutability":"mutable","name":"amount","nameLocation":"1927:6:23","nodeType":"VariableDeclaration","scope":5845,"src":"1919:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5828,"name":"uint256","nodeType":"ElementaryTypeName","src":"1919:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1906:28:23"},"returnParameters":{"id":5836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5835,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5845,"src":"1978:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5834,"name":"bool","nodeType":"ElementaryTypeName","src":"1978:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1977:6:23"},"scope":5989,"src":"1893:146:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[6159],"body":{"id":5869,"nodeType":"Block","src":"2128:116:23","statements":[{"expression":{"arguments":[{"id":5856,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5847,"src":"2154:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":5857,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"2163:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2163:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5859,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5849,"src":"2177:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5855,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"2138:15:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":5860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2138:46:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5861,"nodeType":"ExpressionStatement","src":"2138:46:23"},{"expression":{"arguments":[{"id":5863,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5847,"src":"2200:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5864,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5849,"src":"2209:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5862,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1273,"src":"2194:5:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2194:22:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5866,"nodeType":"ExpressionStatement","src":"2194:22:23"},{"expression":{"hexValue":"74727565","id":5867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2233:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":5854,"id":5868,"nodeType":"Return","src":"2226:11:23"}]},"functionSelector":"79cc6790","id":5870,"implemented":true,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"2054:8:23","nodeType":"FunctionDefinition","overrides":{"id":5851,"nodeType":"OverrideSpecifier","overrides":[],"src":"2105:8:23"},"parameters":{"id":5850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5847,"mutability":"mutable","name":"account","nameLocation":"2071:7:23","nodeType":"VariableDeclaration","scope":5870,"src":"2063:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5846,"name":"address","nodeType":"ElementaryTypeName","src":"2063:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5849,"mutability":"mutable","name":"amount","nameLocation":"2088:6:23","nodeType":"VariableDeclaration","scope":5870,"src":"2080:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5848,"name":"uint256","nodeType":"ElementaryTypeName","src":"2080:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2062:33:23"},"returnParameters":{"id":5854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5853,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5870,"src":"2122:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5852,"name":"bool","nodeType":"ElementaryTypeName","src":"2122:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2121:6:23"},"scope":5989,"src":"2045:199:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[921,1434],"body":{"id":5921,"nodeType":"Block","src":"2386:399:23","statements":[{"assignments":[5883],"declarations":[{"constant":false,"id":5883,"mutability":"mutable","name":"owner","nameLocation":"2404:5:23","nodeType":"VariableDeclaration","scope":5921,"src":"2396:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5882,"name":"address","nodeType":"ElementaryTypeName","src":"2396:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5886,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":5884,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"2412:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2412:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2396:28:23"},{"assignments":[5888],"declarations":[{"constant":false,"id":5888,"mutability":"mutable","name":"userCurrentBalance","nameLocation":"2442:18:23","nodeType":"VariableDeclaration","scope":5921,"src":"2434:26:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5887,"name":"uint256","nodeType":"ElementaryTypeName","src":"2434:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5893,"initialValue":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5890,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"2473:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2473:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5889,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"2463:9:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":5892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2463:23:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2434:52:23"},{"assignments":[5895],"declarations":[{"constant":false,"id":5895,"mutability":"mutable","name":"userPremiumCost","nameLocation":"2504:15:23","nodeType":"VariableDeclaration","scope":5921,"src":"2496:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5894,"name":"uint256","nodeType":"ElementaryTypeName","src":"2496:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5901,"initialValue":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5898,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"2579:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2579:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5896,"name":"_contractFlowAgreement","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5735,"src":"2522:22:23","typeDescriptions":{"typeIdentifier":"t_contract$_ICFA_$6135","typeString":"contract ICFA"}},"id":5897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2545:33:23","memberName":"getGlobalUserInsurancePremiumCost","nodeType":"MemberAccess","referencedDeclaration":6134,"src":"2522:56:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":5900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2522:70:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2496:96:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5902,"name":"userCurrentBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5888,"src":"2607:18:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5903,"name":"userPremiumCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5895,"src":"2628:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2607:36:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5905,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2606:38:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5906,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5874,"src":"2647:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2606:47:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5912,"nodeType":"IfStatement","src":"2602:118:23","trueBody":{"id":5911,"nodeType":"Block","src":"2655:65:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5908,"name":"ERC20__InsufficientBalanceError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5719,"src":"2676:31:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2676:33:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5910,"nodeType":"RevertStatement","src":"2669:40:23"}]}},{"expression":{"arguments":[{"id":5914,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5883,"src":"2739:5:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5915,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5872,"src":"2746:2:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5916,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5874,"src":"2750:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5913,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"2729:9:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":5917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2729:28:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5918,"nodeType":"ExpressionStatement","src":"2729:28:23"},{"expression":{"hexValue":"74727565","id":5919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2774:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":5881,"id":5920,"nodeType":"Return","src":"2767:11:23"}]},"functionSelector":"a9059cbb","id":5922,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"2259:8:23","nodeType":"FunctionDefinition","overrides":{"id":5878,"nodeType":"OverrideSpecifier","overrides":[{"id":5876,"name":"ERC20Upgradeable","nameLocations":["2335:16:23"],"nodeType":"IdentifierPath","referencedDeclaration":1389,"src":"2335:16:23"},{"id":5877,"name":"IERC20Upgradeable","nameLocations":["2353:17:23"],"nodeType":"IdentifierPath","referencedDeclaration":1467,"src":"2353:17:23"}],"src":"2326:45:23"},"parameters":{"id":5875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5872,"mutability":"mutable","name":"to","nameLocation":"2285:2:23","nodeType":"VariableDeclaration","scope":5922,"src":"2277:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5871,"name":"address","nodeType":"ElementaryTypeName","src":"2277:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5874,"mutability":"mutable","name":"amount","nameLocation":"2306:6:23","nodeType":"VariableDeclaration","scope":5922,"src":"2298:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5873,"name":"uint256","nodeType":"ElementaryTypeName","src":"2298:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2267:51:23"},"returnParameters":{"id":5881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5880,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5922,"src":"2380:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5879,"name":"bool","nodeType":"ElementaryTypeName","src":"2380:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2379:6:23"},"scope":5989,"src":"2250:535:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[997,1466],"body":{"id":5987,"nodeType":"Block","src":"2954:521:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5936,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5926,"src":"2968:2:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5937,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5924,"src":"2974:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2968:10:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5943,"nodeType":"IfStatement","src":"2964:80:23","trueBody":{"id":5942,"nodeType":"Block","src":"2980:64:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5939,"name":"ERC20__SameAdressTransferError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5717,"src":"3001:30:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3001:32:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5941,"nodeType":"RevertStatement","src":"2994:39:23"}]}},{"assignments":[5945],"declarations":[{"constant":false,"id":5945,"mutability":"mutable","name":"userCurrentBalance","nameLocation":"3061:18:23","nodeType":"VariableDeclaration","scope":5987,"src":"3053:26:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5944,"name":"uint256","nodeType":"ElementaryTypeName","src":"3053:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5949,"initialValue":{"arguments":[{"id":5947,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5924,"src":"3092:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5946,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"3082:9:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":5948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3082:15:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3053:44:23"},{"assignments":[5951],"declarations":[{"constant":false,"id":5951,"mutability":"mutable","name":"userPremiumCost","nameLocation":"3115:15:23","nodeType":"VariableDeclaration","scope":5987,"src":"3107:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5950,"name":"uint256","nodeType":"ElementaryTypeName","src":"3107:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5956,"initialValue":{"arguments":[{"id":5954,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5924,"src":"3190:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5952,"name":"_contractFlowAgreement","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5735,"src":"3133:22:23","typeDescriptions":{"typeIdentifier":"t_contract$_ICFA_$6135","typeString":"contract ICFA"}},"id":5953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3156:33:23","memberName":"getGlobalUserInsurancePremiumCost","nodeType":"MemberAccess","referencedDeclaration":6134,"src":"3133:56:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":5955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3133:62:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3107:88:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5957,"name":"userCurrentBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5945,"src":"3210:18:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5958,"name":"userPremiumCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5951,"src":"3231:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3210:36:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5960,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3209:38:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5961,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5928,"src":"3250:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3209:47:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5967,"nodeType":"IfStatement","src":"3205:118:23","trueBody":{"id":5966,"nodeType":"Block","src":"3258:65:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5963,"name":"ERC20__InsufficientBalanceError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5719,"src":"3279:31:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3279:33:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5965,"nodeType":"RevertStatement","src":"3272:40:23"}]}},{"assignments":[5969],"declarations":[{"constant":false,"id":5969,"mutability":"mutable","name":"spender","nameLocation":"3340:7:23","nodeType":"VariableDeclaration","scope":5987,"src":"3332:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5968,"name":"address","nodeType":"ElementaryTypeName","src":"3332:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5972,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":5970,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"3350:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3350:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3332:30:23"},{"expression":{"arguments":[{"id":5974,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5924,"src":"3388:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5975,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5969,"src":"3394:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5976,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5928,"src":"3403:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5973,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"3372:15:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":5977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3372:38:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5978,"nodeType":"ExpressionStatement","src":"3372:38:23"},{"expression":{"arguments":[{"id":5980,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5924,"src":"3430:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5981,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5926,"src":"3436:2:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5982,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5928,"src":"3440:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5979,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"3420:9:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":5983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3420:27:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5984,"nodeType":"ExpressionStatement","src":"3420:27:23"},{"expression":{"hexValue":"74727565","id":5985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3464:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":5935,"id":5986,"nodeType":"Return","src":"3457:11:23"}]},"functionSelector":"23b872dd","id":5988,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2800:12:23","nodeType":"FunctionDefinition","overrides":{"id":5932,"nodeType":"OverrideSpecifier","overrides":[{"id":5930,"name":"ERC20Upgradeable","nameLocations":["2903:16:23"],"nodeType":"IdentifierPath","referencedDeclaration":1389,"src":"2903:16:23"},{"id":5931,"name":"IERC20Upgradeable","nameLocations":["2921:17:23"],"nodeType":"IdentifierPath","referencedDeclaration":1467,"src":"2921:17:23"}],"src":"2894:45:23"},"parameters":{"id":5929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5924,"mutability":"mutable","name":"from","nameLocation":"2830:4:23","nodeType":"VariableDeclaration","scope":5988,"src":"2822:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5923,"name":"address","nodeType":"ElementaryTypeName","src":"2822:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5926,"mutability":"mutable","name":"to","nameLocation":"2853:2:23","nodeType":"VariableDeclaration","scope":5988,"src":"2845:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5925,"name":"address","nodeType":"ElementaryTypeName","src":"2845:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5928,"mutability":"mutable","name":"amount","nameLocation":"2874:6:23","nodeType":"VariableDeclaration","scope":5988,"src":"2866:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5927,"name":"uint256","nodeType":"ElementaryTypeName","src":"2866:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2812:74:23"},"returnParameters":{"id":5935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5934,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5988,"src":"2948:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5933,"name":"bool","nodeType":"ElementaryTypeName","src":"2948:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2947:6:23"},"scope":5989,"src":"2791:684:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":5990,"src":"761:2716:23","usedErrors":[4016,5715,5717,5719]}],"src":"32:3445:23"},"id":23},"contracts/interfaces/ICFA.sol":{"ast":{"absolutePath":"contracts/interfaces/ICFA.sol","exportedSymbols":{"ICFA":[6135]},"id":6136,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":5991,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"37:23:24"},{"abstract":false,"baseContracts":[],"canonicalName":"ICFA","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":6135,"linearizedBaseContracts":[6135],"name":"ICFA","nameLocation":"73:4:24","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"db4fb2fd6b8b90f67bda8671842d5cab4eb4b7eba9683f5bcec9aba9473cc957","id":5993,"name":"UpdatedMaxInsuredDays","nameLocation":"108:21:24","nodeType":"EventDefinition","parameters":{"id":5992,"nodeType":"ParameterList","parameters":[],"src":"129:2:24"},"src":"102:30:24"},{"anonymous":false,"eventSelector":"75c07eb064b8ccf959bcc601b55315ca198e67b597dc0a7b93e130f8ca779a67","id":5995,"name":"UpdatedStartWaitingTime","nameLocation":"143:23:24","nodeType":"EventDefinition","parameters":{"id":5994,"nodeType":"ParameterList","parameters":[],"src":"166:2:24"},"src":"137:32:24"},{"anonymous":false,"eventSelector":"003a5a2424463bb22c8fc4c0f2422b7a18712b7713f9619caa313f499fad615e","id":5997,"name":"UpdatedMinimumInsurancePeriod","nameLocation":"180:29:24","nodeType":"EventDefinition","parameters":{"id":5996,"nodeType":"ParameterList","parameters":[],"src":"209:2:24"},"src":"174:38:24"},{"errorSelector":"005321aa","id":5999,"name":"CFA__ImmutableChangesError","nameLocation":"253:26:24","nodeType":"ErrorDefinition","parameters":{"id":5998,"nodeType":"ParameterList","parameters":[],"src":"279:2:24"},"src":"247:35:24"},{"errorSelector":"b00fcb1e","id":6001,"name":"CFA__TransactionFailedError","nameLocation":"293:27:24","nodeType":"ErrorDefinition","parameters":{"id":6000,"nodeType":"ParameterList","parameters":[],"src":"320:2:24"},"src":"287:36:24"},{"errorSelector":"96ae3e82","id":6003,"name":"CFA__InactiveInsuranceError","nameLocation":"334:27:24","nodeType":"ErrorDefinition","parameters":{"id":6002,"nodeType":"ParameterList","parameters":[],"src":"361:2:24"},"src":"328:36:24"},{"errorSelector":"1e45d1b4","id":6005,"name":"CFA__SubCategoryNotActiveError","nameLocation":"375:30:24","nodeType":"ErrorDefinition","parameters":{"id":6004,"nodeType":"ParameterList","parameters":[],"src":"405:2:24"},"src":"369:39:24"},{"errorSelector":"707001b5","id":6007,"name":"CFA__ActiveInsuranceExistError","nameLocation":"419:30:24","nodeType":"ErrorDefinition","parameters":{"id":6006,"nodeType":"ParameterList","parameters":[],"src":"449:2:24"},"src":"413:39:24"},{"errorSelector":"00cd4743","id":6009,"name":"CFA__InsuranceCoverNotAvailableError","nameLocation":"463:36:24","nodeType":"ErrorDefinition","parameters":{"id":6008,"nodeType":"ParameterList","parameters":[],"src":"499:2:24"},"src":"457:45:24"},{"errorSelector":"e4b581a5","id":6011,"name":"CFA__NotEvenMinimumInsurancePeriodAmount","nameLocation":"513:40:24","nodeType":"ErrorDefinition","parameters":{"id":6010,"nodeType":"ParameterList","parameters":[],"src":"553:2:24"},"src":"507:49:24"},{"functionSelector":"6e8847bd","id":6028,"implemented":false,"kind":"function","modifiers":[],"name":"addInsuranceAmount","nameLocation":"571:18:24","nodeType":"FunctionDefinition","parameters":{"id":6024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6013,"mutability":"mutable","name":"insuredAmount","nameLocation":"607:13:24","nodeType":"VariableDeclaration","scope":6028,"src":"599:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6012,"name":"uint256","nodeType":"ElementaryTypeName","src":"599:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6015,"mutability":"mutable","name":"categoryID","nameLocation":"639:10:24","nodeType":"VariableDeclaration","scope":6028,"src":"631:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6014,"name":"uint256","nodeType":"ElementaryTypeName","src":"631:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6017,"mutability":"mutable","name":"subCategoryID","nameLocation":"668:13:24","nodeType":"VariableDeclaration","scope":6028,"src":"660:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6016,"name":"uint256","nodeType":"ElementaryTypeName","src":"660:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6019,"mutability":"mutable","name":"v","nameLocation":"697:1:24","nodeType":"VariableDeclaration","scope":6028,"src":"691:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6018,"name":"uint8","nodeType":"ElementaryTypeName","src":"691:5:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":6021,"mutability":"mutable","name":"r","nameLocation":"717:1:24","nodeType":"VariableDeclaration","scope":6028,"src":"709:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6020,"name":"bytes32","nodeType":"ElementaryTypeName","src":"709:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6023,"mutability":"mutable","name":"s","nameLocation":"737:1:24","nodeType":"VariableDeclaration","scope":6028,"src":"729:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6022,"name":"bytes32","nodeType":"ElementaryTypeName","src":"729:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"589:155:24"},"returnParameters":{"id":6027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6026,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6028,"src":"762:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6025,"name":"bool","nodeType":"ElementaryTypeName","src":"762:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"761:6:24"},"scope":6135,"src":"562:206:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"642adc28","id":6047,"implemented":false,"kind":"function","modifiers":[],"name":"minusInsuranceAmount","nameLocation":"783:20:24","nodeType":"FunctionDefinition","parameters":{"id":6043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6030,"mutability":"mutable","name":"insuredAmount","nameLocation":"821:13:24","nodeType":"VariableDeclaration","scope":6047,"src":"813:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6029,"name":"uint256","nodeType":"ElementaryTypeName","src":"813:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6032,"mutability":"mutable","name":"categoryID","nameLocation":"853:10:24","nodeType":"VariableDeclaration","scope":6047,"src":"845:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6031,"name":"uint256","nodeType":"ElementaryTypeName","src":"845:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6034,"mutability":"mutable","name":"subCategoryID","nameLocation":"882:13:24","nodeType":"VariableDeclaration","scope":6047,"src":"874:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6033,"name":"uint256","nodeType":"ElementaryTypeName","src":"874:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6036,"mutability":"mutable","name":"v","nameLocation":"911:1:24","nodeType":"VariableDeclaration","scope":6047,"src":"905:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6035,"name":"uint8","nodeType":"ElementaryTypeName","src":"905:5:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":6038,"mutability":"mutable","name":"r","nameLocation":"931:1:24","nodeType":"VariableDeclaration","scope":6047,"src":"923:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6037,"name":"bytes32","nodeType":"ElementaryTypeName","src":"923:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6040,"mutability":"mutable","name":"s","nameLocation":"951:1:24","nodeType":"VariableDeclaration","scope":6047,"src":"943:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6039,"name":"bytes32","nodeType":"ElementaryTypeName","src":"943:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6042,"mutability":"mutable","name":"closeStream","nameLocation":"967:11:24","nodeType":"VariableDeclaration","scope":6047,"src":"962:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6041,"name":"bool","nodeType":"ElementaryTypeName","src":"962:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:181:24"},"returnParameters":{"id":6046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6045,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6047,"src":"1002:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6044,"name":"bool","nodeType":"ElementaryTypeName","src":"1002:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1001:6:24"},"scope":6135,"src":"774:234:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"1a5c8f28","id":6059,"implemented":false,"kind":"function","modifiers":[],"name":"findActivePremiumCost","nameLocation":"1023:21:24","nodeType":"FunctionDefinition","parameters":{"id":6054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6049,"mutability":"mutable","name":"userAddress","nameLocation":"1062:11:24","nodeType":"VariableDeclaration","scope":6059,"src":"1054:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6048,"name":"address","nodeType":"ElementaryTypeName","src":"1054:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6051,"mutability":"mutable","name":"categoryID","nameLocation":"1092:10:24","nodeType":"VariableDeclaration","scope":6059,"src":"1084:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6050,"name":"uint256","nodeType":"ElementaryTypeName","src":"1084:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6053,"mutability":"mutable","name":"insuranceCount","nameLocation":"1121:14:24","nodeType":"VariableDeclaration","scope":6059,"src":"1113:22:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6052,"name":"uint256","nodeType":"ElementaryTypeName","src":"1113:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1044:97:24"},"returnParameters":{"id":6058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6057,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6059,"src":"1164:16:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":6055,"name":"uint256","nodeType":"ElementaryTypeName","src":"1164:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6056,"nodeType":"ArrayTypeName","src":"1164:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1163:18:24"},"scope":6135,"src":"1014:168:24","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"4e94c048","id":6068,"implemented":false,"kind":"function","modifiers":[],"name":"calculateTotalFlowMade","nameLocation":"1197:22:24","nodeType":"FunctionDefinition","parameters":{"id":6064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6061,"mutability":"mutable","name":"userAddress","nameLocation":"1237:11:24","nodeType":"VariableDeclaration","scope":6068,"src":"1229:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6060,"name":"address","nodeType":"ElementaryTypeName","src":"1229:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6063,"mutability":"mutable","name":"categoryID","nameLocation":"1267:10:24","nodeType":"VariableDeclaration","scope":6068,"src":"1259:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6062,"name":"uint256","nodeType":"ElementaryTypeName","src":"1259:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1219:64:24"},"returnParameters":{"id":6067,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6066,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6068,"src":"1306:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6065,"name":"uint256","nodeType":"ElementaryTypeName","src":"1306:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1305:9:24"},"scope":6135,"src":"1188:127:24","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"cff5eede","id":6075,"implemented":false,"kind":"function","modifiers":[],"name":"calculateTotalFlowMade","nameLocation":"1332:22:24","nodeType":"FunctionDefinition","parameters":{"id":6071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6070,"mutability":"mutable","name":"userAddress","nameLocation":"1372:11:24","nodeType":"VariableDeclaration","scope":6075,"src":"1364:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6069,"name":"address","nodeType":"ElementaryTypeName","src":"1364:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1354:35:24"},"returnParameters":{"id":6074,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6073,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6075,"src":"1412:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6072,"name":"uint256","nodeType":"ElementaryTypeName","src":"1412:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1411:9:24"},"scope":6135,"src":"1323:98:24","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"c392e850","id":6086,"implemented":false,"kind":"function","modifiers":[],"name":"getUserInsuranceValidTillInfo","nameLocation":"1437:29:24","nodeType":"FunctionDefinition","parameters":{"id":6082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6077,"mutability":"mutable","name":"userAddress","nameLocation":"1484:11:24","nodeType":"VariableDeclaration","scope":6086,"src":"1476:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6076,"name":"address","nodeType":"ElementaryTypeName","src":"1476:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6079,"mutability":"mutable","name":"categoryID","nameLocation":"1514:10:24","nodeType":"VariableDeclaration","scope":6086,"src":"1506:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6078,"name":"uint256","nodeType":"ElementaryTypeName","src":"1506:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6081,"mutability":"mutable","name":"subCategoryID","nameLocation":"1543:13:24","nodeType":"VariableDeclaration","scope":6086,"src":"1535:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6080,"name":"uint256","nodeType":"ElementaryTypeName","src":"1535:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1466:96:24"},"returnParameters":{"id":6085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6084,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6086,"src":"1585:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6083,"name":"uint256","nodeType":"ElementaryTypeName","src":"1585:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1584:9:24"},"scope":6135,"src":"1428:166:24","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"81280d2b","id":6097,"implemented":false,"kind":"function","modifiers":[],"name":"getUserInsuranceStatus","nameLocation":"1609:22:24","nodeType":"FunctionDefinition","parameters":{"id":6093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6088,"mutability":"mutable","name":"userAddress","nameLocation":"1649:11:24","nodeType":"VariableDeclaration","scope":6097,"src":"1641:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6087,"name":"address","nodeType":"ElementaryTypeName","src":"1641:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6090,"mutability":"mutable","name":"categoryID","nameLocation":"1679:10:24","nodeType":"VariableDeclaration","scope":6097,"src":"1671:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6089,"name":"uint256","nodeType":"ElementaryTypeName","src":"1671:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6092,"mutability":"mutable","name":"subCategoryID","nameLocation":"1708:13:24","nodeType":"VariableDeclaration","scope":6097,"src":"1700:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6091,"name":"uint256","nodeType":"ElementaryTypeName","src":"1700:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1631:96:24"},"returnParameters":{"id":6096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6095,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6097,"src":"1750:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6094,"name":"bool","nodeType":"ElementaryTypeName","src":"1750:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1749:6:24"},"scope":6135,"src":"1600:156:24","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"88295fb2","id":6118,"implemented":false,"kind":"function","modifiers":[],"name":"getUserInsuranceInfo","nameLocation":"1771:20:24","nodeType":"FunctionDefinition","parameters":{"id":6104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6099,"mutability":"mutable","name":"userAddress","nameLocation":"1809:11:24","nodeType":"VariableDeclaration","scope":6118,"src":"1801:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6098,"name":"address","nodeType":"ElementaryTypeName","src":"1801:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6101,"mutability":"mutable","name":"categoryID","nameLocation":"1839:10:24","nodeType":"VariableDeclaration","scope":6118,"src":"1831:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6100,"name":"uint256","nodeType":"ElementaryTypeName","src":"1831:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6103,"mutability":"mutable","name":"subCategoryID","nameLocation":"1868:13:24","nodeType":"VariableDeclaration","scope":6118,"src":"1860:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6102,"name":"uint256","nodeType":"ElementaryTypeName","src":"1860:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1791:96:24"},"returnParameters":{"id":6117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6106,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6118,"src":"1910:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6105,"name":"uint256","nodeType":"ElementaryTypeName","src":"1910:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6108,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6118,"src":"1919:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6107,"name":"uint256","nodeType":"ElementaryTypeName","src":"1919:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6110,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6118,"src":"1928:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6109,"name":"uint256","nodeType":"ElementaryTypeName","src":"1928:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6112,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6118,"src":"1937:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6111,"name":"uint256","nodeType":"ElementaryTypeName","src":"1937:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6114,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6118,"src":"1946:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6113,"name":"uint256","nodeType":"ElementaryTypeName","src":"1946:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6116,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6118,"src":"1955:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6115,"name":"bool","nodeType":"ElementaryTypeName","src":"1955:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1909:51:24"},"scope":6135,"src":"1762:199:24","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"ec249164","id":6127,"implemented":false,"kind":"function","modifiers":[],"name":"getGlobalUserInsuranceInfo","nameLocation":"1980:26:24","nodeType":"FunctionDefinition","parameters":{"id":6121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6120,"mutability":"mutable","name":"_userAddress","nameLocation":"2024:12:24","nodeType":"VariableDeclaration","scope":6127,"src":"2016:20:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6119,"name":"address","nodeType":"ElementaryTypeName","src":"2016:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2006:36:24"},"returnParameters":{"id":6126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6123,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6127,"src":"2066:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6122,"name":"uint256","nodeType":"ElementaryTypeName","src":"2066:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6125,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6127,"src":"2075:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6124,"name":"uint256","nodeType":"ElementaryTypeName","src":"2075:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2065:18:24"},"scope":6135,"src":"1971:113:24","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"42f6b8a7","id":6134,"implemented":false,"kind":"function","modifiers":[],"name":"getGlobalUserInsurancePremiumCost","nameLocation":"2099:33:24","nodeType":"FunctionDefinition","parameters":{"id":6130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6129,"mutability":"mutable","name":"userAddress","nameLocation":"2150:11:24","nodeType":"VariableDeclaration","scope":6134,"src":"2142:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6128,"name":"address","nodeType":"ElementaryTypeName","src":"2142:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2132:35:24"},"returnParameters":{"id":6133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6132,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6134,"src":"2190:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6131,"name":"uint256","nodeType":"ElementaryTypeName","src":"2190:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2189:9:24"},"scope":6135,"src":"2090:109:24","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":6136,"src":"63:2138:24","usedErrors":[5999,6001,6003,6005,6007,6009,6011]}],"src":"37:2164:24"},"id":24},"contracts/interfaces/IERC20Extended.sol":{"ast":{"absolutePath":"contracts/interfaces/IERC20Extended.sol","exportedSymbols":{"IERC20Extended":[6160],"IERC20Upgradeable":[1467]},"id":6161,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6137,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"33:23:25"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","id":6138,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6161,"sourceUnit":1468,"src":"58:79:25","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":6140,"name":"IERC20Upgradeable","nameLocations":["263:17:25"],"nodeType":"IdentifierPath","referencedDeclaration":1467,"src":"263:17:25"},"id":6141,"nodeType":"InheritanceSpecifier","src":"263:17:25"}],"canonicalName":"IERC20Extended","contractDependencies":[],"contractKind":"interface","documentation":{"id":6139,"nodeType":"StructuredDocumentation","src":"139:95:25","text":" @dev Interface for the optional mint and burnFrom functions from the ERC20 standard."},"fullyImplemented":false,"id":6160,"linearizedBaseContracts":[6160,1467],"name":"IERC20Extended","nameLocation":"245:14:25","nodeType":"ContractDefinition","nodes":[{"functionSelector":"40c10f19","id":6150,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"301:4:25","nodeType":"FunctionDefinition","parameters":{"id":6146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6143,"mutability":"mutable","name":"to","nameLocation":"314:2:25","nodeType":"VariableDeclaration","scope":6150,"src":"306:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6142,"name":"address","nodeType":"ElementaryTypeName","src":"306:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6145,"mutability":"mutable","name":"amount","nameLocation":"326:6:25","nodeType":"VariableDeclaration","scope":6150,"src":"318:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6144,"name":"uint256","nodeType":"ElementaryTypeName","src":"318:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"305:28:25"},"returnParameters":{"id":6149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6148,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6150,"src":"351:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6147,"name":"bool","nodeType":"ElementaryTypeName","src":"351:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"350:6:25"},"scope":6160,"src":"292:65:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"79cc6790","id":6159,"implemented":false,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"372:8:25","nodeType":"FunctionDefinition","parameters":{"id":6155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6152,"mutability":"mutable","name":"account","nameLocation":"389:7:25","nodeType":"VariableDeclaration","scope":6159,"src":"381:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6151,"name":"address","nodeType":"ElementaryTypeName","src":"381:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6154,"mutability":"mutable","name":"amount","nameLocation":"406:6:25","nodeType":"VariableDeclaration","scope":6159,"src":"398:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6153,"name":"uint256","nodeType":"ElementaryTypeName","src":"398:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"380:33:25"},"returnParameters":{"id":6158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6157,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6159,"src":"431:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6156,"name":"bool","nodeType":"ElementaryTypeName","src":"431:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"430:6:25"},"scope":6160,"src":"363:74:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":6161,"src":"235:209:25","usedErrors":[]}],"src":"33:411:25"},"id":25},"contracts/interfaces/IInsuranceRegistry.sol":{"ast":{"absolutePath":"contracts/interfaces/IInsuranceRegistry.sol","exportedSymbols":{"IInsuranceRegistry":[6279]},"id":6280,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":6162,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"37:23:26"},{"abstract":false,"baseContracts":[],"canonicalName":"IInsuranceRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":6163,"nodeType":"StructuredDocumentation","src":"62:85:26","text":"Report any bug or issues at:\n @custom:security-contact anshik@safezen.finance"},"fullyImplemented":false,"id":6279,"linearizedBaseContracts":[6279],"name":"IInsuranceRegistry","nameLocation":"157:18:26","nodeType":"ContractDefinition","nodes":[{"errorSelector":"f2078a29","id":6165,"name":"InsuranceRegistry__ImmutableChangesError","nameLocation":"189:40:26","nodeType":"ErrorDefinition","parameters":{"id":6164,"nodeType":"ParameterList","parameters":[],"src":"229:2:26"},"src":"183:49:26"},{"errorSelector":"10f9b95e","id":6167,"name":"InsuranceRegistry__TransactionFailedError","nameLocation":"243:41:26","nodeType":"ErrorDefinition","parameters":{"id":6166,"nodeType":"ParameterList","parameters":[],"src":"284:2:26"},"src":"237:50:26"},{"errorSelector":"383d9f80","id":6169,"name":"InsuranceRegistry__NotEnoughLiquidityError","nameLocation":"298:42:26","nodeType":"ErrorDefinition","parameters":{"id":6168,"nodeType":"ParameterList","parameters":[],"src":"340:2:26"},"src":"292:51:26"},{"anonymous":false,"eventSelector":"924ffeb66847f2055efa4c7fd2517bc3b2f48b27f11d1ed963a146980f484db8","id":6171,"name":"UpdatedClaimStakedValue","nameLocation":"355:23:26","nodeType":"EventDefinition","parameters":{"id":6170,"nodeType":"ParameterList","parameters":[],"src":"378:2:26"},"src":"349:32:26"},{"functionSelector":"6ad08f05","id":6182,"implemented":false,"kind":"function","modifiers":[],"name":"addInsuranceLiquidity","nameLocation":"396:21:26","nodeType":"FunctionDefinition","parameters":{"id":6178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6173,"mutability":"mutable","name":"categoryID","nameLocation":"435:10:26","nodeType":"VariableDeclaration","scope":6182,"src":"427:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6172,"name":"uint256","nodeType":"ElementaryTypeName","src":"427:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6175,"mutability":"mutable","name":"subCategoryID_","nameLocation":"463:14:26","nodeType":"VariableDeclaration","scope":6182,"src":"455:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6174,"name":"uint256","nodeType":"ElementaryTypeName","src":"455:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6177,"mutability":"mutable","name":"liquiditySupplied","nameLocation":"495:17:26","nodeType":"VariableDeclaration","scope":6182,"src":"487:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6176,"name":"uint256","nodeType":"ElementaryTypeName","src":"487:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"417:101:26"},"returnParameters":{"id":6181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6180,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6182,"src":"536:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6179,"name":"bool","nodeType":"ElementaryTypeName","src":"536:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"535:6:26"},"scope":6279,"src":"387:155:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"c296d870","id":6193,"implemented":false,"kind":"function","modifiers":[],"name":"removeInsuranceLiquidity","nameLocation":"557:24:26","nodeType":"FunctionDefinition","parameters":{"id":6189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6184,"mutability":"mutable","name":"categoryID","nameLocation":"599:10:26","nodeType":"VariableDeclaration","scope":6193,"src":"591:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6183,"name":"uint256","nodeType":"ElementaryTypeName","src":"591:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6186,"mutability":"mutable","name":"subCategoryID_","nameLocation":"627:14:26","nodeType":"VariableDeclaration","scope":6193,"src":"619:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6185,"name":"uint256","nodeType":"ElementaryTypeName","src":"619:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6188,"mutability":"mutable","name":"liquiditySupplied","nameLocation":"660:17:26","nodeType":"VariableDeclaration","scope":6193,"src":"652:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6187,"name":"uint256","nodeType":"ElementaryTypeName","src":"652:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"581:102:26"},"returnParameters":{"id":6192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6191,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6193,"src":"701:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6190,"name":"bool","nodeType":"ElementaryTypeName","src":"701:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"700:6:26"},"scope":6279,"src":"548:159:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"d9895c70","id":6206,"implemented":false,"kind":"function","modifiers":[],"name":"addCoverageOffered","nameLocation":"722:18:26","nodeType":"FunctionDefinition","parameters":{"id":6202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6195,"mutability":"mutable","name":"categoryID","nameLocation":"758:10:26","nodeType":"VariableDeclaration","scope":6206,"src":"750:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6194,"name":"uint256","nodeType":"ElementaryTypeName","src":"750:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6197,"mutability":"mutable","name":"subCategoryID_","nameLocation":"786:14:26","nodeType":"VariableDeclaration","scope":6206,"src":"778:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6196,"name":"uint256","nodeType":"ElementaryTypeName","src":"778:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6199,"mutability":"mutable","name":"coverageAmount","nameLocation":"819:14:26","nodeType":"VariableDeclaration","scope":6206,"src":"811:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6198,"name":"uint256","nodeType":"ElementaryTypeName","src":"811:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6201,"mutability":"mutable","name":"incomingFlowRate","nameLocation":"851:16:26","nodeType":"VariableDeclaration","scope":6206,"src":"843:24:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6200,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"740:133:26"},"returnParameters":{"id":6205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6204,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6206,"src":"891:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6203,"name":"bool","nodeType":"ElementaryTypeName","src":"891:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"890:6:26"},"scope":6279,"src":"713:184:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"26a6e9eb","id":6219,"implemented":false,"kind":"function","modifiers":[],"name":"removeCoverageOffered","nameLocation":"912:21:26","nodeType":"FunctionDefinition","parameters":{"id":6215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6208,"mutability":"mutable","name":"categoryID","nameLocation":"951:10:26","nodeType":"VariableDeclaration","scope":6219,"src":"943:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6207,"name":"uint256","nodeType":"ElementaryTypeName","src":"943:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6210,"mutability":"mutable","name":"subCategoryID_","nameLocation":"979:14:26","nodeType":"VariableDeclaration","scope":6219,"src":"971:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6209,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6212,"mutability":"mutable","name":"coverageAmount","nameLocation":"1012:14:26","nodeType":"VariableDeclaration","scope":6219,"src":"1004:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6211,"name":"uint256","nodeType":"ElementaryTypeName","src":"1004:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6214,"mutability":"mutable","name":"incomingFlowRate","nameLocation":"1045:16:26","nodeType":"VariableDeclaration","scope":6219,"src":"1037:24:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6213,"name":"uint256","nodeType":"ElementaryTypeName","src":"1037:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"933:134:26"},"returnParameters":{"id":6218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6217,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6219,"src":"1085:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6216,"name":"bool","nodeType":"ElementaryTypeName","src":"1085:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1084:6:26"},"scope":6279,"src":"903:188:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"b9e19fe1","id":6230,"implemented":false,"kind":"function","modifiers":[],"name":"claimAdded","nameLocation":"1106:10:26","nodeType":"FunctionDefinition","parameters":{"id":6226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6221,"mutability":"mutable","name":"stakedTokenID","nameLocation":"1134:13:26","nodeType":"VariableDeclaration","scope":6230,"src":"1126:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6220,"name":"uint256","nodeType":"ElementaryTypeName","src":"1126:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6223,"mutability":"mutable","name":"categoryID","nameLocation":"1166:10:26","nodeType":"VariableDeclaration","scope":6230,"src":"1158:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6222,"name":"uint256","nodeType":"ElementaryTypeName","src":"1158:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6225,"mutability":"mutable","name":"subCategoryID_","nameLocation":"1195:14:26","nodeType":"VariableDeclaration","scope":6230,"src":"1187:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6224,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1116:99:26"},"returnParameters":{"id":6229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6228,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6230,"src":"1233:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6227,"name":"bool","nodeType":"ElementaryTypeName","src":"1233:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1232:6:26"},"scope":6279,"src":"1097:142:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"6c12b868","id":6237,"implemented":false,"kind":"function","modifiers":[],"name":"getVersionID","nameLocation":"1254:12:26","nodeType":"FunctionDefinition","parameters":{"id":6233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6232,"mutability":"mutable","name":"categoryID","nameLocation":"1275:10:26","nodeType":"VariableDeclaration","scope":6237,"src":"1267:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6231,"name":"uint256","nodeType":"ElementaryTypeName","src":"1267:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1266:20:26"},"returnParameters":{"id":6236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6235,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6237,"src":"1309:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6234,"name":"uint256","nodeType":"ElementaryTypeName","src":"1309:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1308:9:26"},"scope":6279,"src":"1245:73:26","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"cf3f0fc0","id":6246,"implemented":false,"kind":"function","modifiers":[],"name":"calculateUnderwriterBalance","nameLocation":"1333:27:26","nodeType":"FunctionDefinition","parameters":{"id":6242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6239,"mutability":"mutable","name":"categoryID","nameLocation":"1378:10:26","nodeType":"VariableDeclaration","scope":6246,"src":"1370:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6238,"name":"uint256","nodeType":"ElementaryTypeName","src":"1370:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6241,"mutability":"mutable","name":"subCategoryID_","nameLocation":"1406:14:26","nodeType":"VariableDeclaration","scope":6246,"src":"1398:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6240,"name":"uint256","nodeType":"ElementaryTypeName","src":"1398:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1360:66:26"},"returnParameters":{"id":6245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6244,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6246,"src":"1449:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6243,"name":"uint256","nodeType":"ElementaryTypeName","src":"1449:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1448:9:26"},"scope":6279,"src":"1324:134:26","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"e1d01098","id":6251,"implemented":false,"kind":"function","modifiers":[],"name":"getLatestCategoryID","nameLocation":"1473:19:26","nodeType":"FunctionDefinition","parameters":{"id":6247,"nodeType":"ParameterList","parameters":[],"src":"1492:2:26"},"returnParameters":{"id":6250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6249,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6251,"src":"1517:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6248,"name":"uint256","nodeType":"ElementaryTypeName","src":"1517:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1516:9:26"},"scope":6279,"src":"1464:62:26","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"3bf4c082","id":6258,"implemented":false,"kind":"function","modifiers":[],"name":"getLatestSubCategoryID","nameLocation":"1541:22:26","nodeType":"FunctionDefinition","parameters":{"id":6254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6253,"mutability":"mutable","name":"categoryID","nameLocation":"1572:10:26","nodeType":"VariableDeclaration","scope":6258,"src":"1564:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6252,"name":"uint256","nodeType":"ElementaryTypeName","src":"1564:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1563:20:26"},"returnParameters":{"id":6257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6256,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6258,"src":"1606:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6255,"name":"uint256","nodeType":"ElementaryTypeName","src":"1606:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1605:9:26"},"scope":6279,"src":"1532:83:26","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"5657f79d","id":6269,"implemented":false,"kind":"function","modifiers":[],"name":"ifEnoughLiquidity","nameLocation":"1630:17:26","nodeType":"FunctionDefinition","parameters":{"id":6265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6260,"mutability":"mutable","name":"categoryID","nameLocation":"1656:10:26","nodeType":"VariableDeclaration","scope":6269,"src":"1648:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6259,"name":"uint256","nodeType":"ElementaryTypeName","src":"1648:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6262,"mutability":"mutable","name":"insuredAmount","nameLocation":"1676:13:26","nodeType":"VariableDeclaration","scope":6269,"src":"1668:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6261,"name":"uint256","nodeType":"ElementaryTypeName","src":"1668:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6264,"mutability":"mutable","name":"subCategoryID_","nameLocation":"1699:14:26","nodeType":"VariableDeclaration","scope":6269,"src":"1691:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6263,"name":"uint256","nodeType":"ElementaryTypeName","src":"1691:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1647:67:26"},"returnParameters":{"id":6268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6267,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6269,"src":"1737:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6266,"name":"bool","nodeType":"ElementaryTypeName","src":"1737:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1736:6:26"},"scope":6279,"src":"1621:122:26","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"5952a8c6","id":6278,"implemented":false,"kind":"function","modifiers":[],"name":"getStreamFlowRate","nameLocation":"1758:17:26","nodeType":"FunctionDefinition","parameters":{"id":6274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6271,"mutability":"mutable","name":"categoryID","nameLocation":"1784:10:26","nodeType":"VariableDeclaration","scope":6278,"src":"1776:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6270,"name":"uint256","nodeType":"ElementaryTypeName","src":"1776:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6273,"mutability":"mutable","name":"subCategoryID_","nameLocation":"1804:14:26","nodeType":"VariableDeclaration","scope":6278,"src":"1796:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6272,"name":"uint256","nodeType":"ElementaryTypeName","src":"1796:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1775:44:26"},"returnParameters":{"id":6277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6276,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6278,"src":"1842:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6275,"name":"uint256","nodeType":"ElementaryTypeName","src":"1842:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1841:9:26"},"scope":6279,"src":"1749:102:26","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":6280,"src":"147:1706:26","usedErrors":[6165,6167,6169]}],"src":"37:1816:26"},"id":26}},"contracts":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"AccessControlUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.","kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":\"AccessControlUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":415,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2325,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":3129,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":39,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_roles","offset":0,"slot":"101","type":"t_mapping(t_bytes32,t_struct(RoleData)34_storage)"},{"astId":334,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)34_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)34_storage"},"t_struct(RoleData)34_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":31,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":33,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"IAccessControlUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":\"IAccessControlUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":415,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"PausableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.","events":{"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"paused()":{"details":"Returns true if the contract is paused, and false otherwise."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":\"PausableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":415,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2325,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":598,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":703,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"ReentrancyGuardUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":\"ReentrancyGuardUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":415,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":718,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"_status","offset":0,"slot":"1","type":"t_uint256"},{"astId":776,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"__gap","offset":0,"slot":"2","type":"t_array(t_uint256)49_storage"}],"types":{"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol":{"ERC20Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.","kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50611233806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610b10565b60405180910390f35b6100e660048036038101906100e19190610bcb565b610308565b6040516100f39190610c26565b60405180910390f35b61010461032b565b6040516101119190610c50565b60405180910390f35b610134600480360381019061012f9190610c6b565b610335565b6040516101419190610c26565b60405180910390f35b610152610364565b60405161015f9190610cda565b60405180910390f35b610182600480360381019061017d9190610bcb565b61036d565b60405161018f9190610c26565b60405180910390f35b6101b260048036038101906101ad9190610cf5565b6103a4565b6040516101bf9190610c50565b60405180910390f35b6101d06103ed565b6040516101dd9190610b10565b60405180910390f35b61020060048036038101906101fb9190610bcb565b61047f565b60405161020d9190610c26565b60405180910390f35b610230600480360381019061022b9190610bcb565b6104f6565b60405161023d9190610c26565b60405180910390f35b610260600480360381019061025b9190610d22565b610519565b60405161026d9190610c50565b60405180910390f35b60606036805461028590610d91565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610d91565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b6000806103136105a0565b90506103208185856105a8565b600191505092915050565b6000603554905090565b6000806103406105a0565b905061034d858285610771565b6103588585856107fd565b60019150509392505050565b60006012905090565b6000806103786105a0565b905061039981858561038a8589610519565b6103949190610df1565b6105a8565b600191505092915050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060603780546103fc90610d91565b80601f016020809104026020016040519081016040528092919081815260200182805461042890610d91565b80156104755780601f1061044a57610100808354040283529160200191610475565b820191906000526020600020905b81548152906001019060200180831161045857829003601f168201915b5050505050905090565b60008061048a6105a0565b905060006104988286610519565b9050838110156104dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d490610e97565b60405180910390fd5b6104ea82868684036105a8565b60019250505092915050565b6000806105016105a0565b905061050e8185856107fd565b600191505092915050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060e90610f29565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067d90610fbb565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107649190610c50565b60405180910390a3505050565b600061077d8484610519565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107f757818110156107e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e090611027565b60405180910390fd5b6107f684848484036105a8565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361086c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610863906110b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d29061114b565b60405180910390fd5b6108e6838383610a76565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561096d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610964906111dd565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a5d9190610c50565b60405180910390a3610a70848484610a7b565b50505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610aba578082015181840152602081019050610a9f565b60008484015250505050565b6000601f19601f8301169050919050565b6000610ae282610a80565b610aec8185610a8b565b9350610afc818560208601610a9c565b610b0581610ac6565b840191505092915050565b60006020820190508181036000830152610b2a8184610ad7565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b6282610b37565b9050919050565b610b7281610b57565b8114610b7d57600080fd5b50565b600081359050610b8f81610b69565b92915050565b6000819050919050565b610ba881610b95565b8114610bb357600080fd5b50565b600081359050610bc581610b9f565b92915050565b60008060408385031215610be257610be1610b32565b5b6000610bf085828601610b80565b9250506020610c0185828601610bb6565b9150509250929050565b60008115159050919050565b610c2081610c0b565b82525050565b6000602082019050610c3b6000830184610c17565b92915050565b610c4a81610b95565b82525050565b6000602082019050610c656000830184610c41565b92915050565b600080600060608486031215610c8457610c83610b32565b5b6000610c9286828701610b80565b9350506020610ca386828701610b80565b9250506040610cb486828701610bb6565b9150509250925092565b600060ff82169050919050565b610cd481610cbe565b82525050565b6000602082019050610cef6000830184610ccb565b92915050565b600060208284031215610d0b57610d0a610b32565b5b6000610d1984828501610b80565b91505092915050565b60008060408385031215610d3957610d38610b32565b5b6000610d4785828601610b80565b9250506020610d5885828601610b80565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610da957607f821691505b602082108103610dbc57610dbb610d62565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dfc82610b95565b9150610e0783610b95565b9250828201905080821115610e1f57610e1e610dc2565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000610e81602583610a8b565b9150610e8c82610e25565b604082019050919050565b60006020820190508181036000830152610eb081610e74565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000610f13602483610a8b565b9150610f1e82610eb7565b604082019050919050565b60006020820190508181036000830152610f4281610f06565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000610fa5602283610a8b565b9150610fb082610f49565b604082019050919050565b60006020820190508181036000830152610fd481610f98565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611011601d83610a8b565b915061101c82610fdb565b602082019050919050565b6000602082019050818103600083015261104081611004565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006110a3602583610a8b565b91506110ae82611047565b604082019050919050565b600060208201905081810360008301526110d281611096565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611135602383610a8b565b9150611140826110d9565b604082019050919050565b6000602082019050818103600083015261116481611128565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006111c7602683610a8b565b91506111d28261116b565b604082019050919050565b600060208201905081810360008301526111f6816111ba565b905091905056fea2646970667358221220b832ecfe8fd7cf5106df047d4382c107333a0f61112136e6cf49a3a25c5f8d0b64736f6c63430008100033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1233 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x246 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x11A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x14A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x276 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0xB10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE1 SWAP2 SWAP1 PUSH2 0xBCB JUMP JUMPDEST PUSH2 0x308 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x32B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x111 SWAP2 SWAP1 PUSH2 0xC50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12F SWAP2 SWAP1 PUSH2 0xC6B JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x141 SWAP2 SWAP1 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x152 PUSH2 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15F SWAP2 SWAP1 PUSH2 0xCDA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x182 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17D SWAP2 SWAP1 PUSH2 0xBCB JUMP JUMPDEST PUSH2 0x36D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18F SWAP2 SWAP1 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AD SWAP2 SWAP1 PUSH2 0xCF5 JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0xC50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D0 PUSH2 0x3ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0xB10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x200 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0xBCB JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20D SWAP2 SWAP1 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22B SWAP2 SWAP1 PUSH2 0xBCB JUMP JUMPDEST PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP2 SWAP1 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x260 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25B SWAP2 SWAP1 PUSH2 0xD22 JUMP JUMPDEST PUSH2 0x519 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0xC50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x285 SWAP1 PUSH2 0xD91 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B1 SWAP1 PUSH2 0xD91 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x313 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x320 DUP2 DUP6 DUP6 PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x35 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x340 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x34D DUP6 DUP3 DUP6 PUSH2 0x771 JUMP JUMPDEST PUSH2 0x358 DUP6 DUP6 DUP6 PUSH2 0x7FD JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x378 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x399 DUP2 DUP6 DUP6 PUSH2 0x38A DUP6 DUP10 PUSH2 0x519 JUMP JUMPDEST PUSH2 0x394 SWAP2 SWAP1 PUSH2 0xDF1 JUMP JUMPDEST PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x3FC SWAP1 PUSH2 0xD91 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x428 SWAP1 PUSH2 0xD91 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x475 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x44A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x475 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x458 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x48A PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x498 DUP3 DUP7 PUSH2 0x519 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D4 SWAP1 PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4EA DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x501 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x50E DUP2 DUP6 DUP6 PUSH2 0x7FD JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x34 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x617 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x60E SWAP1 PUSH2 0xF29 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x686 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x67D SWAP1 PUSH2 0xFBB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x34 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x764 SWAP2 SWAP1 PUSH2 0xC50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x77D DUP5 DUP5 PUSH2 0x519 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x7F7 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7E9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7E0 SWAP1 PUSH2 0x1027 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7F6 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x5A8 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x86C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x863 SWAP1 PUSH2 0x10B9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x8DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D2 SWAP1 PUSH2 0x114B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8E6 DUP4 DUP4 DUP4 PUSH2 0xA76 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x96D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x964 SWAP1 PUSH2 0x11DD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x33 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xA5D SWAP2 SWAP1 PUSH2 0xC50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xA70 DUP5 DUP5 DUP5 PUSH2 0xA7B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xABA JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xA9F JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAE2 DUP3 PUSH2 0xA80 JUMP JUMPDEST PUSH2 0xAEC DUP2 DUP6 PUSH2 0xA8B JUMP JUMPDEST SWAP4 POP PUSH2 0xAFC DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xA9C JUMP JUMPDEST PUSH2 0xB05 DUP2 PUSH2 0xAC6 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB2A DUP2 DUP5 PUSH2 0xAD7 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB62 DUP3 PUSH2 0xB37 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB72 DUP2 PUSH2 0xB57 JUMP JUMPDEST DUP2 EQ PUSH2 0xB7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB8F DUP2 PUSH2 0xB69 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBA8 DUP2 PUSH2 0xB95 JUMP JUMPDEST DUP2 EQ PUSH2 0xBB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBC5 DUP2 PUSH2 0xB9F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBE2 JUMPI PUSH2 0xBE1 PUSH2 0xB32 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xBF0 DUP6 DUP3 DUP7 ADD PUSH2 0xB80 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xC01 DUP6 DUP3 DUP7 ADD PUSH2 0xBB6 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC20 DUP2 PUSH2 0xC0B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC3B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC17 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC4A DUP2 PUSH2 0xB95 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC65 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC41 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC84 JUMPI PUSH2 0xC83 PUSH2 0xB32 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC92 DUP7 DUP3 DUP8 ADD PUSH2 0xB80 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xCA3 DUP7 DUP3 DUP8 ADD PUSH2 0xB80 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xCB4 DUP7 DUP3 DUP8 ADD PUSH2 0xBB6 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCD4 DUP2 PUSH2 0xCBE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xCEF PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCCB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD0B JUMPI PUSH2 0xD0A PUSH2 0xB32 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD19 DUP5 DUP3 DUP6 ADD PUSH2 0xB80 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD39 JUMPI PUSH2 0xD38 PUSH2 0xB32 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD47 DUP6 DUP3 DUP7 ADD PUSH2 0xB80 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xD58 DUP6 DUP3 DUP7 ADD PUSH2 0xB80 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xDA9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xDBC JUMPI PUSH2 0xDBB PUSH2 0xD62 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xDFC DUP3 PUSH2 0xB95 JUMP JUMPDEST SWAP2 POP PUSH2 0xE07 DUP4 PUSH2 0xB95 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xE1F JUMPI PUSH2 0xE1E PUSH2 0xDC2 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE81 PUSH1 0x25 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0xE8C DUP3 PUSH2 0xE25 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xEB0 DUP2 PUSH2 0xE74 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF13 PUSH1 0x24 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0xF1E DUP3 PUSH2 0xEB7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF42 DUP2 PUSH2 0xF06 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFA5 PUSH1 0x22 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0xFB0 DUP3 PUSH2 0xF49 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xFD4 DUP2 PUSH2 0xF98 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1011 PUSH1 0x1D DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0x101C DUP3 PUSH2 0xFDB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1040 DUP2 PUSH2 0x1004 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10A3 PUSH1 0x25 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0x10AE DUP3 PUSH2 0x1047 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x10D2 DUP2 PUSH2 0x1096 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1135 PUSH1 0x23 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0x1140 DUP3 PUSH2 0x10D9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1164 DUP2 PUSH2 0x1128 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11C7 PUSH1 0x26 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0x11D2 DUP3 PUSH2 0x116B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11F6 DUP2 PUSH2 0x11BA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB8 ORIGIN 0xEC INVALID DUP16 0xD7 0xCF MLOAD MOD 0xDF DIV PUSH30 0x4382C107333A0F61112136E6CF49A3A25C5F8D0B64736F6C634300081000 CALLER ","sourceMap":"1480:12159:5:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1383":{"entryPoint":2683,"id":1383,"parameterSlots":3,"returnSlots":0},"@_approve_1318":{"entryPoint":1448,"id":1318,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_1372":{"entryPoint":2678,"id":1372,"parameterSlots":3,"returnSlots":0},"@_msgSender_2311":{"entryPoint":1440,"id":2311,"parameterSlots":0,"returnSlots":1},"@_spendAllowance_1361":{"entryPoint":1905,"id":1361,"parameterSlots":3,"returnSlots":0},"@_transfer_1144":{"entryPoint":2045,"id":1144,"parameterSlots":3,"returnSlots":0},"@allowance_939":{"entryPoint":1305,"id":939,"parameterSlots":2,"returnSlots":1},"@approve_964":{"entryPoint":776,"id":964,"parameterSlots":2,"returnSlots":1},"@balanceOf_896":{"entryPoint":932,"id":896,"parameterSlots":1,"returnSlots":1},"@decimals_872":{"entryPoint":868,"id":872,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_1067":{"entryPoint":1151,"id":1067,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_1026":{"entryPoint":877,"id":1026,"parameterSlots":2,"returnSlots":1},"@name_852":{"entryPoint":630,"id":852,"parameterSlots":0,"returnSlots":1},"@symbol_862":{"entryPoint":1005,"id":862,"parameterSlots":0,"returnSlots":1},"@totalSupply_882":{"entryPoint":811,"id":882,"parameterSlots":0,"returnSlots":1},"@transferFrom_997":{"entryPoint":821,"id":997,"parameterSlots":3,"returnSlots":1},"@transfer_921":{"entryPoint":1270,"id":921,"parameterSlots":2,"returnSlots":1},"abi_decode_t_address":{"entryPoint":2944,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":2998,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3317,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":3362,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":3179,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":3019,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":3095,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":2775,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack":{"entryPoint":4392,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack":{"entryPoint":3992,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack":{"entryPoint":4100,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack":{"entryPoint":4538,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack":{"entryPoint":4246,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack":{"entryPoint":3846,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack":{"entryPoint":3700,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":3137,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":3275,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":3110,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2832,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4427,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4027,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4135,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4573,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4281,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3881,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3735,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":3152,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":3290,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":2688,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":2699,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":3569,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":2903,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":3083,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":2871,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":2965,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":3262,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":2716,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":3473,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":3522,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":3426,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":2866,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":2758,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f":{"entryPoint":4313,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029":{"entryPoint":3913,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe":{"entryPoint":4059,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6":{"entryPoint":4459,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea":{"entryPoint":4167,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208":{"entryPoint":3767,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8":{"entryPoint":3621,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":2921,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":2975,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:13699:27","statements":[{"body":{"nodeType":"YulBlock","src":"66:40:27","statements":[{"nodeType":"YulAssignment","src":"77:22:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"87:5:27"},"nodeType":"YulFunctionCall","src":"87:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"77:6:27"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"49:5:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"59:6:27","type":""}],"src":"7:99:27"},{"body":{"nodeType":"YulBlock","src":"208:73:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"225:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"230:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"218:6:27"},"nodeType":"YulFunctionCall","src":"218:19:27"},"nodeType":"YulExpressionStatement","src":"218:19:27"},{"nodeType":"YulAssignment","src":"246:29:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"265:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"270:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"261:3:27"},"nodeType":"YulFunctionCall","src":"261:14:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"246:11:27"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"180:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"185:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"196:11:27","type":""}],"src":"112:169:27"},{"body":{"nodeType":"YulBlock","src":"349:184:27","statements":[{"nodeType":"YulVariableDeclaration","src":"359:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"368:1:27","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"363:1:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"428:63:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"453:3:27"},{"name":"i","nodeType":"YulIdentifier","src":"458:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"449:3:27"},"nodeType":"YulFunctionCall","src":"449:11:27"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"472:3:27"},{"name":"i","nodeType":"YulIdentifier","src":"477:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"468:3:27"},"nodeType":"YulFunctionCall","src":"468:11:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"462:5:27"},"nodeType":"YulFunctionCall","src":"462:18:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"442:6:27"},"nodeType":"YulFunctionCall","src":"442:39:27"},"nodeType":"YulExpressionStatement","src":"442:39:27"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"389:1:27"},{"name":"length","nodeType":"YulIdentifier","src":"392:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"386:2:27"},"nodeType":"YulFunctionCall","src":"386:13:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"400:19:27","statements":[{"nodeType":"YulAssignment","src":"402:15:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"411:1:27"},{"kind":"number","nodeType":"YulLiteral","src":"414:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"407:3:27"},"nodeType":"YulFunctionCall","src":"407:10:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"402:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"382:3:27","statements":[]},"src":"378:113:27"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"511:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"516:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"507:3:27"},"nodeType":"YulFunctionCall","src":"507:16:27"},{"kind":"number","nodeType":"YulLiteral","src":"525:1:27","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"500:6:27"},"nodeType":"YulFunctionCall","src":"500:27:27"},"nodeType":"YulExpressionStatement","src":"500:27:27"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"331:3:27","type":""},{"name":"dst","nodeType":"YulTypedName","src":"336:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"341:6:27","type":""}],"src":"287:246:27"},{"body":{"nodeType":"YulBlock","src":"587:54:27","statements":[{"nodeType":"YulAssignment","src":"597:38:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"615:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"622:2:27","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"611:3:27"},"nodeType":"YulFunctionCall","src":"611:14:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"631:2:27","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"627:3:27"},"nodeType":"YulFunctionCall","src":"627:7:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"607:3:27"},"nodeType":"YulFunctionCall","src":"607:28:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"597:6:27"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"570:5:27","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"580:6:27","type":""}],"src":"539:102:27"},{"body":{"nodeType":"YulBlock","src":"739:285:27","statements":[{"nodeType":"YulVariableDeclaration","src":"749:53:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"796:5:27"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"763:32:27"},"nodeType":"YulFunctionCall","src":"763:39:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"753:6:27","type":""}]},{"nodeType":"YulAssignment","src":"811:78:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"877:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"882:6:27"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"818:58:27"},"nodeType":"YulFunctionCall","src":"818:71:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"811:3:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"937:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"944:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"933:3:27"},"nodeType":"YulFunctionCall","src":"933:16:27"},{"name":"pos","nodeType":"YulIdentifier","src":"951:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"956:6:27"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"898:34:27"},"nodeType":"YulFunctionCall","src":"898:65:27"},"nodeType":"YulExpressionStatement","src":"898:65:27"},{"nodeType":"YulAssignment","src":"972:46:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"983:3:27"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1010:6:27"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"988:21:27"},"nodeType":"YulFunctionCall","src":"988:29:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"979:3:27"},"nodeType":"YulFunctionCall","src":"979:39:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"972:3:27"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"720:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"727:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"735:3:27","type":""}],"src":"647:377:27"},{"body":{"nodeType":"YulBlock","src":"1148:195:27","statements":[{"nodeType":"YulAssignment","src":"1158:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1170:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1181:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1166:3:27"},"nodeType":"YulFunctionCall","src":"1166:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1158:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1205:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1216:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1201:3:27"},"nodeType":"YulFunctionCall","src":"1201:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1224:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"1230:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1220:3:27"},"nodeType":"YulFunctionCall","src":"1220:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1194:6:27"},"nodeType":"YulFunctionCall","src":"1194:47:27"},"nodeType":"YulExpressionStatement","src":"1194:47:27"},{"nodeType":"YulAssignment","src":"1250:86:27","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1322:6:27"},{"name":"tail","nodeType":"YulIdentifier","src":"1331:4:27"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1258:63:27"},"nodeType":"YulFunctionCall","src":"1258:78:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1250:4:27"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1120:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1132:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1143:4:27","type":""}],"src":"1030:313:27"},{"body":{"nodeType":"YulBlock","src":"1389:35:27","statements":[{"nodeType":"YulAssignment","src":"1399:19:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1415:2:27","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1409:5:27"},"nodeType":"YulFunctionCall","src":"1409:9:27"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1399:6:27"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1382:6:27","type":""}],"src":"1349:75:27"},{"body":{"nodeType":"YulBlock","src":"1519:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1536:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1539:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1529:6:27"},"nodeType":"YulFunctionCall","src":"1529:12:27"},"nodeType":"YulExpressionStatement","src":"1529:12:27"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"1430:117:27"},{"body":{"nodeType":"YulBlock","src":"1642:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1659:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1662:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1652:6:27"},"nodeType":"YulFunctionCall","src":"1652:12:27"},"nodeType":"YulExpressionStatement","src":"1652:12:27"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"1553:117:27"},{"body":{"nodeType":"YulBlock","src":"1721:81:27","statements":[{"nodeType":"YulAssignment","src":"1731:65:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1746:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"1753:42:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1742:3:27"},"nodeType":"YulFunctionCall","src":"1742:54:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1731:7:27"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1703:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1713:7:27","type":""}],"src":"1676:126:27"},{"body":{"nodeType":"YulBlock","src":"1853:51:27","statements":[{"nodeType":"YulAssignment","src":"1863:35:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1892:5:27"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1874:17:27"},"nodeType":"YulFunctionCall","src":"1874:24:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1863:7:27"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1835:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1845:7:27","type":""}],"src":"1808:96:27"},{"body":{"nodeType":"YulBlock","src":"1953:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"2010:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2019:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2022:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2012:6:27"},"nodeType":"YulFunctionCall","src":"2012:12:27"},"nodeType":"YulExpressionStatement","src":"2012:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1976:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2001:5:27"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1983:17:27"},"nodeType":"YulFunctionCall","src":"1983:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1973:2:27"},"nodeType":"YulFunctionCall","src":"1973:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1966:6:27"},"nodeType":"YulFunctionCall","src":"1966:43:27"},"nodeType":"YulIf","src":"1963:63:27"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1946:5:27","type":""}],"src":"1910:122:27"},{"body":{"nodeType":"YulBlock","src":"2090:87:27","statements":[{"nodeType":"YulAssignment","src":"2100:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2122:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2109:12:27"},"nodeType":"YulFunctionCall","src":"2109:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2100:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2165:5:27"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"2138:26:27"},"nodeType":"YulFunctionCall","src":"2138:33:27"},"nodeType":"YulExpressionStatement","src":"2138:33:27"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2068:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"2076:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2084:5:27","type":""}],"src":"2038:139:27"},{"body":{"nodeType":"YulBlock","src":"2228:32:27","statements":[{"nodeType":"YulAssignment","src":"2238:16:27","value":{"name":"value","nodeType":"YulIdentifier","src":"2249:5:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2238:7:27"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2210:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2220:7:27","type":""}],"src":"2183:77:27"},{"body":{"nodeType":"YulBlock","src":"2309:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"2366:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2375:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2378:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2368:6:27"},"nodeType":"YulFunctionCall","src":"2368:12:27"},"nodeType":"YulExpressionStatement","src":"2368:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2332:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2357:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2339:17:27"},"nodeType":"YulFunctionCall","src":"2339:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2329:2:27"},"nodeType":"YulFunctionCall","src":"2329:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2322:6:27"},"nodeType":"YulFunctionCall","src":"2322:43:27"},"nodeType":"YulIf","src":"2319:63:27"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2302:5:27","type":""}],"src":"2266:122:27"},{"body":{"nodeType":"YulBlock","src":"2446:87:27","statements":[{"nodeType":"YulAssignment","src":"2456:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2478:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2465:12:27"},"nodeType":"YulFunctionCall","src":"2465:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2456:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2521:5:27"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2494:26:27"},"nodeType":"YulFunctionCall","src":"2494:33:27"},"nodeType":"YulExpressionStatement","src":"2494:33:27"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2424:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"2432:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2440:5:27","type":""}],"src":"2394:139:27"},{"body":{"nodeType":"YulBlock","src":"2622:391:27","statements":[{"body":{"nodeType":"YulBlock","src":"2668:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2670:77:27"},"nodeType":"YulFunctionCall","src":"2670:79:27"},"nodeType":"YulExpressionStatement","src":"2670:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2643:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"2652:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2639:3:27"},"nodeType":"YulFunctionCall","src":"2639:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"2664:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2635:3:27"},"nodeType":"YulFunctionCall","src":"2635:32:27"},"nodeType":"YulIf","src":"2632:119:27"},{"nodeType":"YulBlock","src":"2761:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"2776:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"2790:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2780:6:27","type":""}]},{"nodeType":"YulAssignment","src":"2805:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2840:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"2851:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2836:3:27"},"nodeType":"YulFunctionCall","src":"2836:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2860:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2815:20:27"},"nodeType":"YulFunctionCall","src":"2815:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2805:6:27"}]}]},{"nodeType":"YulBlock","src":"2888:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"2903:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"2917:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2907:6:27","type":""}]},{"nodeType":"YulAssignment","src":"2933:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2968:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"2979:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2964:3:27"},"nodeType":"YulFunctionCall","src":"2964:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2988:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2943:20:27"},"nodeType":"YulFunctionCall","src":"2943:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2933:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2584:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2595:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2607:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2615:6:27","type":""}],"src":"2539:474:27"},{"body":{"nodeType":"YulBlock","src":"3061:48:27","statements":[{"nodeType":"YulAssignment","src":"3071:32:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3096:5:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3089:6:27"},"nodeType":"YulFunctionCall","src":"3089:13:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3082:6:27"},"nodeType":"YulFunctionCall","src":"3082:21:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3071:7:27"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3043:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3053:7:27","type":""}],"src":"3019:90:27"},{"body":{"nodeType":"YulBlock","src":"3174:50:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3191:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3211:5:27"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"3196:14:27"},"nodeType":"YulFunctionCall","src":"3196:21:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3184:6:27"},"nodeType":"YulFunctionCall","src":"3184:34:27"},"nodeType":"YulExpressionStatement","src":"3184:34:27"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3162:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3169:3:27","type":""}],"src":"3115:109:27"},{"body":{"nodeType":"YulBlock","src":"3322:118:27","statements":[{"nodeType":"YulAssignment","src":"3332:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3344:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"3355:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3340:3:27"},"nodeType":"YulFunctionCall","src":"3340:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3332:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3406:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3419:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"3430:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3415:3:27"},"nodeType":"YulFunctionCall","src":"3415:17:27"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"3368:37:27"},"nodeType":"YulFunctionCall","src":"3368:65:27"},"nodeType":"YulExpressionStatement","src":"3368:65:27"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3294:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3306:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3317:4:27","type":""}],"src":"3230:210:27"},{"body":{"nodeType":"YulBlock","src":"3511:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3528:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3551:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3533:17:27"},"nodeType":"YulFunctionCall","src":"3533:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3521:6:27"},"nodeType":"YulFunctionCall","src":"3521:37:27"},"nodeType":"YulExpressionStatement","src":"3521:37:27"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3499:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3506:3:27","type":""}],"src":"3446:118:27"},{"body":{"nodeType":"YulBlock","src":"3668:124:27","statements":[{"nodeType":"YulAssignment","src":"3678:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3690:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"3701:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3686:3:27"},"nodeType":"YulFunctionCall","src":"3686:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3678:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3758:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3771:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"3782:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3767:3:27"},"nodeType":"YulFunctionCall","src":"3767:17:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"3714:43:27"},"nodeType":"YulFunctionCall","src":"3714:71:27"},"nodeType":"YulExpressionStatement","src":"3714:71:27"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3640:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3652:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3663:4:27","type":""}],"src":"3570:222:27"},{"body":{"nodeType":"YulBlock","src":"3898:519:27","statements":[{"body":{"nodeType":"YulBlock","src":"3944:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3946:77:27"},"nodeType":"YulFunctionCall","src":"3946:79:27"},"nodeType":"YulExpressionStatement","src":"3946:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3919:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"3928:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3915:3:27"},"nodeType":"YulFunctionCall","src":"3915:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"3940:2:27","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3911:3:27"},"nodeType":"YulFunctionCall","src":"3911:32:27"},"nodeType":"YulIf","src":"3908:119:27"},{"nodeType":"YulBlock","src":"4037:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"4052:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"4066:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4056:6:27","type":""}]},{"nodeType":"YulAssignment","src":"4081:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4116:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"4127:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4112:3:27"},"nodeType":"YulFunctionCall","src":"4112:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4136:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4091:20:27"},"nodeType":"YulFunctionCall","src":"4091:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4081:6:27"}]}]},{"nodeType":"YulBlock","src":"4164:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"4179:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"4193:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4183:6:27","type":""}]},{"nodeType":"YulAssignment","src":"4209:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4244:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"4255:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4240:3:27"},"nodeType":"YulFunctionCall","src":"4240:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4264:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4219:20:27"},"nodeType":"YulFunctionCall","src":"4219:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4209:6:27"}]}]},{"nodeType":"YulBlock","src":"4292:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"4307:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"4321:2:27","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4311:6:27","type":""}]},{"nodeType":"YulAssignment","src":"4337:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4372:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"4383:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4368:3:27"},"nodeType":"YulFunctionCall","src":"4368:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4392:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4347:20:27"},"nodeType":"YulFunctionCall","src":"4347:53:27"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4337:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3852:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3863:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3875:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3883:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3891:6:27","type":""}],"src":"3798:619:27"},{"body":{"nodeType":"YulBlock","src":"4466:43:27","statements":[{"nodeType":"YulAssignment","src":"4476:27:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4491:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"4498:4:27","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4487:3:27"},"nodeType":"YulFunctionCall","src":"4487:16:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4476:7:27"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4448:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4458:7:27","type":""}],"src":"4423:86:27"},{"body":{"nodeType":"YulBlock","src":"4576:51:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4593:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4614:5:27"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"4598:15:27"},"nodeType":"YulFunctionCall","src":"4598:22:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4586:6:27"},"nodeType":"YulFunctionCall","src":"4586:35:27"},"nodeType":"YulExpressionStatement","src":"4586:35:27"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4564:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4571:3:27","type":""}],"src":"4515:112:27"},{"body":{"nodeType":"YulBlock","src":"4727:120:27","statements":[{"nodeType":"YulAssignment","src":"4737:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4749:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4760:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4745:3:27"},"nodeType":"YulFunctionCall","src":"4745:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4737:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4813:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4826:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4837:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4822:3:27"},"nodeType":"YulFunctionCall","src":"4822:17:27"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"4773:39:27"},"nodeType":"YulFunctionCall","src":"4773:67:27"},"nodeType":"YulExpressionStatement","src":"4773:67:27"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4699:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4711:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4722:4:27","type":""}],"src":"4633:214:27"},{"body":{"nodeType":"YulBlock","src":"4919:263:27","statements":[{"body":{"nodeType":"YulBlock","src":"4965:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4967:77:27"},"nodeType":"YulFunctionCall","src":"4967:79:27"},"nodeType":"YulExpressionStatement","src":"4967:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4940:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"4949:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4936:3:27"},"nodeType":"YulFunctionCall","src":"4936:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"4961:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4932:3:27"},"nodeType":"YulFunctionCall","src":"4932:32:27"},"nodeType":"YulIf","src":"4929:119:27"},{"nodeType":"YulBlock","src":"5058:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"5073:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"5087:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5077:6:27","type":""}]},{"nodeType":"YulAssignment","src":"5102:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5137:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"5148:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5133:3:27"},"nodeType":"YulFunctionCall","src":"5133:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5157:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5112:20:27"},"nodeType":"YulFunctionCall","src":"5112:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5102:6:27"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4889:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4900:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4912:6:27","type":""}],"src":"4853:329:27"},{"body":{"nodeType":"YulBlock","src":"5271:391:27","statements":[{"body":{"nodeType":"YulBlock","src":"5317:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5319:77:27"},"nodeType":"YulFunctionCall","src":"5319:79:27"},"nodeType":"YulExpressionStatement","src":"5319:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5292:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"5301:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5288:3:27"},"nodeType":"YulFunctionCall","src":"5288:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"5313:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5284:3:27"},"nodeType":"YulFunctionCall","src":"5284:32:27"},"nodeType":"YulIf","src":"5281:119:27"},{"nodeType":"YulBlock","src":"5410:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"5425:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"5439:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5429:6:27","type":""}]},{"nodeType":"YulAssignment","src":"5454:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5489:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"5500:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5485:3:27"},"nodeType":"YulFunctionCall","src":"5485:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5509:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5464:20:27"},"nodeType":"YulFunctionCall","src":"5464:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5454:6:27"}]}]},{"nodeType":"YulBlock","src":"5537:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"5552:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"5566:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5556:6:27","type":""}]},{"nodeType":"YulAssignment","src":"5582:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5617:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"5628:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5613:3:27"},"nodeType":"YulFunctionCall","src":"5613:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5637:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5592:20:27"},"nodeType":"YulFunctionCall","src":"5592:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5582:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5233:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5244:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5256:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5264:6:27","type":""}],"src":"5188:474:27"},{"body":{"nodeType":"YulBlock","src":"5696:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5713:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5716:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5706:6:27"},"nodeType":"YulFunctionCall","src":"5706:88:27"},"nodeType":"YulExpressionStatement","src":"5706:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5810:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5813:4:27","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5803:6:27"},"nodeType":"YulFunctionCall","src":"5803:15:27"},"nodeType":"YulExpressionStatement","src":"5803:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5834:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5837:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5827:6:27"},"nodeType":"YulFunctionCall","src":"5827:15:27"},"nodeType":"YulExpressionStatement","src":"5827:15:27"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"5668:180:27"},{"body":{"nodeType":"YulBlock","src":"5905:269:27","statements":[{"nodeType":"YulAssignment","src":"5915:22:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5929:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"5935:1:27","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"5925:3:27"},"nodeType":"YulFunctionCall","src":"5925:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5915:6:27"}]},{"nodeType":"YulVariableDeclaration","src":"5946:38:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5976:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"5982:1:27","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5972:3:27"},"nodeType":"YulFunctionCall","src":"5972:12:27"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"5950:18:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"6023:51:27","statements":[{"nodeType":"YulAssignment","src":"6037:27:27","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6051:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"6059:4:27","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6047:3:27"},"nodeType":"YulFunctionCall","src":"6047:17:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6037:6:27"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6003:18:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5996:6:27"},"nodeType":"YulFunctionCall","src":"5996:26:27"},"nodeType":"YulIf","src":"5993:81:27"},{"body":{"nodeType":"YulBlock","src":"6126:42:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"6140:16:27"},"nodeType":"YulFunctionCall","src":"6140:18:27"},"nodeType":"YulExpressionStatement","src":"6140:18:27"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6090:18:27"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6113:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"6121:2:27","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6110:2:27"},"nodeType":"YulFunctionCall","src":"6110:14:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6087:2:27"},"nodeType":"YulFunctionCall","src":"6087:38:27"},"nodeType":"YulIf","src":"6084:84:27"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"5889:4:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"5898:6:27","type":""}],"src":"5854:320:27"},{"body":{"nodeType":"YulBlock","src":"6208:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6225:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6228:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6218:6:27"},"nodeType":"YulFunctionCall","src":"6218:88:27"},"nodeType":"YulExpressionStatement","src":"6218:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6322:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6325:4:27","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6315:6:27"},"nodeType":"YulFunctionCall","src":"6315:15:27"},"nodeType":"YulExpressionStatement","src":"6315:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6346:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6349:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6339:6:27"},"nodeType":"YulFunctionCall","src":"6339:15:27"},"nodeType":"YulExpressionStatement","src":"6339:15:27"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"6180:180:27"},{"body":{"nodeType":"YulBlock","src":"6410:147:27","statements":[{"nodeType":"YulAssignment","src":"6420:25:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6443:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6425:17:27"},"nodeType":"YulFunctionCall","src":"6425:20:27"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"6420:1:27"}]},{"nodeType":"YulAssignment","src":"6454:25:27","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6477:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6459:17:27"},"nodeType":"YulFunctionCall","src":"6459:20:27"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"6454:1:27"}]},{"nodeType":"YulAssignment","src":"6488:16:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6499:1:27"},{"name":"y","nodeType":"YulIdentifier","src":"6502:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6495:3:27"},"nodeType":"YulFunctionCall","src":"6495:9:27"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"6488:3:27"}]},{"body":{"nodeType":"YulBlock","src":"6528:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6530:16:27"},"nodeType":"YulFunctionCall","src":"6530:18:27"},"nodeType":"YulExpressionStatement","src":"6530:18:27"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6520:1:27"},{"name":"sum","nodeType":"YulIdentifier","src":"6523:3:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6517:2:27"},"nodeType":"YulFunctionCall","src":"6517:10:27"},"nodeType":"YulIf","src":"6514:36:27"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6397:1:27","type":""},{"name":"y","nodeType":"YulTypedName","src":"6400:1:27","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"6406:3:27","type":""}],"src":"6366:191:27"},{"body":{"nodeType":"YulBlock","src":"6669:118:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6691:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"6699:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6687:3:27"},"nodeType":"YulFunctionCall","src":"6687:14:27"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"6703:34:27","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6680:6:27"},"nodeType":"YulFunctionCall","src":"6680:58:27"},"nodeType":"YulExpressionStatement","src":"6680:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6759:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"6767:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6755:3:27"},"nodeType":"YulFunctionCall","src":"6755:15:27"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"6772:7:27","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6748:6:27"},"nodeType":"YulFunctionCall","src":"6748:32:27"},"nodeType":"YulExpressionStatement","src":"6748:32:27"}]},"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"6661:6:27","type":""}],"src":"6563:224:27"},{"body":{"nodeType":"YulBlock","src":"6939:220:27","statements":[{"nodeType":"YulAssignment","src":"6949:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7015:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"7020:2:27","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6956:58:27"},"nodeType":"YulFunctionCall","src":"6956:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6949:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7121:3:27"}],"functionName":{"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulIdentifier","src":"7032:88:27"},"nodeType":"YulFunctionCall","src":"7032:93:27"},"nodeType":"YulExpressionStatement","src":"7032:93:27"},{"nodeType":"YulAssignment","src":"7134:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7145:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"7150:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7141:3:27"},"nodeType":"YulFunctionCall","src":"7141:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7134:3:27"}]}]},"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6927:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6935:3:27","type":""}],"src":"6793:366:27"},{"body":{"nodeType":"YulBlock","src":"7336:248:27","statements":[{"nodeType":"YulAssignment","src":"7346:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7358:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"7369:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7354:3:27"},"nodeType":"YulFunctionCall","src":"7354:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7346:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7393:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"7404:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7389:3:27"},"nodeType":"YulFunctionCall","src":"7389:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7412:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"7418:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7408:3:27"},"nodeType":"YulFunctionCall","src":"7408:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7382:6:27"},"nodeType":"YulFunctionCall","src":"7382:47:27"},"nodeType":"YulExpressionStatement","src":"7382:47:27"},{"nodeType":"YulAssignment","src":"7438:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7572:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7446:124:27"},"nodeType":"YulFunctionCall","src":"7446:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7438:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7316:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7331:4:27","type":""}],"src":"7165:419:27"},{"body":{"nodeType":"YulBlock","src":"7696:117:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7718:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"7726:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7714:3:27"},"nodeType":"YulFunctionCall","src":"7714:14:27"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"7730:34:27","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7707:6:27"},"nodeType":"YulFunctionCall","src":"7707:58:27"},"nodeType":"YulExpressionStatement","src":"7707:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7786:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"7794:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7782:3:27"},"nodeType":"YulFunctionCall","src":"7782:15:27"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"7799:6:27","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7775:6:27"},"nodeType":"YulFunctionCall","src":"7775:31:27"},"nodeType":"YulExpressionStatement","src":"7775:31:27"}]},"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7688:6:27","type":""}],"src":"7590:223:27"},{"body":{"nodeType":"YulBlock","src":"7965:220:27","statements":[{"nodeType":"YulAssignment","src":"7975:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8041:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"8046:2:27","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7982:58:27"},"nodeType":"YulFunctionCall","src":"7982:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7975:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8147:3:27"}],"functionName":{"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulIdentifier","src":"8058:88:27"},"nodeType":"YulFunctionCall","src":"8058:93:27"},"nodeType":"YulExpressionStatement","src":"8058:93:27"},{"nodeType":"YulAssignment","src":"8160:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8171:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"8176:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8167:3:27"},"nodeType":"YulFunctionCall","src":"8167:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8160:3:27"}]}]},"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7953:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7961:3:27","type":""}],"src":"7819:366:27"},{"body":{"nodeType":"YulBlock","src":"8362:248:27","statements":[{"nodeType":"YulAssignment","src":"8372:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8384:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"8395:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8380:3:27"},"nodeType":"YulFunctionCall","src":"8380:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8372:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8419:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"8430:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8415:3:27"},"nodeType":"YulFunctionCall","src":"8415:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8438:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"8444:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8434:3:27"},"nodeType":"YulFunctionCall","src":"8434:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8408:6:27"},"nodeType":"YulFunctionCall","src":"8408:47:27"},"nodeType":"YulExpressionStatement","src":"8408:47:27"},{"nodeType":"YulAssignment","src":"8464:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8598:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8472:124:27"},"nodeType":"YulFunctionCall","src":"8472:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8464:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8342:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8357:4:27","type":""}],"src":"8191:419:27"},{"body":{"nodeType":"YulBlock","src":"8722:115:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8744:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"8752:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8740:3:27"},"nodeType":"YulFunctionCall","src":"8740:14:27"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"8756:34:27","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8733:6:27"},"nodeType":"YulFunctionCall","src":"8733:58:27"},"nodeType":"YulExpressionStatement","src":"8733:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8812:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"8820:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8808:3:27"},"nodeType":"YulFunctionCall","src":"8808:15:27"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"8825:4:27","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8801:6:27"},"nodeType":"YulFunctionCall","src":"8801:29:27"},"nodeType":"YulExpressionStatement","src":"8801:29:27"}]},"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"8714:6:27","type":""}],"src":"8616:221:27"},{"body":{"nodeType":"YulBlock","src":"8989:220:27","statements":[{"nodeType":"YulAssignment","src":"8999:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9065:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"9070:2:27","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9006:58:27"},"nodeType":"YulFunctionCall","src":"9006:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8999:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9171:3:27"}],"functionName":{"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulIdentifier","src":"9082:88:27"},"nodeType":"YulFunctionCall","src":"9082:93:27"},"nodeType":"YulExpressionStatement","src":"9082:93:27"},{"nodeType":"YulAssignment","src":"9184:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9195:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"9200:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9191:3:27"},"nodeType":"YulFunctionCall","src":"9191:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9184:3:27"}]}]},"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8977:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8985:3:27","type":""}],"src":"8843:366:27"},{"body":{"nodeType":"YulBlock","src":"9386:248:27","statements":[{"nodeType":"YulAssignment","src":"9396:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9408:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"9419:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9404:3:27"},"nodeType":"YulFunctionCall","src":"9404:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9396:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9443:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"9454:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9439:3:27"},"nodeType":"YulFunctionCall","src":"9439:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9462:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"9468:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9458:3:27"},"nodeType":"YulFunctionCall","src":"9458:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9432:6:27"},"nodeType":"YulFunctionCall","src":"9432:47:27"},"nodeType":"YulExpressionStatement","src":"9432:47:27"},{"nodeType":"YulAssignment","src":"9488:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9622:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9496:124:27"},"nodeType":"YulFunctionCall","src":"9496:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9488:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9366:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9381:4:27","type":""}],"src":"9215:419:27"},{"body":{"nodeType":"YulBlock","src":"9746:73:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9768:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"9776:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9764:3:27"},"nodeType":"YulFunctionCall","src":"9764:14:27"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"9780:31:27","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9757:6:27"},"nodeType":"YulFunctionCall","src":"9757:55:27"},"nodeType":"YulExpressionStatement","src":"9757:55:27"}]},"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"9738:6:27","type":""}],"src":"9640:179:27"},{"body":{"nodeType":"YulBlock","src":"9971:220:27","statements":[{"nodeType":"YulAssignment","src":"9981:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10047:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"10052:2:27","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9988:58:27"},"nodeType":"YulFunctionCall","src":"9988:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9981:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10153:3:27"}],"functionName":{"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulIdentifier","src":"10064:88:27"},"nodeType":"YulFunctionCall","src":"10064:93:27"},"nodeType":"YulExpressionStatement","src":"10064:93:27"},{"nodeType":"YulAssignment","src":"10166:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10177:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"10182:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10173:3:27"},"nodeType":"YulFunctionCall","src":"10173:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10166:3:27"}]}]},"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9959:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9967:3:27","type":""}],"src":"9825:366:27"},{"body":{"nodeType":"YulBlock","src":"10368:248:27","statements":[{"nodeType":"YulAssignment","src":"10378:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10390:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"10401:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10386:3:27"},"nodeType":"YulFunctionCall","src":"10386:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10378:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10425:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"10436:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10421:3:27"},"nodeType":"YulFunctionCall","src":"10421:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10444:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"10450:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10440:3:27"},"nodeType":"YulFunctionCall","src":"10440:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10414:6:27"},"nodeType":"YulFunctionCall","src":"10414:47:27"},"nodeType":"YulExpressionStatement","src":"10414:47:27"},{"nodeType":"YulAssignment","src":"10470:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10604:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10478:124:27"},"nodeType":"YulFunctionCall","src":"10478:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10470:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10348:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10363:4:27","type":""}],"src":"10197:419:27"},{"body":{"nodeType":"YulBlock","src":"10728:118:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10750:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"10758:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10746:3:27"},"nodeType":"YulFunctionCall","src":"10746:14:27"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"10762:34:27","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10739:6:27"},"nodeType":"YulFunctionCall","src":"10739:58:27"},"nodeType":"YulExpressionStatement","src":"10739:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10818:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"10826:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10814:3:27"},"nodeType":"YulFunctionCall","src":"10814:15:27"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"10831:7:27","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10807:6:27"},"nodeType":"YulFunctionCall","src":"10807:32:27"},"nodeType":"YulExpressionStatement","src":"10807:32:27"}]},"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10720:6:27","type":""}],"src":"10622:224:27"},{"body":{"nodeType":"YulBlock","src":"10998:220:27","statements":[{"nodeType":"YulAssignment","src":"11008:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11074:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"11079:2:27","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11015:58:27"},"nodeType":"YulFunctionCall","src":"11015:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11008:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11180:3:27"}],"functionName":{"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulIdentifier","src":"11091:88:27"},"nodeType":"YulFunctionCall","src":"11091:93:27"},"nodeType":"YulExpressionStatement","src":"11091:93:27"},{"nodeType":"YulAssignment","src":"11193:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11204:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"11209:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11200:3:27"},"nodeType":"YulFunctionCall","src":"11200:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11193:3:27"}]}]},"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10986:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10994:3:27","type":""}],"src":"10852:366:27"},{"body":{"nodeType":"YulBlock","src":"11395:248:27","statements":[{"nodeType":"YulAssignment","src":"11405:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11417:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"11428:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11413:3:27"},"nodeType":"YulFunctionCall","src":"11413:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11405:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11452:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"11463:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11448:3:27"},"nodeType":"YulFunctionCall","src":"11448:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11471:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"11477:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11467:3:27"},"nodeType":"YulFunctionCall","src":"11467:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11441:6:27"},"nodeType":"YulFunctionCall","src":"11441:47:27"},"nodeType":"YulExpressionStatement","src":"11441:47:27"},{"nodeType":"YulAssignment","src":"11497:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11631:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11505:124:27"},"nodeType":"YulFunctionCall","src":"11505:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11497:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11375:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11390:4:27","type":""}],"src":"11224:419:27"},{"body":{"nodeType":"YulBlock","src":"11755:116:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11777:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"11785:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11773:3:27"},"nodeType":"YulFunctionCall","src":"11773:14:27"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"11789:34:27","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11766:6:27"},"nodeType":"YulFunctionCall","src":"11766:58:27"},"nodeType":"YulExpressionStatement","src":"11766:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11845:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"11853:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11841:3:27"},"nodeType":"YulFunctionCall","src":"11841:15:27"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"11858:5:27","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11834:6:27"},"nodeType":"YulFunctionCall","src":"11834:30:27"},"nodeType":"YulExpressionStatement","src":"11834:30:27"}]},"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11747:6:27","type":""}],"src":"11649:222:27"},{"body":{"nodeType":"YulBlock","src":"12023:220:27","statements":[{"nodeType":"YulAssignment","src":"12033:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12099:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"12104:2:27","type":"","value":"35"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12040:58:27"},"nodeType":"YulFunctionCall","src":"12040:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12033:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12205:3:27"}],"functionName":{"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulIdentifier","src":"12116:88:27"},"nodeType":"YulFunctionCall","src":"12116:93:27"},"nodeType":"YulExpressionStatement","src":"12116:93:27"},{"nodeType":"YulAssignment","src":"12218:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12229:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"12234:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12225:3:27"},"nodeType":"YulFunctionCall","src":"12225:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12218:3:27"}]}]},"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12011:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12019:3:27","type":""}],"src":"11877:366:27"},{"body":{"nodeType":"YulBlock","src":"12420:248:27","statements":[{"nodeType":"YulAssignment","src":"12430:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12442:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12453:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12438:3:27"},"nodeType":"YulFunctionCall","src":"12438:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12430:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12477:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12488:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12473:3:27"},"nodeType":"YulFunctionCall","src":"12473:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12496:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"12502:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12492:3:27"},"nodeType":"YulFunctionCall","src":"12492:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12466:6:27"},"nodeType":"YulFunctionCall","src":"12466:47:27"},"nodeType":"YulExpressionStatement","src":"12466:47:27"},{"nodeType":"YulAssignment","src":"12522:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12656:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12530:124:27"},"nodeType":"YulFunctionCall","src":"12530:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12522:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12400:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12415:4:27","type":""}],"src":"12249:419:27"},{"body":{"nodeType":"YulBlock","src":"12780:119:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12802:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"12810:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12798:3:27"},"nodeType":"YulFunctionCall","src":"12798:14:27"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"12814:34:27","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12791:6:27"},"nodeType":"YulFunctionCall","src":"12791:58:27"},"nodeType":"YulExpressionStatement","src":"12791:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12870:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"12878:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12866:3:27"},"nodeType":"YulFunctionCall","src":"12866:15:27"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"12883:8:27","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12859:6:27"},"nodeType":"YulFunctionCall","src":"12859:33:27"},"nodeType":"YulExpressionStatement","src":"12859:33:27"}]},"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12772:6:27","type":""}],"src":"12674:225:27"},{"body":{"nodeType":"YulBlock","src":"13051:220:27","statements":[{"nodeType":"YulAssignment","src":"13061:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13127:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"13132:2:27","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13068:58:27"},"nodeType":"YulFunctionCall","src":"13068:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13061:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13233:3:27"}],"functionName":{"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulIdentifier","src":"13144:88:27"},"nodeType":"YulFunctionCall","src":"13144:93:27"},"nodeType":"YulExpressionStatement","src":"13144:93:27"},{"nodeType":"YulAssignment","src":"13246:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13257:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"13262:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13253:3:27"},"nodeType":"YulFunctionCall","src":"13253:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13246:3:27"}]}]},"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13039:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13047:3:27","type":""}],"src":"12905:366:27"},{"body":{"nodeType":"YulBlock","src":"13448:248:27","statements":[{"nodeType":"YulAssignment","src":"13458:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13470:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"13481:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13466:3:27"},"nodeType":"YulFunctionCall","src":"13466:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13458:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13505:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"13516:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13501:3:27"},"nodeType":"YulFunctionCall","src":"13501:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13524:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"13530:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13520:3:27"},"nodeType":"YulFunctionCall","src":"13520:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13494:6:27"},"nodeType":"YulFunctionCall","src":"13494:47:27"},"nodeType":"YulExpressionStatement","src":"13494:47:27"},{"nodeType":"YulAssignment","src":"13550:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13684:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13558:124:27"},"nodeType":"YulFunctionCall","src":"13558:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13550:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13428:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13443:4:27","type":""}],"src":"13277:419:27"}]},"contents":"{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: decreased allowance below\")\n\n        mstore(add(memPtr, 32), \" zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve from the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve to the zero addre\")\n\n        mstore(add(memPtr, 32), \"ss\")\n\n    }\n\n    function abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: insufficient allowance\")\n\n    }\n\n    function abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer from the zero ad\")\n\n        mstore(add(memPtr, 32), \"dress\")\n\n    }\n\n    function abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer to the zero addr\")\n\n        mstore(add(memPtr, 32), \"ess\")\n\n    }\n\n    function abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer amount exceeds b\")\n\n        mstore(add(memPtr, 32), \"alance\")\n\n    }\n\n    function abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":27,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610b10565b60405180910390f35b6100e660048036038101906100e19190610bcb565b610308565b6040516100f39190610c26565b60405180910390f35b61010461032b565b6040516101119190610c50565b60405180910390f35b610134600480360381019061012f9190610c6b565b610335565b6040516101419190610c26565b60405180910390f35b610152610364565b60405161015f9190610cda565b60405180910390f35b610182600480360381019061017d9190610bcb565b61036d565b60405161018f9190610c26565b60405180910390f35b6101b260048036038101906101ad9190610cf5565b6103a4565b6040516101bf9190610c50565b60405180910390f35b6101d06103ed565b6040516101dd9190610b10565b60405180910390f35b61020060048036038101906101fb9190610bcb565b61047f565b60405161020d9190610c26565b60405180910390f35b610230600480360381019061022b9190610bcb565b6104f6565b60405161023d9190610c26565b60405180910390f35b610260600480360381019061025b9190610d22565b610519565b60405161026d9190610c50565b60405180910390f35b60606036805461028590610d91565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610d91565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b6000806103136105a0565b90506103208185856105a8565b600191505092915050565b6000603554905090565b6000806103406105a0565b905061034d858285610771565b6103588585856107fd565b60019150509392505050565b60006012905090565b6000806103786105a0565b905061039981858561038a8589610519565b6103949190610df1565b6105a8565b600191505092915050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060603780546103fc90610d91565b80601f016020809104026020016040519081016040528092919081815260200182805461042890610d91565b80156104755780601f1061044a57610100808354040283529160200191610475565b820191906000526020600020905b81548152906001019060200180831161045857829003601f168201915b5050505050905090565b60008061048a6105a0565b905060006104988286610519565b9050838110156104dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d490610e97565b60405180910390fd5b6104ea82868684036105a8565b60019250505092915050565b6000806105016105a0565b905061050e8185856107fd565b600191505092915050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060e90610f29565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067d90610fbb565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107649190610c50565b60405180910390a3505050565b600061077d8484610519565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107f757818110156107e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e090611027565b60405180910390fd5b6107f684848484036105a8565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361086c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610863906110b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d29061114b565b60405180910390fd5b6108e6838383610a76565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561096d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610964906111dd565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a5d9190610c50565b60405180910390a3610a70848484610a7b565b50505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610aba578082015181840152602081019050610a9f565b60008484015250505050565b6000601f19601f8301169050919050565b6000610ae282610a80565b610aec8185610a8b565b9350610afc818560208601610a9c565b610b0581610ac6565b840191505092915050565b60006020820190508181036000830152610b2a8184610ad7565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b6282610b37565b9050919050565b610b7281610b57565b8114610b7d57600080fd5b50565b600081359050610b8f81610b69565b92915050565b6000819050919050565b610ba881610b95565b8114610bb357600080fd5b50565b600081359050610bc581610b9f565b92915050565b60008060408385031215610be257610be1610b32565b5b6000610bf085828601610b80565b9250506020610c0185828601610bb6565b9150509250929050565b60008115159050919050565b610c2081610c0b565b82525050565b6000602082019050610c3b6000830184610c17565b92915050565b610c4a81610b95565b82525050565b6000602082019050610c656000830184610c41565b92915050565b600080600060608486031215610c8457610c83610b32565b5b6000610c9286828701610b80565b9350506020610ca386828701610b80565b9250506040610cb486828701610bb6565b9150509250925092565b600060ff82169050919050565b610cd481610cbe565b82525050565b6000602082019050610cef6000830184610ccb565b92915050565b600060208284031215610d0b57610d0a610b32565b5b6000610d1984828501610b80565b91505092915050565b60008060408385031215610d3957610d38610b32565b5b6000610d4785828601610b80565b9250506020610d5885828601610b80565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610da957607f821691505b602082108103610dbc57610dbb610d62565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dfc82610b95565b9150610e0783610b95565b9250828201905080821115610e1f57610e1e610dc2565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000610e81602583610a8b565b9150610e8c82610e25565b604082019050919050565b60006020820190508181036000830152610eb081610e74565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000610f13602483610a8b565b9150610f1e82610eb7565b604082019050919050565b60006020820190508181036000830152610f4281610f06565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000610fa5602283610a8b565b9150610fb082610f49565b604082019050919050565b60006020820190508181036000830152610fd481610f98565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611011601d83610a8b565b915061101c82610fdb565b602082019050919050565b6000602082019050818103600083015261104081611004565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006110a3602583610a8b565b91506110ae82611047565b604082019050919050565b600060208201905081810360008301526110d281611096565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611135602383610a8b565b9150611140826110d9565b604082019050919050565b6000602082019050818103600083015261116481611128565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006111c7602683610a8b565b91506111d28261116b565b604082019050919050565b600060208201905081810360008301526111f6816111ba565b905091905056fea2646970667358221220b832ecfe8fd7cf5106df047d4382c107333a0f61112136e6cf49a3a25c5f8d0b64736f6c63430008100033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x246 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x11A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x14A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x276 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0xB10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE1 SWAP2 SWAP1 PUSH2 0xBCB JUMP JUMPDEST PUSH2 0x308 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x32B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x111 SWAP2 SWAP1 PUSH2 0xC50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12F SWAP2 SWAP1 PUSH2 0xC6B JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x141 SWAP2 SWAP1 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x152 PUSH2 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15F SWAP2 SWAP1 PUSH2 0xCDA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x182 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17D SWAP2 SWAP1 PUSH2 0xBCB JUMP JUMPDEST PUSH2 0x36D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18F SWAP2 SWAP1 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AD SWAP2 SWAP1 PUSH2 0xCF5 JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0xC50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D0 PUSH2 0x3ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0xB10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x200 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0xBCB JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20D SWAP2 SWAP1 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22B SWAP2 SWAP1 PUSH2 0xBCB JUMP JUMPDEST PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP2 SWAP1 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x260 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25B SWAP2 SWAP1 PUSH2 0xD22 JUMP JUMPDEST PUSH2 0x519 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0xC50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x285 SWAP1 PUSH2 0xD91 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B1 SWAP1 PUSH2 0xD91 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x313 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x320 DUP2 DUP6 DUP6 PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x35 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x340 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x34D DUP6 DUP3 DUP6 PUSH2 0x771 JUMP JUMPDEST PUSH2 0x358 DUP6 DUP6 DUP6 PUSH2 0x7FD JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x378 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x399 DUP2 DUP6 DUP6 PUSH2 0x38A DUP6 DUP10 PUSH2 0x519 JUMP JUMPDEST PUSH2 0x394 SWAP2 SWAP1 PUSH2 0xDF1 JUMP JUMPDEST PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x3FC SWAP1 PUSH2 0xD91 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x428 SWAP1 PUSH2 0xD91 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x475 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x44A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x475 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x458 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x48A PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x498 DUP3 DUP7 PUSH2 0x519 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D4 SWAP1 PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4EA DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x501 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x50E DUP2 DUP6 DUP6 PUSH2 0x7FD JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x34 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x617 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x60E SWAP1 PUSH2 0xF29 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x686 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x67D SWAP1 PUSH2 0xFBB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x34 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x764 SWAP2 SWAP1 PUSH2 0xC50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x77D DUP5 DUP5 PUSH2 0x519 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x7F7 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7E9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7E0 SWAP1 PUSH2 0x1027 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7F6 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x5A8 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x86C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x863 SWAP1 PUSH2 0x10B9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x8DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D2 SWAP1 PUSH2 0x114B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8E6 DUP4 DUP4 DUP4 PUSH2 0xA76 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x96D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x964 SWAP1 PUSH2 0x11DD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x33 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xA5D SWAP2 SWAP1 PUSH2 0xC50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xA70 DUP5 DUP5 DUP5 PUSH2 0xA7B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xABA JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xA9F JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAE2 DUP3 PUSH2 0xA80 JUMP JUMPDEST PUSH2 0xAEC DUP2 DUP6 PUSH2 0xA8B JUMP JUMPDEST SWAP4 POP PUSH2 0xAFC DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xA9C JUMP JUMPDEST PUSH2 0xB05 DUP2 PUSH2 0xAC6 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB2A DUP2 DUP5 PUSH2 0xAD7 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB62 DUP3 PUSH2 0xB37 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB72 DUP2 PUSH2 0xB57 JUMP JUMPDEST DUP2 EQ PUSH2 0xB7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB8F DUP2 PUSH2 0xB69 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBA8 DUP2 PUSH2 0xB95 JUMP JUMPDEST DUP2 EQ PUSH2 0xBB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBC5 DUP2 PUSH2 0xB9F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBE2 JUMPI PUSH2 0xBE1 PUSH2 0xB32 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xBF0 DUP6 DUP3 DUP7 ADD PUSH2 0xB80 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xC01 DUP6 DUP3 DUP7 ADD PUSH2 0xBB6 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC20 DUP2 PUSH2 0xC0B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC3B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC17 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC4A DUP2 PUSH2 0xB95 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC65 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC41 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC84 JUMPI PUSH2 0xC83 PUSH2 0xB32 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC92 DUP7 DUP3 DUP8 ADD PUSH2 0xB80 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xCA3 DUP7 DUP3 DUP8 ADD PUSH2 0xB80 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xCB4 DUP7 DUP3 DUP8 ADD PUSH2 0xBB6 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCD4 DUP2 PUSH2 0xCBE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xCEF PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCCB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD0B JUMPI PUSH2 0xD0A PUSH2 0xB32 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD19 DUP5 DUP3 DUP6 ADD PUSH2 0xB80 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD39 JUMPI PUSH2 0xD38 PUSH2 0xB32 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD47 DUP6 DUP3 DUP7 ADD PUSH2 0xB80 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xD58 DUP6 DUP3 DUP7 ADD PUSH2 0xB80 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xDA9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xDBC JUMPI PUSH2 0xDBB PUSH2 0xD62 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xDFC DUP3 PUSH2 0xB95 JUMP JUMPDEST SWAP2 POP PUSH2 0xE07 DUP4 PUSH2 0xB95 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xE1F JUMPI PUSH2 0xE1E PUSH2 0xDC2 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE81 PUSH1 0x25 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0xE8C DUP3 PUSH2 0xE25 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xEB0 DUP2 PUSH2 0xE74 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF13 PUSH1 0x24 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0xF1E DUP3 PUSH2 0xEB7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF42 DUP2 PUSH2 0xF06 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFA5 PUSH1 0x22 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0xFB0 DUP3 PUSH2 0xF49 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xFD4 DUP2 PUSH2 0xF98 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1011 PUSH1 0x1D DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0x101C DUP3 PUSH2 0xFDB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1040 DUP2 PUSH2 0x1004 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10A3 PUSH1 0x25 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0x10AE DUP3 PUSH2 0x1047 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x10D2 DUP2 PUSH2 0x1096 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1135 PUSH1 0x23 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0x1140 DUP3 PUSH2 0x10D9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1164 DUP2 PUSH2 0x1128 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11C7 PUSH1 0x26 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0x11D2 DUP3 PUSH2 0x116B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11F6 DUP2 PUSH2 0x11BA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB8 ORIGIN 0xEC INVALID DUP16 0xD7 0xCF MLOAD MOD 0xDF DIV PUSH30 0x4382C107333A0F61112136E6CF49A3A25C5F8D0B64736F6C634300081000 CALLER ","sourceMap":"1480:12159:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2491:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4768:197;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3579:106;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5527:286;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3428:91;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6208:234;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3743:125;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2702:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6929:427;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4064:189;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4311:149;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2491:98;2545:13;2577:5;2570:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2491:98;:::o;4768:197::-;4851:4;4867:13;4883:12;:10;:12::i;:::-;4867:28;;4905:32;4914:5;4921:7;4930:6;4905:8;:32::i;:::-;4954:4;4947:11;;;4768:197;;;;:::o;3579:106::-;3640:7;3666:12;;3659:19;;3579:106;:::o;5527:286::-;5654:4;5670:15;5688:12;:10;:12::i;:::-;5670:30;;5710:38;5726:4;5732:7;5741:6;5710:15;:38::i;:::-;5758:27;5768:4;5774:2;5778:6;5758:9;:27::i;:::-;5802:4;5795:11;;;5527:286;;;;;:::o;3428:91::-;3486:5;3510:2;3503:9;;3428:91;:::o;6208:234::-;6296:4;6312:13;6328:12;:10;:12::i;:::-;6312:28;;6350:64;6359:5;6366:7;6403:10;6375:25;6385:5;6392:7;6375:9;:25::i;:::-;:38;;;;:::i;:::-;6350:8;:64::i;:::-;6431:4;6424:11;;;6208:234;;;;:::o;3743:125::-;3817:7;3843:9;:18;3853:7;3843:18;;;;;;;;;;;;;;;;3836:25;;3743:125;;;:::o;2702:102::-;2758:13;2790:7;2783:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2702:102;:::o;6929:427::-;7022:4;7038:13;7054:12;:10;:12::i;:::-;7038:28;;7076:24;7103:25;7113:5;7120:7;7103:9;:25::i;:::-;7076:52;;7166:15;7146:16;:35;;7138:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;7257:60;7266:5;7273:7;7301:15;7282:16;:34;7257:8;:60::i;:::-;7345:4;7338:11;;;;6929:427;;;;:::o;4064:189::-;4143:4;4159:13;4175:12;:10;:12::i;:::-;4159:28;;4197;4207:5;4214:2;4218:6;4197:9;:28::i;:::-;4242:4;4235:11;;;4064:189;;;;:::o;4311:149::-;4400:7;4426:11;:18;4438:5;4426:18;;;;;;;;;;;;;;;:27;4445:7;4426:27;;;;;;;;;;;;;;;;4419:34;;4311:149;;;;:::o;850:96:12:-;903:7;929:10;922:17;;850:96;:::o;10841:370:5:-;10989:1;10972:19;;:5;:19;;;10964:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11069:1;11050:21;;:7;:21;;;11042:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11151:6;11121:11;:18;11133:5;11121:18;;;;;;;;;;;;;;;:27;11140:7;11121:27;;;;;;;;;;;;;;;:36;;;;11188:7;11172:32;;11181:5;11172:32;;;11197:6;11172:32;;;;;;:::i;:::-;;;;;;;;10841:370;;;:::o;11492:441::-;11622:24;11649:25;11659:5;11666:7;11649:9;:25::i;:::-;11622:52;;11708:17;11688:16;:37;11684:243;;11769:6;11749:16;:26;;11741:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11851:51;11860:5;11867:7;11895:6;11876:16;:25;11851:8;:51::i;:::-;11684:243;11612:321;11492:441;;;:::o;7810:818::-;7952:1;7936:18;;:4;:18;;;7928:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;8028:1;8014:16;;:2;:16;;;8006:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;8081:38;8102:4;8108:2;8112:6;8081:20;:38::i;:::-;8130:19;8152:9;:15;8162:4;8152:15;;;;;;;;;;;;;;;;8130:37;;8200:6;8185:11;:21;;8177:72;;;;;;;;;;;;:::i;:::-;;;;;;;;;8315:6;8301:11;:20;8283:9;:15;8293:4;8283:15;;;;;;;;;;;;;;;:38;;;;8515:6;8498:9;:13;8508:2;8498:13;;;;;;;;;;;;;;;;:23;;;;;;;;;;;8562:2;8547:26;;8556:4;8547:26;;;8566:6;8547:26;;;;;;:::i;:::-;;;;;;;;8584:37;8604:4;8610:2;8614:6;8584:19;:37::i;:::-;7918:710;7810:818;;;:::o;12517:121::-;;;;:::o;13226:120::-;;;;:::o;7:99:27:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:246::-;368:1;378:113;392:6;389:1;386:13;378:113;;;477:1;472:3;468:11;462:18;458:1;453:3;449:11;442:39;414:2;411:1;407:10;402:15;;378:113;;;525:1;516:6;511:3;507:16;500:27;349:184;287:246;;;:::o;539:102::-;580:6;631:2;627:7;622:2;615:5;611:14;607:28;597:38;;539:102;;;:::o;647:377::-;735:3;763:39;796:5;763:39;:::i;:::-;818:71;882:6;877:3;818:71;:::i;:::-;811:78;;898:65;956:6;951:3;944:4;937:5;933:16;898:65;:::i;:::-;988:29;1010:6;988:29;:::i;:::-;983:3;979:39;972:46;;739:285;647:377;;;;:::o;1030:313::-;1143:4;1181:2;1170:9;1166:18;1158:26;;1230:9;1224:4;1220:20;1216:1;1205:9;1201:17;1194:47;1258:78;1331:4;1322:6;1258:78;:::i;:::-;1250:86;;1030:313;;;;:::o;1430:117::-;1539:1;1536;1529:12;1676:126;1713:7;1753:42;1746:5;1742:54;1731:65;;1676:126;;;:::o;1808:96::-;1845:7;1874:24;1892:5;1874:24;:::i;:::-;1863:35;;1808:96;;;:::o;1910:122::-;1983:24;2001:5;1983:24;:::i;:::-;1976:5;1973:35;1963:63;;2022:1;2019;2012:12;1963:63;1910:122;:::o;2038:139::-;2084:5;2122:6;2109:20;2100:29;;2138:33;2165:5;2138:33;:::i;:::-;2038:139;;;;:::o;2183:77::-;2220:7;2249:5;2238:16;;2183:77;;;:::o;2266:122::-;2339:24;2357:5;2339:24;:::i;:::-;2332:5;2329:35;2319:63;;2378:1;2375;2368:12;2319:63;2266:122;:::o;2394:139::-;2440:5;2478:6;2465:20;2456:29;;2494:33;2521:5;2494:33;:::i;:::-;2394:139;;;;:::o;2539:474::-;2607:6;2615;2664:2;2652:9;2643:7;2639:23;2635:32;2632:119;;;2670:79;;:::i;:::-;2632:119;2790:1;2815:53;2860:7;2851:6;2840:9;2836:22;2815:53;:::i;:::-;2805:63;;2761:117;2917:2;2943:53;2988:7;2979:6;2968:9;2964:22;2943:53;:::i;:::-;2933:63;;2888:118;2539:474;;;;;:::o;3019:90::-;3053:7;3096:5;3089:13;3082:21;3071:32;;3019:90;;;:::o;3115:109::-;3196:21;3211:5;3196:21;:::i;:::-;3191:3;3184:34;3115:109;;:::o;3230:210::-;3317:4;3355:2;3344:9;3340:18;3332:26;;3368:65;3430:1;3419:9;3415:17;3406:6;3368:65;:::i;:::-;3230:210;;;;:::o;3446:118::-;3533:24;3551:5;3533:24;:::i;:::-;3528:3;3521:37;3446:118;;:::o;3570:222::-;3663:4;3701:2;3690:9;3686:18;3678:26;;3714:71;3782:1;3771:9;3767:17;3758:6;3714:71;:::i;:::-;3570:222;;;;:::o;3798:619::-;3875:6;3883;3891;3940:2;3928:9;3919:7;3915:23;3911:32;3908:119;;;3946:79;;:::i;:::-;3908:119;4066:1;4091:53;4136:7;4127:6;4116:9;4112:22;4091:53;:::i;:::-;4081:63;;4037:117;4193:2;4219:53;4264:7;4255:6;4244:9;4240:22;4219:53;:::i;:::-;4209:63;;4164:118;4321:2;4347:53;4392:7;4383:6;4372:9;4368:22;4347:53;:::i;:::-;4337:63;;4292:118;3798:619;;;;;:::o;4423:86::-;4458:7;4498:4;4491:5;4487:16;4476:27;;4423:86;;;:::o;4515:112::-;4598:22;4614:5;4598:22;:::i;:::-;4593:3;4586:35;4515:112;;:::o;4633:214::-;4722:4;4760:2;4749:9;4745:18;4737:26;;4773:67;4837:1;4826:9;4822:17;4813:6;4773:67;:::i;:::-;4633:214;;;;:::o;4853:329::-;4912:6;4961:2;4949:9;4940:7;4936:23;4932:32;4929:119;;;4967:79;;:::i;:::-;4929:119;5087:1;5112:53;5157:7;5148:6;5137:9;5133:22;5112:53;:::i;:::-;5102:63;;5058:117;4853:329;;;;:::o;5188:474::-;5256:6;5264;5313:2;5301:9;5292:7;5288:23;5284:32;5281:119;;;5319:79;;:::i;:::-;5281:119;5439:1;5464:53;5509:7;5500:6;5489:9;5485:22;5464:53;:::i;:::-;5454:63;;5410:117;5566:2;5592:53;5637:7;5628:6;5617:9;5613:22;5592:53;:::i;:::-;5582:63;;5537:118;5188:474;;;;;:::o;5668:180::-;5716:77;5713:1;5706:88;5813:4;5810:1;5803:15;5837:4;5834:1;5827:15;5854:320;5898:6;5935:1;5929:4;5925:12;5915:22;;5982:1;5976:4;5972:12;6003:18;5993:81;;6059:4;6051:6;6047:17;6037:27;;5993:81;6121:2;6113:6;6110:14;6090:18;6087:38;6084:84;;6140:18;;:::i;:::-;6084:84;5905:269;5854:320;;;:::o;6180:180::-;6228:77;6225:1;6218:88;6325:4;6322:1;6315:15;6349:4;6346:1;6339:15;6366:191;6406:3;6425:20;6443:1;6425:20;:::i;:::-;6420:25;;6459:20;6477:1;6459:20;:::i;:::-;6454:25;;6502:1;6499;6495:9;6488:16;;6523:3;6520:1;6517:10;6514:36;;;6530:18;;:::i;:::-;6514:36;6366:191;;;;:::o;6563:224::-;6703:34;6699:1;6691:6;6687:14;6680:58;6772:7;6767:2;6759:6;6755:15;6748:32;6563:224;:::o;6793:366::-;6935:3;6956:67;7020:2;7015:3;6956:67;:::i;:::-;6949:74;;7032:93;7121:3;7032:93;:::i;:::-;7150:2;7145:3;7141:12;7134:19;;6793:366;;;:::o;7165:419::-;7331:4;7369:2;7358:9;7354:18;7346:26;;7418:9;7412:4;7408:20;7404:1;7393:9;7389:17;7382:47;7446:131;7572:4;7446:131;:::i;:::-;7438:139;;7165:419;;;:::o;7590:223::-;7730:34;7726:1;7718:6;7714:14;7707:58;7799:6;7794:2;7786:6;7782:15;7775:31;7590:223;:::o;7819:366::-;7961:3;7982:67;8046:2;8041:3;7982:67;:::i;:::-;7975:74;;8058:93;8147:3;8058:93;:::i;:::-;8176:2;8171:3;8167:12;8160:19;;7819:366;;;:::o;8191:419::-;8357:4;8395:2;8384:9;8380:18;8372:26;;8444:9;8438:4;8434:20;8430:1;8419:9;8415:17;8408:47;8472:131;8598:4;8472:131;:::i;:::-;8464:139;;8191:419;;;:::o;8616:221::-;8756:34;8752:1;8744:6;8740:14;8733:58;8825:4;8820:2;8812:6;8808:15;8801:29;8616:221;:::o;8843:366::-;8985:3;9006:67;9070:2;9065:3;9006:67;:::i;:::-;8999:74;;9082:93;9171:3;9082:93;:::i;:::-;9200:2;9195:3;9191:12;9184:19;;8843:366;;;:::o;9215:419::-;9381:4;9419:2;9408:9;9404:18;9396:26;;9468:9;9462:4;9458:20;9454:1;9443:9;9439:17;9432:47;9496:131;9622:4;9496:131;:::i;:::-;9488:139;;9215:419;;;:::o;9640:179::-;9780:31;9776:1;9768:6;9764:14;9757:55;9640:179;:::o;9825:366::-;9967:3;9988:67;10052:2;10047:3;9988:67;:::i;:::-;9981:74;;10064:93;10153:3;10064:93;:::i;:::-;10182:2;10177:3;10173:12;10166:19;;9825:366;;;:::o;10197:419::-;10363:4;10401:2;10390:9;10386:18;10378:26;;10450:9;10444:4;10440:20;10436:1;10425:9;10421:17;10414:47;10478:131;10604:4;10478:131;:::i;:::-;10470:139;;10197:419;;;:::o;10622:224::-;10762:34;10758:1;10750:6;10746:14;10739:58;10831:7;10826:2;10818:6;10814:15;10807:32;10622:224;:::o;10852:366::-;10994:3;11015:67;11079:2;11074:3;11015:67;:::i;:::-;11008:74;;11091:93;11180:3;11091:93;:::i;:::-;11209:2;11204:3;11200:12;11193:19;;10852:366;;;:::o;11224:419::-;11390:4;11428:2;11417:9;11413:18;11405:26;;11477:9;11471:4;11467:20;11463:1;11452:9;11448:17;11441:47;11505:131;11631:4;11505:131;:::i;:::-;11497:139;;11224:419;;;:::o;11649:222::-;11789:34;11785:1;11777:6;11773:14;11766:58;11858:5;11853:2;11845:6;11841:15;11834:30;11649:222;:::o;11877:366::-;12019:3;12040:67;12104:2;12099:3;12040:67;:::i;:::-;12033:74;;12116:93;12205:3;12116:93;:::i;:::-;12234:2;12229:3;12225:12;12218:19;;11877:366;;;:::o;12249:419::-;12415:4;12453:2;12442:9;12438:18;12430:26;;12502:9;12496:4;12492:20;12488:1;12477:9;12473:17;12466:47;12530:131;12656:4;12530:131;:::i;:::-;12522:139;;12249:419;;;:::o;12674:225::-;12814:34;12810:1;12802:6;12798:14;12791:58;12883:8;12878:2;12870:6;12866:15;12859:33;12674:225;:::o;12905:366::-;13047:3;13068:67;13132:2;13127:3;13068:67;:::i;:::-;13061:74;;13144:93;13233:3;13144:93;:::i;:::-;13262:2;13257:3;13253:12;13246:19;;12905:366;;;:::o;13277:419::-;13443:4;13481:2;13470:9;13466:18;13458:26;;13530:9;13524:4;13520:20;13516:1;13505:9;13501:17;13494:47;13558:131;13684:4;13558:131;:::i;:::-;13550:139;;13277:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"931800","executionCost":"968","totalCost":"932768"},"external":{"allowance(address,address)":"infinite","approve(address,uint256)":"infinite","balanceOf(address)":"2863","decimals()":"432","decreaseAllowance(address,uint256)":"infinite","increaseAllowance(address,uint256)":"infinite","name()":"infinite","symbol()":"infinite","totalSupply()":"2482","transfer(address,uint256)":"infinite","transferFrom(address,address,uint256)":"infinite"},"internal":{"__ERC20_init(string memory,string memory)":"infinite","__ERC20_init_unchained(string memory,string memory)":"infinite","_afterTokenTransfer(address,address,uint256)":"15","_approve(address,address,uint256)":"infinite","_beforeTokenTransfer(address,address,uint256)":"15","_burn(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_spendAllowance(address,address,uint256)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":\"ERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":415,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2325,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":796,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_balances","offset":0,"slot":"51","type":"t_mapping(t_address,t_uint256)"},{"astId":802,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_allowances","offset":0,"slot":"52","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":804,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_totalSupply","offset":0,"slot":"53","type":"t_uint256"},{"astId":806,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_name","offset":0,"slot":"54","type":"t_string_storage"},{"astId":808,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_symbol","offset":0,"slot":"55","type":"t_string_storage"},{"astId":1388,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"__gap","offset":0,"slot":"56","type":"t_array(t_uint256)45_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)45_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[45]","numberOfBytes":"1440"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"IERC20Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol":{"IERC20MetadataUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._","kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"decimals()":{"details":"Returns the decimals places of the token."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":\"IERC20MetadataUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol":{"ERC20PermitUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"custom:storage-size":"51","details":"Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. _Available since v3.4._","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"See {IERC20Permit-DOMAIN_SEPARATOR}."},"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"nonces(address)":{"details":"See {IERC20Permit-nonces}."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"See {IERC20Permit-permit}."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"stateVariables":{"_PERMIT_TYPEHASH_DEPRECATED_SLOT":{"custom:oz-renamed-from":"_PERMIT_TYPEHASH","details":"In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`. However, to ensure consistency with the upgradeable transpiler, we will continue to reserve a slot."},"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:storage-size\":\"51\",\"details\":\"Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. _Available since v3.4._\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"_PERMIT_TYPEHASH_DEPRECATED_SLOT\":{\"custom:oz-renamed-from\":\"_PERMIT_TYPEHASH\",\"details\":\"In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`. However, to ensure consistency with the upgradeable transpiler, we will continue to reserve a slot.\"},\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":\"ERC20PermitUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfe1053f3a6ee4527cde96c8152b8b1dbb98774639a64e819087bc80e618d7f7f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3017aded62c4a2b9707f5f06f92934e592c1c9b6f384b91b51340a6d5f841931\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":415,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2325,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":796,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_balances","offset":0,"slot":"51","type":"t_mapping(t_address,t_uint256)"},{"astId":802,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_allowances","offset":0,"slot":"52","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":804,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_totalSupply","offset":0,"slot":"53","type":"t_uint256"},{"astId":806,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_name","offset":0,"slot":"54","type":"t_string_storage"},{"astId":808,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_symbol","offset":0,"slot":"55","type":"t_string_storage"},{"astId":1388,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"__gap","offset":0,"slot":"56","type":"t_array(t_uint256)45_storage"},{"astId":2945,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_HASHED_NAME","offset":0,"slot":"101","type":"t_bytes32"},{"astId":2947,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_HASHED_VERSION","offset":0,"slot":"102","type":"t_bytes32"},{"astId":3085,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"__gap","offset":0,"slot":"103","type":"t_array(t_uint256)50_storage"},{"astId":1518,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_nonces","offset":0,"slot":"153","type":"t_mapping(t_address,t_struct(Counter)2332_storage)"},{"astId":1526,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_PERMIT_TYPEHASH_DEPRECATED_SLOT","offset":0,"slot":"154","type":"t_bytes32"},{"astId":1682,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"__gap","offset":0,"slot":"155","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)45_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[45]","numberOfBytes":"1440"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_struct(Counter)2332_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct CountersUpgradeable.Counter)","numberOfBytes":"32","value":"t_struct(Counter)2332_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Counter)2332_storage":{"encoding":"inplace","label":"struct CountersUpgradeable.Counter","members":[{"astId":2331,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol":{"IERC20PermitUpgradeable":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":\"IERC20PermitUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"SafeERC20Upgradeable":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c25593687f1c52b5df7540c6c02680680cab80cdfffd44f43c0b5726c556f98464736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC2 SSTORE SWAP4 PUSH9 0x7F1C52B5DF7540C6C0 0x26 DUP1 PUSH9 0xCAB80CDFFFD44F43C SIGNEXTEND JUMPI 0x26 0xC5 JUMP 0xF9 DUP5 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"740:3847:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c25593687f1c52b5df7540c6c02680680cab80cdfffd44f43c0b5726c556f98464736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC2 SSTORE SWAP4 PUSH9 0x7F1C52B5DF7540C6C0 0x26 DUP1 PUSH9 0xCAB80CDFFFD44F43C SIGNEXTEND JUMPI 0x26 0xC5 JUMP 0xF9 DUP5 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"740:3847:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_callOptionalReturn(contract IERC20Upgradeable,bytes memory)":"infinite","safeApprove(contract IERC20Upgradeable,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20Upgradeable,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20Upgradeable,address,uint256)":"infinite","safePermit(contract IERC20PermitUpgradeable,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20Upgradeable,address,uint256)":"infinite","safeTransferFrom(contract IERC20Upgradeable,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":\"SafeERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ef4ddf34c8117976bb7512e118a70cfae645d22e067c884e07b9f28a5f13f4bd64736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEF 0x4D 0xDF CALLVALUE 0xC8 GT PUSH26 0x76BB7512E118A70CFAE645D22E067C884E07B9F28A5F13F4BD64 PUSH20 0x6F6C634300081000330000000000000000000000 ","sourceMap":"194:8087:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ef4ddf34c8117976bb7512e118a70cfae645d22e067c884e07b9f28a5f13f4bd64736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEF 0x4D 0xDF CALLVALUE 0xC8 GT PUSH26 0x76BB7512E118A70CFAE645D22E067C884E07B9F28A5F13F4BD64 PUSH20 0x6F6C634300081000330000000000000000000000 ","sourceMap":"194:8087:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":415,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2325,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol":{"CountersUpgradeable":{"abi":[],"devdoc":{"author":"Matt Condon (@shrugs)","details":"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`","kind":"dev","methods":{},"title":"Counters","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220acdbe7b1efab60fa3d8c1807bf4151ce447706b12e08d2701697ee3fcb7daa3964736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAC 0xDB 0xE7 0xB1 0xEF 0xAB PUSH1 0xFA RETURNDATASIZE DUP13 XOR SMOD 0xBF COINBASE MLOAD 0xCE DIFFICULTY PUSH24 0x6B12E08D2701697EE3FCB7DAA3964736F6C634300081000 CALLER ","sourceMap":"424:982:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220acdbe7b1efab60fa3d8c1807bf4151ce447706b12e08d2701697ee3fcb7daa3964736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAC 0xDB 0xE7 0xB1 0xEF 0xAB PUSH1 0xFA RETURNDATASIZE DUP13 XOR SMOD 0xBF COINBASE MLOAD 0xCE DIFFICULTY PUSH24 0x6B12E08D2701697EE3FCB7DAA3964736F6C634300081000 CALLER ","sourceMap":"424:982:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"current(struct CountersUpgradeable.Counter storage pointer)":"infinite","decrement(struct CountersUpgradeable.Counter storage pointer)":"infinite","increment(struct CountersUpgradeable.Counter storage pointer)":"infinite","reset(struct CountersUpgradeable.Counter storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":\"CountersUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d411ff3ff8a932ddf1702f7c8afec6c5767ac01ad740838c2a8364077866f9e364736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD4 GT SELFDESTRUCT EXTCODEHASH 0xF8 0xA9 ORIGIN 0xDD CALL PUSH17 0x2F7C8AFEC6C5767AC01AD740838C2A8364 SMOD PUSH25 0x66F9E364736F6C634300081000330000000000000000000000 ","sourceMap":"199:2098:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d411ff3ff8a932ddf1702f7c8afec6c5767ac01ad740838c2a8364077866f9e364736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD4 GT SELFDESTRUCT EXTCODEHASH 0xF8 0xA9 ORIGIN 0xDD CALL PUSH17 0x2F7C8AFEC6C5767AC01AD740838C2A8364 SMOD PUSH25 0x66F9E364736F6C634300081000330000000000000000000000 ","sourceMap":"199:2098:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ECDSAUpgradeable":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122049df7c6d111ac3836089c4bc9b10fdd3ff3004226d2752899316db39a77f89e864736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x49 0xDF PUSH29 0x6D111AC3836089C4BC9B10FDD3FF3004226D2752899316DB39A77F89E8 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"380:8190:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122049df7c6d111ac3836089c4bc9b10fdd3ff3004226d2752899316db39a77f89e864736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x49 0xDF PUSH29 0x6D111AC3836089C4BC9B10FDD3FF3004226D2752899316DB39A77F89E8 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"380:8190:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_throwError(enum ECDSAUpgradeable.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":\"ECDSAUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol":{"EIP712Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:storage-size":"52","details":"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:storage-size\":\"52\",\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":\"EIP712Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3017aded62c4a2b9707f5f06f92934e592c1c9b6f384b91b51340a6d5f841931\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":415,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2945,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_HASHED_NAME","offset":0,"slot":"1","type":"t_bytes32"},{"astId":2947,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_HASHED_VERSION","offset":0,"slot":"2","type":"t_bytes32"},{"astId":3085,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"__gap","offset":0,"slot":"3","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ERC165Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":\"ERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":415,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3129,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"IERC165Upgradeable":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":\"IERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"MathUpgradeable":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122066f0cc9ea6df849ca2bbd31fcb6f2d12f06ccb50805015ff7ad82d2286763cb664736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0xF0CC9EA6DF849C LOG2 0xBB 0xD3 0x1F 0xCB PUSH16 0x2D12F06CCB50805015FF7AD82D228676 EXTCODECOPY 0xB6 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"202:12313:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122066f0cc9ea6df849ca2bbd31fcb6f2d12f06ccb50805015ff7ad82d2286763cb664736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0xF0CC9EA6DF849C LOG2 0xBB 0xD3 0x1F 0xCB PUSH16 0x2D12F06CCB50805015FF7AD82D228676 EXTCODECOPY 0xB6 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"202:12313:19:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum MathUpgradeable.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum MathUpgradeable.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum MathUpgradeable.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum MathUpgradeable.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/BaseUpgradeablePausable.sol":{"BaseUpgradeablePausable":{"abi":[{"inputs":[],"name":"BaseUpgradeablePausable__ZeroAddressError","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"__BaseUpgradeablePausable_init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isAdmin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13BD DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E810B1A GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x1E1 JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x13B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0xD2E JUMP JUMPDEST PUSH2 0x1FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xED PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE8 SWAP2 SWAP1 PUSH2 0xDC7 JUMP JUMPDEST PUSH2 0x277 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFA SWAP2 SWAP1 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x118 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x297 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x139 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x134 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x2B8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x143 PUSH2 0x33B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x150 SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x173 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x16E SWAP2 SWAP1 PUSH2 0xEBC JUMP JUMPDEST PUSH2 0x352 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x18F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18A SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x474 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19C SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AD PUSH2 0x4DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CB PUSH2 0x4E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D8 SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F6 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x505 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x270 JUMPI POP PUSH2 0x26F DUP3 PUSH2 0x526 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2A0 DUP3 PUSH2 0x277 JUMP JUMPDEST PUSH2 0x2A9 DUP2 PUSH2 0x590 JUMP JUMPDEST PUSH2 0x2B3 DUP4 DUP4 PUSH2 0x5A4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x2C0 PUSH2 0x685 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x32D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x324 SWAP1 PUSH2 0xF6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x337 DUP3 DUP3 PUSH2 0x68D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x398 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x407 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x40F PUSH2 0x76F JUMP JUMPDEST PUSH2 0x417 PUSH2 0x7C8 JUMP JUMPDEST PUSH2 0x41F PUSH2 0x819 JUMP JUMPDEST PUSH2 0x430 PUSH2 0x42A PUSH2 0x872 JUMP JUMPDEST DUP3 PUSH2 0x5A4 JUMP JUMPDEST PUSH2 0x441 PUSH2 0x43B PUSH2 0x89A JUMP JUMPDEST DUP3 PUSH2 0x5A4 JUMP JUMPDEST PUSH2 0x459 PUSH2 0x44C PUSH2 0x89A JUMP JUMPDEST PUSH2 0x454 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x8C2 JUMP JUMPDEST PUSH2 0x471 PUSH2 0x464 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x46C PUSH2 0x872 JUMP JUMPDEST PUSH2 0x8C2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x500 PUSH2 0x4F3 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x4FB PUSH2 0x685 JUMP JUMPDEST PUSH2 0x474 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x50E DUP3 PUSH2 0x277 JUMP JUMPDEST PUSH2 0x517 DUP2 PUSH2 0x590 JUMP JUMPDEST PUSH2 0x521 DUP4 DUP4 PUSH2 0x68D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5A1 DUP2 PUSH2 0x59C PUSH2 0x685 JUMP JUMPDEST PUSH2 0x91E JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x5AE DUP3 DUP3 PUSH2 0x474 JUMP JUMPDEST PUSH2 0x681 JUMPI PUSH1 0x1 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x626 PUSH2 0x685 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x697 DUP3 DUP3 PUSH2 0x474 JUMP JUMPDEST ISZERO PUSH2 0x76B JUMPI PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x710 PUSH2 0x685 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x7BE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7B5 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7C6 PUSH2 0x9A3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x817 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x80E SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x868 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x85F SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x870 PUSH2 0xA0F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8CD DUP4 PUSH2 0x277 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x97 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x928 DUP3 DUP3 PUSH2 0x474 JUMP JUMPDEST PUSH2 0x99F JUMPI PUSH2 0x935 DUP2 PUSH2 0xA68 JUMP JUMPDEST PUSH2 0x943 DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0xA95 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x954 SWAP3 SWAP2 SWAP1 PUSH2 0x1127 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x996 SWAP2 SWAP1 PUSH2 0x11AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x9F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9E9 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xA5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA55 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA8E DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0xA95 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0xAA8 SWAP2 SWAP1 PUSH2 0x1206 JUMP JUMPDEST PUSH2 0xAB2 SWAP2 SWAP1 PUSH2 0x1260 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xACB JUMPI PUSH2 0xACA PUSH2 0x1294 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xAFD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB35 JUMPI PUSH2 0xB34 PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xB99 JUMPI PUSH2 0xB98 PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0xBD9 SWAP2 SWAP1 PUSH2 0x1206 JUMP JUMPDEST PUSH2 0xBE3 SWAP2 SWAP1 PUSH2 0x1260 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xC83 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0xC25 JUMPI PUSH2 0xC24 PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xC3C JUMPI PUSH2 0xC3B PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0xC7C SWAP1 PUSH2 0x12F2 JUMP JUMPDEST SWAP1 POP PUSH2 0xBE6 JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0xCC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBE SWAP1 PUSH2 0x1367 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD0B DUP2 PUSH2 0xCD6 JUMP JUMPDEST DUP2 EQ PUSH2 0xD16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xD28 DUP2 PUSH2 0xD02 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD44 JUMPI PUSH2 0xD43 PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD52 DUP5 DUP3 DUP6 ADD PUSH2 0xD19 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD70 DUP2 PUSH2 0xD5B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD8B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD67 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDA4 DUP2 PUSH2 0xD91 JUMP JUMPDEST DUP2 EQ PUSH2 0xDAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xDC1 DUP2 PUSH2 0xD9B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDDD JUMPI PUSH2 0xDDC PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xDEB DUP5 DUP3 DUP6 ADD PUSH2 0xDB2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xDFD DUP2 PUSH2 0xD91 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE18 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xDF4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE49 DUP3 PUSH2 0xE1E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE59 DUP2 PUSH2 0xE3E JUMP JUMPDEST DUP2 EQ PUSH2 0xE64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xE76 DUP2 PUSH2 0xE50 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE93 JUMPI PUSH2 0xE92 PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEA1 DUP6 DUP3 DUP7 ADD PUSH2 0xDB2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xEB2 DUP6 DUP3 DUP7 ADD PUSH2 0xE67 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xED2 JUMPI PUSH2 0xED1 PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEE0 DUP5 DUP3 DUP6 ADD PUSH2 0xE67 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF56 PUSH1 0x2F DUP4 PUSH2 0xEE9 JUMP JUMPDEST SWAP2 POP PUSH2 0xF61 DUP3 PUSH2 0xEFA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF85 DUP2 PUSH2 0xF49 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFE8 PUSH1 0x2B DUP4 PUSH2 0xEE9 JUMP JUMPDEST SWAP2 POP PUSH2 0xFF3 DUP3 PUSH2 0xF8C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1017 DUP2 PUSH2 0xFDB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x105F PUSH1 0x17 DUP4 PUSH2 0x101E JUMP JUMPDEST SWAP2 POP PUSH2 0x106A DUP3 PUSH2 0x1029 JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x109E JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10B5 DUP3 PUSH2 0x1075 JUMP JUMPDEST PUSH2 0x10BF DUP2 DUP6 PUSH2 0x101E JUMP JUMPDEST SWAP4 POP PUSH2 0x10CF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1080 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1111 PUSH1 0x11 DUP4 PUSH2 0x101E JUMP JUMPDEST SWAP2 POP PUSH2 0x111C DUP3 PUSH2 0x10DB JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1132 DUP3 PUSH2 0x1052 JUMP JUMPDEST SWAP2 POP PUSH2 0x113E DUP3 DUP6 PUSH2 0x10AA JUMP JUMPDEST SWAP2 POP PUSH2 0x1149 DUP3 PUSH2 0x1104 JUMP JUMPDEST SWAP2 POP PUSH2 0x1155 DUP3 DUP5 PUSH2 0x10AA JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x117D DUP3 PUSH2 0x1075 JUMP JUMPDEST PUSH2 0x1187 DUP2 DUP6 PUSH2 0xEE9 JUMP JUMPDEST SWAP4 POP PUSH2 0x1197 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1080 JUMP JUMPDEST PUSH2 0x11A0 DUP2 PUSH2 0x1161 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11C5 DUP2 DUP5 PUSH2 0x1172 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1211 DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH2 0x121C DUP4 PUSH2 0x11CD JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1255 JUMPI PUSH2 0x1254 PUSH2 0x11D7 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x126B DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH2 0x1276 DUP4 PUSH2 0x11CD JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x128E JUMPI PUSH2 0x128D PUSH2 0x11D7 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x12FD DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x1310 JUMPI PUSH2 0x130F PUSH2 0x11D7 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1351 PUSH1 0x20 DUP4 PUSH2 0xEE9 JUMP JUMPDEST SWAP2 POP PUSH2 0x135C DUP3 PUSH2 0x131B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1380 DUP2 PUSH2 0x1344 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0x4F KECCAK256 PUSH14 0xCDCDEBF392D7459B2AB1515C54CD SWAP16 0xE4 DUP1 DUP11 RETURNDATACOPY DUP7 SHL DUP1 JUMPI SUB 0xBC 0x1E SWAP11 0x28 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"461:951:20:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEFAULT_ADMIN_ROLE_42":{"entryPoint":1247,"id":42,"parameterSlots":0,"returnSlots":0},"@__AccessControl_init_21":{"entryPoint":1992,"id":21,"parameterSlots":0,"returnSlots":0},"@__BaseUpgradeablePausable_init_4094":{"entryPoint":850,"id":4094,"parameterSlots":1,"returnSlots":0},"@__Pausable_init_608":{"entryPoint":1903,"id":608,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_unchained_618":{"entryPoint":2467,"id":618,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_727":{"entryPoint":2073,"id":727,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_unchained_737":{"entryPoint":2575,"id":737,"parameterSlots":0,"returnSlots":0},"@_checkRole_107":{"entryPoint":1424,"id":107,"parameterSlots":1,"returnSlots":0},"@_checkRole_146":{"entryPoint":2334,"id":146,"parameterSlots":2,"returnSlots":0},"@_grantRole_298":{"entryPoint":1444,"id":298,"parameterSlots":2,"returnSlots":0},"@_msgSender_2311":{"entryPoint":1669,"id":2311,"parameterSlots":0,"returnSlots":1},"@_revokeRole_329":{"entryPoint":1677,"id":329,"parameterSlots":2,"returnSlots":0},"@_setRoleAdmin_266":{"entryPoint":2242,"id":266,"parameterSlots":2,"returnSlots":0},"@getAdminRole_4129":{"entryPoint":2162,"id":4129,"parameterSlots":0,"returnSlots":1},"@getPauserRole_4137":{"entryPoint":2202,"id":4137,"parameterSlots":0,"returnSlots":1},"@getRoleAdmin_161":{"entryPoint":631,"id":161,"parameterSlots":1,"returnSlots":1},"@grantRole_181":{"entryPoint":663,"id":181,"parameterSlots":2,"returnSlots":0},"@hasRole_94":{"entryPoint":1140,"id":94,"parameterSlots":2,"returnSlots":1},"@isAdmin_4108":{"entryPoint":1254,"id":4108,"parameterSlots":0,"returnSlots":1},"@paused_643":{"entryPoint":827,"id":643,"parameterSlots":0,"returnSlots":1},"@renounceRole_224":{"entryPoint":696,"id":224,"parameterSlots":2,"returnSlots":0},"@revokeRole_201":{"entryPoint":1285,"id":201,"parameterSlots":2,"returnSlots":0},"@supportsInterface_3124":{"entryPoint":1318,"id":3124,"parameterSlots":1,"returnSlots":1},"@supportsInterface_75":{"entryPoint":509,"id":75,"parameterSlots":1,"returnSlots":1},"@toHexString_2554":{"entryPoint":2709,"id":2554,"parameterSlots":2,"returnSlots":1},"@toHexString_2574":{"entryPoint":2664,"id":2574,"parameterSlots":1,"returnSlots":1},"abi_decode_t_address":{"entryPoint":3687,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":3506,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":3353,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3772,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":3527,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":3708,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":3374,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":3431,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":3572,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":4466,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":4266,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack":{"entryPoint":4932,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":4059,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":4178,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":4356,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack":{"entryPoint":3913,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":4391,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":3446,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":3587,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4523,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4967,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4094,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3948,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":4213,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":3817,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":4126,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":4704,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":4614,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":3646,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":3419,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":3473,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":3286,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":3614,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":4557,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":4224,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":4850,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":4567,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4803,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":4756,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":3281,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":4449,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2":{"entryPoint":4891,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":3980,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874":{"entryPoint":4137,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69":{"entryPoint":4315,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b":{"entryPoint":3834,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":3664,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":3483,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":3330,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:12337:27","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:27","statements":[{"nodeType":"YulAssignment","src":"57:19:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:27","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:27"},"nodeType":"YulFunctionCall","src":"67:9:27"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:27"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:27","type":""}],"src":"7:75:27"},{"body":{"nodeType":"YulBlock","src":"177:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:27"},"nodeType":"YulFunctionCall","src":"187:12:27"},"nodeType":"YulExpressionStatement","src":"187:12:27"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:27"},{"body":{"nodeType":"YulBlock","src":"300:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:27"},"nodeType":"YulFunctionCall","src":"310:12:27"},"nodeType":"YulExpressionStatement","src":"310:12:27"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:27"},{"body":{"nodeType":"YulBlock","src":"378:105:27","statements":[{"nodeType":"YulAssignment","src":"388:89:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:27","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:27"},"nodeType":"YulFunctionCall","src":"399:78:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:27"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:27","type":""}],"src":"334:149:27"},{"body":{"nodeType":"YulBlock","src":"531:78:27","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:27"},"nodeType":"YulFunctionCall","src":"589:12:27"},"nodeType":"YulExpressionStatement","src":"589:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:27"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:27"},"nodeType":"YulFunctionCall","src":"561:23:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:27"},"nodeType":"YulFunctionCall","src":"551:34:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:27"},"nodeType":"YulFunctionCall","src":"544:42:27"},"nodeType":"YulIf","src":"541:62:27"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:27","type":""}],"src":"489:120:27"},{"body":{"nodeType":"YulBlock","src":"666:86:27","statements":[{"nodeType":"YulAssignment","src":"676:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:27"},"nodeType":"YulFunctionCall","src":"685:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:27"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:27"},"nodeType":"YulFunctionCall","src":"714:32:27"},"nodeType":"YulExpressionStatement","src":"714:32:27"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:27","type":""}],"src":"615:137:27"},{"body":{"nodeType":"YulBlock","src":"823:262:27","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:27"},"nodeType":"YulFunctionCall","src":"871:79:27"},"nodeType":"YulExpressionStatement","src":"871:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:27"},"nodeType":"YulFunctionCall","src":"840:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:27"},"nodeType":"YulFunctionCall","src":"836:32:27"},"nodeType":"YulIf","src":"833:119:27"},{"nodeType":"YulBlock","src":"962:116:27","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:27","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:27"},"nodeType":"YulFunctionCall","src":"1036:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:27"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:27"},"nodeType":"YulFunctionCall","src":"1016:52:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:27"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:27","type":""}],"src":"758:327:27"},{"body":{"nodeType":"YulBlock","src":"1133:48:27","statements":[{"nodeType":"YulAssignment","src":"1143:32:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:27"},"nodeType":"YulFunctionCall","src":"1161:13:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:27"},"nodeType":"YulFunctionCall","src":"1154:21:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:27"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:27","type":""}],"src":"1091:90:27"},{"body":{"nodeType":"YulBlock","src":"1246:50:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:27"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:27"},"nodeType":"YulFunctionCall","src":"1268:21:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:27"},"nodeType":"YulFunctionCall","src":"1256:34:27"},"nodeType":"YulExpressionStatement","src":"1256:34:27"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:27","type":""}],"src":"1187:109:27"},{"body":{"nodeType":"YulBlock","src":"1394:118:27","statements":[{"nodeType":"YulAssignment","src":"1404:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:27"},"nodeType":"YulFunctionCall","src":"1412:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:27"},"nodeType":"YulFunctionCall","src":"1487:17:27"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:27"},"nodeType":"YulFunctionCall","src":"1440:65:27"},"nodeType":"YulExpressionStatement","src":"1440:65:27"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:27","type":""}],"src":"1302:210:27"},{"body":{"nodeType":"YulBlock","src":"1563:32:27","statements":[{"nodeType":"YulAssignment","src":"1573:16:27","value":{"name":"value","nodeType":"YulIdentifier","src":"1584:5:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1573:7:27"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1545:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1555:7:27","type":""}],"src":"1518:77:27"},{"body":{"nodeType":"YulBlock","src":"1644:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"1701:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1710:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1713:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1703:6:27"},"nodeType":"YulFunctionCall","src":"1703:12:27"},"nodeType":"YulExpressionStatement","src":"1703:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1667:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1692:5:27"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"1674:17:27"},"nodeType":"YulFunctionCall","src":"1674:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1664:2:27"},"nodeType":"YulFunctionCall","src":"1664:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1657:6:27"},"nodeType":"YulFunctionCall","src":"1657:43:27"},"nodeType":"YulIf","src":"1654:63:27"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1637:5:27","type":""}],"src":"1601:122:27"},{"body":{"nodeType":"YulBlock","src":"1781:87:27","statements":[{"nodeType":"YulAssignment","src":"1791:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1813:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1800:12:27"},"nodeType":"YulFunctionCall","src":"1800:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1791:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1856:5:27"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"1829:26:27"},"nodeType":"YulFunctionCall","src":"1829:33:27"},"nodeType":"YulExpressionStatement","src":"1829:33:27"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1759:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"1767:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1775:5:27","type":""}],"src":"1729:139:27"},{"body":{"nodeType":"YulBlock","src":"1940:263:27","statements":[{"body":{"nodeType":"YulBlock","src":"1986:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1988:77:27"},"nodeType":"YulFunctionCall","src":"1988:79:27"},"nodeType":"YulExpressionStatement","src":"1988:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1961:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"1970:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1957:3:27"},"nodeType":"YulFunctionCall","src":"1957:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"1982:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1953:3:27"},"nodeType":"YulFunctionCall","src":"1953:32:27"},"nodeType":"YulIf","src":"1950:119:27"},{"nodeType":"YulBlock","src":"2079:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"2094:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"2108:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2098:6:27","type":""}]},{"nodeType":"YulAssignment","src":"2123:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2158:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"2169:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2154:3:27"},"nodeType":"YulFunctionCall","src":"2154:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2178:7:27"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"2133:20:27"},"nodeType":"YulFunctionCall","src":"2133:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2123:6:27"}]}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1910:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1921:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1933:6:27","type":""}],"src":"1874:329:27"},{"body":{"nodeType":"YulBlock","src":"2274:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2291:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2314:5:27"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"2296:17:27"},"nodeType":"YulFunctionCall","src":"2296:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2284:6:27"},"nodeType":"YulFunctionCall","src":"2284:37:27"},"nodeType":"YulExpressionStatement","src":"2284:37:27"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2262:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2269:3:27","type":""}],"src":"2209:118:27"},{"body":{"nodeType":"YulBlock","src":"2431:124:27","statements":[{"nodeType":"YulAssignment","src":"2441:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2453:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2464:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2449:3:27"},"nodeType":"YulFunctionCall","src":"2449:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2441:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2521:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2534:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2545:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2530:3:27"},"nodeType":"YulFunctionCall","src":"2530:17:27"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"2477:43:27"},"nodeType":"YulFunctionCall","src":"2477:71:27"},"nodeType":"YulExpressionStatement","src":"2477:71:27"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2403:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2415:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2426:4:27","type":""}],"src":"2333:222:27"},{"body":{"nodeType":"YulBlock","src":"2606:81:27","statements":[{"nodeType":"YulAssignment","src":"2616:65:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2631:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"2638:42:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2627:3:27"},"nodeType":"YulFunctionCall","src":"2627:54:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2616:7:27"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2588:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2598:7:27","type":""}],"src":"2561:126:27"},{"body":{"nodeType":"YulBlock","src":"2738:51:27","statements":[{"nodeType":"YulAssignment","src":"2748:35:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2777:5:27"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"2759:17:27"},"nodeType":"YulFunctionCall","src":"2759:24:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2748:7:27"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2720:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2730:7:27","type":""}],"src":"2693:96:27"},{"body":{"nodeType":"YulBlock","src":"2838:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"2895:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2904:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2907:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2897:6:27"},"nodeType":"YulFunctionCall","src":"2897:12:27"},"nodeType":"YulExpressionStatement","src":"2897:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2861:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2886:5:27"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"2868:17:27"},"nodeType":"YulFunctionCall","src":"2868:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2858:2:27"},"nodeType":"YulFunctionCall","src":"2858:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2851:6:27"},"nodeType":"YulFunctionCall","src":"2851:43:27"},"nodeType":"YulIf","src":"2848:63:27"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2831:5:27","type":""}],"src":"2795:122:27"},{"body":{"nodeType":"YulBlock","src":"2975:87:27","statements":[{"nodeType":"YulAssignment","src":"2985:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3007:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2994:12:27"},"nodeType":"YulFunctionCall","src":"2994:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2985:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3050:5:27"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"3023:26:27"},"nodeType":"YulFunctionCall","src":"3023:33:27"},"nodeType":"YulExpressionStatement","src":"3023:33:27"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2953:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"2961:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2969:5:27","type":""}],"src":"2923:139:27"},{"body":{"nodeType":"YulBlock","src":"3151:391:27","statements":[{"body":{"nodeType":"YulBlock","src":"3197:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3199:77:27"},"nodeType":"YulFunctionCall","src":"3199:79:27"},"nodeType":"YulExpressionStatement","src":"3199:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3172:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"3181:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3168:3:27"},"nodeType":"YulFunctionCall","src":"3168:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"3193:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3164:3:27"},"nodeType":"YulFunctionCall","src":"3164:32:27"},"nodeType":"YulIf","src":"3161:119:27"},{"nodeType":"YulBlock","src":"3290:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"3305:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"3319:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3309:6:27","type":""}]},{"nodeType":"YulAssignment","src":"3334:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3369:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"3380:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3365:3:27"},"nodeType":"YulFunctionCall","src":"3365:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3389:7:27"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"3344:20:27"},"nodeType":"YulFunctionCall","src":"3344:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3334:6:27"}]}]},{"nodeType":"YulBlock","src":"3417:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"3432:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"3446:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3436:6:27","type":""}]},{"nodeType":"YulAssignment","src":"3462:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3497:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"3508:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3493:3:27"},"nodeType":"YulFunctionCall","src":"3493:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3517:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3472:20:27"},"nodeType":"YulFunctionCall","src":"3472:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3462:6:27"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3113:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3124:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3136:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3144:6:27","type":""}],"src":"3068:474:27"},{"body":{"nodeType":"YulBlock","src":"3614:263:27","statements":[{"body":{"nodeType":"YulBlock","src":"3660:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3662:77:27"},"nodeType":"YulFunctionCall","src":"3662:79:27"},"nodeType":"YulExpressionStatement","src":"3662:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3635:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"3644:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3631:3:27"},"nodeType":"YulFunctionCall","src":"3631:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"3656:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3627:3:27"},"nodeType":"YulFunctionCall","src":"3627:32:27"},"nodeType":"YulIf","src":"3624:119:27"},{"nodeType":"YulBlock","src":"3753:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"3768:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"3782:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3772:6:27","type":""}]},{"nodeType":"YulAssignment","src":"3797:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3832:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"3843:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3828:3:27"},"nodeType":"YulFunctionCall","src":"3828:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3852:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3807:20:27"},"nodeType":"YulFunctionCall","src":"3807:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3797:6:27"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3584:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3595:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3607:6:27","type":""}],"src":"3548:329:27"},{"body":{"nodeType":"YulBlock","src":"3979:73:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3996:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"4001:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3989:6:27"},"nodeType":"YulFunctionCall","src":"3989:19:27"},"nodeType":"YulExpressionStatement","src":"3989:19:27"},{"nodeType":"YulAssignment","src":"4017:29:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4036:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"4041:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4032:3:27"},"nodeType":"YulFunctionCall","src":"4032:14:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"4017:11:27"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3951:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"3956:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"3967:11:27","type":""}],"src":"3883:169:27"},{"body":{"nodeType":"YulBlock","src":"4164:128:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4186:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"4194:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4182:3:27"},"nodeType":"YulFunctionCall","src":"4182:14:27"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"4198:34:27","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4175:6:27"},"nodeType":"YulFunctionCall","src":"4175:58:27"},"nodeType":"YulExpressionStatement","src":"4175:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4254:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"4262:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4250:3:27"},"nodeType":"YulFunctionCall","src":"4250:15:27"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"4267:17:27","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4243:6:27"},"nodeType":"YulFunctionCall","src":"4243:42:27"},"nodeType":"YulExpressionStatement","src":"4243:42:27"}]},"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"4156:6:27","type":""}],"src":"4058:234:27"},{"body":{"nodeType":"YulBlock","src":"4444:220:27","statements":[{"nodeType":"YulAssignment","src":"4454:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4520:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"4525:2:27","type":"","value":"47"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4461:58:27"},"nodeType":"YulFunctionCall","src":"4461:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4454:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4626:3:27"}],"functionName":{"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulIdentifier","src":"4537:88:27"},"nodeType":"YulFunctionCall","src":"4537:93:27"},"nodeType":"YulExpressionStatement","src":"4537:93:27"},{"nodeType":"YulAssignment","src":"4639:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4650:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"4655:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4646:3:27"},"nodeType":"YulFunctionCall","src":"4646:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4639:3:27"}]}]},"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4432:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4440:3:27","type":""}],"src":"4298:366:27"},{"body":{"nodeType":"YulBlock","src":"4841:248:27","statements":[{"nodeType":"YulAssignment","src":"4851:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4863:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4874:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4859:3:27"},"nodeType":"YulFunctionCall","src":"4859:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4851:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4898:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4909:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4894:3:27"},"nodeType":"YulFunctionCall","src":"4894:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4917:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"4923:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4913:3:27"},"nodeType":"YulFunctionCall","src":"4913:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4887:6:27"},"nodeType":"YulFunctionCall","src":"4887:47:27"},"nodeType":"YulExpressionStatement","src":"4887:47:27"},{"nodeType":"YulAssignment","src":"4943:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"5077:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4951:124:27"},"nodeType":"YulFunctionCall","src":"4951:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4943:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4821:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4836:4:27","type":""}],"src":"4670:419:27"},{"body":{"nodeType":"YulBlock","src":"5201:124:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5223:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"5231:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5219:3:27"},"nodeType":"YulFunctionCall","src":"5219:14:27"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"5235:34:27","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5212:6:27"},"nodeType":"YulFunctionCall","src":"5212:58:27"},"nodeType":"YulExpressionStatement","src":"5212:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5291:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"5299:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5287:3:27"},"nodeType":"YulFunctionCall","src":"5287:15:27"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"5304:13:27","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5280:6:27"},"nodeType":"YulFunctionCall","src":"5280:38:27"},"nodeType":"YulExpressionStatement","src":"5280:38:27"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"5193:6:27","type":""}],"src":"5095:230:27"},{"body":{"nodeType":"YulBlock","src":"5477:220:27","statements":[{"nodeType":"YulAssignment","src":"5487:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5553:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"5558:2:27","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"5494:58:27"},"nodeType":"YulFunctionCall","src":"5494:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5487:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5659:3:27"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"5570:88:27"},"nodeType":"YulFunctionCall","src":"5570:93:27"},"nodeType":"YulExpressionStatement","src":"5570:93:27"},{"nodeType":"YulAssignment","src":"5672:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5683:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"5688:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5679:3:27"},"nodeType":"YulFunctionCall","src":"5679:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5672:3:27"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5465:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5473:3:27","type":""}],"src":"5331:366:27"},{"body":{"nodeType":"YulBlock","src":"5874:248:27","statements":[{"nodeType":"YulAssignment","src":"5884:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5896:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"5907:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5892:3:27"},"nodeType":"YulFunctionCall","src":"5892:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5884:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5931:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"5942:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5927:3:27"},"nodeType":"YulFunctionCall","src":"5927:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"5950:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"5956:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5946:3:27"},"nodeType":"YulFunctionCall","src":"5946:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5920:6:27"},"nodeType":"YulFunctionCall","src":"5920:47:27"},"nodeType":"YulExpressionStatement","src":"5920:47:27"},{"nodeType":"YulAssignment","src":"5976:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"6110:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"5984:124:27"},"nodeType":"YulFunctionCall","src":"5984:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5976:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5854:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5869:4:27","type":""}],"src":"5703:419:27"},{"body":{"nodeType":"YulBlock","src":"6242:34:27","statements":[{"nodeType":"YulAssignment","src":"6252:18:27","value":{"name":"pos","nodeType":"YulIdentifier","src":"6267:3:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"6252:11:27"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6214:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"6219:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"6230:11:27","type":""}],"src":"6128:148:27"},{"body":{"nodeType":"YulBlock","src":"6388:67:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6410:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"6418:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6406:3:27"},"nodeType":"YulFunctionCall","src":"6406:14:27"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nodeType":"YulLiteral","src":"6422:25:27","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6399:6:27"},"nodeType":"YulFunctionCall","src":"6399:49:27"},"nodeType":"YulExpressionStatement","src":"6399:49:27"}]},"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"6380:6:27","type":""}],"src":"6282:173:27"},{"body":{"nodeType":"YulBlock","src":"6625:238:27","statements":[{"nodeType":"YulAssignment","src":"6635:92:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6719:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"6724:2:27","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"6642:76:27"},"nodeType":"YulFunctionCall","src":"6642:85:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6635:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6825:3:27"}],"functionName":{"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulIdentifier","src":"6736:88:27"},"nodeType":"YulFunctionCall","src":"6736:93:27"},"nodeType":"YulExpressionStatement","src":"6736:93:27"},{"nodeType":"YulAssignment","src":"6838:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6849:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"6854:2:27","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6845:3:27"},"nodeType":"YulFunctionCall","src":"6845:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6838:3:27"}]}]},"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6613:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6621:3:27","type":""}],"src":"6461:402:27"},{"body":{"nodeType":"YulBlock","src":"6928:40:27","statements":[{"nodeType":"YulAssignment","src":"6939:22:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6955:5:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6949:5:27"},"nodeType":"YulFunctionCall","src":"6949:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6939:6:27"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6911:5:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"6921:6:27","type":""}],"src":"6869:99:27"},{"body":{"nodeType":"YulBlock","src":"7036:184:27","statements":[{"nodeType":"YulVariableDeclaration","src":"7046:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"7055:1:27","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7050:1:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"7115:63:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7140:3:27"},{"name":"i","nodeType":"YulIdentifier","src":"7145:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7136:3:27"},"nodeType":"YulFunctionCall","src":"7136:11:27"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7159:3:27"},{"name":"i","nodeType":"YulIdentifier","src":"7164:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7155:3:27"},"nodeType":"YulFunctionCall","src":"7155:11:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7149:5:27"},"nodeType":"YulFunctionCall","src":"7149:18:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7129:6:27"},"nodeType":"YulFunctionCall","src":"7129:39:27"},"nodeType":"YulExpressionStatement","src":"7129:39:27"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7076:1:27"},{"name":"length","nodeType":"YulIdentifier","src":"7079:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7073:2:27"},"nodeType":"YulFunctionCall","src":"7073:13:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7087:19:27","statements":[{"nodeType":"YulAssignment","src":"7089:15:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7098:1:27"},{"kind":"number","nodeType":"YulLiteral","src":"7101:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7094:3:27"},"nodeType":"YulFunctionCall","src":"7094:10:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7089:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"7069:3:27","statements":[]},"src":"7065:113:27"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7198:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"7203:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7194:3:27"},"nodeType":"YulFunctionCall","src":"7194:16:27"},{"kind":"number","nodeType":"YulLiteral","src":"7212:1:27","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7187:6:27"},"nodeType":"YulFunctionCall","src":"7187:27:27"},"nodeType":"YulExpressionStatement","src":"7187:27:27"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"7018:3:27","type":""},{"name":"dst","nodeType":"YulTypedName","src":"7023:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"7028:6:27","type":""}],"src":"6974:246:27"},{"body":{"nodeType":"YulBlock","src":"7336:280:27","statements":[{"nodeType":"YulVariableDeclaration","src":"7346:53:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7393:5:27"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7360:32:27"},"nodeType":"YulFunctionCall","src":"7360:39:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7350:6:27","type":""}]},{"nodeType":"YulAssignment","src":"7408:96:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7492:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"7497:6:27"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"7415:76:27"},"nodeType":"YulFunctionCall","src":"7415:89:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7408:3:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7552:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"7559:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7548:3:27"},"nodeType":"YulFunctionCall","src":"7548:16:27"},{"name":"pos","nodeType":"YulIdentifier","src":"7566:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"7571:6:27"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7513:34:27"},"nodeType":"YulFunctionCall","src":"7513:65:27"},"nodeType":"YulExpressionStatement","src":"7513:65:27"},{"nodeType":"YulAssignment","src":"7587:23:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7598:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"7603:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7594:3:27"},"nodeType":"YulFunctionCall","src":"7594:16:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7587:3:27"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7317:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7324:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7332:3:27","type":""}],"src":"7226:390:27"},{"body":{"nodeType":"YulBlock","src":"7728:61:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7750:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"7758:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7746:3:27"},"nodeType":"YulFunctionCall","src":"7746:14:27"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nodeType":"YulLiteral","src":"7762:19:27","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7739:6:27"},"nodeType":"YulFunctionCall","src":"7739:43:27"},"nodeType":"YulExpressionStatement","src":"7739:43:27"}]},"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7720:6:27","type":""}],"src":"7622:167:27"},{"body":{"nodeType":"YulBlock","src":"7959:238:27","statements":[{"nodeType":"YulAssignment","src":"7969:92:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8053:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"8058:2:27","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"7976:76:27"},"nodeType":"YulFunctionCall","src":"7976:85:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7969:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8159:3:27"}],"functionName":{"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulIdentifier","src":"8070:88:27"},"nodeType":"YulFunctionCall","src":"8070:93:27"},"nodeType":"YulExpressionStatement","src":"8070:93:27"},{"nodeType":"YulAssignment","src":"8172:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8183:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"8188:2:27","type":"","value":"17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8179:3:27"},"nodeType":"YulFunctionCall","src":"8179:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8172:3:27"}]}]},"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7947:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7955:3:27","type":""}],"src":"7795:402:27"},{"body":{"nodeType":"YulBlock","src":"8589:581:27","statements":[{"nodeType":"YulAssignment","src":"8600:155:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8751:3:27"}],"functionName":{"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"8607:142:27"},"nodeType":"YulFunctionCall","src":"8607:148:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8600:3:27"}]},{"nodeType":"YulAssignment","src":"8765:102:27","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8854:6:27"},{"name":"pos","nodeType":"YulIdentifier","src":"8863:3:27"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"8772:81:27"},"nodeType":"YulFunctionCall","src":"8772:95:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8765:3:27"}]},{"nodeType":"YulAssignment","src":"8877:155:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9028:3:27"}],"functionName":{"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"8884:142:27"},"nodeType":"YulFunctionCall","src":"8884:148:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8877:3:27"}]},{"nodeType":"YulAssignment","src":"9042:102:27","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9131:6:27"},{"name":"pos","nodeType":"YulIdentifier","src":"9140:3:27"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"9049:81:27"},"nodeType":"YulFunctionCall","src":"9049:95:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9042:3:27"}]},{"nodeType":"YulAssignment","src":"9154:10:27","value":{"name":"pos","nodeType":"YulIdentifier","src":"9161:3:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9154:3:27"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8560:3:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8566:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8574:6:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8585:3:27","type":""}],"src":"8203:967:27"},{"body":{"nodeType":"YulBlock","src":"9224:54:27","statements":[{"nodeType":"YulAssignment","src":"9234:38:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9252:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"9259:2:27","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9248:3:27"},"nodeType":"YulFunctionCall","src":"9248:14:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9268:2:27","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9264:3:27"},"nodeType":"YulFunctionCall","src":"9264:7:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9244:3:27"},"nodeType":"YulFunctionCall","src":"9244:28:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"9234:6:27"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9207:5:27","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"9217:6:27","type":""}],"src":"9176:102:27"},{"body":{"nodeType":"YulBlock","src":"9376:285:27","statements":[{"nodeType":"YulVariableDeclaration","src":"9386:53:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9433:5:27"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"9400:32:27"},"nodeType":"YulFunctionCall","src":"9400:39:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9390:6:27","type":""}]},{"nodeType":"YulAssignment","src":"9448:78:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9514:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"9519:6:27"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9455:58:27"},"nodeType":"YulFunctionCall","src":"9455:71:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9448:3:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9574:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"9581:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9570:3:27"},"nodeType":"YulFunctionCall","src":"9570:16:27"},{"name":"pos","nodeType":"YulIdentifier","src":"9588:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"9593:6:27"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"9535:34:27"},"nodeType":"YulFunctionCall","src":"9535:65:27"},"nodeType":"YulExpressionStatement","src":"9535:65:27"},{"nodeType":"YulAssignment","src":"9609:46:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9620:3:27"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9647:6:27"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"9625:21:27"},"nodeType":"YulFunctionCall","src":"9625:29:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9616:3:27"},"nodeType":"YulFunctionCall","src":"9616:39:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9609:3:27"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9357:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9364:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9372:3:27","type":""}],"src":"9284:377:27"},{"body":{"nodeType":"YulBlock","src":"9785:195:27","statements":[{"nodeType":"YulAssignment","src":"9795:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9807:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"9818:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9803:3:27"},"nodeType":"YulFunctionCall","src":"9803:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9795:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9842:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"9853:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9838:3:27"},"nodeType":"YulFunctionCall","src":"9838:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9861:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"9867:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9857:3:27"},"nodeType":"YulFunctionCall","src":"9857:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9831:6:27"},"nodeType":"YulFunctionCall","src":"9831:47:27"},"nodeType":"YulExpressionStatement","src":"9831:47:27"},{"nodeType":"YulAssignment","src":"9887:86:27","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9959:6:27"},{"name":"tail","nodeType":"YulIdentifier","src":"9968:4:27"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9895:63:27"},"nodeType":"YulFunctionCall","src":"9895:78:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9887:4:27"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9757:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9769:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9780:4:27","type":""}],"src":"9667:313:27"},{"body":{"nodeType":"YulBlock","src":"10031:32:27","statements":[{"nodeType":"YulAssignment","src":"10041:16:27","value":{"name":"value","nodeType":"YulIdentifier","src":"10052:5:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"10041:7:27"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10013:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"10023:7:27","type":""}],"src":"9986:77:27"},{"body":{"nodeType":"YulBlock","src":"10097:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10114:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10117:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10107:6:27"},"nodeType":"YulFunctionCall","src":"10107:88:27"},"nodeType":"YulExpressionStatement","src":"10107:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10211:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10214:4:27","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10204:6:27"},"nodeType":"YulFunctionCall","src":"10204:15:27"},"nodeType":"YulExpressionStatement","src":"10204:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10235:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10238:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10228:6:27"},"nodeType":"YulFunctionCall","src":"10228:15:27"},"nodeType":"YulExpressionStatement","src":"10228:15:27"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"10069:180:27"},{"body":{"nodeType":"YulBlock","src":"10303:300:27","statements":[{"nodeType":"YulAssignment","src":"10313:25:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10336:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10318:17:27"},"nodeType":"YulFunctionCall","src":"10318:20:27"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"10313:1:27"}]},{"nodeType":"YulAssignment","src":"10347:25:27","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"10370:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10352:17:27"},"nodeType":"YulFunctionCall","src":"10352:20:27"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"10347:1:27"}]},{"body":{"nodeType":"YulBlock","src":"10545:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10547:16:27"},"nodeType":"YulFunctionCall","src":"10547:18:27"},"nodeType":"YulExpressionStatement","src":"10547:18:27"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10457:1:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10450:6:27"},"nodeType":"YulFunctionCall","src":"10450:9:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10443:6:27"},"nodeType":"YulFunctionCall","src":"10443:17:27"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"10465:1:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10472:66:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"x","nodeType":"YulIdentifier","src":"10540:1:27"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"10468:3:27"},"nodeType":"YulFunctionCall","src":"10468:74:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10462:2:27"},"nodeType":"YulFunctionCall","src":"10462:81:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10439:3:27"},"nodeType":"YulFunctionCall","src":"10439:105:27"},"nodeType":"YulIf","src":"10436:131:27"},{"nodeType":"YulAssignment","src":"10577:20:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10592:1:27"},{"name":"y","nodeType":"YulIdentifier","src":"10595:1:27"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"10588:3:27"},"nodeType":"YulFunctionCall","src":"10588:9:27"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"10577:7:27"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"10286:1:27","type":""},{"name":"y","nodeType":"YulTypedName","src":"10289:1:27","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"10295:7:27","type":""}],"src":"10255:348:27"},{"body":{"nodeType":"YulBlock","src":"10653:147:27","statements":[{"nodeType":"YulAssignment","src":"10663:25:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10686:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10668:17:27"},"nodeType":"YulFunctionCall","src":"10668:20:27"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"10663:1:27"}]},{"nodeType":"YulAssignment","src":"10697:25:27","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"10720:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10702:17:27"},"nodeType":"YulFunctionCall","src":"10702:20:27"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"10697:1:27"}]},{"nodeType":"YulAssignment","src":"10731:16:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10742:1:27"},{"name":"y","nodeType":"YulIdentifier","src":"10745:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10738:3:27"},"nodeType":"YulFunctionCall","src":"10738:9:27"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"10731:3:27"}]},{"body":{"nodeType":"YulBlock","src":"10771:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10773:16:27"},"nodeType":"YulFunctionCall","src":"10773:18:27"},"nodeType":"YulExpressionStatement","src":"10773:18:27"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10763:1:27"},{"name":"sum","nodeType":"YulIdentifier","src":"10766:3:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10760:2:27"},"nodeType":"YulFunctionCall","src":"10760:10:27"},"nodeType":"YulIf","src":"10757:36:27"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"10640:1:27","type":""},{"name":"y","nodeType":"YulTypedName","src":"10643:1:27","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"10649:3:27","type":""}],"src":"10609:191:27"},{"body":{"nodeType":"YulBlock","src":"10834:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10851:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10854:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10844:6:27"},"nodeType":"YulFunctionCall","src":"10844:88:27"},"nodeType":"YulExpressionStatement","src":"10844:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10948:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10951:4:27","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10941:6:27"},"nodeType":"YulFunctionCall","src":"10941:15:27"},"nodeType":"YulExpressionStatement","src":"10941:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10972:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10975:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10965:6:27"},"nodeType":"YulFunctionCall","src":"10965:15:27"},"nodeType":"YulExpressionStatement","src":"10965:15:27"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"10806:180:27"},{"body":{"nodeType":"YulBlock","src":"11020:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11037:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11040:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11030:6:27"},"nodeType":"YulFunctionCall","src":"11030:88:27"},"nodeType":"YulExpressionStatement","src":"11030:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11134:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11137:4:27","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11127:6:27"},"nodeType":"YulFunctionCall","src":"11127:15:27"},"nodeType":"YulExpressionStatement","src":"11127:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11158:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11161:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11151:6:27"},"nodeType":"YulFunctionCall","src":"11151:15:27"},"nodeType":"YulExpressionStatement","src":"11151:15:27"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"10992:180:27"},{"body":{"nodeType":"YulBlock","src":"11221:128:27","statements":[{"nodeType":"YulAssignment","src":"11231:33:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11258:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11240:17:27"},"nodeType":"YulFunctionCall","src":"11240:24:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"11231:5:27"}]},{"body":{"nodeType":"YulBlock","src":"11292:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11294:16:27"},"nodeType":"YulFunctionCall","src":"11294:18:27"},"nodeType":"YulExpressionStatement","src":"11294:18:27"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11279:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"11286:4:27","type":"","value":"0x00"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11276:2:27"},"nodeType":"YulFunctionCall","src":"11276:15:27"},"nodeType":"YulIf","src":"11273:41:27"},{"nodeType":"YulAssignment","src":"11323:20:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11334:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"11341:1:27","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11330:3:27"},"nodeType":"YulFunctionCall","src":"11330:13:27"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"11323:3:27"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11207:5:27","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"11217:3:27","type":""}],"src":"11178:171:27"},{"body":{"nodeType":"YulBlock","src":"11461:76:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11483:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"11491:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11479:3:27"},"nodeType":"YulFunctionCall","src":"11479:14:27"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"11495:34:27","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11472:6:27"},"nodeType":"YulFunctionCall","src":"11472:58:27"},"nodeType":"YulExpressionStatement","src":"11472:58:27"}]},"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11453:6:27","type":""}],"src":"11355:182:27"},{"body":{"nodeType":"YulBlock","src":"11689:220:27","statements":[{"nodeType":"YulAssignment","src":"11699:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11765:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"11770:2:27","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11706:58:27"},"nodeType":"YulFunctionCall","src":"11706:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11699:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11871:3:27"}],"functionName":{"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulIdentifier","src":"11782:88:27"},"nodeType":"YulFunctionCall","src":"11782:93:27"},"nodeType":"YulExpressionStatement","src":"11782:93:27"},{"nodeType":"YulAssignment","src":"11884:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11895:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"11900:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11891:3:27"},"nodeType":"YulFunctionCall","src":"11891:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11884:3:27"}]}]},"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11677:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11685:3:27","type":""}],"src":"11543:366:27"},{"body":{"nodeType":"YulBlock","src":"12086:248:27","statements":[{"nodeType":"YulAssignment","src":"12096:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12108:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12119:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12104:3:27"},"nodeType":"YulFunctionCall","src":"12104:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12096:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12143:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12154:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12139:3:27"},"nodeType":"YulFunctionCall","src":"12139:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12162:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"12168:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12158:3:27"},"nodeType":"YulFunctionCall","src":"12158:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12132:6:27"},"nodeType":"YulFunctionCall","src":"12132:47:27"},"nodeType":"YulExpressionStatement","src":"12132:47:27"},{"nodeType":"YulAssignment","src":"12188:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12322:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12196:124:27"},"nodeType":"YulFunctionCall","src":"12196:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12188:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12066:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12081:4:27","type":""}],"src":"11915:419:27"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: can only renounce\")\n\n        mstore(add(memPtr, 32), \" roles for self\")\n\n    }\n\n    function abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)\n        store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: account \")\n\n    }\n\n    function abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 23)\n        store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(pos)\n        end := add(pos, 23)\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(memPtr) {\n\n        mstore(add(memPtr, 0), \" is missing role \")\n\n    }\n\n    function abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 17)\n        store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(pos)\n        end := add(pos, 17)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function decrement_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0x00) { panic_error_0x11() }\n        ret := sub(value, 1)\n    }\n\n    function store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Strings: hex length insufficient\")\n\n    }\n\n    function abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":27,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061009e5760003560e01c80636e810b1a116100665780636e810b1a1461015957806391d1485414610175578063a217fddf146101a5578063b6db75a0146101c3578063d547741f146101e15761009e565b806301ffc9a7146100a3578063248a9ca3146100d35780632f2ff15d1461010357806336568abe1461011f5780635c975abb1461013b575b600080fd5b6100bd60048036038101906100b89190610d2e565b6101fd565b6040516100ca9190610d76565b60405180910390f35b6100ed60048036038101906100e89190610dc7565b610277565b6040516100fa9190610e03565b60405180910390f35b61011d60048036038101906101189190610e7c565b610297565b005b61013960048036038101906101349190610e7c565b6102b8565b005b61014361033b565b6040516101509190610d76565b60405180910390f35b610173600480360381019061016e9190610ebc565b610352565b005b61018f600480360381019061018a9190610e7c565b610474565b60405161019c9190610d76565b60405180910390f35b6101ad6104df565b6040516101ba9190610e03565b60405180910390f35b6101cb6104e6565b6040516101d89190610d76565b60405180910390f35b6101fb60048036038101906101f69190610e7c565b610505565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610270575061026f82610526565b5b9050919050565b600060976000838152602001908152602001600020600101549050919050565b6102a082610277565b6102a981610590565b6102b383836105a4565b505050565b6102c0610685565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461032d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032490610f6c565b60405180910390fd5b610337828261068d565b5050565b6000603360009054906101000a900460ff16905090565b600060019054906101000a900460ff166103a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039890610ffe565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610407576040517f5415139400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61040f61076f565b6104176107c8565b61041f610819565b61043061042a610872565b826105a4565b61044161043b61089a565b826105a4565b61045961044c61089a565b610454610872565b6108c2565b610471610464610872565b61046c610872565b6108c2565b50565b60006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b60006105006104f3610872565b6104fb610685565b610474565b905090565b61050e82610277565b61051781610590565b610521838361068d565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6105a18161059c610685565b61091e565b50565b6105ae8282610474565b6106815760016097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610626610685565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6106978282610474565b1561076b5760006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610710610685565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600060019054906101000a900460ff166107be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b590610ffe565b60405180910390fd5b6107c66109a3565b565b600060019054906101000a900460ff16610817576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080e90610ffe565b60405180910390fd5b565b600060019054906101000a900460ff16610868576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085f90610ffe565b60405180910390fd5b610870610a0f565b565b60007fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775905090565b60007f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a905090565b60006108cd83610277565b90508160976000858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b6109288282610474565b61099f5761093581610a68565b6109438360001c6020610a95565b604051602001610954929190611127565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099691906111ab565b60405180910390fd5b5050565b600060019054906101000a900460ff166109f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e990610ffe565b60405180910390fd5b6000603360006101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff16610a5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5590610ffe565b60405180910390fd5b600160c981905550565b6060610a8e8273ffffffffffffffffffffffffffffffffffffffff16601460ff16610a95565b9050919050565b606060006002836002610aa89190611206565b610ab29190611260565b67ffffffffffffffff811115610acb57610aca611294565b5b6040519080825280601f01601f191660200182016040528015610afd5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610b3557610b346112c3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610b9957610b986112c3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002610bd99190611206565b610be39190611260565b90505b6001811115610c83577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110610c2557610c246112c3565b5b1a60f81b828281518110610c3c57610c3b6112c3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080610c7c906112f2565b9050610be6565b5060008414610cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbe90611367565b60405180910390fd5b8091505092915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610d0b81610cd6565b8114610d1657600080fd5b50565b600081359050610d2881610d02565b92915050565b600060208284031215610d4457610d43610cd1565b5b6000610d5284828501610d19565b91505092915050565b60008115159050919050565b610d7081610d5b565b82525050565b6000602082019050610d8b6000830184610d67565b92915050565b6000819050919050565b610da481610d91565b8114610daf57600080fd5b50565b600081359050610dc181610d9b565b92915050565b600060208284031215610ddd57610ddc610cd1565b5b6000610deb84828501610db2565b91505092915050565b610dfd81610d91565b82525050565b6000602082019050610e186000830184610df4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e4982610e1e565b9050919050565b610e5981610e3e565b8114610e6457600080fd5b50565b600081359050610e7681610e50565b92915050565b60008060408385031215610e9357610e92610cd1565b5b6000610ea185828601610db2565b9250506020610eb285828601610e67565b9150509250929050565b600060208284031215610ed257610ed1610cd1565b5b6000610ee084828501610e67565b91505092915050565b600082825260208201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000610f56602f83610ee9565b9150610f6182610efa565b604082019050919050565b60006020820190508181036000830152610f8581610f49565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000610fe8602b83610ee9565b9150610ff382610f8c565b604082019050919050565b6000602082019050818103600083015261101781610fdb565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b600061105f60178361101e565b915061106a82611029565b601782019050919050565b600081519050919050565b60005b8381101561109e578082015181840152602081019050611083565b60008484015250505050565b60006110b582611075565b6110bf818561101e565b93506110cf818560208601611080565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b600061111160118361101e565b915061111c826110db565b601182019050919050565b600061113282611052565b915061113e82856110aa565b915061114982611104565b915061115582846110aa565b91508190509392505050565b6000601f19601f8301169050919050565b600061117d82611075565b6111878185610ee9565b9350611197818560208601611080565b6111a081611161565b840191505092915050565b600060208201905081810360008301526111c58184611172565b905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611211826111cd565b915061121c836111cd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611255576112546111d7565b5b828202905092915050565b600061126b826111cd565b9150611276836111cd565b925082820190508082111561128e5761128d6111d7565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006112fd826111cd565b9150600082036113105761130f6111d7565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000611351602083610ee9565b915061135c8261131b565b602082019050919050565b6000602082019050818103600083015261138081611344565b905091905056fea2646970667358221220b74f206dcdcdebf392d7459b2ab1515c54cd9fe4808a3e861b805703bc1e9a2864736f6c63430008100033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E810B1A GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x1E1 JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x13B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0xD2E JUMP JUMPDEST PUSH2 0x1FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xED PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE8 SWAP2 SWAP1 PUSH2 0xDC7 JUMP JUMPDEST PUSH2 0x277 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFA SWAP2 SWAP1 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x118 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x297 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x139 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x134 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x2B8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x143 PUSH2 0x33B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x150 SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x173 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x16E SWAP2 SWAP1 PUSH2 0xEBC JUMP JUMPDEST PUSH2 0x352 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x18F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18A SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x474 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19C SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AD PUSH2 0x4DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CB PUSH2 0x4E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D8 SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F6 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x505 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x270 JUMPI POP PUSH2 0x26F DUP3 PUSH2 0x526 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2A0 DUP3 PUSH2 0x277 JUMP JUMPDEST PUSH2 0x2A9 DUP2 PUSH2 0x590 JUMP JUMPDEST PUSH2 0x2B3 DUP4 DUP4 PUSH2 0x5A4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x2C0 PUSH2 0x685 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x32D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x324 SWAP1 PUSH2 0xF6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x337 DUP3 DUP3 PUSH2 0x68D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x398 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x407 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x40F PUSH2 0x76F JUMP JUMPDEST PUSH2 0x417 PUSH2 0x7C8 JUMP JUMPDEST PUSH2 0x41F PUSH2 0x819 JUMP JUMPDEST PUSH2 0x430 PUSH2 0x42A PUSH2 0x872 JUMP JUMPDEST DUP3 PUSH2 0x5A4 JUMP JUMPDEST PUSH2 0x441 PUSH2 0x43B PUSH2 0x89A JUMP JUMPDEST DUP3 PUSH2 0x5A4 JUMP JUMPDEST PUSH2 0x459 PUSH2 0x44C PUSH2 0x89A JUMP JUMPDEST PUSH2 0x454 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x8C2 JUMP JUMPDEST PUSH2 0x471 PUSH2 0x464 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x46C PUSH2 0x872 JUMP JUMPDEST PUSH2 0x8C2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x500 PUSH2 0x4F3 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x4FB PUSH2 0x685 JUMP JUMPDEST PUSH2 0x474 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x50E DUP3 PUSH2 0x277 JUMP JUMPDEST PUSH2 0x517 DUP2 PUSH2 0x590 JUMP JUMPDEST PUSH2 0x521 DUP4 DUP4 PUSH2 0x68D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5A1 DUP2 PUSH2 0x59C PUSH2 0x685 JUMP JUMPDEST PUSH2 0x91E JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x5AE DUP3 DUP3 PUSH2 0x474 JUMP JUMPDEST PUSH2 0x681 JUMPI PUSH1 0x1 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x626 PUSH2 0x685 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x697 DUP3 DUP3 PUSH2 0x474 JUMP JUMPDEST ISZERO PUSH2 0x76B JUMPI PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x710 PUSH2 0x685 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x7BE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7B5 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7C6 PUSH2 0x9A3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x817 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x80E SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x868 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x85F SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x870 PUSH2 0xA0F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8CD DUP4 PUSH2 0x277 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x97 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x928 DUP3 DUP3 PUSH2 0x474 JUMP JUMPDEST PUSH2 0x99F JUMPI PUSH2 0x935 DUP2 PUSH2 0xA68 JUMP JUMPDEST PUSH2 0x943 DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0xA95 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x954 SWAP3 SWAP2 SWAP1 PUSH2 0x1127 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x996 SWAP2 SWAP1 PUSH2 0x11AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x9F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9E9 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xA5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA55 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA8E DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0xA95 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0xAA8 SWAP2 SWAP1 PUSH2 0x1206 JUMP JUMPDEST PUSH2 0xAB2 SWAP2 SWAP1 PUSH2 0x1260 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xACB JUMPI PUSH2 0xACA PUSH2 0x1294 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xAFD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB35 JUMPI PUSH2 0xB34 PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xB99 JUMPI PUSH2 0xB98 PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0xBD9 SWAP2 SWAP1 PUSH2 0x1206 JUMP JUMPDEST PUSH2 0xBE3 SWAP2 SWAP1 PUSH2 0x1260 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xC83 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0xC25 JUMPI PUSH2 0xC24 PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xC3C JUMPI PUSH2 0xC3B PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0xC7C SWAP1 PUSH2 0x12F2 JUMP JUMPDEST SWAP1 POP PUSH2 0xBE6 JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0xCC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBE SWAP1 PUSH2 0x1367 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD0B DUP2 PUSH2 0xCD6 JUMP JUMPDEST DUP2 EQ PUSH2 0xD16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xD28 DUP2 PUSH2 0xD02 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD44 JUMPI PUSH2 0xD43 PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD52 DUP5 DUP3 DUP6 ADD PUSH2 0xD19 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD70 DUP2 PUSH2 0xD5B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD8B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD67 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDA4 DUP2 PUSH2 0xD91 JUMP JUMPDEST DUP2 EQ PUSH2 0xDAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xDC1 DUP2 PUSH2 0xD9B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDDD JUMPI PUSH2 0xDDC PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xDEB DUP5 DUP3 DUP6 ADD PUSH2 0xDB2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xDFD DUP2 PUSH2 0xD91 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE18 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xDF4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE49 DUP3 PUSH2 0xE1E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE59 DUP2 PUSH2 0xE3E JUMP JUMPDEST DUP2 EQ PUSH2 0xE64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xE76 DUP2 PUSH2 0xE50 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE93 JUMPI PUSH2 0xE92 PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEA1 DUP6 DUP3 DUP7 ADD PUSH2 0xDB2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xEB2 DUP6 DUP3 DUP7 ADD PUSH2 0xE67 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xED2 JUMPI PUSH2 0xED1 PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEE0 DUP5 DUP3 DUP6 ADD PUSH2 0xE67 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF56 PUSH1 0x2F DUP4 PUSH2 0xEE9 JUMP JUMPDEST SWAP2 POP PUSH2 0xF61 DUP3 PUSH2 0xEFA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF85 DUP2 PUSH2 0xF49 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFE8 PUSH1 0x2B DUP4 PUSH2 0xEE9 JUMP JUMPDEST SWAP2 POP PUSH2 0xFF3 DUP3 PUSH2 0xF8C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1017 DUP2 PUSH2 0xFDB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x105F PUSH1 0x17 DUP4 PUSH2 0x101E JUMP JUMPDEST SWAP2 POP PUSH2 0x106A DUP3 PUSH2 0x1029 JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x109E JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10B5 DUP3 PUSH2 0x1075 JUMP JUMPDEST PUSH2 0x10BF DUP2 DUP6 PUSH2 0x101E JUMP JUMPDEST SWAP4 POP PUSH2 0x10CF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1080 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1111 PUSH1 0x11 DUP4 PUSH2 0x101E JUMP JUMPDEST SWAP2 POP PUSH2 0x111C DUP3 PUSH2 0x10DB JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1132 DUP3 PUSH2 0x1052 JUMP JUMPDEST SWAP2 POP PUSH2 0x113E DUP3 DUP6 PUSH2 0x10AA JUMP JUMPDEST SWAP2 POP PUSH2 0x1149 DUP3 PUSH2 0x1104 JUMP JUMPDEST SWAP2 POP PUSH2 0x1155 DUP3 DUP5 PUSH2 0x10AA JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x117D DUP3 PUSH2 0x1075 JUMP JUMPDEST PUSH2 0x1187 DUP2 DUP6 PUSH2 0xEE9 JUMP JUMPDEST SWAP4 POP PUSH2 0x1197 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1080 JUMP JUMPDEST PUSH2 0x11A0 DUP2 PUSH2 0x1161 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11C5 DUP2 DUP5 PUSH2 0x1172 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1211 DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH2 0x121C DUP4 PUSH2 0x11CD JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1255 JUMPI PUSH2 0x1254 PUSH2 0x11D7 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x126B DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH2 0x1276 DUP4 PUSH2 0x11CD JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x128E JUMPI PUSH2 0x128D PUSH2 0x11D7 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x12FD DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x1310 JUMPI PUSH2 0x130F PUSH2 0x11D7 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1351 PUSH1 0x20 DUP4 PUSH2 0xEE9 JUMP JUMPDEST SWAP2 POP PUSH2 0x135C DUP3 PUSH2 0x131B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1380 DUP2 PUSH2 0x1344 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0x4F KECCAK256 PUSH14 0xCDCDEBF392D7459B2AB1515C54CD SWAP16 0xE4 DUP1 DUP11 RETURNDATACOPY DUP7 SHL DUP1 JUMPI SUB 0xBC 0x1E SWAP11 0x28 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"461:951:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2903:213:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4708:129;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5133:145;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6242:214;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1858:84:3;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;734:549:20;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3203:145:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2324:49;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1289:117:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5558:147:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2903:213;2988:4;3026:43;3011:58;;;:11;:58;;;;:98;;;;3073:36;3097:11;3073:23;:36::i;:::-;3011:98;3004:105;;2903:213;;;:::o;4708:129::-;4782:7;4808:6;:12;4815:4;4808:12;;;;;;;;;;;:22;;;4801:29;;4708:129;;;:::o;5133:145::-;5216:18;5229:4;5216:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5246:25:::1;5257:4;5263:7;5246:10;:25::i;:::-;5133:145:::0;;;:::o;6242:214::-;6348:12;:10;:12::i;:::-;6337:23;;:7;:23;;;6329:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;6423:26;6435:4;6441:7;6423:11;:26::i;:::-;6242:214;;:::o;1858:84:3:-;1905:4;1928:7;;;;;;;;;;;1921:14;;1858:84;:::o;734:549:20:-;5363:13:2;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;845:1:20::1;828:19;;:5;:19;;::::0;825:99:::1;;870:43;;;;;;;;;;;;;;825:99;933:17;:15;:17::i;:::-;960:22;:20;:22::i;:::-;992:24;:22;:24::i;:::-;1027:43;1038:24;:22;:24::i;:::-;1064:5;1027:10;:43::i;:::-;1080:44;1091:25;:23;:25::i;:::-;1118:5;1080:10;:44::i;:::-;1135:66;1149:25;:23;:25::i;:::-;1176:24;:22;:24::i;:::-;1135:13;:66::i;:::-;1211:65;1225:24;:22;:24::i;:::-;1251;:22;:24::i;:::-;1211:13;:65::i;:::-;734:549:::0;:::o;3203:145:0:-;3289:4;3312:6;:12;3319:4;3312:12;;;;;;;;;;;:20;;:29;3333:7;3312:29;;;;;;;;;;;;;;;;;;;;;;;;;3305:36;;3203:145;;;;:::o;2324:49::-;2369:4;2324:49;;;:::o;1289:117:20:-;1329:4;1352:47;1360:24;:22;:24::i;:::-;1386:12;:10;:12::i;:::-;1352:7;:47::i;:::-;1345:54;;1289:117;:::o;5558:147:0:-;5642:18;5655:4;5642:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5672:26:::1;5684:4;5690:7;5672:11;:26::i;:::-;5558:147:::0;;;:::o;1060:166:17:-;1145:4;1183:36;1168:51;;;:11;:51;;;;1161:58;;1060:166;;;:::o;3642:103:0:-;3708:30;3719:4;3725:12;:10;:12::i;:::-;3708:10;:30::i;:::-;3642:103;:::o;7791:233::-;7874:22;7882:4;7888:7;7874;:22::i;:::-;7869:149;;7944:4;7912:6;:12;7919:4;7912:12;;;;;;;;;;;:20;;:29;7933:7;7912:29;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;;;;;;7994:12;:10;:12::i;:::-;7967:40;;7985:7;7967:40;;7979:4;7967:40;;;;;;;;;;7869:149;7791:233;;:::o;850:96:12:-;903:7;929:10;922:17;;850:96;:::o;8195:234:0:-;8278:22;8286:4;8292:7;8278;:22::i;:::-;8274:149;;;8348:5;8316:6;:12;8323:4;8316:12;;;;;;;;;;;:20;;:29;8337:7;8316:29;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;8399:12;:10;:12::i;:::-;8372:40;;8390:7;8372:40;;8384:4;8372:40;;;;;;;;;;8274:149;8195:234;;:::o;1063:97:3:-;5363:13:2;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1126:27:3::1;:25;:27::i;:::-;1063:97::o:0;2025:65:0:-;5363:13:2;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2025:65:0:o;1868:111:4:-;5363:13:2;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1938:34:4::1;:32;:34::i;:::-;1868:111::o:0;222:90:21:-;269:7;124:23;288:17;;222:90;:::o;318:92::-;366:7;191:24;385:18;;318:92;:::o;7376:247:0:-;7459:25;7487:18;7500:4;7487:12;:18::i;:::-;7459:46;;7540:9;7515:6;:12;7522:4;7515:12;;;;;;;;;;;:22;;:34;;;;7606:9;7587:17;7581:4;7564:52;;;;;;;;;;7449:174;7376:247;;:::o;4026:501::-;4114:22;4122:4;4128:7;4114;:22::i;:::-;4109:412;;4297:39;4328:7;4297:30;:39::i;:::-;4407:49;4446:4;4438:13;;4453:2;4407:30;:49::i;:::-;4204:274;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4152:358;;;;;;;;;;;:::i;:::-;;;;;;;;4109:412;4026:501;;:::o;1166:95:3:-;5363:13:2;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1249:5:3::1;1239:7;;:15;;;;;;;;;;;;;;;;;;1166:95::o:0;1985:109:4:-;5363:13:2;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1787:1:4::1;2065:7;:22;;;;1985:109::o:0;2146:149:14:-;2204:13;2236:52;2264:4;2248:22;;333:2;2236:52;;:11;:52::i;:::-;2229:59;;2146:149;;;:::o;1557:437::-;1632:13;1657:19;1702:1;1693:6;1689:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1679:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1657:47;;1714:15;:6;1721:1;1714:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1739;:6;1746:1;1739:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1769:9;1794:1;1785:6;1781:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1769:26;;1764:128;1801:1;1797;:5;1764:128;;;1835:8;1852:3;1844:5;:11;1835:21;;;;;;;:::i;:::-;;;;;1823:6;1830:1;1823:9;;;;;;;;:::i;:::-;;;;;:33;;;;;;;;;;;1880:1;1870:11;;;;;1804:3;;;;:::i;:::-;;;1764:128;;;;1918:1;1909:5;:10;1901:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;1980:6;1966:21;;;1557:437;;;;:::o;88:117:27:-;197:1;194;187:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:77::-;1555:7;1584:5;1573:16;;1518:77;;;:::o;1601:122::-;1674:24;1692:5;1674:24;:::i;:::-;1667:5;1664:35;1654:63;;1713:1;1710;1703:12;1654:63;1601:122;:::o;1729:139::-;1775:5;1813:6;1800:20;1791:29;;1829:33;1856:5;1829:33;:::i;:::-;1729:139;;;;:::o;1874:329::-;1933:6;1982:2;1970:9;1961:7;1957:23;1953:32;1950:119;;;1988:79;;:::i;:::-;1950:119;2108:1;2133:53;2178:7;2169:6;2158:9;2154:22;2133:53;:::i;:::-;2123:63;;2079:117;1874:329;;;;:::o;2209:118::-;2296:24;2314:5;2296:24;:::i;:::-;2291:3;2284:37;2209:118;;:::o;2333:222::-;2426:4;2464:2;2453:9;2449:18;2441:26;;2477:71;2545:1;2534:9;2530:17;2521:6;2477:71;:::i;:::-;2333:222;;;;:::o;2561:126::-;2598:7;2638:42;2631:5;2627:54;2616:65;;2561:126;;;:::o;2693:96::-;2730:7;2759:24;2777:5;2759:24;:::i;:::-;2748:35;;2693:96;;;:::o;2795:122::-;2868:24;2886:5;2868:24;:::i;:::-;2861:5;2858:35;2848:63;;2907:1;2904;2897:12;2848:63;2795:122;:::o;2923:139::-;2969:5;3007:6;2994:20;2985:29;;3023:33;3050:5;3023:33;:::i;:::-;2923:139;;;;:::o;3068:474::-;3136:6;3144;3193:2;3181:9;3172:7;3168:23;3164:32;3161:119;;;3199:79;;:::i;:::-;3161:119;3319:1;3344:53;3389:7;3380:6;3369:9;3365:22;3344:53;:::i;:::-;3334:63;;3290:117;3446:2;3472:53;3517:7;3508:6;3497:9;3493:22;3472:53;:::i;:::-;3462:63;;3417:118;3068:474;;;;;:::o;3548:329::-;3607:6;3656:2;3644:9;3635:7;3631:23;3627:32;3624:119;;;3662:79;;:::i;:::-;3624:119;3782:1;3807:53;3852:7;3843:6;3832:9;3828:22;3807:53;:::i;:::-;3797:63;;3753:117;3548:329;;;;:::o;3883:169::-;3967:11;4001:6;3996:3;3989:19;4041:4;4036:3;4032:14;4017:29;;3883:169;;;;:::o;4058:234::-;4198:34;4194:1;4186:6;4182:14;4175:58;4267:17;4262:2;4254:6;4250:15;4243:42;4058:234;:::o;4298:366::-;4440:3;4461:67;4525:2;4520:3;4461:67;:::i;:::-;4454:74;;4537:93;4626:3;4537:93;:::i;:::-;4655:2;4650:3;4646:12;4639:19;;4298:366;;;:::o;4670:419::-;4836:4;4874:2;4863:9;4859:18;4851:26;;4923:9;4917:4;4913:20;4909:1;4898:9;4894:17;4887:47;4951:131;5077:4;4951:131;:::i;:::-;4943:139;;4670:419;;;:::o;5095:230::-;5235:34;5231:1;5223:6;5219:14;5212:58;5304:13;5299:2;5291:6;5287:15;5280:38;5095:230;:::o;5331:366::-;5473:3;5494:67;5558:2;5553:3;5494:67;:::i;:::-;5487:74;;5570:93;5659:3;5570:93;:::i;:::-;5688:2;5683:3;5679:12;5672:19;;5331:366;;;:::o;5703:419::-;5869:4;5907:2;5896:9;5892:18;5884:26;;5956:9;5950:4;5946:20;5942:1;5931:9;5927:17;5920:47;5984:131;6110:4;5984:131;:::i;:::-;5976:139;;5703:419;;;:::o;6128:148::-;6230:11;6267:3;6252:18;;6128:148;;;;:::o;6282:173::-;6422:25;6418:1;6410:6;6406:14;6399:49;6282:173;:::o;6461:402::-;6621:3;6642:85;6724:2;6719:3;6642:85;:::i;:::-;6635:92;;6736:93;6825:3;6736:93;:::i;:::-;6854:2;6849:3;6845:12;6838:19;;6461:402;;;:::o;6869:99::-;6921:6;6955:5;6949:12;6939:22;;6869:99;;;:::o;6974:246::-;7055:1;7065:113;7079:6;7076:1;7073:13;7065:113;;;7164:1;7159:3;7155:11;7149:18;7145:1;7140:3;7136:11;7129:39;7101:2;7098:1;7094:10;7089:15;;7065:113;;;7212:1;7203:6;7198:3;7194:16;7187:27;7036:184;6974:246;;;:::o;7226:390::-;7332:3;7360:39;7393:5;7360:39;:::i;:::-;7415:89;7497:6;7492:3;7415:89;:::i;:::-;7408:96;;7513:65;7571:6;7566:3;7559:4;7552:5;7548:16;7513:65;:::i;:::-;7603:6;7598:3;7594:16;7587:23;;7336:280;7226:390;;;;:::o;7622:167::-;7762:19;7758:1;7750:6;7746:14;7739:43;7622:167;:::o;7795:402::-;7955:3;7976:85;8058:2;8053:3;7976:85;:::i;:::-;7969:92;;8070:93;8159:3;8070:93;:::i;:::-;8188:2;8183:3;8179:12;8172:19;;7795:402;;;:::o;8203:967::-;8585:3;8607:148;8751:3;8607:148;:::i;:::-;8600:155;;8772:95;8863:3;8854:6;8772:95;:::i;:::-;8765:102;;8884:148;9028:3;8884:148;:::i;:::-;8877:155;;9049:95;9140:3;9131:6;9049:95;:::i;:::-;9042:102;;9161:3;9154:10;;8203:967;;;;;:::o;9176:102::-;9217:6;9268:2;9264:7;9259:2;9252:5;9248:14;9244:28;9234:38;;9176:102;;;:::o;9284:377::-;9372:3;9400:39;9433:5;9400:39;:::i;:::-;9455:71;9519:6;9514:3;9455:71;:::i;:::-;9448:78;;9535:65;9593:6;9588:3;9581:4;9574:5;9570:16;9535:65;:::i;:::-;9625:29;9647:6;9625:29;:::i;:::-;9620:3;9616:39;9609:46;;9376:285;9284:377;;;;:::o;9667:313::-;9780:4;9818:2;9807:9;9803:18;9795:26;;9867:9;9861:4;9857:20;9853:1;9842:9;9838:17;9831:47;9895:78;9968:4;9959:6;9895:78;:::i;:::-;9887:86;;9667:313;;;;:::o;9986:77::-;10023:7;10052:5;10041:16;;9986:77;;;:::o;10069:180::-;10117:77;10114:1;10107:88;10214:4;10211:1;10204:15;10238:4;10235:1;10228:15;10255:348;10295:7;10318:20;10336:1;10318:20;:::i;:::-;10313:25;;10352:20;10370:1;10352:20;:::i;:::-;10347:25;;10540:1;10472:66;10468:74;10465:1;10462:81;10457:1;10450:9;10443:17;10439:105;10436:131;;;10547:18;;:::i;:::-;10436:131;10595:1;10592;10588:9;10577:20;;10255:348;;;;:::o;10609:191::-;10649:3;10668:20;10686:1;10668:20;:::i;:::-;10663:25;;10702:20;10720:1;10702:20;:::i;:::-;10697:25;;10745:1;10742;10738:9;10731:16;;10766:3;10763:1;10760:10;10757:36;;;10773:18;;:::i;:::-;10757:36;10609:191;;;;:::o;10806:180::-;10854:77;10851:1;10844:88;10951:4;10948:1;10941:15;10975:4;10972:1;10965:15;10992:180;11040:77;11037:1;11030:88;11137:4;11134:1;11127:15;11161:4;11158:1;11151:15;11178:171;11217:3;11240:24;11258:5;11240:24;:::i;:::-;11231:33;;11286:4;11279:5;11276:15;11273:41;;11294:18;;:::i;:::-;11273:41;11341:1;11334:5;11330:13;11323:20;;11178:171;;;:::o;11355:182::-;11495:34;11491:1;11483:6;11479:14;11472:58;11355:182;:::o;11543:366::-;11685:3;11706:67;11770:2;11765:3;11706:67;:::i;:::-;11699:74;;11782:93;11871:3;11782:93;:::i;:::-;11900:2;11895:3;11891:12;11884:19;;11543:366;;;:::o;11915:419::-;12081:4;12119:2;12108:9;12104:18;12096:26;;12168:9;12162:4;12158:20;12154:1;12143:9;12139:17;12132:47;12196:131;12322:4;12196:131;:::i;:::-;12188:139;;11915:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1010600","executionCost":"1047","totalCost":"1011647"},"external":{"DEFAULT_ADMIN_ROLE()":"379","__BaseUpgradeablePausable_init(address)":"infinite","getRoleAdmin(bytes32)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"3162","isAdmin()":"2836","paused()":"2568","renounceRole(bytes32,address)":"infinite","revokeRole(bytes32,address)":"infinite","supportsInterface(bytes4)":"728"}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","__BaseUpgradeablePausable_init(address)":"6e810b1a","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isAdmin()":"b6db75a0","paused()":"5c975abb","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BaseUpgradeablePausable__ZeroAddressError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BaseUpgradeablePausable.sol\":\"BaseUpgradeablePausable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"contracts/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./Constants.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nerror BaseUpgradeablePausable__ZeroAddressError();\\n\\ncontract BaseUpgradeablePausable is \\n    Initializable, \\n    PausableUpgradeable, \\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable \\n{\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin(), \\\"Must have admin role to perform this action.\\\");\\n        _;\\n    }\\n\\n    function __BaseUpgradeablePausable_init(address owner) public onlyInitializing() {\\n        if(owner == address(0)) {\\n            revert BaseUpgradeablePausable__ZeroAddressError();\\n        }\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        _grantRole(Constants.getAdminRole(), owner);\\n        _grantRole(Constants.getPauserRole(), owner);\\n\\n        _setRoleAdmin(Constants.getPauserRole(), Constants.getAdminRole());\\n        _setRoleAdmin(Constants.getAdminRole(), Constants.getAdminRole());\\n    }\\n\\n    function isAdmin() public view returns (bool) {\\n        return hasRole(Constants.getAdminRole(), _msgSender());\\n    }\\n\\n  \\n}\",\"keccak256\":\"0x29b172c9fffe9bc60c702a071bae35f301b1b5c3824f0ca44b3d2dcabbda5af9\",\"license\":\"MIT\"},\"contracts/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nlibrary Constants {\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    function getAdminRole() internal pure returns (bytes32) {\\n        return ADMIN_ROLE;\\n    }\\n\\n    function getPauserRole() internal pure returns (bytes32) {\\n        return PAUSER_ROLE;\\n    }\\n}\",\"keccak256\":\"0xeae9d870bc2ace9284ae575eb6c534c177ff6f4a60b98f10a0a8156f19f760cf\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[{"astId":415,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":418,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2325,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":598,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":703,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":3129,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"__gap","offset":0,"slot":"101","type":"t_array(t_uint256)50_storage"},{"astId":39,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"_roles","offset":0,"slot":"151","type":"t_mapping(t_bytes32,t_struct(RoleData)34_storage)"},{"astId":334,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"__gap","offset":0,"slot":"152","type":"t_array(t_uint256)49_storage"},{"astId":718,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"_status","offset":0,"slot":"201","type":"t_uint256"},{"astId":776,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"__gap","offset":0,"slot":"202","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)34_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)34_storage"},"t_struct(RoleData)34_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":31,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":33,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Constants.sol":{"Constants":{"abi":[{"inputs":[],"name":"ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAUSER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"610124610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610603d5760003560e01c806375b238fc146042578063e63ab1e914605c575b600080fd5b60486076565b6040516053919060d5565b60405180910390f35b6062609a565b604051606d919060d5565b60405180910390f35b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6000819050919050565b60cf8160be565b82525050565b600060208201905060e8600083018460c8565b9291505056fea2646970667358221220d17a2a816b9d6983dde5a1c6dcea24af5ac80304920f481a985b01122e3fa2a464736f6c63430008100033","opcodes":"PUSH2 0x124 PUSH2 0x53 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x46 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x3D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75B238FC EQ PUSH1 0x42 JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH1 0x5C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x48 PUSH1 0x76 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x53 SWAP2 SWAP1 PUSH1 0xD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x62 PUSH1 0x9A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x6D SWAP2 SWAP1 PUSH1 0xD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xCF DUP2 PUSH1 0xBE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0xE8 PUSH1 0x0 DUP4 ADD DUP5 PUSH1 0xC8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD1 PUSH27 0x2A816B9D6983DDE5A1C6DCEA24AF5AC80304920F481A985B01122E EXTCODEHASH LOG2 LOG4 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"62:350:21:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@ADMIN_ROLE_4116":{"entryPoint":118,"id":4116,"parameterSlots":0,"returnSlots":0},"@PAUSER_ROLE_4121":{"entryPoint":154,"id":4121,"parameterSlots":0,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack_library":{"entryPoint":200,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_library_reversed":{"entryPoint":213,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":190,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:463:27","statements":[{"body":{"nodeType":"YulBlock","src":"52:32:27","statements":[{"nodeType":"YulAssignment","src":"62:16:27","value":{"name":"value","nodeType":"YulIdentifier","src":"73:5:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"62:7:27"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"44:7:27","type":""}],"src":"7:77:27"},{"body":{"nodeType":"YulBlock","src":"163:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"180:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"203:5:27"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"185:17:27"},"nodeType":"YulFunctionCall","src":"185:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"173:6:27"},"nodeType":"YulFunctionCall","src":"173:37:27"},"nodeType":"YulExpressionStatement","src":"173:37:27"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack_library","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"151:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"158:3:27","type":""}],"src":"90:126:27"},{"body":{"nodeType":"YulBlock","src":"328:132:27","statements":[{"nodeType":"YulAssignment","src":"338:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"350:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"361:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"346:3:27"},"nodeType":"YulFunctionCall","src":"346:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"338:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"426:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"439:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"450:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"435:3:27"},"nodeType":"YulFunctionCall","src":"435:17:27"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack_library","nodeType":"YulIdentifier","src":"374:51:27"},"nodeType":"YulFunctionCall","src":"374:79:27"},"nodeType":"YulExpressionStatement","src":"374:79:27"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"300:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"312:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"323:4:27","type":""}],"src":"222:238:27"}]},"contents":"{\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack_library(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_library_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack_library(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":27,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"7300000000000000000000000000000000000000003014608060405260043610603d5760003560e01c806375b238fc146042578063e63ab1e914605c575b600080fd5b60486076565b6040516053919060d5565b60405180910390f35b6062609a565b604051606d919060d5565b60405180910390f35b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6000819050919050565b60cf8160be565b82525050565b600060208201905060e8600083018460c8565b9291505056fea2646970667358221220d17a2a816b9d6983dde5a1c6dcea24af5ac80304920f481a985b01122e3fa2a464736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x3D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75B238FC EQ PUSH1 0x42 JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH1 0x5C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x48 PUSH1 0x76 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x53 SWAP2 SWAP1 PUSH1 0xD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x62 PUSH1 0x9A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x6D SWAP2 SWAP1 PUSH1 0xD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xCF DUP2 PUSH1 0xBE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0xE8 PUSH1 0x0 DUP4 ADD DUP5 PUSH1 0xC8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD1 PUSH27 0x2A816B9D6983DDE5A1C6DCEA24AF5AC80304920F481A985B01122E EXTCODEHASH LOG2 LOG4 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"62:350:21:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;87:60;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;153:62;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;87:60;124:23;87:60;:::o;153:62::-;191:24;153:62;:::o;7:77:27:-;44:7;73:5;62:16;;7:77;;;:::o;90:126::-;185:24;203:5;185:24;:::i;:::-;180:3;173:37;90:126;;:::o;222:238::-;323:4;361:2;350:9;346:18;338:26;;374:79;450:1;439:9;435:17;426:6;374:79;:::i;:::-;222:238;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"58400","executionCost":"136","totalCost":"58536"},"external":{"ADMIN_ROLE()":"291","PAUSER_ROLE()":"313"},"internal":{"getAdminRole()":"infinite","getPauserRole()":"infinite"}},"methodIdentifiers":{"ADMIN_ROLE()":"75b238fc","PAUSER_ROLE()":"e63ab1e9"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Constants.sol\":\"Constants\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nlibrary Constants {\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    function getAdminRole() internal pure returns (bytes32) {\\n        return ADMIN_ROLE;\\n    }\\n\\n    function getPauserRole() internal pure returns (bytes32) {\\n        return PAUSER_ROLE;\\n    }\\n}\",\"keccak256\":\"0xeae9d870bc2ace9284ae575eb6c534c177ff6f4a60b98f10a0a8156f19f760cf\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/core/payAsYouGo/ConstantFlowAgreement.sol":{"ConstantFlowAgreement":{"abi":[{"inputs":[],"name":"BaseUpgradeablePausable__ZeroAddressError","type":"error"},{"inputs":[],"name":"CFA__ActiveInsuranceExistError","type":"error"},{"inputs":[],"name":"CFA__ImmutableChangesError","type":"error"},{"inputs":[],"name":"CFA__InactiveInsuranceError","type":"error"},{"inputs":[],"name":"CFA__InsuranceCoverNotAvailableError","type":"error"},{"inputs":[],"name":"CFA__NotEvenMinimumInsurancePeriodAmount","type":"error"},{"inputs":[],"name":"CFA__SubCategoryNotActiveError","type":"error"},{"inputs":[],"name":"CFA__TransactionFailedError","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[],"name":"UpdatedMaxInsuredDays","type":"event"},{"anonymous":false,"inputs":[],"name":"UpdatedMinimumInsurancePeriod","type":"event"},{"anonymous":false,"inputs":[],"name":"UpdatedStartWaitingTime","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"__BaseUpgradeablePausable_init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"insuredAmount","type":"uint256"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"addInsuranceAmount","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"}],"name":"calculateTotalFlowMade","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"calculateTotalFlowMade","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"}],"name":"claimPremium","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"}],"name":"claimPremium","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryCount","type":"uint256"}],"name":"findActivePremiumCost","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"}],"name":"getGlobalUserInsuranceInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getGlobalUserInsurancePremiumCost","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"}],"name":"getUserInsuranceInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"}],"name":"getUserInsuranceStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"}],"name":"getUserInsuranceValidTillInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"}],"name":"getUserInsuredAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenDAIaddress","type":"address"},{"internalType":"address","name":"sztDAIAddress","type":"address"},{"internalType":"address","name":"insuranceRegistryCA","type":"address"},{"internalType":"uint256","name":"minimumInsurancePeriod","type":"uint256"},{"internalType":"uint256","name":"startWaitingTime","type":"uint256"},{"internalType":"uint256","name":"maxInsuredDays","type":"uint256"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isAdmin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"insuredAmount","type":"uint256"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"},{"internalType":"bool","name":"closeStream","type":"bool"}],"name":"minusInsuranceAmount","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"timeInDays","type":"uint256"}],"name":"updateMaxInsuredDays","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"timeInMinutes","type":"uint256"}],"name":"updateMinimumInsurancePeriod","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"timeInHours","type":"uint256"}],"name":"updateStartWaitingTime","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"custom:security-contact":"anshik@safezen.finance","kind":"dev","methods":{"addInsuranceAmount(uint256,uint256,uint256,uint8,bytes32,bytes32)":{"details":"this function aims to create or top-up user insurance coverage amount.","params":{"categoryID":": insurance category, e.g., stablecoin depeg insurance.","insuredAmount":": maximum user coverage amount","subCategoryID":": insurance sub-category, e.g., USDC depeg coverage, DAI depeg coverage."},"returns":{"_0":"bool: true if the function executues successfully else false."}},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"initialize(address,address,address,uint256,uint256,uint256)":{"details":"one-time function aims to initialize the contractMUST revert if called more than once.","params":{"insuranceRegistryCA":": address of the Protocol Registry contract","minimumInsurancePeriod":": minimum insurance period","sztDAIAddress":"address of the sztDAI ERC20 token","tokenDAIaddress":": address of the DAI ERC20 token"},"returns":{"_0":"bool: true if the function executues successfully else false. [PRODUCTION TODO: _startWaitingTime =  startWaitingTime * 1 hours;] [PRODUCTION TODO: _maxInsuredDays = maxInsuredDays * 1 days;]"}},"minusInsuranceAmount(uint256,uint256,uint256,uint8,bytes32,bytes32,bool)":{"details":"this function aims to close or reduce user insurance coverage amount.","params":{"categoryID":": insurance category, e.g., stablecoin depeg insurance.","closeStream":": checks whether user initiate to deactivate its insurance or not.","insuredAmount":": maximum user coverage amount","subCategoryID":": insurance sub-category, e.g., USDC depeg coverage, DAI depeg coverage."},"returns":{"_0":"bool: true if the function executues successfully else false."}},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"updateMaxInsuredDays(uint256)":{"details":"this function aims to update the maximum insurance period","params":{"timeInDays":": 90 days will be kept as default."}},"updateMinimumInsurancePeriod(uint256)":{"details":"this function aims to updates minimum insurance period","params":{"timeInMinutes":": 120 minutes will be kept as default."}},"updateStartWaitingTime(uint256)":{"details":"this function aims to update the insurance activation waiting period","params":{"timeInHours":": 4-8 hours will be kept as default. "}}},"stateVariables":{"usersGlobalInsuranceInfo":{"details":"mapping to store UserGlobalInsuranceInfo maps: userAddress => UserGlobalInsuranceInfo"},"usersInsuranceInfo":{"details":"mapping to store UserInsurance Info maps: userAddress => categoryID => subCategoryID => UserInsuranceInfo"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x435B DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E8847BD GT PUSH2 0x104 JUMPI DUP1 PUSH4 0xA217FDDF GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xCFF5EEDE GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xCFF5EEDE EQ PUSH2 0x58F JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x5BF JUMPI DUP1 PUSH4 0xEC249164 EQ PUSH2 0x5DB JUMPI DUP1 PUSH4 0xF099DD50 EQ PUSH2 0x60C JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x507 JUMPI DUP1 PUSH4 0xB4706268 EQ PUSH2 0x525 JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x541 JUMPI DUP1 PUSH4 0xC392E850 EQ PUSH2 0x55F JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x81280D2B GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x81280D2B EQ PUSH2 0x468 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x498 JUMPI DUP1 PUSH4 0x88295FB2 EQ PUSH2 0x4A2 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x4D7 JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x6E8847BD EQ PUSH2 0x3D8 JUMPI DUP1 PUSH4 0x728CDBCA EQ PUSH2 0x408 JUMPI DUP1 PUSH4 0x77BD35FC EQ PUSH2 0x438 JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x42F6B8A7 GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x5C975ABB GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x33E JUMPI DUP1 PUSH4 0x642ADC28 EQ PUSH2 0x35C JUMPI DUP1 PUSH4 0x6B6D105E EQ PUSH2 0x38C JUMPI DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x3BC JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x42F6B8A7 EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0x4E94C048 EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0x56EB66BB EQ PUSH2 0x322 JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x24B7AB24 GT PUSH2 0x1AD JUMPI DUP1 PUSH4 0x24B7AB24 EQ PUSH2 0x264 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x280 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x2B8 JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x1A5C8F28 EQ PUSH2 0x204 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x234 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E9 SWAP2 SWAP1 PUSH2 0x3224 JUMP JUMPDEST PUSH2 0x63C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0x326C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x219 SWAP2 SWAP1 PUSH2 0x331B JUMP JUMPDEST PUSH2 0x6B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x22B SWAP2 SWAP1 PUSH2 0x342C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x24E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x249 SWAP2 SWAP1 PUSH2 0x3484 JUMP JUMPDEST PUSH2 0x8D9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25B SWAP2 SWAP1 PUSH2 0x34C0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x279 SWAP2 SWAP1 PUSH2 0x34DB JUMP JUMPDEST PUSH2 0x8F9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x295 SWAP2 SWAP1 PUSH2 0x3508 JUMP JUMPDEST PUSH2 0x983 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2B6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2B1 SWAP2 SWAP1 PUSH2 0x3508 JUMP JUMPDEST PUSH2 0x9A4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C0 PUSH2 0xA27 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2DC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D7 SWAP2 SWAP1 PUSH2 0x3548 JUMP JUMPDEST PUSH2 0xA78 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E9 SWAP2 SWAP1 PUSH2 0x3584 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x30C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x307 SWAP2 SWAP1 PUSH2 0x359F JUMP JUMPDEST PUSH2 0xAF3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x319 SWAP2 SWAP1 PUSH2 0x3584 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x33C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x337 SWAP2 SWAP1 PUSH2 0x34DB JUMP JUMPDEST PUSH2 0xC85 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x346 PUSH2 0xD0D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x353 SWAP2 SWAP1 PUSH2 0x326C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x376 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x371 SWAP2 SWAP1 PUSH2 0x3644 JUMP JUMPDEST PUSH2 0xD24 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x383 SWAP2 SWAP1 PUSH2 0x326C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3A1 SWAP2 SWAP1 PUSH2 0x331B JUMP JUMPDEST PUSH2 0xD58 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3B3 SWAP2 SWAP1 PUSH2 0x3584 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3D6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3D1 SWAP2 SWAP1 PUSH2 0x3548 JUMP JUMPDEST PUSH2 0xDC9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3F2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3ED SWAP2 SWAP1 PUSH2 0x36E6 JUMP JUMPDEST PUSH2 0xEEB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3FF SWAP2 SWAP1 PUSH2 0x326C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x422 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x41D SWAP2 SWAP1 PUSH2 0x3773 JUMP JUMPDEST PUSH2 0xF1D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x42F SWAP2 SWAP1 PUSH2 0x326C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x452 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x44D SWAP2 SWAP1 PUSH2 0x359F JUMP JUMPDEST PUSH2 0x11B9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45F SWAP2 SWAP1 PUSH2 0x326C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x482 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x47D SWAP2 SWAP1 PUSH2 0x331B JUMP JUMPDEST PUSH2 0x11C1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x48F SWAP2 SWAP1 PUSH2 0x326C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4A0 PUSH2 0x123F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4BC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4B7 SWAP2 SWAP1 PUSH2 0x331B JUMP JUMPDEST PUSH2 0x1290 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4CE SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3800 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4F1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4EC SWAP2 SWAP1 PUSH2 0x3508 JUMP JUMPDEST PUSH2 0x1398 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4FE SWAP2 SWAP1 PUSH2 0x326C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x50F PUSH2 0x1403 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x51C SWAP2 SWAP1 PUSH2 0x34C0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x53F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x53A SWAP2 SWAP1 PUSH2 0x34DB JUMP JUMPDEST PUSH2 0x140A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x549 PUSH2 0x1495 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x556 SWAP2 SWAP1 PUSH2 0x326C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x579 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x574 SWAP2 SWAP1 PUSH2 0x331B JUMP JUMPDEST PUSH2 0x14B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x586 SWAP2 SWAP1 PUSH2 0x3584 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5A9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5A4 SWAP2 SWAP1 PUSH2 0x3548 JUMP JUMPDEST PUSH2 0x1525 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B6 SWAP2 SWAP1 PUSH2 0x3584 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5D9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5D4 SWAP2 SWAP1 PUSH2 0x3508 JUMP JUMPDEST PUSH2 0x16F4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5F5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5F0 SWAP2 SWAP1 PUSH2 0x3548 JUMP JUMPDEST PUSH2 0x1715 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x603 SWAP3 SWAP2 SWAP1 PUSH2 0x3861 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x626 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x621 SWAP2 SWAP1 PUSH2 0x331B JUMP JUMPDEST PUSH2 0x1799 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x633 SWAP2 SWAP1 PUSH2 0x326C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x6AF JUMPI POP PUSH2 0x6AE DUP3 PUSH2 0x1831 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7B5 JUMPI PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0xC0 ADD MLOAD ISZERO PUSH2 0x7A3 JUMPI DUP3 PUSH2 0x7A0 SWAP1 PUSH2 0x38B9 JUMP JUMPDEST SWAP3 POP JUMPDEST DUP2 PUSH2 0x7AD SWAP1 PUSH2 0x38B9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x6BC JUMP JUMPDEST POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7D2 JUMPI PUSH2 0x7D1 PUSH2 0x3901 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x800 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x8CB JUMPI PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x8B9 JUMPI DUP2 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x8A0 JUMPI PUSH2 0x89F PUSH2 0x3930 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH2 0x8B6 SWAP1 PUSH2 0x38B9 JUMP JUMPDEST SWAP3 POP JUMPDEST DUP2 PUSH2 0x8C3 SWAP1 PUSH2 0x38B9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x807 JUMP JUMPDEST POP DUP2 SWAP4 POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x901 PUSH2 0x1495 JUMP JUMPDEST PUSH2 0x940 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x937 SWAP1 PUSH2 0x39E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE10 DUP2 PUSH2 0x94E SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST PUSH1 0xFD DUP2 SWAP1 SSTORE POP PUSH32 0x75C07EB064B8CCF959BCC601B55315CA198E67B597DC0A7B93E130F8CA779A67 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x98C DUP3 PUSH2 0x8D9 JUMP JUMPDEST PUSH2 0x995 DUP2 PUSH2 0x189B JUMP JUMPDEST PUSH2 0x99F DUP4 DUP4 PUSH2 0x18AF JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x9AC PUSH2 0x1990 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xA19 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA10 SWAP1 PUSH2 0x3ACE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA23 DUP3 DUP3 PUSH2 0x1998 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xA2F PUSH2 0x1495 JUMP JUMPDEST PUSH2 0xA6E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA65 SWAP1 PUSH2 0x39E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA76 PUSH2 0x1A7A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x103 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x40 ADD MLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x0 PUSH2 0xBA3 DUP6 DUP6 PUSH2 0x102 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3BF4C082 DUP9 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB5D SWAP2 SWAP1 PUSH2 0x3584 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB7A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB9E SWAP2 SWAP1 PUSH2 0x3B03 JUMP JUMPDEST PUSH2 0x6B6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xC79 JUMPI PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xC19 JUMPI PUSH2 0xC18 PUSH2 0x3930 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD DUP3 PUSH1 0x1 ADD SLOAD PUSH2 0xC47 SWAP2 SWAP1 PUSH2 0x3B30 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 PUSH1 0x4 ADD SLOAD PUSH2 0xC59 SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST DUP6 PUSH2 0xC64 SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST SWAP5 POP DUP3 PUSH2 0xC70 SWAP1 PUSH2 0x38B9 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0xBA8 JUMP JUMPDEST POP DUP2 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC8D PUSH2 0x1495 JUMP JUMPDEST PUSH2 0xCCC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCC3 SWAP1 PUSH2 0x39E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3C DUP2 PUSH2 0xCD9 SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST PUSH1 0xFE DUP2 SWAP1 SSTORE POP PUSH31 0x3A5A2424463BB22C8FC4C0F2422B7A18712B7713F9619CAA313F499FAD615E PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD2E PUSH2 0x1ADD JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD3F DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x1B2C JUMP JUMPDEST SWAP1 POP DUP1 SWAP2 POP POP PUSH2 0xD4D PUSH2 0x1D89 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xE18 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE0F SWAP1 PUSH2 0x3C0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE7E JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE86 PUSH2 0x1D93 JUMP JUMPDEST PUSH2 0xE8E PUSH2 0x1DEC JUMP JUMPDEST PUSH2 0xE96 PUSH2 0x1E3D JUMP JUMPDEST PUSH2 0xEA7 PUSH2 0xEA1 PUSH2 0x1E96 JUMP JUMPDEST DUP3 PUSH2 0x18AF JUMP JUMPDEST PUSH2 0xEB8 PUSH2 0xEB2 PUSH2 0x1EBE JUMP JUMPDEST DUP3 PUSH2 0x18AF JUMP JUMPDEST PUSH2 0xED0 PUSH2 0xEC3 PUSH2 0x1EBE JUMP JUMPDEST PUSH2 0xECB PUSH2 0x1E96 JUMP JUMPDEST PUSH2 0x1EE6 JUMP JUMPDEST PUSH2 0xEE8 PUSH2 0xEDB PUSH2 0x1E96 JUMP JUMPDEST PUSH2 0xEE3 PUSH2 0x1E96 JUMP JUMPDEST PUSH2 0x1EE6 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEF5 PUSH2 0x1ADD JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF05 DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH2 0x1F42 JUMP JUMPDEST SWAP1 POP DUP1 SWAP2 POP POP PUSH2 0xF13 PUSH2 0x1D89 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0xF50 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0xF7D JUMPI POP PUSH2 0xF5F ADDRESS PUSH2 0x2167 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0xF7C JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0xFBC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFB3 SWAP1 PUSH2 0x3C9C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0xFF9 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH1 0xFB DUP2 SWAP1 SSTORE POP PUSH1 0x3C DUP4 PUSH2 0x100E SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST PUSH1 0xFC DUP2 SWAP1 SSTORE POP PUSH1 0x3C DUP5 PUSH2 0x1021 SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST PUSH1 0xFD DUP2 SWAP1 SSTORE POP PUSH1 0x3C DUP6 PUSH2 0x1034 SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST PUSH1 0xFE DUP2 SWAP1 SSTORE POP DUP8 PUSH1 0xFF PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP8 PUSH2 0x100 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP7 PUSH2 0x101 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP6 PUSH2 0x102 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1151 PUSH2 0x114C PUSH2 0x1990 JUMP JUMPDEST PUSH2 0xDC9 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP DUP1 ISZERO PUSH2 0x11AE JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x11A5 SWAP2 SWAP1 PUSH2 0x3D01 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1247 PUSH2 0x1495 JUMP JUMPDEST PUSH2 0x1286 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x127D SWAP1 PUSH2 0x39E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x128E PUSH2 0x218A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x40 ADD MLOAD DUP2 PUSH1 0x80 ADD MLOAD DUP3 PUSH1 0x60 ADD MLOAD DUP4 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0xC0 ADD MLOAD SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP POP SWAP4 SWAP8 POP SWAP4 SWAP8 SWAP2 SWAP6 POP SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH2 0x1412 PUSH2 0x1495 JUMP JUMPDEST PUSH2 0x1451 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1448 SWAP1 PUSH2 0x39E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x15180 DUP2 PUSH2 0x1460 SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST PUSH1 0xFC DUP2 SWAP1 SSTORE POP PUSH32 0xDB4FB2FD6B8B90F67BDA8671842D5CAB4EB4B7EBA9683F5BCEC9ABA9473CC957 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14AF PUSH2 0x14A2 PUSH2 0x1E96 JUMP JUMPDEST PUSH2 0x14AA PUSH2 0x1990 JUMP JUMPDEST PUSH2 0x1398 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0xFB SLOAD DUP2 LT ISZERO PUSH2 0x16EA JUMPI PUSH1 0x0 DUP1 PUSH2 0x15E3 DUP7 DUP5 PUSH2 0x102 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3BF4C082 DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x159D SWAP2 SWAP1 PUSH2 0x3584 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x15BA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x15DE SWAP2 SWAP1 PUSH2 0x3B03 JUMP JUMPDEST PUSH2 0x6B6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x16C8 JUMPI PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1659 JUMPI PUSH2 0x1658 PUSH2 0x3930 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD TIMESTAMP GT PUSH2 0x1685 JUMPI PUSH1 0x0 PUSH2 0x1696 JUMP JUMPDEST DUP2 PUSH1 0x0 ADD SLOAD TIMESTAMP PUSH2 0x1695 SWAP2 SWAP1 PUSH2 0x3B30 JUMP JUMPDEST JUMPDEST SWAP1 POP DUP1 DUP3 PUSH1 0x4 ADD SLOAD PUSH2 0x16A8 SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST DUP6 PUSH2 0x16B3 SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST SWAP5 POP DUP3 PUSH2 0x16BF SWAP1 PUSH2 0x38B9 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x15E8 JUMP JUMPDEST POP DUP2 DUP5 PUSH2 0x16D5 SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST SWAP4 POP DUP3 PUSH2 0x16E1 SWAP1 PUSH2 0x38B9 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x152F JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x16FD DUP3 PUSH2 0x8D9 JUMP JUMPDEST PUSH2 0x1706 DUP2 PUSH2 0x189B JUMP JUMPDEST PUSH2 0x1710 DUP4 DUP4 PUSH2 0x1998 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x103 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD DUP2 PUSH1 0x0 ADD MLOAD SWAP3 POP SWAP3 POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 TIMESTAMP PUSH2 0x17A7 DUP6 DUP6 DUP6 PUSH2 0x14B4 JUMP JUMPDEST GT ISZERO PUSH2 0x17DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x707001B500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x17EC DUP6 DUP6 DUP6 PUSH2 0x21ED JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1825 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB00FCB1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18AC DUP2 PUSH2 0x18A7 PUSH2 0x1990 JUMP JUMPDEST PUSH2 0x258F JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x18B9 DUP3 DUP3 PUSH2 0x1398 JUMP JUMPDEST PUSH2 0x198C JUMPI PUSH1 0x1 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x1931 PUSH2 0x1990 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x19A2 DUP3 DUP3 PUSH2 0x1398 JUMP JUMPDEST ISZERO PUSH2 0x1A76 JUMPI PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x1A1B PUSH2 0x1990 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1A82 PUSH2 0x2614 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x1AC6 PUSH2 0x1990 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1AD3 SWAP2 SWAP1 PUSH2 0x3D2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0xC9 SLOAD SUB PUSH2 0x1B22 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B19 SWAP1 PUSH2 0x3D92 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 PUSH2 0x1B3B PUSH2 0x1990 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1BDE JUMPI PUSH1 0x40 MLOAD PUSH32 0x96AE3E8200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1BF2 PUSH2 0x1BEB PUSH2 0x1990 JUMP JUMPDEST DUP10 DUP10 PUSH2 0x21ED JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1C2B JUMPI PUSH1 0x40 MLOAD PUSH32 0xB00FCB1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH2 0x1D79 JUMPI PUSH1 0x0 DUP10 PUSH2 0x104 PUSH1 0x0 PUSH2 0x1C40 PUSH2 0x1990 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x1CAA SWAP2 SWAP1 PUSH2 0x3B30 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0x278D00 PUSH1 0xFC SLOAD TIMESTAMP PUSH2 0x1CC0 SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST PUSH2 0x1CCA SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x1CDA DUP5 DUP14 DUP14 PUSH2 0x265D JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1D15 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB00FCB1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1D74 PUSH2 0x1D20 PUSH2 0x1990 JUMP JUMPDEST ADDRESS DUP4 DUP7 DUP15 DUP15 DUP15 PUSH2 0x100 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2C82 SWAP1 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1DE2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DD9 SWAP1 PUSH2 0x3C0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1DEA PUSH2 0x2E4F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1E3B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E32 SWAP1 PUSH2 0x3C0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1E8C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E83 SWAP1 PUSH2 0x3C0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1E94 PUSH2 0x2EBB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EF1 DUP4 PUSH2 0x8D9 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x97 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP8 PUSH2 0x104 PUSH1 0x0 PUSH2 0x1F53 PUSH2 0x1990 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x1FBD SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST SWAP1 POP PUSH2 0x104 PUSH1 0x0 PUSH2 0x1FCC PUSH2 0x1990 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x208D JUMPI PUSH1 0x0 PUSH2 0x2052 PUSH2 0x204B PUSH2 0x1990 JUMP JUMPDEST DUP10 DUP10 PUSH2 0x21ED JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x208B JUMPI PUSH1 0x40 MLOAD PUSH32 0xB00FCB1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST PUSH1 0x0 PUSH3 0x278D00 PUSH1 0xFC SLOAD TIMESTAMP PUSH2 0x20A1 SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST PUSH2 0x20AB SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x20BB DUP5 DUP12 DUP12 PUSH2 0x265D JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x20F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB00FCB1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2155 PUSH2 0x2101 PUSH2 0x1990 JUMP JUMPDEST ADDRESS DUP4 DUP7 DUP13 DUP13 DUP13 PUSH2 0x100 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2C82 SWAP1 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 SWAP5 POP POP POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2192 PUSH2 0x2F14 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x21D6 PUSH2 0x1990 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21E3 SWAP2 SWAP1 PUSH2 0x3D2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x104 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x229C JUMPI PUSH1 0x40 MLOAD PUSH32 0x96AE3E8200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x6 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD TIMESTAMP GT PUSH2 0x22CD JUMPI PUSH1 0x0 PUSH2 0x22F4 JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD TIMESTAMP GT PUSH2 0x22ED JUMPI DUP2 PUSH1 0x0 ADD SLOAD TIMESTAMP PUSH2 0x22E8 SWAP2 SWAP1 PUSH2 0x3B30 JUMP JUMPDEST PUSH2 0x22F3 JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x4 ADD SLOAD DUP3 PUSH2 0x2308 SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SUB PUSH2 0x231E JUMPI PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x2588 JUMP JUMPDEST DUP3 PUSH1 0x4 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2375 SWAP2 SWAP1 PUSH2 0x3B30 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x5 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x23D3 SWAP2 SWAP1 PUSH2 0x3B30 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP4 PUSH1 0x4 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0x2 ADD SLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x102 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x26A6E9EB DUP11 DUP11 DUP6 DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2450 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3DB2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x246F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2493 SWAP2 SWAP1 PUSH2 0x3E0C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x79CC6790 DUP13 DUP8 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x24F5 SWAP3 SWAP2 SWAP1 PUSH2 0x3E39 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2514 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2538 SWAP2 SWAP1 PUSH2 0x3E0C JUMP JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 PUSH2 0x2545 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x257C JUMPI PUSH1 0x40 MLOAD PUSH32 0xB00FCB1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP8 POP POP POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2599 DUP3 DUP3 PUSH2 0x1398 JUMP JUMPDEST PUSH2 0x2610 JUMPI PUSH2 0x25A6 DUP2 PUSH2 0x2F5E JUMP JUMPDEST PUSH2 0x25B4 DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0x2F8B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x25C5 SWAP3 SWAP2 SWAP1 PUSH2 0x3F6B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2607 SWAP2 SWAP1 PUSH2 0x3FEF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x261C PUSH2 0xD0D JUMP JUMPDEST PUSH2 0x265B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2652 SWAP1 PUSH2 0x405D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH8 0xDE0B6B3A7640000 DUP6 LT ISZERO PUSH2 0x26A1 JUMPI PUSH1 0x40 MLOAD PUSH31 0xCD474300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x102 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5657F79D DUP6 DUP8 DUP7 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2701 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x407D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x271E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2742 SWAP2 SWAP1 PUSH2 0x3E0C JUMP JUMPDEST PUSH2 0x2778 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1E45D1B400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x104 PUSH1 0x0 PUSH2 0x2785 PUSH2 0x1990 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x2829 JUMPI PUSH1 0x40 MLOAD PUSH32 0x707001B500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 PUSH2 0x2838 PUSH2 0x1990 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x103 PUSH1 0x0 PUSH2 0x28A5 PUSH2 0x1990 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x2 ADD SLOAD PUSH2 0x101 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 PUSH2 0x292F PUSH2 0x1990 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x294B SWAP2 SWAP1 PUSH2 0x3D2B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2968 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x298C SWAP2 SWAP1 PUSH2 0x3B03 JUMP JUMPDEST PUSH2 0x2996 SWAP2 SWAP1 PUSH2 0x3B30 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP10 PUSH2 0x102 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5952A8C6 DUP12 DUP12 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A02 SWAP3 SWAP2 SWAP1 PUSH2 0x3861 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A1F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2A43 SWAP2 SWAP1 PUSH2 0x3B03 JUMP JUMPDEST PUSH2 0x2A4D SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST PUSH2 0x2A57 SWAP2 SWAP1 PUSH2 0x40E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 DUP5 PUSH1 0x1 ADD SLOAD PUSH2 0x2A6B SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0xFE SLOAD DUP3 PUSH2 0x2A7C SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST GT ISZERO PUSH2 0x2AB4 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE4B581A500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 PUSH2 0x2AC2 SWAP2 SWAP1 PUSH2 0x40E3 JUMP JUMPDEST SWAP1 POP DUP3 DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2AD8 SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP11 DUP7 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP DUP3 DUP7 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP TIMESTAMP DUP7 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP PUSH1 0xFD SLOAD TIMESTAMP PUSH2 0x2B08 SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST DUP7 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH1 0xFC SLOAD DUP2 LT PUSH2 0x2B30 JUMPI PUSH1 0xFC SLOAD DUP7 PUSH1 0x0 ADD SLOAD PUSH2 0x2B2B SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST PUSH2 0x2B41 JUMP JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD SLOAD PUSH2 0x2B40 SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST JUMPDEST DUP7 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP3 DUP2 PUSH2 0x2B55 SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST DUP7 PUSH1 0x5 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP7 PUSH1 0x6 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP6 PUSH1 0x5 ADD SLOAD DUP6 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2B92 SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x0 ADD SLOAD DUP7 PUSH1 0x1 ADD SLOAD LT PUSH2 0x2BB2 JUMPI DUP6 PUSH1 0x1 ADD SLOAD PUSH2 0x2BB8 JUMP JUMPDEST DUP5 PUSH1 0x0 ADD SLOAD JUMPDEST DUP6 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x102 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD9895C70 DUP13 DUP13 DUP16 DUP9 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C24 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3DB2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2C43 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2C67 SWAP2 SWAP1 PUSH2 0x3E0C JUMP JUMPDEST SWAP1 POP DUP1 DUP8 PUSH1 0x5 ADD SLOAD SWAP9 POP SWAP9 POP POP POP POP POP POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7ECEBE00 DUP10 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2CBD SWAP2 SWAP1 PUSH2 0x3D2B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2CDA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2CFE SWAP2 SWAP1 PUSH2 0x3B03 JUMP JUMPDEST SWAP1 POP DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD505ACCF DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D45 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4123 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2D73 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7ECEBE00 DUP11 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DB2 SWAP2 SWAP1 PUSH2 0x3D2B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2DCF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2DF3 SWAP2 SWAP1 PUSH2 0x3B03 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP3 PUSH2 0x2E02 SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST DUP2 EQ PUSH2 0x2E43 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E3A SWAP1 PUSH2 0x4204 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2E9E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E95 SWAP1 PUSH2 0x3C0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2F0A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F01 SWAP1 PUSH2 0x3C0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x2F1C PUSH2 0xD0D JUMP JUMPDEST ISZERO PUSH2 0x2F5C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F53 SWAP1 PUSH2 0x4270 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2F84 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0x2F8B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0x2F9E SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST PUSH2 0x2FA8 SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2FC1 JUMPI PUSH2 0x2FC0 PUSH2 0x3901 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2FF3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x302B JUMPI PUSH2 0x302A PUSH2 0x3930 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x308F JUMPI PUSH2 0x308E PUSH2 0x3930 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0x30CF SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST PUSH2 0x30D9 SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x3179 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0x311B JUMPI PUSH2 0x311A PUSH2 0x3930 JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3132 JUMPI PUSH2 0x3131 PUSH2 0x3930 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0x3172 SWAP1 PUSH2 0x4290 JUMP JUMPDEST SWAP1 POP PUSH2 0x30DC JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0x31BD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x31B4 SWAP1 PUSH2 0x4305 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3201 DUP2 PUSH2 0x31CC JUMP JUMPDEST DUP2 EQ PUSH2 0x320C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x321E DUP2 PUSH2 0x31F8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x323A JUMPI PUSH2 0x3239 PUSH2 0x31C7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3248 DUP5 DUP3 DUP6 ADD PUSH2 0x320F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3266 DUP2 PUSH2 0x3251 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3281 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x325D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32B2 DUP3 PUSH2 0x3287 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x32C2 DUP2 PUSH2 0x32A7 JUMP JUMPDEST DUP2 EQ PUSH2 0x32CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x32DF DUP2 PUSH2 0x32B9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x32F8 DUP2 PUSH2 0x32E5 JUMP JUMPDEST DUP2 EQ PUSH2 0x3303 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3315 DUP2 PUSH2 0x32EF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3334 JUMPI PUSH2 0x3333 PUSH2 0x31C7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3342 DUP7 DUP3 DUP8 ADD PUSH2 0x32D0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3353 DUP7 DUP3 DUP8 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x3364 DUP7 DUP3 DUP8 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x33A3 DUP2 PUSH2 0x32E5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33B5 DUP4 DUP4 PUSH2 0x339A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33D9 DUP3 PUSH2 0x336E JUMP JUMPDEST PUSH2 0x33E3 DUP2 DUP6 PUSH2 0x3379 JUMP JUMPDEST SWAP4 POP PUSH2 0x33EE DUP4 PUSH2 0x338A JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x341F JUMPI DUP2 MLOAD PUSH2 0x3406 DUP9 DUP3 PUSH2 0x33A9 JUMP JUMPDEST SWAP8 POP PUSH2 0x3411 DUP4 PUSH2 0x33C1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x33F2 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3446 DUP2 DUP5 PUSH2 0x33CE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3461 DUP2 PUSH2 0x344E JUMP JUMPDEST DUP2 EQ PUSH2 0x346C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x347E DUP2 PUSH2 0x3458 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x349A JUMPI PUSH2 0x3499 PUSH2 0x31C7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x34A8 DUP5 DUP3 DUP6 ADD PUSH2 0x346F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x34BA DUP2 PUSH2 0x344E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x34D5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x34B1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x34F1 JUMPI PUSH2 0x34F0 PUSH2 0x31C7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x34FF DUP5 DUP3 DUP6 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x351F JUMPI PUSH2 0x351E PUSH2 0x31C7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x352D DUP6 DUP3 DUP7 ADD PUSH2 0x346F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x353E DUP6 DUP3 DUP7 ADD PUSH2 0x32D0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x355E JUMPI PUSH2 0x355D PUSH2 0x31C7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x356C DUP5 DUP3 DUP6 ADD PUSH2 0x32D0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x357E DUP2 PUSH2 0x32E5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3599 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3575 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x35B6 JUMPI PUSH2 0x35B5 PUSH2 0x31C7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x35C4 DUP6 DUP3 DUP7 ADD PUSH2 0x32D0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x35D5 DUP6 DUP3 DUP7 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x35F5 DUP2 PUSH2 0x35DF JUMP JUMPDEST DUP2 EQ PUSH2 0x3600 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3612 DUP2 PUSH2 0x35EC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3621 DUP2 PUSH2 0x3251 JUMP JUMPDEST DUP2 EQ PUSH2 0x362C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x363E DUP2 PUSH2 0x3618 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x3663 JUMPI PUSH2 0x3662 PUSH2 0x31C7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3671 DUP11 DUP3 DUP12 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x3682 DUP11 DUP3 DUP12 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x3693 DUP11 DUP3 DUP12 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x36A4 DUP11 DUP3 DUP12 ADD PUSH2 0x3603 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x36B5 DUP11 DUP3 DUP12 ADD PUSH2 0x346F JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x36C6 DUP11 DUP3 DUP12 ADD PUSH2 0x346F JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x36D7 DUP11 DUP3 DUP12 ADD PUSH2 0x362F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3703 JUMPI PUSH2 0x3702 PUSH2 0x31C7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3711 DUP10 DUP3 DUP11 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x3722 DUP10 DUP3 DUP11 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0x3733 DUP10 DUP3 DUP11 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0x3744 DUP10 DUP3 DUP11 ADD PUSH2 0x3603 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0x3755 DUP10 DUP3 DUP11 ADD PUSH2 0x346F JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH2 0x3766 DUP10 DUP3 DUP11 ADD PUSH2 0x346F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3790 JUMPI PUSH2 0x378F PUSH2 0x31C7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x379E DUP10 DUP3 DUP11 ADD PUSH2 0x32D0 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x37AF DUP10 DUP3 DUP11 ADD PUSH2 0x32D0 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0x37C0 DUP10 DUP3 DUP11 ADD PUSH2 0x32D0 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0x37D1 DUP10 DUP3 DUP11 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0x37E2 DUP10 DUP3 DUP11 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH2 0x37F3 DUP10 DUP3 DUP11 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x3815 PUSH1 0x0 DUP4 ADD DUP10 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x3822 PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x382F PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x383C PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x3849 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x3856 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x325D JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3876 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x3883 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3575 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x38C4 DUP3 PUSH2 0x32E5 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x38F6 JUMPI PUSH2 0x38F5 PUSH2 0x388A JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D75737420686176652061646D696E20726F6C6520746F20706572666F726D20 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7468697320616374696F6E2E0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39CC PUSH1 0x2C DUP4 PUSH2 0x395F JUMP JUMPDEST SWAP2 POP PUSH2 0x39D7 DUP3 PUSH2 0x3970 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x39FB DUP2 PUSH2 0x39BF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A0D DUP3 PUSH2 0x32E5 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A18 DUP4 PUSH2 0x32E5 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3A51 JUMPI PUSH2 0x3A50 PUSH2 0x388A JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AB8 PUSH1 0x2F DUP4 PUSH2 0x395F JUMP JUMPDEST SWAP2 POP PUSH2 0x3AC3 DUP3 PUSH2 0x3A5C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3AE7 DUP2 PUSH2 0x3AAB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3AFD DUP2 PUSH2 0x32EF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3B19 JUMPI PUSH2 0x3B18 PUSH2 0x31C7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3B27 DUP5 DUP3 DUP6 ADD PUSH2 0x3AEE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B3B DUP3 PUSH2 0x32E5 JUMP JUMPDEST SWAP2 POP PUSH2 0x3B46 DUP4 PUSH2 0x32E5 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x3B5E JUMPI PUSH2 0x3B5D PUSH2 0x388A JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B6F DUP3 PUSH2 0x32E5 JUMP JUMPDEST SWAP2 POP PUSH2 0x3B7A DUP4 PUSH2 0x32E5 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x3B92 JUMPI PUSH2 0x3B91 PUSH2 0x388A JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BF4 PUSH1 0x2B DUP4 PUSH2 0x395F JUMP JUMPDEST SWAP2 POP PUSH2 0x3BFF DUP3 PUSH2 0x3B98 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3C23 DUP2 PUSH2 0x3BE7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C86 PUSH1 0x2E DUP4 PUSH2 0x395F JUMP JUMPDEST SWAP2 POP PUSH2 0x3C91 DUP3 PUSH2 0x3C2A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3CB5 DUP2 PUSH2 0x3C79 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CEB PUSH2 0x3CE6 PUSH2 0x3CE1 DUP5 PUSH2 0x3CBC JUMP JUMPDEST PUSH2 0x3CC6 JUMP JUMPDEST PUSH2 0x35DF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3CFB DUP2 PUSH2 0x3CD0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3D16 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3CF2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3D25 DUP2 PUSH2 0x32A7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3D40 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3D1C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D7C PUSH1 0x1F DUP4 PUSH2 0x395F JUMP JUMPDEST SWAP2 POP PUSH2 0x3D87 DUP3 PUSH2 0x3D46 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3DAB DUP2 PUSH2 0x3D6F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x3DC7 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x3DD4 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x3DE1 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x3DEE PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x3575 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3E06 DUP2 PUSH2 0x3618 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3E22 JUMPI PUSH2 0x3E21 PUSH2 0x31C7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3E30 DUP5 DUP3 DUP6 ADD PUSH2 0x3DF7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3E4E PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3D1C JUMP JUMPDEST PUSH2 0x3E5B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3575 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3EA3 PUSH1 0x17 DUP4 PUSH2 0x3E62 JUMP JUMPDEST SWAP2 POP PUSH2 0x3EAE DUP3 PUSH2 0x3E6D JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3EE2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3EC7 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3EF9 DUP3 PUSH2 0x3EB9 JUMP JUMPDEST PUSH2 0x3F03 DUP2 DUP6 PUSH2 0x3E62 JUMP JUMPDEST SWAP4 POP PUSH2 0x3F13 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3EC4 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F55 PUSH1 0x11 DUP4 PUSH2 0x3E62 JUMP JUMPDEST SWAP2 POP PUSH2 0x3F60 DUP3 PUSH2 0x3F1F JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F76 DUP3 PUSH2 0x3E96 JUMP JUMPDEST SWAP2 POP PUSH2 0x3F82 DUP3 DUP6 PUSH2 0x3EEE JUMP JUMPDEST SWAP2 POP PUSH2 0x3F8D DUP3 PUSH2 0x3F48 JUMP JUMPDEST SWAP2 POP PUSH2 0x3F99 DUP3 DUP5 PUSH2 0x3EEE JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FC1 DUP3 PUSH2 0x3EB9 JUMP JUMPDEST PUSH2 0x3FCB DUP2 DUP6 PUSH2 0x395F JUMP JUMPDEST SWAP4 POP PUSH2 0x3FDB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3EC4 JUMP JUMPDEST PUSH2 0x3FE4 DUP2 PUSH2 0x3FA5 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4009 DUP2 DUP5 PUSH2 0x3FB6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4047 PUSH1 0x14 DUP4 PUSH2 0x395F JUMP JUMPDEST SWAP2 POP PUSH2 0x4052 DUP3 PUSH2 0x4011 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4076 DUP2 PUSH2 0x403A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x4092 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x409F PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x40AC PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x3575 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x40EE DUP3 PUSH2 0x32E5 JUMP JUMPDEST SWAP2 POP PUSH2 0x40F9 DUP4 PUSH2 0x32E5 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x4109 JUMPI PUSH2 0x4108 PUSH2 0x40B4 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x411D DUP2 PUSH2 0x35DF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH2 0x4138 PUSH1 0x0 DUP4 ADD DUP11 PUSH2 0x3D1C JUMP JUMPDEST PUSH2 0x4145 PUSH1 0x20 DUP4 ADD DUP10 PUSH2 0x3D1C JUMP JUMPDEST PUSH2 0x4152 PUSH1 0x40 DUP4 ADD DUP9 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x415F PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x416C PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x4114 JUMP JUMPDEST PUSH2 0x4179 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x34B1 JUMP JUMPDEST PUSH2 0x4186 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x34B1 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A207065726D697420646964206E6F7420737563636565 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x41EE PUSH1 0x21 DUP4 PUSH2 0x395F JUMP JUMPDEST SWAP2 POP PUSH2 0x41F9 DUP3 PUSH2 0x4192 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x421D DUP2 PUSH2 0x41E1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x425A PUSH1 0x10 DUP4 PUSH2 0x395F JUMP JUMPDEST SWAP2 POP PUSH2 0x4265 DUP3 PUSH2 0x4224 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4289 DUP2 PUSH2 0x424D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x429B DUP3 PUSH2 0x32E5 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x42AE JUMPI PUSH2 0x42AD PUSH2 0x388A JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42EF PUSH1 0x20 DUP4 PUSH2 0x395F JUMP JUMPDEST SWAP2 POP PUSH2 0x42FA DUP3 PUSH2 0x42B9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x431E DUP2 PUSH2 0x42E2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x27 PUSH21 0xC3A7975A94A92BF13FA5D1A07228ABF4B52DF9BBCA 0xF8 DUP1 MSTORE8 DUP3 0xC8 GAS 0xA7 SLT 0x4F PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"620:21316:22:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEFAULT_ADMIN_ROLE_42":{"entryPoint":5123,"id":42,"parameterSlots":0,"returnSlots":0},"@__AccessControl_init_21":{"entryPoint":7660,"id":21,"parameterSlots":0,"returnSlots":0},"@__BaseUpgradeablePausable_init_4094":{"entryPoint":3529,"id":4094,"parameterSlots":1,"returnSlots":0},"@__Pausable_init_608":{"entryPoint":7571,"id":608,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_unchained_618":{"entryPoint":11855,"id":618,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_727":{"entryPoint":7741,"id":727,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_unchained_737":{"entryPoint":11963,"id":737,"parameterSlots":0,"returnSlots":0},"@_addInsuranceAmount_4502":{"entryPoint":8002,"id":4502,"parameterSlots":6,"returnSlots":1},"@_checkRole_107":{"entryPoint":6299,"id":107,"parameterSlots":1,"returnSlots":0},"@_checkRole_146":{"entryPoint":9615,"id":146,"parameterSlots":2,"returnSlots":0},"@_grantRole_298":{"entryPoint":6319,"id":298,"parameterSlots":2,"returnSlots":0},"@_minusInsuranceAmount_4653":{"entryPoint":6956,"id":4653,"parameterSlots":7,"returnSlots":1},"@_msgSender_2311":{"entryPoint":6544,"id":2311,"parameterSlots":0,"returnSlots":1},"@_nonReentrantAfter_771":{"entryPoint":7561,"id":771,"parameterSlots":0,"returnSlots":0},"@_nonReentrantBefore_763":{"entryPoint":6877,"id":763,"parameterSlots":0,"returnSlots":0},"@_pause_682":{"entryPoint":8586,"id":682,"parameterSlots":0,"returnSlots":0},"@_requireNotPaused_655":{"entryPoint":12052,"id":655,"parameterSlots":0,"returnSlots":0},"@_requirePaused_666":{"entryPoint":9748,"id":666,"parameterSlots":0,"returnSlots":0},"@_revokeRole_329":{"entryPoint":6552,"id":329,"parameterSlots":2,"returnSlots":0},"@_setRoleAdmin_266":{"entryPoint":7910,"id":266,"parameterSlots":2,"returnSlots":0},"@_unpause_698":{"entryPoint":6778,"id":698,"parameterSlots":0,"returnSlots":0},"@activateInsurance_4928":{"entryPoint":9821,"id":4928,"parameterSlots":3,"returnSlots":2},"@addInsuranceAmount_4399":{"entryPoint":3819,"id":4399,"parameterSlots":6,"returnSlots":1},"@calculateTotalFlowMade_5411":{"entryPoint":5413,"id":5411,"parameterSlots":1,"returnSlots":1},"@calculateTotalFlowMade_5548":{"entryPoint":2803,"id":5548,"parameterSlots":2,"returnSlots":1},"@claimPremium_4695":{"entryPoint":6041,"id":4695,"parameterSlots":3,"returnSlots":1},"@claimPremium_4705":{"entryPoint":4537,"id":4705,"parameterSlots":2,"returnSlots":1},"@deactivateInsurance_5067":{"entryPoint":8685,"id":5067,"parameterSlots":3,"returnSlots":1},"@findActivePremiumCost_5313":{"entryPoint":1718,"id":5313,"parameterSlots":3,"returnSlots":1},"@getAdminRole_4129":{"entryPoint":7830,"id":4129,"parameterSlots":0,"returnSlots":1},"@getGlobalUserInsuranceInfo_5664":{"entryPoint":5909,"id":5664,"parameterSlots":1,"returnSlots":2},"@getGlobalUserInsurancePremiumCost_5683":{"entryPoint":2680,"id":5683,"parameterSlots":1,"returnSlots":1},"@getPauserRole_4137":{"entryPoint":7870,"id":4137,"parameterSlots":0,"returnSlots":1},"@getRoleAdmin_161":{"entryPoint":2265,"id":161,"parameterSlots":1,"returnSlots":1},"@getUserInsuranceInfo_5640":{"entryPoint":4752,"id":5640,"parameterSlots":3,"returnSlots":6},"@getUserInsuranceStatus_5592":{"entryPoint":4545,"id":5592,"parameterSlots":3,"returnSlots":1},"@getUserInsuranceValidTillInfo_5570":{"entryPoint":5300,"id":5570,"parameterSlots":3,"returnSlots":1},"@getUserInsuredAmount_5704":{"entryPoint":3416,"id":5704,"parameterSlots":3,"returnSlots":1},"@grantRole_181":{"entryPoint":2435,"id":181,"parameterSlots":2,"returnSlots":0},"@hasRole_94":{"entryPoint":5016,"id":94,"parameterSlots":2,"returnSlots":1},"@initialize_4292":{"entryPoint":3869,"id":4292,"parameterSlots":6,"returnSlots":1},"@isAdmin_4108":{"entryPoint":5269,"id":4108,"parameterSlots":0,"returnSlots":1},"@isContract_2018":{"entryPoint":8551,"id":2018,"parameterSlots":1,"returnSlots":1},"@minusInsuranceAmount_4540":{"entryPoint":3364,"id":4540,"parameterSlots":7,"returnSlots":1},"@pause_4301":{"entryPoint":4671,"id":4301,"parameterSlots":0,"returnSlots":0},"@paused_643":{"entryPoint":3341,"id":643,"parameterSlots":0,"returnSlots":1},"@renounceRole_224":{"entryPoint":2468,"id":224,"parameterSlots":2,"returnSlots":0},"@revokeRole_201":{"entryPoint":5876,"id":201,"parameterSlots":2,"returnSlots":0},"@safePermit_1961":{"entryPoint":11394,"id":1961,"parameterSlots":8,"returnSlots":0},"@supportsInterface_3124":{"entryPoint":6193,"id":3124,"parameterSlots":1,"returnSlots":1},"@supportsInterface_75":{"entryPoint":1596,"id":75,"parameterSlots":1,"returnSlots":1},"@toHexString_2554":{"entryPoint":12171,"id":2554,"parameterSlots":2,"returnSlots":1},"@toHexString_2574":{"entryPoint":12126,"id":2574,"parameterSlots":1,"returnSlots":1},"@unpause_4310":{"entryPoint":2599,"id":4310,"parameterSlots":0,"returnSlots":0},"@updateMaxInsuredDays_4364":{"entryPoint":5130,"id":4364,"parameterSlots":1,"returnSlots":0},"@updateMinimumInsurancePeriod_4328":{"entryPoint":3205,"id":4328,"parameterSlots":1,"returnSlots":0},"@updateStartWaitingTime_4346":{"entryPoint":2297,"id":4346,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address":{"entryPoint":13008,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":13871,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":15863,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":13423,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":12815,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":13062,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":15086,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint8":{"entryPoint":13827,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":13640,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_addresst_uint256t_uint256t_uint256":{"entryPoint":14195,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":13727,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256t_uint256":{"entryPoint":13083,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":15884,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":13444,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":13576,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":12836,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":13531,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":15107,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256t_uint256t_uint8t_bytes32t_bytes32":{"entryPoint":14054,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_uint256t_uint256t_uint256t_uint8t_bytes32t_bytes32t_bool":{"entryPoint":13892,"id":null,"parameterSlots":2,"returnSlots":7},"abi_encodeUpdatedPos_t_uint256_to_t_uint256":{"entryPoint":13225,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":15644,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack":{"entryPoint":13262,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":12893,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":13489,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack":{"entryPoint":15602,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":16310,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":16110,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack":{"entryPoint":17122,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack":{"entryPoint":16442,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack":{"entryPoint":16973,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack":{"entryPoint":15481,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack":{"entryPoint":14783,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack":{"entryPoint":16865,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":15335,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":16022,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack":{"entryPoint":15727,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":16200,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack":{"entryPoint":15019,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":13210,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":13685,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":16660,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":16235,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":15659,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":16675,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":15929,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":13356,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":12908,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":13504,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":15617,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16367,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17157,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16477,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17008,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15516,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14818,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16900,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15370,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15762,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15054,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":13700,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":14433,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":16509,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":15794,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed":{"entryPoint":14336,"id":null,"parameterSlots":7,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":13194,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":13166,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":16057,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":13249,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack":{"entryPoint":13177,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":14687,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":15970,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":15204,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":16611,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":14850,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":15152,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":12967,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":12881,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":13390,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":12748,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_1_by_1":{"entryPoint":15548,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":12935,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":13029,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":13791,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_rational_1_by_1_to_t_uint8":{"entryPoint":15568,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":16068,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":17040,"id":null,"parameterSlots":1,"returnSlots":1},"identity":{"entryPoint":15558,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":14521,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":14474,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":16564,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":14640,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":14593,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":12743,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":16293,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2":{"entryPoint":17081,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a":{"entryPoint":16401,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a":{"entryPoint":16932,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759":{"entryPoint":15402,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513":{"entryPoint":14704,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d":{"entryPoint":16786,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":15256,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874":{"entryPoint":15981,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619":{"entryPoint":15686,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69":{"entryPoint":16159,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b":{"entryPoint":14940,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":12985,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":13848,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":13400,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":12792,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":13039,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint8":{"entryPoint":13804,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:32701:27","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:27","statements":[{"nodeType":"YulAssignment","src":"57:19:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:27","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:27"},"nodeType":"YulFunctionCall","src":"67:9:27"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:27"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:27","type":""}],"src":"7:75:27"},{"body":{"nodeType":"YulBlock","src":"177:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:27"},"nodeType":"YulFunctionCall","src":"187:12:27"},"nodeType":"YulExpressionStatement","src":"187:12:27"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:27"},{"body":{"nodeType":"YulBlock","src":"300:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:27"},"nodeType":"YulFunctionCall","src":"310:12:27"},"nodeType":"YulExpressionStatement","src":"310:12:27"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:27"},{"body":{"nodeType":"YulBlock","src":"378:105:27","statements":[{"nodeType":"YulAssignment","src":"388:89:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:27","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:27"},"nodeType":"YulFunctionCall","src":"399:78:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:27"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:27","type":""}],"src":"334:149:27"},{"body":{"nodeType":"YulBlock","src":"531:78:27","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:27"},"nodeType":"YulFunctionCall","src":"589:12:27"},"nodeType":"YulExpressionStatement","src":"589:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:27"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:27"},"nodeType":"YulFunctionCall","src":"561:23:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:27"},"nodeType":"YulFunctionCall","src":"551:34:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:27"},"nodeType":"YulFunctionCall","src":"544:42:27"},"nodeType":"YulIf","src":"541:62:27"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:27","type":""}],"src":"489:120:27"},{"body":{"nodeType":"YulBlock","src":"666:86:27","statements":[{"nodeType":"YulAssignment","src":"676:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:27"},"nodeType":"YulFunctionCall","src":"685:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:27"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:27"},"nodeType":"YulFunctionCall","src":"714:32:27"},"nodeType":"YulExpressionStatement","src":"714:32:27"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:27","type":""}],"src":"615:137:27"},{"body":{"nodeType":"YulBlock","src":"823:262:27","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:27"},"nodeType":"YulFunctionCall","src":"871:79:27"},"nodeType":"YulExpressionStatement","src":"871:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:27"},"nodeType":"YulFunctionCall","src":"840:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:27"},"nodeType":"YulFunctionCall","src":"836:32:27"},"nodeType":"YulIf","src":"833:119:27"},{"nodeType":"YulBlock","src":"962:116:27","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:27","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:27"},"nodeType":"YulFunctionCall","src":"1036:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:27"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:27"},"nodeType":"YulFunctionCall","src":"1016:52:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:27"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:27","type":""}],"src":"758:327:27"},{"body":{"nodeType":"YulBlock","src":"1133:48:27","statements":[{"nodeType":"YulAssignment","src":"1143:32:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:27"},"nodeType":"YulFunctionCall","src":"1161:13:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:27"},"nodeType":"YulFunctionCall","src":"1154:21:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:27"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:27","type":""}],"src":"1091:90:27"},{"body":{"nodeType":"YulBlock","src":"1246:50:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:27"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:27"},"nodeType":"YulFunctionCall","src":"1268:21:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:27"},"nodeType":"YulFunctionCall","src":"1256:34:27"},"nodeType":"YulExpressionStatement","src":"1256:34:27"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:27","type":""}],"src":"1187:109:27"},{"body":{"nodeType":"YulBlock","src":"1394:118:27","statements":[{"nodeType":"YulAssignment","src":"1404:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:27"},"nodeType":"YulFunctionCall","src":"1412:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:27"},"nodeType":"YulFunctionCall","src":"1487:17:27"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:27"},"nodeType":"YulFunctionCall","src":"1440:65:27"},"nodeType":"YulExpressionStatement","src":"1440:65:27"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:27","type":""}],"src":"1302:210:27"},{"body":{"nodeType":"YulBlock","src":"1563:81:27","statements":[{"nodeType":"YulAssignment","src":"1573:65:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1588:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"1595:42:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1584:3:27"},"nodeType":"YulFunctionCall","src":"1584:54:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1573:7:27"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1545:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1555:7:27","type":""}],"src":"1518:126:27"},{"body":{"nodeType":"YulBlock","src":"1695:51:27","statements":[{"nodeType":"YulAssignment","src":"1705:35:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1734:5:27"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1716:17:27"},"nodeType":"YulFunctionCall","src":"1716:24:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1705:7:27"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1677:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1687:7:27","type":""}],"src":"1650:96:27"},{"body":{"nodeType":"YulBlock","src":"1795:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"1852:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1861:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1864:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1854:6:27"},"nodeType":"YulFunctionCall","src":"1854:12:27"},"nodeType":"YulExpressionStatement","src":"1854:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1818:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1843:5:27"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1825:17:27"},"nodeType":"YulFunctionCall","src":"1825:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1815:2:27"},"nodeType":"YulFunctionCall","src":"1815:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1808:6:27"},"nodeType":"YulFunctionCall","src":"1808:43:27"},"nodeType":"YulIf","src":"1805:63:27"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1788:5:27","type":""}],"src":"1752:122:27"},{"body":{"nodeType":"YulBlock","src":"1932:87:27","statements":[{"nodeType":"YulAssignment","src":"1942:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1964:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1951:12:27"},"nodeType":"YulFunctionCall","src":"1951:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1942:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2007:5:27"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1980:26:27"},"nodeType":"YulFunctionCall","src":"1980:33:27"},"nodeType":"YulExpressionStatement","src":"1980:33:27"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1910:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"1918:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1926:5:27","type":""}],"src":"1880:139:27"},{"body":{"nodeType":"YulBlock","src":"2070:32:27","statements":[{"nodeType":"YulAssignment","src":"2080:16:27","value":{"name":"value","nodeType":"YulIdentifier","src":"2091:5:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2080:7:27"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2052:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2062:7:27","type":""}],"src":"2025:77:27"},{"body":{"nodeType":"YulBlock","src":"2151:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"2208:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2217:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2220:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2210:6:27"},"nodeType":"YulFunctionCall","src":"2210:12:27"},"nodeType":"YulExpressionStatement","src":"2210:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2174:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2199:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2181:17:27"},"nodeType":"YulFunctionCall","src":"2181:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2171:2:27"},"nodeType":"YulFunctionCall","src":"2171:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2164:6:27"},"nodeType":"YulFunctionCall","src":"2164:43:27"},"nodeType":"YulIf","src":"2161:63:27"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2144:5:27","type":""}],"src":"2108:122:27"},{"body":{"nodeType":"YulBlock","src":"2288:87:27","statements":[{"nodeType":"YulAssignment","src":"2298:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2320:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2307:12:27"},"nodeType":"YulFunctionCall","src":"2307:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2298:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2363:5:27"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2336:26:27"},"nodeType":"YulFunctionCall","src":"2336:33:27"},"nodeType":"YulExpressionStatement","src":"2336:33:27"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2266:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"2274:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2282:5:27","type":""}],"src":"2236:139:27"},{"body":{"nodeType":"YulBlock","src":"2481:519:27","statements":[{"body":{"nodeType":"YulBlock","src":"2527:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2529:77:27"},"nodeType":"YulFunctionCall","src":"2529:79:27"},"nodeType":"YulExpressionStatement","src":"2529:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2502:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"2511:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2498:3:27"},"nodeType":"YulFunctionCall","src":"2498:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"2523:2:27","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2494:3:27"},"nodeType":"YulFunctionCall","src":"2494:32:27"},"nodeType":"YulIf","src":"2491:119:27"},{"nodeType":"YulBlock","src":"2620:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"2635:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"2649:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2639:6:27","type":""}]},{"nodeType":"YulAssignment","src":"2664:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2699:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"2710:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2695:3:27"},"nodeType":"YulFunctionCall","src":"2695:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2719:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2674:20:27"},"nodeType":"YulFunctionCall","src":"2674:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2664:6:27"}]}]},{"nodeType":"YulBlock","src":"2747:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"2762:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"2776:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2766:6:27","type":""}]},{"nodeType":"YulAssignment","src":"2792:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2827:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"2838:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2823:3:27"},"nodeType":"YulFunctionCall","src":"2823:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2847:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2802:20:27"},"nodeType":"YulFunctionCall","src":"2802:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2792:6:27"}]}]},{"nodeType":"YulBlock","src":"2875:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"2890:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"2904:2:27","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2894:6:27","type":""}]},{"nodeType":"YulAssignment","src":"2920:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2955:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"2966:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2951:3:27"},"nodeType":"YulFunctionCall","src":"2951:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2975:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2930:20:27"},"nodeType":"YulFunctionCall","src":"2930:53:27"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2920:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2435:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2446:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2458:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2466:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2474:6:27","type":""}],"src":"2381:619:27"},{"body":{"nodeType":"YulBlock","src":"3080:40:27","statements":[{"nodeType":"YulAssignment","src":"3091:22:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3107:5:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3101:5:27"},"nodeType":"YulFunctionCall","src":"3101:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3091:6:27"}]}]},"name":"array_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3063:5:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3073:6:27","type":""}],"src":"3006:114:27"},{"body":{"nodeType":"YulBlock","src":"3237:73:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3254:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"3259:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3247:6:27"},"nodeType":"YulFunctionCall","src":"3247:19:27"},"nodeType":"YulExpressionStatement","src":"3247:19:27"},{"nodeType":"YulAssignment","src":"3275:29:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3294:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"3299:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3290:3:27"},"nodeType":"YulFunctionCall","src":"3290:14:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"3275:11:27"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3209:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"3214:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"3225:11:27","type":""}],"src":"3126:184:27"},{"body":{"nodeType":"YulBlock","src":"3388:60:27","statements":[{"nodeType":"YulAssignment","src":"3398:11:27","value":{"name":"ptr","nodeType":"YulIdentifier","src":"3406:3:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"3398:4:27"}]},{"nodeType":"YulAssignment","src":"3419:22:27","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3431:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"3436:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3427:3:27"},"nodeType":"YulFunctionCall","src":"3427:14:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"3419:4:27"}]}]},"name":"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"3375:3:27","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"3383:4:27","type":""}],"src":"3316:132:27"},{"body":{"nodeType":"YulBlock","src":"3509:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3526:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3549:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3531:17:27"},"nodeType":"YulFunctionCall","src":"3531:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3519:6:27"},"nodeType":"YulFunctionCall","src":"3519:37:27"},"nodeType":"YulExpressionStatement","src":"3519:37:27"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3497:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3504:3:27","type":""}],"src":"3454:108:27"},{"body":{"nodeType":"YulBlock","src":"3648:99:27","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3692:6:27"},{"name":"pos","nodeType":"YulIdentifier","src":"3700:3:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"3658:33:27"},"nodeType":"YulFunctionCall","src":"3658:46:27"},"nodeType":"YulExpressionStatement","src":"3658:46:27"},{"nodeType":"YulAssignment","src":"3713:28:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3731:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"3736:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3727:3:27"},"nodeType":"YulFunctionCall","src":"3727:14:27"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"3713:10:27"}]}]},"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"3621:6:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3629:3:27","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"3637:10:27","type":""}],"src":"3568:179:27"},{"body":{"nodeType":"YulBlock","src":"3828:38:27","statements":[{"nodeType":"YulAssignment","src":"3838:22:27","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3850:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"3855:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3846:3:27"},"nodeType":"YulFunctionCall","src":"3846:14:27"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"3838:4:27"}]}]},"name":"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"3815:3:27","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"3823:4:27","type":""}],"src":"3753:113:27"},{"body":{"nodeType":"YulBlock","src":"4026:608:27","statements":[{"nodeType":"YulVariableDeclaration","src":"4036:68:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4098:5:27"}],"functionName":{"name":"array_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4050:47:27"},"nodeType":"YulFunctionCall","src":"4050:54:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4040:6:27","type":""}]},{"nodeType":"YulAssignment","src":"4113:93:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4194:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"4199:6:27"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4120:73:27"},"nodeType":"YulFunctionCall","src":"4120:86:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4113:3:27"}]},{"nodeType":"YulVariableDeclaration","src":"4215:71:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4280:5:27"}],"functionName":{"name":"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4230:49:27"},"nodeType":"YulFunctionCall","src":"4230:56:27"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"4219:7:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4295:21:27","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"4309:7:27"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"4299:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"4385:224:27","statements":[{"nodeType":"YulVariableDeclaration","src":"4399:34:27","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"4426:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4420:5:27"},"nodeType":"YulFunctionCall","src":"4420:13:27"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"4403:13:27","type":""}]},{"nodeType":"YulAssignment","src":"4446:70:27","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"4497:13:27"},{"name":"pos","nodeType":"YulIdentifier","src":"4512:3:27"}],"functionName":{"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"4453:43:27"},"nodeType":"YulFunctionCall","src":"4453:63:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4446:3:27"}]},{"nodeType":"YulAssignment","src":"4529:70:27","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"4592:6:27"}],"functionName":{"name":"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4539:52:27"},"nodeType":"YulFunctionCall","src":"4539:60:27"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"4529:6:27"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4347:1:27"},{"name":"length","nodeType":"YulIdentifier","src":"4350:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4344:2:27"},"nodeType":"YulFunctionCall","src":"4344:13:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4358:18:27","statements":[{"nodeType":"YulAssignment","src":"4360:14:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4369:1:27"},{"kind":"number","nodeType":"YulLiteral","src":"4372:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4365:3:27"},"nodeType":"YulFunctionCall","src":"4365:9:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4360:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"4329:14:27","statements":[{"nodeType":"YulVariableDeclaration","src":"4331:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"4340:1:27","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4335:1:27","type":""}]}]},"src":"4325:284:27"},{"nodeType":"YulAssignment","src":"4618:10:27","value":{"name":"pos","nodeType":"YulIdentifier","src":"4625:3:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4618:3:27"}]}]},"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4005:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4012:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4021:3:27","type":""}],"src":"3902:732:27"},{"body":{"nodeType":"YulBlock","src":"4788:225:27","statements":[{"nodeType":"YulAssignment","src":"4798:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4810:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4821:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4806:3:27"},"nodeType":"YulFunctionCall","src":"4806:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4798:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4845:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4856:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4841:3:27"},"nodeType":"YulFunctionCall","src":"4841:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4864:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"4870:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4860:3:27"},"nodeType":"YulFunctionCall","src":"4860:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4834:6:27"},"nodeType":"YulFunctionCall","src":"4834:47:27"},"nodeType":"YulExpressionStatement","src":"4834:47:27"},{"nodeType":"YulAssignment","src":"4890:116:27","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4992:6:27"},{"name":"tail","nodeType":"YulIdentifier","src":"5001:4:27"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4898:93:27"},"nodeType":"YulFunctionCall","src":"4898:108:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4890:4:27"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4760:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4772:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4783:4:27","type":""}],"src":"4640:373:27"},{"body":{"nodeType":"YulBlock","src":"5064:32:27","statements":[{"nodeType":"YulAssignment","src":"5074:16:27","value":{"name":"value","nodeType":"YulIdentifier","src":"5085:5:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5074:7:27"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5046:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5056:7:27","type":""}],"src":"5019:77:27"},{"body":{"nodeType":"YulBlock","src":"5145:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"5202:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5211:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5214:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5204:6:27"},"nodeType":"YulFunctionCall","src":"5204:12:27"},"nodeType":"YulExpressionStatement","src":"5204:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5168:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5193:5:27"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"5175:17:27"},"nodeType":"YulFunctionCall","src":"5175:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5165:2:27"},"nodeType":"YulFunctionCall","src":"5165:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5158:6:27"},"nodeType":"YulFunctionCall","src":"5158:43:27"},"nodeType":"YulIf","src":"5155:63:27"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5138:5:27","type":""}],"src":"5102:122:27"},{"body":{"nodeType":"YulBlock","src":"5282:87:27","statements":[{"nodeType":"YulAssignment","src":"5292:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5314:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5301:12:27"},"nodeType":"YulFunctionCall","src":"5301:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5292:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5357:5:27"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"5330:26:27"},"nodeType":"YulFunctionCall","src":"5330:33:27"},"nodeType":"YulExpressionStatement","src":"5330:33:27"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5260:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"5268:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5276:5:27","type":""}],"src":"5230:139:27"},{"body":{"nodeType":"YulBlock","src":"5441:263:27","statements":[{"body":{"nodeType":"YulBlock","src":"5487:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5489:77:27"},"nodeType":"YulFunctionCall","src":"5489:79:27"},"nodeType":"YulExpressionStatement","src":"5489:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5462:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"5471:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5458:3:27"},"nodeType":"YulFunctionCall","src":"5458:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"5483:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5454:3:27"},"nodeType":"YulFunctionCall","src":"5454:32:27"},"nodeType":"YulIf","src":"5451:119:27"},{"nodeType":"YulBlock","src":"5580:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"5595:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"5609:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5599:6:27","type":""}]},{"nodeType":"YulAssignment","src":"5624:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5659:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"5670:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5655:3:27"},"nodeType":"YulFunctionCall","src":"5655:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5679:7:27"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"5634:20:27"},"nodeType":"YulFunctionCall","src":"5634:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5624:6:27"}]}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5411:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5422:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5434:6:27","type":""}],"src":"5375:329:27"},{"body":{"nodeType":"YulBlock","src":"5775:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5792:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5815:5:27"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"5797:17:27"},"nodeType":"YulFunctionCall","src":"5797:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5785:6:27"},"nodeType":"YulFunctionCall","src":"5785:37:27"},"nodeType":"YulExpressionStatement","src":"5785:37:27"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5763:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5770:3:27","type":""}],"src":"5710:118:27"},{"body":{"nodeType":"YulBlock","src":"5932:124:27","statements":[{"nodeType":"YulAssignment","src":"5942:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5954:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"5965:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5950:3:27"},"nodeType":"YulFunctionCall","src":"5950:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5942:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6022:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6035:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"6046:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6031:3:27"},"nodeType":"YulFunctionCall","src":"6031:17:27"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"5978:43:27"},"nodeType":"YulFunctionCall","src":"5978:71:27"},"nodeType":"YulExpressionStatement","src":"5978:71:27"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5904:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5916:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5927:4:27","type":""}],"src":"5834:222:27"},{"body":{"nodeType":"YulBlock","src":"6128:263:27","statements":[{"body":{"nodeType":"YulBlock","src":"6174:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6176:77:27"},"nodeType":"YulFunctionCall","src":"6176:79:27"},"nodeType":"YulExpressionStatement","src":"6176:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6149:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"6158:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6145:3:27"},"nodeType":"YulFunctionCall","src":"6145:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"6170:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6141:3:27"},"nodeType":"YulFunctionCall","src":"6141:32:27"},"nodeType":"YulIf","src":"6138:119:27"},{"nodeType":"YulBlock","src":"6267:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"6282:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"6296:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6286:6:27","type":""}]},{"nodeType":"YulAssignment","src":"6311:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6346:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"6357:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6342:3:27"},"nodeType":"YulFunctionCall","src":"6342:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6366:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"6321:20:27"},"nodeType":"YulFunctionCall","src":"6321:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6311:6:27"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6098:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6109:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6121:6:27","type":""}],"src":"6062:329:27"},{"body":{"nodeType":"YulBlock","src":"6480:391:27","statements":[{"body":{"nodeType":"YulBlock","src":"6526:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6528:77:27"},"nodeType":"YulFunctionCall","src":"6528:79:27"},"nodeType":"YulExpressionStatement","src":"6528:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6501:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"6510:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6497:3:27"},"nodeType":"YulFunctionCall","src":"6497:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"6522:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6493:3:27"},"nodeType":"YulFunctionCall","src":"6493:32:27"},"nodeType":"YulIf","src":"6490:119:27"},{"nodeType":"YulBlock","src":"6619:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"6634:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"6648:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6638:6:27","type":""}]},{"nodeType":"YulAssignment","src":"6663:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6698:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"6709:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6694:3:27"},"nodeType":"YulFunctionCall","src":"6694:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6718:7:27"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"6673:20:27"},"nodeType":"YulFunctionCall","src":"6673:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6663:6:27"}]}]},{"nodeType":"YulBlock","src":"6746:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"6761:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"6775:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6765:6:27","type":""}]},{"nodeType":"YulAssignment","src":"6791:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6826:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"6837:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6822:3:27"},"nodeType":"YulFunctionCall","src":"6822:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6846:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6801:20:27"},"nodeType":"YulFunctionCall","src":"6801:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6791:6:27"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6442:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6453:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6465:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6473:6:27","type":""}],"src":"6397:474:27"},{"body":{"nodeType":"YulBlock","src":"6943:263:27","statements":[{"body":{"nodeType":"YulBlock","src":"6989:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6991:77:27"},"nodeType":"YulFunctionCall","src":"6991:79:27"},"nodeType":"YulExpressionStatement","src":"6991:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6964:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"6973:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6960:3:27"},"nodeType":"YulFunctionCall","src":"6960:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"6985:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6956:3:27"},"nodeType":"YulFunctionCall","src":"6956:32:27"},"nodeType":"YulIf","src":"6953:119:27"},{"nodeType":"YulBlock","src":"7082:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"7097:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"7111:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7101:6:27","type":""}]},{"nodeType":"YulAssignment","src":"7126:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7161:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"7172:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7157:3:27"},"nodeType":"YulFunctionCall","src":"7157:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7181:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7136:20:27"},"nodeType":"YulFunctionCall","src":"7136:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7126:6:27"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6913:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6924:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6936:6:27","type":""}],"src":"6877:329:27"},{"body":{"nodeType":"YulBlock","src":"7277:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7294:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7317:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"7299:17:27"},"nodeType":"YulFunctionCall","src":"7299:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7287:6:27"},"nodeType":"YulFunctionCall","src":"7287:37:27"},"nodeType":"YulExpressionStatement","src":"7287:37:27"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7265:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7272:3:27","type":""}],"src":"7212:118:27"},{"body":{"nodeType":"YulBlock","src":"7434:124:27","statements":[{"nodeType":"YulAssignment","src":"7444:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7456:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"7467:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7452:3:27"},"nodeType":"YulFunctionCall","src":"7452:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7444:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7524:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7537:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"7548:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7533:3:27"},"nodeType":"YulFunctionCall","src":"7533:17:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"7480:43:27"},"nodeType":"YulFunctionCall","src":"7480:71:27"},"nodeType":"YulExpressionStatement","src":"7480:71:27"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7406:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7418:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7429:4:27","type":""}],"src":"7336:222:27"},{"body":{"nodeType":"YulBlock","src":"7647:391:27","statements":[{"body":{"nodeType":"YulBlock","src":"7693:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7695:77:27"},"nodeType":"YulFunctionCall","src":"7695:79:27"},"nodeType":"YulExpressionStatement","src":"7695:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7668:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"7677:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7664:3:27"},"nodeType":"YulFunctionCall","src":"7664:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"7689:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7660:3:27"},"nodeType":"YulFunctionCall","src":"7660:32:27"},"nodeType":"YulIf","src":"7657:119:27"},{"nodeType":"YulBlock","src":"7786:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"7801:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"7815:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7805:6:27","type":""}]},{"nodeType":"YulAssignment","src":"7830:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7865:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"7876:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7861:3:27"},"nodeType":"YulFunctionCall","src":"7861:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7885:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7840:20:27"},"nodeType":"YulFunctionCall","src":"7840:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7830:6:27"}]}]},{"nodeType":"YulBlock","src":"7913:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"7928:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"7942:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7932:6:27","type":""}]},{"nodeType":"YulAssignment","src":"7958:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7993:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"8004:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7989:3:27"},"nodeType":"YulFunctionCall","src":"7989:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8013:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7968:20:27"},"nodeType":"YulFunctionCall","src":"7968:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7958:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7609:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7620:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7632:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7640:6:27","type":""}],"src":"7564:474:27"},{"body":{"nodeType":"YulBlock","src":"8087:43:27","statements":[{"nodeType":"YulAssignment","src":"8097:27:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8112:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"8119:4:27","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8108:3:27"},"nodeType":"YulFunctionCall","src":"8108:16:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"8097:7:27"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8069:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"8079:7:27","type":""}],"src":"8044:86:27"},{"body":{"nodeType":"YulBlock","src":"8177:77:27","statements":[{"body":{"nodeType":"YulBlock","src":"8232:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8241:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8244:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8234:6:27"},"nodeType":"YulFunctionCall","src":"8234:12:27"},"nodeType":"YulExpressionStatement","src":"8234:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8200:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8223:5:27"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"8207:15:27"},"nodeType":"YulFunctionCall","src":"8207:22:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8197:2:27"},"nodeType":"YulFunctionCall","src":"8197:33:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8190:6:27"},"nodeType":"YulFunctionCall","src":"8190:41:27"},"nodeType":"YulIf","src":"8187:61:27"}]},"name":"validator_revert_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8170:5:27","type":""}],"src":"8136:118:27"},{"body":{"nodeType":"YulBlock","src":"8310:85:27","statements":[{"nodeType":"YulAssignment","src":"8320:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8342:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8329:12:27"},"nodeType":"YulFunctionCall","src":"8329:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"8320:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8383:5:27"}],"functionName":{"name":"validator_revert_t_uint8","nodeType":"YulIdentifier","src":"8358:24:27"},"nodeType":"YulFunctionCall","src":"8358:31:27"},"nodeType":"YulExpressionStatement","src":"8358:31:27"}]},"name":"abi_decode_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8288:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"8296:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"8304:5:27","type":""}],"src":"8260:135:27"},{"body":{"nodeType":"YulBlock","src":"8441:76:27","statements":[{"body":{"nodeType":"YulBlock","src":"8495:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8504:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8507:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8497:6:27"},"nodeType":"YulFunctionCall","src":"8497:12:27"},"nodeType":"YulExpressionStatement","src":"8497:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8464:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8486:5:27"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"8471:14:27"},"nodeType":"YulFunctionCall","src":"8471:21:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8461:2:27"},"nodeType":"YulFunctionCall","src":"8461:32:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8454:6:27"},"nodeType":"YulFunctionCall","src":"8454:40:27"},"nodeType":"YulIf","src":"8451:60:27"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8434:5:27","type":""}],"src":"8401:116:27"},{"body":{"nodeType":"YulBlock","src":"8572:84:27","statements":[{"nodeType":"YulAssignment","src":"8582:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8604:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8591:12:27"},"nodeType":"YulFunctionCall","src":"8591:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"8582:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8644:5:27"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"8620:23:27"},"nodeType":"YulFunctionCall","src":"8620:30:27"},"nodeType":"YulExpressionStatement","src":"8620:30:27"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8550:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"8558:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"8566:5:27","type":""}],"src":"8523:133:27"},{"body":{"nodeType":"YulBlock","src":"8825:1030:27","statements":[{"body":{"nodeType":"YulBlock","src":"8872:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8874:77:27"},"nodeType":"YulFunctionCall","src":"8874:79:27"},"nodeType":"YulExpressionStatement","src":"8874:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8846:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"8855:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8842:3:27"},"nodeType":"YulFunctionCall","src":"8842:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"8867:3:27","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8838:3:27"},"nodeType":"YulFunctionCall","src":"8838:33:27"},"nodeType":"YulIf","src":"8835:120:27"},{"nodeType":"YulBlock","src":"8965:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"8980:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"8994:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8984:6:27","type":""}]},{"nodeType":"YulAssignment","src":"9009:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9044:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"9055:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9040:3:27"},"nodeType":"YulFunctionCall","src":"9040:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9064:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9019:20:27"},"nodeType":"YulFunctionCall","src":"9019:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9009:6:27"}]}]},{"nodeType":"YulBlock","src":"9092:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"9107:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"9121:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9111:6:27","type":""}]},{"nodeType":"YulAssignment","src":"9137:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9172:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"9183:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9168:3:27"},"nodeType":"YulFunctionCall","src":"9168:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9192:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9147:20:27"},"nodeType":"YulFunctionCall","src":"9147:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9137:6:27"}]}]},{"nodeType":"YulBlock","src":"9220:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"9235:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"9249:2:27","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9239:6:27","type":""}]},{"nodeType":"YulAssignment","src":"9265:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9300:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"9311:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9296:3:27"},"nodeType":"YulFunctionCall","src":"9296:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9320:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9275:20:27"},"nodeType":"YulFunctionCall","src":"9275:53:27"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9265:6:27"}]}]},{"nodeType":"YulBlock","src":"9348:116:27","statements":[{"nodeType":"YulVariableDeclaration","src":"9363:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"9377:2:27","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9367:6:27","type":""}]},{"nodeType":"YulAssignment","src":"9393:61:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9426:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"9437:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9422:3:27"},"nodeType":"YulFunctionCall","src":"9422:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9446:7:27"}],"functionName":{"name":"abi_decode_t_uint8","nodeType":"YulIdentifier","src":"9403:18:27"},"nodeType":"YulFunctionCall","src":"9403:51:27"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"9393:6:27"}]}]},{"nodeType":"YulBlock","src":"9474:119:27","statements":[{"nodeType":"YulVariableDeclaration","src":"9489:17:27","value":{"kind":"number","nodeType":"YulLiteral","src":"9503:3:27","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9493:6:27","type":""}]},{"nodeType":"YulAssignment","src":"9520:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9555:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"9566:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9551:3:27"},"nodeType":"YulFunctionCall","src":"9551:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9575:7:27"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"9530:20:27"},"nodeType":"YulFunctionCall","src":"9530:53:27"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"9520:6:27"}]}]},{"nodeType":"YulBlock","src":"9603:119:27","statements":[{"nodeType":"YulVariableDeclaration","src":"9618:17:27","value":{"kind":"number","nodeType":"YulLiteral","src":"9632:3:27","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9622:6:27","type":""}]},{"nodeType":"YulAssignment","src":"9649:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9684:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"9695:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9680:3:27"},"nodeType":"YulFunctionCall","src":"9680:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9704:7:27"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"9659:20:27"},"nodeType":"YulFunctionCall","src":"9659:53:27"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"9649:6:27"}]}]},{"nodeType":"YulBlock","src":"9732:116:27","statements":[{"nodeType":"YulVariableDeclaration","src":"9747:17:27","value":{"kind":"number","nodeType":"YulLiteral","src":"9761:3:27","type":"","value":"192"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9751:6:27","type":""}]},{"nodeType":"YulAssignment","src":"9778:60:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9810:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"9821:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9806:3:27"},"nodeType":"YulFunctionCall","src":"9806:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9830:7:27"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"9788:17:27"},"nodeType":"YulFunctionCall","src":"9788:50:27"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"9778:6:27"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint256t_uint8t_bytes32t_bytes32t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8747:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8758:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8770:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8778:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8786:6:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8794:6:27","type":""},{"name":"value4","nodeType":"YulTypedName","src":"8802:6:27","type":""},{"name":"value5","nodeType":"YulTypedName","src":"8810:6:27","type":""},{"name":"value6","nodeType":"YulTypedName","src":"8818:6:27","type":""}],"src":"8662:1193:27"},{"body":{"nodeType":"YulBlock","src":"10010:904:27","statements":[{"body":{"nodeType":"YulBlock","src":"10057:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10059:77:27"},"nodeType":"YulFunctionCall","src":"10059:79:27"},"nodeType":"YulExpressionStatement","src":"10059:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10031:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"10040:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10027:3:27"},"nodeType":"YulFunctionCall","src":"10027:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"10052:3:27","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10023:3:27"},"nodeType":"YulFunctionCall","src":"10023:33:27"},"nodeType":"YulIf","src":"10020:120:27"},{"nodeType":"YulBlock","src":"10150:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"10165:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"10179:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10169:6:27","type":""}]},{"nodeType":"YulAssignment","src":"10194:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10229:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"10240:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10225:3:27"},"nodeType":"YulFunctionCall","src":"10225:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10249:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10204:20:27"},"nodeType":"YulFunctionCall","src":"10204:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10194:6:27"}]}]},{"nodeType":"YulBlock","src":"10277:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"10292:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"10306:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10296:6:27","type":""}]},{"nodeType":"YulAssignment","src":"10322:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10357:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"10368:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10353:3:27"},"nodeType":"YulFunctionCall","src":"10353:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10377:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10332:20:27"},"nodeType":"YulFunctionCall","src":"10332:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10322:6:27"}]}]},{"nodeType":"YulBlock","src":"10405:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"10420:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"10434:2:27","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10424:6:27","type":""}]},{"nodeType":"YulAssignment","src":"10450:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10485:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"10496:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10481:3:27"},"nodeType":"YulFunctionCall","src":"10481:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10505:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10460:20:27"},"nodeType":"YulFunctionCall","src":"10460:53:27"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"10450:6:27"}]}]},{"nodeType":"YulBlock","src":"10533:116:27","statements":[{"nodeType":"YulVariableDeclaration","src":"10548:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"10562:2:27","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10552:6:27","type":""}]},{"nodeType":"YulAssignment","src":"10578:61:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10611:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"10622:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10607:3:27"},"nodeType":"YulFunctionCall","src":"10607:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10631:7:27"}],"functionName":{"name":"abi_decode_t_uint8","nodeType":"YulIdentifier","src":"10588:18:27"},"nodeType":"YulFunctionCall","src":"10588:51:27"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"10578:6:27"}]}]},{"nodeType":"YulBlock","src":"10659:119:27","statements":[{"nodeType":"YulVariableDeclaration","src":"10674:17:27","value":{"kind":"number","nodeType":"YulLiteral","src":"10688:3:27","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10678:6:27","type":""}]},{"nodeType":"YulAssignment","src":"10705:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10740:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"10751:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10736:3:27"},"nodeType":"YulFunctionCall","src":"10736:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10760:7:27"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"10715:20:27"},"nodeType":"YulFunctionCall","src":"10715:53:27"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"10705:6:27"}]}]},{"nodeType":"YulBlock","src":"10788:119:27","statements":[{"nodeType":"YulVariableDeclaration","src":"10803:17:27","value":{"kind":"number","nodeType":"YulLiteral","src":"10817:3:27","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10807:6:27","type":""}]},{"nodeType":"YulAssignment","src":"10834:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10869:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"10880:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10865:3:27"},"nodeType":"YulFunctionCall","src":"10865:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10889:7:27"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"10844:20:27"},"nodeType":"YulFunctionCall","src":"10844:53:27"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"10834:6:27"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint256t_uint8t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9940:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9951:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9963:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9971:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9979:6:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9987:6:27","type":""},{"name":"value4","nodeType":"YulTypedName","src":"9995:6:27","type":""},{"name":"value5","nodeType":"YulTypedName","src":"10003:6:27","type":""}],"src":"9861:1053:27"},{"body":{"nodeType":"YulBlock","src":"11071:906:27","statements":[{"body":{"nodeType":"YulBlock","src":"11118:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"11120:77:27"},"nodeType":"YulFunctionCall","src":"11120:79:27"},"nodeType":"YulExpressionStatement","src":"11120:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11092:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"11101:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11088:3:27"},"nodeType":"YulFunctionCall","src":"11088:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"11113:3:27","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11084:3:27"},"nodeType":"YulFunctionCall","src":"11084:33:27"},"nodeType":"YulIf","src":"11081:120:27"},{"nodeType":"YulBlock","src":"11211:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"11226:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"11240:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11230:6:27","type":""}]},{"nodeType":"YulAssignment","src":"11255:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11290:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"11301:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11286:3:27"},"nodeType":"YulFunctionCall","src":"11286:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11310:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"11265:20:27"},"nodeType":"YulFunctionCall","src":"11265:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11255:6:27"}]}]},{"nodeType":"YulBlock","src":"11338:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"11353:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"11367:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11357:6:27","type":""}]},{"nodeType":"YulAssignment","src":"11383:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11418:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"11429:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11414:3:27"},"nodeType":"YulFunctionCall","src":"11414:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11438:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"11393:20:27"},"nodeType":"YulFunctionCall","src":"11393:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11383:6:27"}]}]},{"nodeType":"YulBlock","src":"11466:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"11481:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"11495:2:27","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11485:6:27","type":""}]},{"nodeType":"YulAssignment","src":"11511:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11546:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"11557:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11542:3:27"},"nodeType":"YulFunctionCall","src":"11542:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11566:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"11521:20:27"},"nodeType":"YulFunctionCall","src":"11521:53:27"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"11511:6:27"}]}]},{"nodeType":"YulBlock","src":"11594:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"11609:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"11623:2:27","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11613:6:27","type":""}]},{"nodeType":"YulAssignment","src":"11639:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11674:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"11685:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11670:3:27"},"nodeType":"YulFunctionCall","src":"11670:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11694:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"11649:20:27"},"nodeType":"YulFunctionCall","src":"11649:53:27"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"11639:6:27"}]}]},{"nodeType":"YulBlock","src":"11722:119:27","statements":[{"nodeType":"YulVariableDeclaration","src":"11737:17:27","value":{"kind":"number","nodeType":"YulLiteral","src":"11751:3:27","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11741:6:27","type":""}]},{"nodeType":"YulAssignment","src":"11768:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11803:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"11814:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11799:3:27"},"nodeType":"YulFunctionCall","src":"11799:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11823:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"11778:20:27"},"nodeType":"YulFunctionCall","src":"11778:53:27"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"11768:6:27"}]}]},{"nodeType":"YulBlock","src":"11851:119:27","statements":[{"nodeType":"YulVariableDeclaration","src":"11866:17:27","value":{"kind":"number","nodeType":"YulLiteral","src":"11880:3:27","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11870:6:27","type":""}]},{"nodeType":"YulAssignment","src":"11897:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11932:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"11943:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11928:3:27"},"nodeType":"YulFunctionCall","src":"11928:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11952:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"11907:20:27"},"nodeType":"YulFunctionCall","src":"11907:53:27"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"11897:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_addresst_uint256t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11001:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11012:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11024:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11032:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11040:6:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11048:6:27","type":""},{"name":"value4","nodeType":"YulTypedName","src":"11056:6:27","type":""},{"name":"value5","nodeType":"YulTypedName","src":"11064:6:27","type":""}],"src":"10920:1057:27"},{"body":{"nodeType":"YulBlock","src":"12215:531:27","statements":[{"nodeType":"YulAssignment","src":"12225:27:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12237:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12248:3:27","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12233:3:27"},"nodeType":"YulFunctionCall","src":"12233:19:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12225:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12306:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12319:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12330:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12315:3:27"},"nodeType":"YulFunctionCall","src":"12315:17:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"12262:43:27"},"nodeType":"YulFunctionCall","src":"12262:71:27"},"nodeType":"YulExpressionStatement","src":"12262:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12387:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12400:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12411:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12396:3:27"},"nodeType":"YulFunctionCall","src":"12396:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"12343:43:27"},"nodeType":"YulFunctionCall","src":"12343:72:27"},"nodeType":"YulExpressionStatement","src":"12343:72:27"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"12469:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12482:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12493:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12478:3:27"},"nodeType":"YulFunctionCall","src":"12478:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"12425:43:27"},"nodeType":"YulFunctionCall","src":"12425:72:27"},"nodeType":"YulExpressionStatement","src":"12425:72:27"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"12551:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12564:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12575:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12560:3:27"},"nodeType":"YulFunctionCall","src":"12560:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"12507:43:27"},"nodeType":"YulFunctionCall","src":"12507:72:27"},"nodeType":"YulExpressionStatement","src":"12507:72:27"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"12633:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12646:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12657:3:27","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12642:3:27"},"nodeType":"YulFunctionCall","src":"12642:19:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"12589:43:27"},"nodeType":"YulFunctionCall","src":"12589:73:27"},"nodeType":"YulExpressionStatement","src":"12589:73:27"},{"expression":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"12710:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12723:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12734:3:27","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12719:3:27"},"nodeType":"YulFunctionCall","src":"12719:19:27"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"12672:37:27"},"nodeType":"YulFunctionCall","src":"12672:67:27"},"nodeType":"YulExpressionStatement","src":"12672:67:27"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12147:9:27","type":""},{"name":"value5","nodeType":"YulTypedName","src":"12159:6:27","type":""},{"name":"value4","nodeType":"YulTypedName","src":"12167:6:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12175:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12183:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12191:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12199:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12210:4:27","type":""}],"src":"11983:763:27"},{"body":{"nodeType":"YulBlock","src":"12878:206:27","statements":[{"nodeType":"YulAssignment","src":"12888:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12900:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12911:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12896:3:27"},"nodeType":"YulFunctionCall","src":"12896:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12888:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12968:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12981:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12992:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12977:3:27"},"nodeType":"YulFunctionCall","src":"12977:17:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"12924:43:27"},"nodeType":"YulFunctionCall","src":"12924:71:27"},"nodeType":"YulExpressionStatement","src":"12924:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13049:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13062:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"13073:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13058:3:27"},"nodeType":"YulFunctionCall","src":"13058:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"13005:43:27"},"nodeType":"YulFunctionCall","src":"13005:72:27"},"nodeType":"YulExpressionStatement","src":"13005:72:27"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12842:9:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12854:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12862:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12873:4:27","type":""}],"src":"12752:332:27"},{"body":{"nodeType":"YulBlock","src":"13118:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13135:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13138:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13128:6:27"},"nodeType":"YulFunctionCall","src":"13128:88:27"},"nodeType":"YulExpressionStatement","src":"13128:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13232:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13235:4:27","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13225:6:27"},"nodeType":"YulFunctionCall","src":"13225:15:27"},"nodeType":"YulExpressionStatement","src":"13225:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13256:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13259:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13249:6:27"},"nodeType":"YulFunctionCall","src":"13249:15:27"},"nodeType":"YulExpressionStatement","src":"13249:15:27"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"13090:180:27"},{"body":{"nodeType":"YulBlock","src":"13319:190:27","statements":[{"nodeType":"YulAssignment","src":"13329:33:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13356:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"13338:17:27"},"nodeType":"YulFunctionCall","src":"13338:24:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"13329:5:27"}]},{"body":{"nodeType":"YulBlock","src":"13452:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"13454:16:27"},"nodeType":"YulFunctionCall","src":"13454:18:27"},"nodeType":"YulExpressionStatement","src":"13454:18:27"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13377:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"13384:66:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"13374:2:27"},"nodeType":"YulFunctionCall","src":"13374:77:27"},"nodeType":"YulIf","src":"13371:103:27"},{"nodeType":"YulAssignment","src":"13483:20:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13494:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"13501:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13490:3:27"},"nodeType":"YulFunctionCall","src":"13490:13:27"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"13483:3:27"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13305:5:27","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"13315:3:27","type":""}],"src":"13276:233:27"},{"body":{"nodeType":"YulBlock","src":"13543:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13560:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13563:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13553:6:27"},"nodeType":"YulFunctionCall","src":"13553:88:27"},"nodeType":"YulExpressionStatement","src":"13553:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13657:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13660:4:27","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13650:6:27"},"nodeType":"YulFunctionCall","src":"13650:15:27"},"nodeType":"YulExpressionStatement","src":"13650:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13681:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13684:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13674:6:27"},"nodeType":"YulFunctionCall","src":"13674:15:27"},"nodeType":"YulExpressionStatement","src":"13674:15:27"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"13515:180:27"},{"body":{"nodeType":"YulBlock","src":"13729:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13746:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13749:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13739:6:27"},"nodeType":"YulFunctionCall","src":"13739:88:27"},"nodeType":"YulExpressionStatement","src":"13739:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13843:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13846:4:27","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13836:6:27"},"nodeType":"YulFunctionCall","src":"13836:15:27"},"nodeType":"YulExpressionStatement","src":"13836:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13867:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13870:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13860:6:27"},"nodeType":"YulFunctionCall","src":"13860:15:27"},"nodeType":"YulExpressionStatement","src":"13860:15:27"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"13701:180:27"},{"body":{"nodeType":"YulBlock","src":"13983:73:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14000:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"14005:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13993:6:27"},"nodeType":"YulFunctionCall","src":"13993:19:27"},"nodeType":"YulExpressionStatement","src":"13993:19:27"},{"nodeType":"YulAssignment","src":"14021:29:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14040:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"14045:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14036:3:27"},"nodeType":"YulFunctionCall","src":"14036:14:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"14021:11:27"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13955:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"13960:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"13971:11:27","type":""}],"src":"13887:169:27"},{"body":{"nodeType":"YulBlock","src":"14168:125:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14190:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"14198:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14186:3:27"},"nodeType":"YulFunctionCall","src":"14186:14:27"},{"hexValue":"4d75737420686176652061646d696e20726f6c6520746f20706572666f726d20","kind":"string","nodeType":"YulLiteral","src":"14202:34:27","type":"","value":"Must have admin role to perform "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14179:6:27"},"nodeType":"YulFunctionCall","src":"14179:58:27"},"nodeType":"YulExpressionStatement","src":"14179:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14258:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"14266:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14254:3:27"},"nodeType":"YulFunctionCall","src":"14254:15:27"},{"hexValue":"7468697320616374696f6e2e","kind":"string","nodeType":"YulLiteral","src":"14271:14:27","type":"","value":"this action."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14247:6:27"},"nodeType":"YulFunctionCall","src":"14247:39:27"},"nodeType":"YulExpressionStatement","src":"14247:39:27"}]},"name":"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14160:6:27","type":""}],"src":"14062:231:27"},{"body":{"nodeType":"YulBlock","src":"14445:220:27","statements":[{"nodeType":"YulAssignment","src":"14455:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14521:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"14526:2:27","type":"","value":"44"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14462:58:27"},"nodeType":"YulFunctionCall","src":"14462:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14455:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14627:3:27"}],"functionName":{"name":"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","nodeType":"YulIdentifier","src":"14538:88:27"},"nodeType":"YulFunctionCall","src":"14538:93:27"},"nodeType":"YulExpressionStatement","src":"14538:93:27"},{"nodeType":"YulAssignment","src":"14640:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14651:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"14656:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14647:3:27"},"nodeType":"YulFunctionCall","src":"14647:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14640:3:27"}]}]},"name":"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14433:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14441:3:27","type":""}],"src":"14299:366:27"},{"body":{"nodeType":"YulBlock","src":"14842:248:27","statements":[{"nodeType":"YulAssignment","src":"14852:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14864:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"14875:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14860:3:27"},"nodeType":"YulFunctionCall","src":"14860:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14852:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14899:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"14910:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14895:3:27"},"nodeType":"YulFunctionCall","src":"14895:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14918:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"14924:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14914:3:27"},"nodeType":"YulFunctionCall","src":"14914:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14888:6:27"},"nodeType":"YulFunctionCall","src":"14888:47:27"},"nodeType":"YulExpressionStatement","src":"14888:47:27"},{"nodeType":"YulAssignment","src":"14944:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15078:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14952:124:27"},"nodeType":"YulFunctionCall","src":"14952:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14944:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14822:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14837:4:27","type":""}],"src":"14671:419:27"},{"body":{"nodeType":"YulBlock","src":"15144:300:27","statements":[{"nodeType":"YulAssignment","src":"15154:25:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15177:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"15159:17:27"},"nodeType":"YulFunctionCall","src":"15159:20:27"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"15154:1:27"}]},{"nodeType":"YulAssignment","src":"15188:25:27","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"15211:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"15193:17:27"},"nodeType":"YulFunctionCall","src":"15193:20:27"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"15188:1:27"}]},{"body":{"nodeType":"YulBlock","src":"15386:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"15388:16:27"},"nodeType":"YulFunctionCall","src":"15388:18:27"},"nodeType":"YulExpressionStatement","src":"15388:18:27"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15298:1:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15291:6:27"},"nodeType":"YulFunctionCall","src":"15291:9:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15284:6:27"},"nodeType":"YulFunctionCall","src":"15284:17:27"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"15306:1:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15313:66:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"x","nodeType":"YulIdentifier","src":"15381:1:27"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"15309:3:27"},"nodeType":"YulFunctionCall","src":"15309:74:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15303:2:27"},"nodeType":"YulFunctionCall","src":"15303:81:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15280:3:27"},"nodeType":"YulFunctionCall","src":"15280:105:27"},"nodeType":"YulIf","src":"15277:131:27"},{"nodeType":"YulAssignment","src":"15418:20:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15433:1:27"},{"name":"y","nodeType":"YulIdentifier","src":"15436:1:27"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"15429:3:27"},"nodeType":"YulFunctionCall","src":"15429:9:27"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"15418:7:27"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"15127:1:27","type":""},{"name":"y","nodeType":"YulTypedName","src":"15130:1:27","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"15136:7:27","type":""}],"src":"15096:348:27"},{"body":{"nodeType":"YulBlock","src":"15556:128:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15578:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"15586:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15574:3:27"},"nodeType":"YulFunctionCall","src":"15574:14:27"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"15590:34:27","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15567:6:27"},"nodeType":"YulFunctionCall","src":"15567:58:27"},"nodeType":"YulExpressionStatement","src":"15567:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15646:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"15654:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15642:3:27"},"nodeType":"YulFunctionCall","src":"15642:15:27"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"15659:17:27","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15635:6:27"},"nodeType":"YulFunctionCall","src":"15635:42:27"},"nodeType":"YulExpressionStatement","src":"15635:42:27"}]},"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15548:6:27","type":""}],"src":"15450:234:27"},{"body":{"nodeType":"YulBlock","src":"15836:220:27","statements":[{"nodeType":"YulAssignment","src":"15846:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15912:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"15917:2:27","type":"","value":"47"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15853:58:27"},"nodeType":"YulFunctionCall","src":"15853:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15846:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16018:3:27"}],"functionName":{"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulIdentifier","src":"15929:88:27"},"nodeType":"YulFunctionCall","src":"15929:93:27"},"nodeType":"YulExpressionStatement","src":"15929:93:27"},{"nodeType":"YulAssignment","src":"16031:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16042:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"16047:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16038:3:27"},"nodeType":"YulFunctionCall","src":"16038:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16031:3:27"}]}]},"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15824:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15832:3:27","type":""}],"src":"15690:366:27"},{"body":{"nodeType":"YulBlock","src":"16233:248:27","statements":[{"nodeType":"YulAssignment","src":"16243:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16255:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"16266:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16251:3:27"},"nodeType":"YulFunctionCall","src":"16251:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16243:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16290:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"16301:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16286:3:27"},"nodeType":"YulFunctionCall","src":"16286:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16309:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"16315:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16305:3:27"},"nodeType":"YulFunctionCall","src":"16305:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16279:6:27"},"nodeType":"YulFunctionCall","src":"16279:47:27"},"nodeType":"YulExpressionStatement","src":"16279:47:27"},{"nodeType":"YulAssignment","src":"16335:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16469:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16343:124:27"},"nodeType":"YulFunctionCall","src":"16343:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16335:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16213:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16228:4:27","type":""}],"src":"16062:419:27"},{"body":{"nodeType":"YulBlock","src":"16550:80:27","statements":[{"nodeType":"YulAssignment","src":"16560:22:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"16575:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16569:5:27"},"nodeType":"YulFunctionCall","src":"16569:13:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"16560:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16618:5:27"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"16591:26:27"},"nodeType":"YulFunctionCall","src":"16591:33:27"},"nodeType":"YulExpressionStatement","src":"16591:33:27"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"16528:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"16536:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"16544:5:27","type":""}],"src":"16487:143:27"},{"body":{"nodeType":"YulBlock","src":"16713:274:27","statements":[{"body":{"nodeType":"YulBlock","src":"16759:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"16761:77:27"},"nodeType":"YulFunctionCall","src":"16761:79:27"},"nodeType":"YulExpressionStatement","src":"16761:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"16734:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"16743:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16730:3:27"},"nodeType":"YulFunctionCall","src":"16730:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"16755:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"16726:3:27"},"nodeType":"YulFunctionCall","src":"16726:32:27"},"nodeType":"YulIf","src":"16723:119:27"},{"nodeType":"YulBlock","src":"16852:128:27","statements":[{"nodeType":"YulVariableDeclaration","src":"16867:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"16881:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"16871:6:27","type":""}]},{"nodeType":"YulAssignment","src":"16896:74:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16942:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"16953:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16938:3:27"},"nodeType":"YulFunctionCall","src":"16938:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"16962:7:27"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"16906:31:27"},"nodeType":"YulFunctionCall","src":"16906:64:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"16896:6:27"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16683:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"16694:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"16706:6:27","type":""}],"src":"16636:351:27"},{"body":{"nodeType":"YulBlock","src":"17038:149:27","statements":[{"nodeType":"YulAssignment","src":"17048:25:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17071:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"17053:17:27"},"nodeType":"YulFunctionCall","src":"17053:20:27"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"17048:1:27"}]},{"nodeType":"YulAssignment","src":"17082:25:27","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"17105:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"17087:17:27"},"nodeType":"YulFunctionCall","src":"17087:20:27"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"17082:1:27"}]},{"nodeType":"YulAssignment","src":"17116:17:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17128:1:27"},{"name":"y","nodeType":"YulIdentifier","src":"17131:1:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17124:3:27"},"nodeType":"YulFunctionCall","src":"17124:9:27"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"17116:4:27"}]},{"body":{"nodeType":"YulBlock","src":"17158:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"17160:16:27"},"nodeType":"YulFunctionCall","src":"17160:18:27"},"nodeType":"YulExpressionStatement","src":"17160:18:27"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"17149:4:27"},{"name":"x","nodeType":"YulIdentifier","src":"17155:1:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17146:2:27"},"nodeType":"YulFunctionCall","src":"17146:11:27"},"nodeType":"YulIf","src":"17143:37:27"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"17024:1:27","type":""},{"name":"y","nodeType":"YulTypedName","src":"17027:1:27","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"17033:4:27","type":""}],"src":"16993:194:27"},{"body":{"nodeType":"YulBlock","src":"17237:147:27","statements":[{"nodeType":"YulAssignment","src":"17247:25:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17270:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"17252:17:27"},"nodeType":"YulFunctionCall","src":"17252:20:27"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"17247:1:27"}]},{"nodeType":"YulAssignment","src":"17281:25:27","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"17304:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"17286:17:27"},"nodeType":"YulFunctionCall","src":"17286:20:27"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"17281:1:27"}]},{"nodeType":"YulAssignment","src":"17315:16:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17326:1:27"},{"name":"y","nodeType":"YulIdentifier","src":"17329:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17322:3:27"},"nodeType":"YulFunctionCall","src":"17322:9:27"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"17315:3:27"}]},{"body":{"nodeType":"YulBlock","src":"17355:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"17357:16:27"},"nodeType":"YulFunctionCall","src":"17357:18:27"},"nodeType":"YulExpressionStatement","src":"17357:18:27"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17347:1:27"},{"name":"sum","nodeType":"YulIdentifier","src":"17350:3:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17344:2:27"},"nodeType":"YulFunctionCall","src":"17344:10:27"},"nodeType":"YulIf","src":"17341:36:27"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"17224:1:27","type":""},{"name":"y","nodeType":"YulTypedName","src":"17227:1:27","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"17233:3:27","type":""}],"src":"17193:191:27"},{"body":{"nodeType":"YulBlock","src":"17496:124:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17518:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"17526:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17514:3:27"},"nodeType":"YulFunctionCall","src":"17514:14:27"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"17530:34:27","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17507:6:27"},"nodeType":"YulFunctionCall","src":"17507:58:27"},"nodeType":"YulExpressionStatement","src":"17507:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17586:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"17594:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17582:3:27"},"nodeType":"YulFunctionCall","src":"17582:15:27"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"17599:13:27","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17575:6:27"},"nodeType":"YulFunctionCall","src":"17575:38:27"},"nodeType":"YulExpressionStatement","src":"17575:38:27"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17488:6:27","type":""}],"src":"17390:230:27"},{"body":{"nodeType":"YulBlock","src":"17772:220:27","statements":[{"nodeType":"YulAssignment","src":"17782:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17848:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"17853:2:27","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17789:58:27"},"nodeType":"YulFunctionCall","src":"17789:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17782:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17954:3:27"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"17865:88:27"},"nodeType":"YulFunctionCall","src":"17865:93:27"},"nodeType":"YulExpressionStatement","src":"17865:93:27"},{"nodeType":"YulAssignment","src":"17967:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17978:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"17983:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17974:3:27"},"nodeType":"YulFunctionCall","src":"17974:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17967:3:27"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17760:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17768:3:27","type":""}],"src":"17626:366:27"},{"body":{"nodeType":"YulBlock","src":"18169:248:27","statements":[{"nodeType":"YulAssignment","src":"18179:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18191:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"18202:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18187:3:27"},"nodeType":"YulFunctionCall","src":"18187:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18179:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18226:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"18237:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18222:3:27"},"nodeType":"YulFunctionCall","src":"18222:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18245:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"18251:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18241:3:27"},"nodeType":"YulFunctionCall","src":"18241:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18215:6:27"},"nodeType":"YulFunctionCall","src":"18215:47:27"},"nodeType":"YulExpressionStatement","src":"18215:47:27"},{"nodeType":"YulAssignment","src":"18271:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18405:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18279:124:27"},"nodeType":"YulFunctionCall","src":"18279:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18271:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18149:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18164:4:27","type":""}],"src":"17998:419:27"},{"body":{"nodeType":"YulBlock","src":"18529:127:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18551:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"18559:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18547:3:27"},"nodeType":"YulFunctionCall","src":"18547:14:27"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"18563:34:27","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18540:6:27"},"nodeType":"YulFunctionCall","src":"18540:58:27"},"nodeType":"YulExpressionStatement","src":"18540:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18619:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"18627:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18615:3:27"},"nodeType":"YulFunctionCall","src":"18615:15:27"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"18632:16:27","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18608:6:27"},"nodeType":"YulFunctionCall","src":"18608:41:27"},"nodeType":"YulExpressionStatement","src":"18608:41:27"}]},"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18521:6:27","type":""}],"src":"18423:233:27"},{"body":{"nodeType":"YulBlock","src":"18808:220:27","statements":[{"nodeType":"YulAssignment","src":"18818:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18884:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"18889:2:27","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18825:58:27"},"nodeType":"YulFunctionCall","src":"18825:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18818:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18990:3:27"}],"functionName":{"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulIdentifier","src":"18901:88:27"},"nodeType":"YulFunctionCall","src":"18901:93:27"},"nodeType":"YulExpressionStatement","src":"18901:93:27"},{"nodeType":"YulAssignment","src":"19003:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19014:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"19019:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19010:3:27"},"nodeType":"YulFunctionCall","src":"19010:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19003:3:27"}]}]},"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18796:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18804:3:27","type":""}],"src":"18662:366:27"},{"body":{"nodeType":"YulBlock","src":"19205:248:27","statements":[{"nodeType":"YulAssignment","src":"19215:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19227:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"19238:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19223:3:27"},"nodeType":"YulFunctionCall","src":"19223:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19215:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19262:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"19273:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19258:3:27"},"nodeType":"YulFunctionCall","src":"19258:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19281:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"19287:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19277:3:27"},"nodeType":"YulFunctionCall","src":"19277:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19251:6:27"},"nodeType":"YulFunctionCall","src":"19251:47:27"},"nodeType":"YulExpressionStatement","src":"19251:47:27"},{"nodeType":"YulAssignment","src":"19307:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19441:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19315:124:27"},"nodeType":"YulFunctionCall","src":"19315:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19307:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19185:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19200:4:27","type":""}],"src":"19034:419:27"},{"body":{"nodeType":"YulBlock","src":"19512:32:27","statements":[{"nodeType":"YulAssignment","src":"19522:16:27","value":{"name":"value","nodeType":"YulIdentifier","src":"19533:5:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"19522:7:27"}]}]},"name":"cleanup_t_rational_1_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19494:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"19504:7:27","type":""}],"src":"19459:85:27"},{"body":{"nodeType":"YulBlock","src":"19582:28:27","statements":[{"nodeType":"YulAssignment","src":"19592:12:27","value":{"name":"value","nodeType":"YulIdentifier","src":"19599:5:27"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"19592:3:27"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19568:5:27","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"19578:3:27","type":""}],"src":"19550:60:27"},{"body":{"nodeType":"YulBlock","src":"19682:88:27","statements":[{"nodeType":"YulAssignment","src":"19692:72:27","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19756:5:27"}],"functionName":{"name":"cleanup_t_rational_1_by_1","nodeType":"YulIdentifier","src":"19730:25:27"},"nodeType":"YulFunctionCall","src":"19730:32:27"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"19721:8:27"},"nodeType":"YulFunctionCall","src":"19721:42:27"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"19705:15:27"},"nodeType":"YulFunctionCall","src":"19705:59:27"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"19692:9:27"}]}]},"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19662:5:27","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"19672:9:27","type":""}],"src":"19616:154:27"},{"body":{"nodeType":"YulBlock","src":"19847:72:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19864:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19906:5:27"}],"functionName":{"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulIdentifier","src":"19869:36:27"},"nodeType":"YulFunctionCall","src":"19869:43:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19857:6:27"},"nodeType":"YulFunctionCall","src":"19857:56:27"},"nodeType":"YulExpressionStatement","src":"19857:56:27"}]},"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19835:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"19842:3:27","type":""}],"src":"19776:143:27"},{"body":{"nodeType":"YulBlock","src":"20029:130:27","statements":[{"nodeType":"YulAssignment","src":"20039:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20051:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"20062:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20047:3:27"},"nodeType":"YulFunctionCall","src":"20047:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20039:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20125:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20138:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"20149:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20134:3:27"},"nodeType":"YulFunctionCall","src":"20134:17:27"}],"functionName":{"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"20075:49:27"},"nodeType":"YulFunctionCall","src":"20075:77:27"},"nodeType":"YulExpressionStatement","src":"20075:77:27"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20001:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20013:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20024:4:27","type":""}],"src":"19925:234:27"},{"body":{"nodeType":"YulBlock","src":"20230:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20247:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20270:5:27"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"20252:17:27"},"nodeType":"YulFunctionCall","src":"20252:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20240:6:27"},"nodeType":"YulFunctionCall","src":"20240:37:27"},"nodeType":"YulExpressionStatement","src":"20240:37:27"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20218:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"20225:3:27","type":""}],"src":"20165:118:27"},{"body":{"nodeType":"YulBlock","src":"20387:124:27","statements":[{"nodeType":"YulAssignment","src":"20397:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20409:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"20420:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20405:3:27"},"nodeType":"YulFunctionCall","src":"20405:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20397:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20477:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20490:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"20501:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20486:3:27"},"nodeType":"YulFunctionCall","src":"20486:17:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"20433:43:27"},"nodeType":"YulFunctionCall","src":"20433:71:27"},"nodeType":"YulExpressionStatement","src":"20433:71:27"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20359:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20371:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20382:4:27","type":""}],"src":"20289:222:27"},{"body":{"nodeType":"YulBlock","src":"20623:75:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20645:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"20653:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20641:3:27"},"nodeType":"YulFunctionCall","src":"20641:14:27"},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","kind":"string","nodeType":"YulLiteral","src":"20657:33:27","type":"","value":"ReentrancyGuard: reentrant call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20634:6:27"},"nodeType":"YulFunctionCall","src":"20634:57:27"},"nodeType":"YulExpressionStatement","src":"20634:57:27"}]},"name":"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20615:6:27","type":""}],"src":"20517:181:27"},{"body":{"nodeType":"YulBlock","src":"20850:220:27","statements":[{"nodeType":"YulAssignment","src":"20860:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20926:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"20931:2:27","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20867:58:27"},"nodeType":"YulFunctionCall","src":"20867:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20860:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21032:3:27"}],"functionName":{"name":"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","nodeType":"YulIdentifier","src":"20943:88:27"},"nodeType":"YulFunctionCall","src":"20943:93:27"},"nodeType":"YulExpressionStatement","src":"20943:93:27"},{"nodeType":"YulAssignment","src":"21045:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21056:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"21061:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21052:3:27"},"nodeType":"YulFunctionCall","src":"21052:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21045:3:27"}]}]},"name":"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20838:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20846:3:27","type":""}],"src":"20704:366:27"},{"body":{"nodeType":"YulBlock","src":"21247:248:27","statements":[{"nodeType":"YulAssignment","src":"21257:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21269:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"21280:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21265:3:27"},"nodeType":"YulFunctionCall","src":"21265:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21257:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21304:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"21315:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21300:3:27"},"nodeType":"YulFunctionCall","src":"21300:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21323:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"21329:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21319:3:27"},"nodeType":"YulFunctionCall","src":"21319:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21293:6:27"},"nodeType":"YulFunctionCall","src":"21293:47:27"},"nodeType":"YulExpressionStatement","src":"21293:47:27"},{"nodeType":"YulAssignment","src":"21349:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21483:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21357:124:27"},"nodeType":"YulFunctionCall","src":"21357:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21349:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21227:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21242:4:27","type":""}],"src":"21076:419:27"},{"body":{"nodeType":"YulBlock","src":"21683:371:27","statements":[{"nodeType":"YulAssignment","src":"21693:27:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21705:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"21716:3:27","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21701:3:27"},"nodeType":"YulFunctionCall","src":"21701:19:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21693:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21774:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21787:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"21798:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21783:3:27"},"nodeType":"YulFunctionCall","src":"21783:17:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"21730:43:27"},"nodeType":"YulFunctionCall","src":"21730:71:27"},"nodeType":"YulExpressionStatement","src":"21730:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"21855:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21868:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"21879:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21864:3:27"},"nodeType":"YulFunctionCall","src":"21864:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"21811:43:27"},"nodeType":"YulFunctionCall","src":"21811:72:27"},"nodeType":"YulExpressionStatement","src":"21811:72:27"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"21937:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21950:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"21961:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21946:3:27"},"nodeType":"YulFunctionCall","src":"21946:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"21893:43:27"},"nodeType":"YulFunctionCall","src":"21893:72:27"},"nodeType":"YulExpressionStatement","src":"21893:72:27"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"22019:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22032:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"22043:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22028:3:27"},"nodeType":"YulFunctionCall","src":"22028:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"21975:43:27"},"nodeType":"YulFunctionCall","src":"21975:72:27"},"nodeType":"YulExpressionStatement","src":"21975:72:27"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21631:9:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"21643:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"21651:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21659:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21667:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21678:4:27","type":""}],"src":"21501:553:27"},{"body":{"nodeType":"YulBlock","src":"22120:77:27","statements":[{"nodeType":"YulAssignment","src":"22130:22:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"22145:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22139:5:27"},"nodeType":"YulFunctionCall","src":"22139:13:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"22130:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22185:5:27"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"22161:23:27"},"nodeType":"YulFunctionCall","src":"22161:30:27"},"nodeType":"YulExpressionStatement","src":"22161:30:27"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"22098:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"22106:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"22114:5:27","type":""}],"src":"22060:137:27"},{"body":{"nodeType":"YulBlock","src":"22277:271:27","statements":[{"body":{"nodeType":"YulBlock","src":"22323:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"22325:77:27"},"nodeType":"YulFunctionCall","src":"22325:79:27"},"nodeType":"YulExpressionStatement","src":"22325:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"22298:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"22307:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22294:3:27"},"nodeType":"YulFunctionCall","src":"22294:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"22319:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"22290:3:27"},"nodeType":"YulFunctionCall","src":"22290:32:27"},"nodeType":"YulIf","src":"22287:119:27"},{"nodeType":"YulBlock","src":"22416:125:27","statements":[{"nodeType":"YulVariableDeclaration","src":"22431:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"22445:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"22435:6:27","type":""}]},{"nodeType":"YulAssignment","src":"22460:71:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22503:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"22514:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22499:3:27"},"nodeType":"YulFunctionCall","src":"22499:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"22523:7:27"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"22470:28:27"},"nodeType":"YulFunctionCall","src":"22470:61:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"22460:6:27"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22247:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"22258:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"22270:6:27","type":""}],"src":"22203:345:27"},{"body":{"nodeType":"YulBlock","src":"22680:206:27","statements":[{"nodeType":"YulAssignment","src":"22690:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22702:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"22713:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22698:3:27"},"nodeType":"YulFunctionCall","src":"22698:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22690:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22770:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22783:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"22794:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22779:3:27"},"nodeType":"YulFunctionCall","src":"22779:17:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"22726:43:27"},"nodeType":"YulFunctionCall","src":"22726:71:27"},"nodeType":"YulExpressionStatement","src":"22726:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"22851:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22864:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"22875:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22860:3:27"},"nodeType":"YulFunctionCall","src":"22860:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"22807:43:27"},"nodeType":"YulFunctionCall","src":"22807:72:27"},"nodeType":"YulExpressionStatement","src":"22807:72:27"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22644:9:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22656:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22664:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22675:4:27","type":""}],"src":"22554:332:27"},{"body":{"nodeType":"YulBlock","src":"23006:34:27","statements":[{"nodeType":"YulAssignment","src":"23016:18:27","value":{"name":"pos","nodeType":"YulIdentifier","src":"23031:3:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"23016:11:27"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22978:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"22983:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"22994:11:27","type":""}],"src":"22892:148:27"},{"body":{"nodeType":"YulBlock","src":"23152:67:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23174:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"23182:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23170:3:27"},"nodeType":"YulFunctionCall","src":"23170:14:27"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nodeType":"YulLiteral","src":"23186:25:27","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23163:6:27"},"nodeType":"YulFunctionCall","src":"23163:49:27"},"nodeType":"YulExpressionStatement","src":"23163:49:27"}]},"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"23144:6:27","type":""}],"src":"23046:173:27"},{"body":{"nodeType":"YulBlock","src":"23389:238:27","statements":[{"nodeType":"YulAssignment","src":"23399:92:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23483:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"23488:2:27","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"23406:76:27"},"nodeType":"YulFunctionCall","src":"23406:85:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23399:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23589:3:27"}],"functionName":{"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulIdentifier","src":"23500:88:27"},"nodeType":"YulFunctionCall","src":"23500:93:27"},"nodeType":"YulExpressionStatement","src":"23500:93:27"},{"nodeType":"YulAssignment","src":"23602:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23613:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"23618:2:27","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23609:3:27"},"nodeType":"YulFunctionCall","src":"23609:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"23602:3:27"}]}]},"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23377:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"23385:3:27","type":""}],"src":"23225:402:27"},{"body":{"nodeType":"YulBlock","src":"23692:40:27","statements":[{"nodeType":"YulAssignment","src":"23703:22:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23719:5:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23713:5:27"},"nodeType":"YulFunctionCall","src":"23713:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"23703:6:27"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23675:5:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"23685:6:27","type":""}],"src":"23633:99:27"},{"body":{"nodeType":"YulBlock","src":"23800:184:27","statements":[{"nodeType":"YulVariableDeclaration","src":"23810:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"23819:1:27","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"23814:1:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"23879:63:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"23904:3:27"},{"name":"i","nodeType":"YulIdentifier","src":"23909:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23900:3:27"},"nodeType":"YulFunctionCall","src":"23900:11:27"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"23923:3:27"},{"name":"i","nodeType":"YulIdentifier","src":"23928:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23919:3:27"},"nodeType":"YulFunctionCall","src":"23919:11:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23913:5:27"},"nodeType":"YulFunctionCall","src":"23913:18:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23893:6:27"},"nodeType":"YulFunctionCall","src":"23893:39:27"},"nodeType":"YulExpressionStatement","src":"23893:39:27"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"23840:1:27"},{"name":"length","nodeType":"YulIdentifier","src":"23843:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"23837:2:27"},"nodeType":"YulFunctionCall","src":"23837:13:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"23851:19:27","statements":[{"nodeType":"YulAssignment","src":"23853:15:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"23862:1:27"},{"kind":"number","nodeType":"YulLiteral","src":"23865:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23858:3:27"},"nodeType":"YulFunctionCall","src":"23858:10:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"23853:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"23833:3:27","statements":[]},"src":"23829:113:27"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"23962:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"23967:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23958:3:27"},"nodeType":"YulFunctionCall","src":"23958:16:27"},{"kind":"number","nodeType":"YulLiteral","src":"23976:1:27","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23951:6:27"},"nodeType":"YulFunctionCall","src":"23951:27:27"},"nodeType":"YulExpressionStatement","src":"23951:27:27"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"23782:3:27","type":""},{"name":"dst","nodeType":"YulTypedName","src":"23787:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"23792:6:27","type":""}],"src":"23738:246:27"},{"body":{"nodeType":"YulBlock","src":"24100:280:27","statements":[{"nodeType":"YulVariableDeclaration","src":"24110:53:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24157:5:27"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"24124:32:27"},"nodeType":"YulFunctionCall","src":"24124:39:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"24114:6:27","type":""}]},{"nodeType":"YulAssignment","src":"24172:96:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24256:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"24261:6:27"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"24179:76:27"},"nodeType":"YulFunctionCall","src":"24179:89:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24172:3:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24316:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"24323:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24312:3:27"},"nodeType":"YulFunctionCall","src":"24312:16:27"},{"name":"pos","nodeType":"YulIdentifier","src":"24330:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"24335:6:27"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"24277:34:27"},"nodeType":"YulFunctionCall","src":"24277:65:27"},"nodeType":"YulExpressionStatement","src":"24277:65:27"},{"nodeType":"YulAssignment","src":"24351:23:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24362:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"24367:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24358:3:27"},"nodeType":"YulFunctionCall","src":"24358:16:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24351:3:27"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24081:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"24088:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24096:3:27","type":""}],"src":"23990:390:27"},{"body":{"nodeType":"YulBlock","src":"24492:61:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24514:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"24522:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24510:3:27"},"nodeType":"YulFunctionCall","src":"24510:14:27"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nodeType":"YulLiteral","src":"24526:19:27","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24503:6:27"},"nodeType":"YulFunctionCall","src":"24503:43:27"},"nodeType":"YulExpressionStatement","src":"24503:43:27"}]},"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24484:6:27","type":""}],"src":"24386:167:27"},{"body":{"nodeType":"YulBlock","src":"24723:238:27","statements":[{"nodeType":"YulAssignment","src":"24733:92:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24817:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"24822:2:27","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"24740:76:27"},"nodeType":"YulFunctionCall","src":"24740:85:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24733:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24923:3:27"}],"functionName":{"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulIdentifier","src":"24834:88:27"},"nodeType":"YulFunctionCall","src":"24834:93:27"},"nodeType":"YulExpressionStatement","src":"24834:93:27"},{"nodeType":"YulAssignment","src":"24936:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24947:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"24952:2:27","type":"","value":"17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24943:3:27"},"nodeType":"YulFunctionCall","src":"24943:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24936:3:27"}]}]},"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24711:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24719:3:27","type":""}],"src":"24559:402:27"},{"body":{"nodeType":"YulBlock","src":"25353:581:27","statements":[{"nodeType":"YulAssignment","src":"25364:155:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25515:3:27"}],"functionName":{"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"25371:142:27"},"nodeType":"YulFunctionCall","src":"25371:148:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25364:3:27"}]},{"nodeType":"YulAssignment","src":"25529:102:27","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"25618:6:27"},{"name":"pos","nodeType":"YulIdentifier","src":"25627:3:27"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"25536:81:27"},"nodeType":"YulFunctionCall","src":"25536:95:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25529:3:27"}]},{"nodeType":"YulAssignment","src":"25641:155:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25792:3:27"}],"functionName":{"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"25648:142:27"},"nodeType":"YulFunctionCall","src":"25648:148:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25641:3:27"}]},{"nodeType":"YulAssignment","src":"25806:102:27","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"25895:6:27"},{"name":"pos","nodeType":"YulIdentifier","src":"25904:3:27"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"25813:81:27"},"nodeType":"YulFunctionCall","src":"25813:95:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25806:3:27"}]},{"nodeType":"YulAssignment","src":"25918:10:27","value":{"name":"pos","nodeType":"YulIdentifier","src":"25925:3:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25918:3:27"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25324:3:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"25330:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"25338:6:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"25349:3:27","type":""}],"src":"24967:967:27"},{"body":{"nodeType":"YulBlock","src":"25988:54:27","statements":[{"nodeType":"YulAssignment","src":"25998:38:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26016:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"26023:2:27","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26012:3:27"},"nodeType":"YulFunctionCall","src":"26012:14:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26032:2:27","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"26028:3:27"},"nodeType":"YulFunctionCall","src":"26028:7:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"26008:3:27"},"nodeType":"YulFunctionCall","src":"26008:28:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"25998:6:27"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25971:5:27","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"25981:6:27","type":""}],"src":"25940:102:27"},{"body":{"nodeType":"YulBlock","src":"26140:285:27","statements":[{"nodeType":"YulVariableDeclaration","src":"26150:53:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26197:5:27"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"26164:32:27"},"nodeType":"YulFunctionCall","src":"26164:39:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"26154:6:27","type":""}]},{"nodeType":"YulAssignment","src":"26212:78:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26278:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"26283:6:27"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26219:58:27"},"nodeType":"YulFunctionCall","src":"26219:71:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26212:3:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26338:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"26345:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26334:3:27"},"nodeType":"YulFunctionCall","src":"26334:16:27"},{"name":"pos","nodeType":"YulIdentifier","src":"26352:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"26357:6:27"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"26299:34:27"},"nodeType":"YulFunctionCall","src":"26299:65:27"},"nodeType":"YulExpressionStatement","src":"26299:65:27"},{"nodeType":"YulAssignment","src":"26373:46:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26384:3:27"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"26411:6:27"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"26389:21:27"},"nodeType":"YulFunctionCall","src":"26389:29:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26380:3:27"},"nodeType":"YulFunctionCall","src":"26380:39:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26373:3:27"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26121:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"26128:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26136:3:27","type":""}],"src":"26048:377:27"},{"body":{"nodeType":"YulBlock","src":"26549:195:27","statements":[{"nodeType":"YulAssignment","src":"26559:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26571:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"26582:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26567:3:27"},"nodeType":"YulFunctionCall","src":"26567:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26559:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26606:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"26617:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26602:3:27"},"nodeType":"YulFunctionCall","src":"26602:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26625:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"26631:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26621:3:27"},"nodeType":"YulFunctionCall","src":"26621:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26595:6:27"},"nodeType":"YulFunctionCall","src":"26595:47:27"},"nodeType":"YulExpressionStatement","src":"26595:47:27"},{"nodeType":"YulAssignment","src":"26651:86:27","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26723:6:27"},{"name":"tail","nodeType":"YulIdentifier","src":"26732:4:27"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26659:63:27"},"nodeType":"YulFunctionCall","src":"26659:78:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26651:4:27"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26521:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26533:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26544:4:27","type":""}],"src":"26431:313:27"},{"body":{"nodeType":"YulBlock","src":"26856:64:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26878:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"26886:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26874:3:27"},"nodeType":"YulFunctionCall","src":"26874:14:27"},{"hexValue":"5061757361626c653a206e6f7420706175736564","kind":"string","nodeType":"YulLiteral","src":"26890:22:27","type":"","value":"Pausable: not paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26867:6:27"},"nodeType":"YulFunctionCall","src":"26867:46:27"},"nodeType":"YulExpressionStatement","src":"26867:46:27"}]},"name":"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26848:6:27","type":""}],"src":"26750:170:27"},{"body":{"nodeType":"YulBlock","src":"27072:220:27","statements":[{"nodeType":"YulAssignment","src":"27082:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27148:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"27153:2:27","type":"","value":"20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27089:58:27"},"nodeType":"YulFunctionCall","src":"27089:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27082:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27254:3:27"}],"functionName":{"name":"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","nodeType":"YulIdentifier","src":"27165:88:27"},"nodeType":"YulFunctionCall","src":"27165:93:27"},"nodeType":"YulExpressionStatement","src":"27165:93:27"},{"nodeType":"YulAssignment","src":"27267:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27278:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"27283:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27274:3:27"},"nodeType":"YulFunctionCall","src":"27274:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27267:3:27"}]}]},"name":"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"27060:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27068:3:27","type":""}],"src":"26926:366:27"},{"body":{"nodeType":"YulBlock","src":"27469:248:27","statements":[{"nodeType":"YulAssignment","src":"27479:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27491:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"27502:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27487:3:27"},"nodeType":"YulFunctionCall","src":"27487:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27479:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27526:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"27537:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27522:3:27"},"nodeType":"YulFunctionCall","src":"27522:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27545:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"27551:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27541:3:27"},"nodeType":"YulFunctionCall","src":"27541:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27515:6:27"},"nodeType":"YulFunctionCall","src":"27515:47:27"},"nodeType":"YulExpressionStatement","src":"27515:47:27"},{"nodeType":"YulAssignment","src":"27571:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27705:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27579:124:27"},"nodeType":"YulFunctionCall","src":"27579:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27571:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27449:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27464:4:27","type":""}],"src":"27298:419:27"},{"body":{"nodeType":"YulBlock","src":"27877:288:27","statements":[{"nodeType":"YulAssignment","src":"27887:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27899:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"27910:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27895:3:27"},"nodeType":"YulFunctionCall","src":"27895:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27887:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"27967:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27980:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"27991:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27976:3:27"},"nodeType":"YulFunctionCall","src":"27976:17:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"27923:43:27"},"nodeType":"YulFunctionCall","src":"27923:71:27"},"nodeType":"YulExpressionStatement","src":"27923:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"28048:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28061:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"28072:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28057:3:27"},"nodeType":"YulFunctionCall","src":"28057:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"28004:43:27"},"nodeType":"YulFunctionCall","src":"28004:72:27"},"nodeType":"YulExpressionStatement","src":"28004:72:27"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"28130:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28143:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"28154:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28139:3:27"},"nodeType":"YulFunctionCall","src":"28139:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"28086:43:27"},"nodeType":"YulFunctionCall","src":"28086:72:27"},"nodeType":"YulExpressionStatement","src":"28086:72:27"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27833:9:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"27845:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"27853:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27861:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27872:4:27","type":""}],"src":"27723:442:27"},{"body":{"nodeType":"YulBlock","src":"28199:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28216:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28219:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28209:6:27"},"nodeType":"YulFunctionCall","src":"28209:88:27"},"nodeType":"YulExpressionStatement","src":"28209:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28313:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"28316:4:27","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28306:6:27"},"nodeType":"YulFunctionCall","src":"28306:15:27"},"nodeType":"YulExpressionStatement","src":"28306:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28337:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28340:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"28330:6:27"},"nodeType":"YulFunctionCall","src":"28330:15:27"},"nodeType":"YulExpressionStatement","src":"28330:15:27"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"28171:180:27"},{"body":{"nodeType":"YulBlock","src":"28399:143:27","statements":[{"nodeType":"YulAssignment","src":"28409:25:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"28432:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"28414:17:27"},"nodeType":"YulFunctionCall","src":"28414:20:27"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"28409:1:27"}]},{"nodeType":"YulAssignment","src":"28443:25:27","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"28466:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"28448:17:27"},"nodeType":"YulFunctionCall","src":"28448:20:27"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"28443:1:27"}]},{"body":{"nodeType":"YulBlock","src":"28490:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"28492:16:27"},"nodeType":"YulFunctionCall","src":"28492:18:27"},"nodeType":"YulExpressionStatement","src":"28492:18:27"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"28487:1:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"28480:6:27"},"nodeType":"YulFunctionCall","src":"28480:9:27"},"nodeType":"YulIf","src":"28477:35:27"},{"nodeType":"YulAssignment","src":"28522:14:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"28531:1:27"},{"name":"y","nodeType":"YulIdentifier","src":"28534:1:27"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"28527:3:27"},"nodeType":"YulFunctionCall","src":"28527:9:27"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"28522:1:27"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"28388:1:27","type":""},{"name":"y","nodeType":"YulTypedName","src":"28391:1:27","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"28397:1:27","type":""}],"src":"28357:185:27"},{"body":{"nodeType":"YulBlock","src":"28609:51:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28626:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28647:5:27"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"28631:15:27"},"nodeType":"YulFunctionCall","src":"28631:22:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28619:6:27"},"nodeType":"YulFunctionCall","src":"28619:35:27"},"nodeType":"YulExpressionStatement","src":"28619:35:27"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28597:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"28604:3:27","type":""}],"src":"28548:112:27"},{"body":{"nodeType":"YulBlock","src":"28928:616:27","statements":[{"nodeType":"YulAssignment","src":"28938:27:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28950:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"28961:3:27","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28946:3:27"},"nodeType":"YulFunctionCall","src":"28946:19:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28938:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"29019:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29032:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"29043:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29028:3:27"},"nodeType":"YulFunctionCall","src":"29028:17:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"28975:43:27"},"nodeType":"YulFunctionCall","src":"28975:71:27"},"nodeType":"YulExpressionStatement","src":"28975:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"29100:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29113:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"29124:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29109:3:27"},"nodeType":"YulFunctionCall","src":"29109:18:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"29056:43:27"},"nodeType":"YulFunctionCall","src":"29056:72:27"},"nodeType":"YulExpressionStatement","src":"29056:72:27"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"29182:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29195:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"29206:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29191:3:27"},"nodeType":"YulFunctionCall","src":"29191:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"29138:43:27"},"nodeType":"YulFunctionCall","src":"29138:72:27"},"nodeType":"YulExpressionStatement","src":"29138:72:27"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"29264:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29277:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"29288:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29273:3:27"},"nodeType":"YulFunctionCall","src":"29273:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"29220:43:27"},"nodeType":"YulFunctionCall","src":"29220:72:27"},"nodeType":"YulExpressionStatement","src":"29220:72:27"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"29342:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29355:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"29366:3:27","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29351:3:27"},"nodeType":"YulFunctionCall","src":"29351:19:27"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"29302:39:27"},"nodeType":"YulFunctionCall","src":"29302:69:27"},"nodeType":"YulExpressionStatement","src":"29302:69:27"},{"expression":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"29425:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29438:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"29449:3:27","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29434:3:27"},"nodeType":"YulFunctionCall","src":"29434:19:27"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"29381:43:27"},"nodeType":"YulFunctionCall","src":"29381:73:27"},"nodeType":"YulExpressionStatement","src":"29381:73:27"},{"expression":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"29508:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29521:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"29532:3:27","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29517:3:27"},"nodeType":"YulFunctionCall","src":"29517:19:27"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"29464:43:27"},"nodeType":"YulFunctionCall","src":"29464:73:27"},"nodeType":"YulExpressionStatement","src":"29464:73:27"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28852:9:27","type":""},{"name":"value6","nodeType":"YulTypedName","src":"28864:6:27","type":""},{"name":"value5","nodeType":"YulTypedName","src":"28872:6:27","type":""},{"name":"value4","nodeType":"YulTypedName","src":"28880:6:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"28888:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"28896:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"28904:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28912:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28923:4:27","type":""}],"src":"28666:878:27"},{"body":{"nodeType":"YulBlock","src":"29656:114:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29678:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"29686:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29674:3:27"},"nodeType":"YulFunctionCall","src":"29674:14:27"},{"hexValue":"5361666545524332303a207065726d697420646964206e6f7420737563636565","kind":"string","nodeType":"YulLiteral","src":"29690:34:27","type":"","value":"SafeERC20: permit did not succee"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29667:6:27"},"nodeType":"YulFunctionCall","src":"29667:58:27"},"nodeType":"YulExpressionStatement","src":"29667:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29746:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"29754:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29742:3:27"},"nodeType":"YulFunctionCall","src":"29742:15:27"},{"hexValue":"64","kind":"string","nodeType":"YulLiteral","src":"29759:3:27","type":"","value":"d"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29735:6:27"},"nodeType":"YulFunctionCall","src":"29735:28:27"},"nodeType":"YulExpressionStatement","src":"29735:28:27"}]},"name":"store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"29648:6:27","type":""}],"src":"29550:220:27"},{"body":{"nodeType":"YulBlock","src":"29922:220:27","statements":[{"nodeType":"YulAssignment","src":"29932:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29998:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"30003:2:27","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29939:58:27"},"nodeType":"YulFunctionCall","src":"29939:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29932:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30104:3:27"}],"functionName":{"name":"store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","nodeType":"YulIdentifier","src":"30015:88:27"},"nodeType":"YulFunctionCall","src":"30015:93:27"},"nodeType":"YulExpressionStatement","src":"30015:93:27"},{"nodeType":"YulAssignment","src":"30117:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30128:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"30133:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30124:3:27"},"nodeType":"YulFunctionCall","src":"30124:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"30117:3:27"}]}]},"name":"abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29910:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29918:3:27","type":""}],"src":"29776:366:27"},{"body":{"nodeType":"YulBlock","src":"30319:248:27","statements":[{"nodeType":"YulAssignment","src":"30329:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30341:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"30352:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30337:3:27"},"nodeType":"YulFunctionCall","src":"30337:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30329:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30376:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"30387:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30372:3:27"},"nodeType":"YulFunctionCall","src":"30372:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30395:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"30401:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30391:3:27"},"nodeType":"YulFunctionCall","src":"30391:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30365:6:27"},"nodeType":"YulFunctionCall","src":"30365:47:27"},"nodeType":"YulExpressionStatement","src":"30365:47:27"},{"nodeType":"YulAssignment","src":"30421:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30555:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30429:124:27"},"nodeType":"YulFunctionCall","src":"30429:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30421:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30299:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30314:4:27","type":""}],"src":"30148:419:27"},{"body":{"nodeType":"YulBlock","src":"30679:60:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30701:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"30709:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30697:3:27"},"nodeType":"YulFunctionCall","src":"30697:14:27"},{"hexValue":"5061757361626c653a20706175736564","kind":"string","nodeType":"YulLiteral","src":"30713:18:27","type":"","value":"Pausable: paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30690:6:27"},"nodeType":"YulFunctionCall","src":"30690:42:27"},"nodeType":"YulExpressionStatement","src":"30690:42:27"}]},"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30671:6:27","type":""}],"src":"30573:166:27"},{"body":{"nodeType":"YulBlock","src":"30891:220:27","statements":[{"nodeType":"YulAssignment","src":"30901:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30967:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"30972:2:27","type":"","value":"16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30908:58:27"},"nodeType":"YulFunctionCall","src":"30908:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"30901:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31073:3:27"}],"functionName":{"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulIdentifier","src":"30984:88:27"},"nodeType":"YulFunctionCall","src":"30984:93:27"},"nodeType":"YulExpressionStatement","src":"30984:93:27"},{"nodeType":"YulAssignment","src":"31086:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31097:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"31102:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31093:3:27"},"nodeType":"YulFunctionCall","src":"31093:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"31086:3:27"}]}]},"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"30879:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"30887:3:27","type":""}],"src":"30745:366:27"},{"body":{"nodeType":"YulBlock","src":"31288:248:27","statements":[{"nodeType":"YulAssignment","src":"31298:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31310:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"31321:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31306:3:27"},"nodeType":"YulFunctionCall","src":"31306:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31298:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31345:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"31356:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31341:3:27"},"nodeType":"YulFunctionCall","src":"31341:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31364:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"31370:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31360:3:27"},"nodeType":"YulFunctionCall","src":"31360:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31334:6:27"},"nodeType":"YulFunctionCall","src":"31334:47:27"},"nodeType":"YulExpressionStatement","src":"31334:47:27"},{"nodeType":"YulAssignment","src":"31390:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31524:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31398:124:27"},"nodeType":"YulFunctionCall","src":"31398:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31390:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31268:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31283:4:27","type":""}],"src":"31117:419:27"},{"body":{"nodeType":"YulBlock","src":"31585:128:27","statements":[{"nodeType":"YulAssignment","src":"31595:33:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31622:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"31604:17:27"},"nodeType":"YulFunctionCall","src":"31604:24:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"31595:5:27"}]},{"body":{"nodeType":"YulBlock","src":"31656:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"31658:16:27"},"nodeType":"YulFunctionCall","src":"31658:18:27"},"nodeType":"YulExpressionStatement","src":"31658:18:27"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31643:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"31650:4:27","type":"","value":"0x00"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"31640:2:27"},"nodeType":"YulFunctionCall","src":"31640:15:27"},"nodeType":"YulIf","src":"31637:41:27"},{"nodeType":"YulAssignment","src":"31687:20:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31698:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"31705:1:27","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31694:3:27"},"nodeType":"YulFunctionCall","src":"31694:13:27"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"31687:3:27"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"31571:5:27","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"31581:3:27","type":""}],"src":"31542:171:27"},{"body":{"nodeType":"YulBlock","src":"31825:76:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31847:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"31855:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31843:3:27"},"nodeType":"YulFunctionCall","src":"31843:14:27"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"31859:34:27","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31836:6:27"},"nodeType":"YulFunctionCall","src":"31836:58:27"},"nodeType":"YulExpressionStatement","src":"31836:58:27"}]},"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31817:6:27","type":""}],"src":"31719:182:27"},{"body":{"nodeType":"YulBlock","src":"32053:220:27","statements":[{"nodeType":"YulAssignment","src":"32063:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32129:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"32134:2:27","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32070:58:27"},"nodeType":"YulFunctionCall","src":"32070:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"32063:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32235:3:27"}],"functionName":{"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulIdentifier","src":"32146:88:27"},"nodeType":"YulFunctionCall","src":"32146:93:27"},"nodeType":"YulExpressionStatement","src":"32146:93:27"},{"nodeType":"YulAssignment","src":"32248:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32259:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"32264:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32255:3:27"},"nodeType":"YulFunctionCall","src":"32255:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"32248:3:27"}]}]},"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"32041:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"32049:3:27","type":""}],"src":"31907:366:27"},{"body":{"nodeType":"YulBlock","src":"32450:248:27","statements":[{"nodeType":"YulAssignment","src":"32460:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32472:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"32483:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32468:3:27"},"nodeType":"YulFunctionCall","src":"32468:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32460:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32507:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"32518:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32503:3:27"},"nodeType":"YulFunctionCall","src":"32503:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32526:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"32532:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32522:3:27"},"nodeType":"YulFunctionCall","src":"32522:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32496:6:27"},"nodeType":"YulFunctionCall","src":"32496:47:27"},"nodeType":"YulExpressionStatement","src":"32496:47:27"},{"nodeType":"YulAssignment","src":"32552:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32686:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32560:124:27"},"nodeType":"YulFunctionCall","src":"32560:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32552:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32430:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32445:4:27","type":""}],"src":"32279:419:27"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_array$_t_uint256_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function validator_revert_t_uint8(value) {\n        if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint8(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint8(value)\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_uint8t_bytes32t_bytes32t_bool(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6 {\n        if slt(sub(dataEnd, headStart), 224) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint8(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 192\n\n            value6 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 192) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint8(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_addresst_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 192) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed(headStart , value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 192)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value5,  add(headStart, 160))\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513(memPtr) {\n\n        mstore(add(memPtr, 0), \"Must have admin role to perform \")\n\n        mstore(add(memPtr, 32), \"this action.\")\n\n    }\n\n    function abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 44)\n        store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: can only renounce\")\n\n        mstore(add(memPtr, 32), \" roles for self\")\n\n    }\n\n    function abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)\n        store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is alrea\")\n\n        mstore(add(memPtr, 32), \"dy initialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {\n        converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(memPtr) {\n\n        mstore(add(memPtr, 0), \"ReentrancyGuard: reentrant call\")\n\n    }\n\n    function abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: account \")\n\n    }\n\n    function abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 23)\n        store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(pos)\n        end := add(pos, 23)\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(memPtr) {\n\n        mstore(add(memPtr, 0), \" is missing role \")\n\n    }\n\n    function abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 17)\n        store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(pos)\n        end := add(pos, 17)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: not paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n        store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart , value6, value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 224)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value5,  add(headStart, 160))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value6,  add(headStart, 192))\n\n    }\n\n    function store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: permit did not succee\")\n\n        mstore(add(memPtr, 32), \"d\")\n\n    }\n\n    function abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function decrement_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0x00) { panic_error_0x11() }\n        ret := sub(value, 1)\n    }\n\n    function store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Strings: hex length insufficient\")\n\n    }\n\n    function abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":27,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E8847BD GT PUSH2 0x104 JUMPI DUP1 PUSH4 0xA217FDDF GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xCFF5EEDE GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xCFF5EEDE EQ PUSH2 0x58F JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x5BF JUMPI DUP1 PUSH4 0xEC249164 EQ PUSH2 0x5DB JUMPI DUP1 PUSH4 0xF099DD50 EQ PUSH2 0x60C JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x507 JUMPI DUP1 PUSH4 0xB4706268 EQ PUSH2 0x525 JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x541 JUMPI DUP1 PUSH4 0xC392E850 EQ PUSH2 0x55F JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x81280D2B GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x81280D2B EQ PUSH2 0x468 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x498 JUMPI DUP1 PUSH4 0x88295FB2 EQ PUSH2 0x4A2 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x4D7 JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x6E8847BD EQ PUSH2 0x3D8 JUMPI DUP1 PUSH4 0x728CDBCA EQ PUSH2 0x408 JUMPI DUP1 PUSH4 0x77BD35FC EQ PUSH2 0x438 JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x42F6B8A7 GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x5C975ABB GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x33E JUMPI DUP1 PUSH4 0x642ADC28 EQ PUSH2 0x35C JUMPI DUP1 PUSH4 0x6B6D105E EQ PUSH2 0x38C JUMPI DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x3BC JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x42F6B8A7 EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0x4E94C048 EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0x56EB66BB EQ PUSH2 0x322 JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x24B7AB24 GT PUSH2 0x1AD JUMPI DUP1 PUSH4 0x24B7AB24 EQ PUSH2 0x264 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x280 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x2B8 JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x1A5C8F28 EQ PUSH2 0x204 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x234 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E9 SWAP2 SWAP1 PUSH2 0x3224 JUMP JUMPDEST PUSH2 0x63C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0x326C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x219 SWAP2 SWAP1 PUSH2 0x331B JUMP JUMPDEST PUSH2 0x6B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x22B SWAP2 SWAP1 PUSH2 0x342C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x24E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x249 SWAP2 SWAP1 PUSH2 0x3484 JUMP JUMPDEST PUSH2 0x8D9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25B SWAP2 SWAP1 PUSH2 0x34C0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x279 SWAP2 SWAP1 PUSH2 0x34DB JUMP JUMPDEST PUSH2 0x8F9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x295 SWAP2 SWAP1 PUSH2 0x3508 JUMP JUMPDEST PUSH2 0x983 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2B6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2B1 SWAP2 SWAP1 PUSH2 0x3508 JUMP JUMPDEST PUSH2 0x9A4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C0 PUSH2 0xA27 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2DC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D7 SWAP2 SWAP1 PUSH2 0x3548 JUMP JUMPDEST PUSH2 0xA78 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E9 SWAP2 SWAP1 PUSH2 0x3584 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x30C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x307 SWAP2 SWAP1 PUSH2 0x359F JUMP JUMPDEST PUSH2 0xAF3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x319 SWAP2 SWAP1 PUSH2 0x3584 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x33C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x337 SWAP2 SWAP1 PUSH2 0x34DB JUMP JUMPDEST PUSH2 0xC85 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x346 PUSH2 0xD0D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x353 SWAP2 SWAP1 PUSH2 0x326C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x376 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x371 SWAP2 SWAP1 PUSH2 0x3644 JUMP JUMPDEST PUSH2 0xD24 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x383 SWAP2 SWAP1 PUSH2 0x326C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3A1 SWAP2 SWAP1 PUSH2 0x331B JUMP JUMPDEST PUSH2 0xD58 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3B3 SWAP2 SWAP1 PUSH2 0x3584 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3D6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3D1 SWAP2 SWAP1 PUSH2 0x3548 JUMP JUMPDEST PUSH2 0xDC9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3F2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3ED SWAP2 SWAP1 PUSH2 0x36E6 JUMP JUMPDEST PUSH2 0xEEB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3FF SWAP2 SWAP1 PUSH2 0x326C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x422 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x41D SWAP2 SWAP1 PUSH2 0x3773 JUMP JUMPDEST PUSH2 0xF1D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x42F SWAP2 SWAP1 PUSH2 0x326C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x452 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x44D SWAP2 SWAP1 PUSH2 0x359F JUMP JUMPDEST PUSH2 0x11B9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45F SWAP2 SWAP1 PUSH2 0x326C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x482 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x47D SWAP2 SWAP1 PUSH2 0x331B JUMP JUMPDEST PUSH2 0x11C1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x48F SWAP2 SWAP1 PUSH2 0x326C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4A0 PUSH2 0x123F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4BC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4B7 SWAP2 SWAP1 PUSH2 0x331B JUMP JUMPDEST PUSH2 0x1290 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4CE SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3800 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4F1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4EC SWAP2 SWAP1 PUSH2 0x3508 JUMP JUMPDEST PUSH2 0x1398 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4FE SWAP2 SWAP1 PUSH2 0x326C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x50F PUSH2 0x1403 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x51C SWAP2 SWAP1 PUSH2 0x34C0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x53F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x53A SWAP2 SWAP1 PUSH2 0x34DB JUMP JUMPDEST PUSH2 0x140A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x549 PUSH2 0x1495 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x556 SWAP2 SWAP1 PUSH2 0x326C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x579 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x574 SWAP2 SWAP1 PUSH2 0x331B JUMP JUMPDEST PUSH2 0x14B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x586 SWAP2 SWAP1 PUSH2 0x3584 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5A9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5A4 SWAP2 SWAP1 PUSH2 0x3548 JUMP JUMPDEST PUSH2 0x1525 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B6 SWAP2 SWAP1 PUSH2 0x3584 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5D9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5D4 SWAP2 SWAP1 PUSH2 0x3508 JUMP JUMPDEST PUSH2 0x16F4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5F5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5F0 SWAP2 SWAP1 PUSH2 0x3548 JUMP JUMPDEST PUSH2 0x1715 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x603 SWAP3 SWAP2 SWAP1 PUSH2 0x3861 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x626 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x621 SWAP2 SWAP1 PUSH2 0x331B JUMP JUMPDEST PUSH2 0x1799 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x633 SWAP2 SWAP1 PUSH2 0x326C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x6AF JUMPI POP PUSH2 0x6AE DUP3 PUSH2 0x1831 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7B5 JUMPI PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0xC0 ADD MLOAD ISZERO PUSH2 0x7A3 JUMPI DUP3 PUSH2 0x7A0 SWAP1 PUSH2 0x38B9 JUMP JUMPDEST SWAP3 POP JUMPDEST DUP2 PUSH2 0x7AD SWAP1 PUSH2 0x38B9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x6BC JUMP JUMPDEST POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7D2 JUMPI PUSH2 0x7D1 PUSH2 0x3901 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x800 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x8CB JUMPI PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x8B9 JUMPI DUP2 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x8A0 JUMPI PUSH2 0x89F PUSH2 0x3930 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH2 0x8B6 SWAP1 PUSH2 0x38B9 JUMP JUMPDEST SWAP3 POP JUMPDEST DUP2 PUSH2 0x8C3 SWAP1 PUSH2 0x38B9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x807 JUMP JUMPDEST POP DUP2 SWAP4 POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x901 PUSH2 0x1495 JUMP JUMPDEST PUSH2 0x940 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x937 SWAP1 PUSH2 0x39E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE10 DUP2 PUSH2 0x94E SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST PUSH1 0xFD DUP2 SWAP1 SSTORE POP PUSH32 0x75C07EB064B8CCF959BCC601B55315CA198E67B597DC0A7B93E130F8CA779A67 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x98C DUP3 PUSH2 0x8D9 JUMP JUMPDEST PUSH2 0x995 DUP2 PUSH2 0x189B JUMP JUMPDEST PUSH2 0x99F DUP4 DUP4 PUSH2 0x18AF JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x9AC PUSH2 0x1990 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xA19 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA10 SWAP1 PUSH2 0x3ACE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA23 DUP3 DUP3 PUSH2 0x1998 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xA2F PUSH2 0x1495 JUMP JUMPDEST PUSH2 0xA6E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA65 SWAP1 PUSH2 0x39E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA76 PUSH2 0x1A7A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x103 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x40 ADD MLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x0 PUSH2 0xBA3 DUP6 DUP6 PUSH2 0x102 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3BF4C082 DUP9 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB5D SWAP2 SWAP1 PUSH2 0x3584 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB7A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB9E SWAP2 SWAP1 PUSH2 0x3B03 JUMP JUMPDEST PUSH2 0x6B6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xC79 JUMPI PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xC19 JUMPI PUSH2 0xC18 PUSH2 0x3930 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD DUP3 PUSH1 0x1 ADD SLOAD PUSH2 0xC47 SWAP2 SWAP1 PUSH2 0x3B30 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 PUSH1 0x4 ADD SLOAD PUSH2 0xC59 SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST DUP6 PUSH2 0xC64 SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST SWAP5 POP DUP3 PUSH2 0xC70 SWAP1 PUSH2 0x38B9 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0xBA8 JUMP JUMPDEST POP DUP2 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC8D PUSH2 0x1495 JUMP JUMPDEST PUSH2 0xCCC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCC3 SWAP1 PUSH2 0x39E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3C DUP2 PUSH2 0xCD9 SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST PUSH1 0xFE DUP2 SWAP1 SSTORE POP PUSH31 0x3A5A2424463BB22C8FC4C0F2422B7A18712B7713F9619CAA313F499FAD615E PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD2E PUSH2 0x1ADD JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD3F DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x1B2C JUMP JUMPDEST SWAP1 POP DUP1 SWAP2 POP POP PUSH2 0xD4D PUSH2 0x1D89 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xE18 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE0F SWAP1 PUSH2 0x3C0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE7E JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE86 PUSH2 0x1D93 JUMP JUMPDEST PUSH2 0xE8E PUSH2 0x1DEC JUMP JUMPDEST PUSH2 0xE96 PUSH2 0x1E3D JUMP JUMPDEST PUSH2 0xEA7 PUSH2 0xEA1 PUSH2 0x1E96 JUMP JUMPDEST DUP3 PUSH2 0x18AF JUMP JUMPDEST PUSH2 0xEB8 PUSH2 0xEB2 PUSH2 0x1EBE JUMP JUMPDEST DUP3 PUSH2 0x18AF JUMP JUMPDEST PUSH2 0xED0 PUSH2 0xEC3 PUSH2 0x1EBE JUMP JUMPDEST PUSH2 0xECB PUSH2 0x1E96 JUMP JUMPDEST PUSH2 0x1EE6 JUMP JUMPDEST PUSH2 0xEE8 PUSH2 0xEDB PUSH2 0x1E96 JUMP JUMPDEST PUSH2 0xEE3 PUSH2 0x1E96 JUMP JUMPDEST PUSH2 0x1EE6 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEF5 PUSH2 0x1ADD JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF05 DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH2 0x1F42 JUMP JUMPDEST SWAP1 POP DUP1 SWAP2 POP POP PUSH2 0xF13 PUSH2 0x1D89 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0xF50 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0xF7D JUMPI POP PUSH2 0xF5F ADDRESS PUSH2 0x2167 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0xF7C JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0xFBC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFB3 SWAP1 PUSH2 0x3C9C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0xFF9 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH1 0xFB DUP2 SWAP1 SSTORE POP PUSH1 0x3C DUP4 PUSH2 0x100E SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST PUSH1 0xFC DUP2 SWAP1 SSTORE POP PUSH1 0x3C DUP5 PUSH2 0x1021 SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST PUSH1 0xFD DUP2 SWAP1 SSTORE POP PUSH1 0x3C DUP6 PUSH2 0x1034 SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST PUSH1 0xFE DUP2 SWAP1 SSTORE POP DUP8 PUSH1 0xFF PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP8 PUSH2 0x100 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP7 PUSH2 0x101 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP6 PUSH2 0x102 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1151 PUSH2 0x114C PUSH2 0x1990 JUMP JUMPDEST PUSH2 0xDC9 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP DUP1 ISZERO PUSH2 0x11AE JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x11A5 SWAP2 SWAP1 PUSH2 0x3D01 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1247 PUSH2 0x1495 JUMP JUMPDEST PUSH2 0x1286 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x127D SWAP1 PUSH2 0x39E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x128E PUSH2 0x218A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x40 ADD MLOAD DUP2 PUSH1 0x80 ADD MLOAD DUP3 PUSH1 0x60 ADD MLOAD DUP4 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0xC0 ADD MLOAD SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP POP SWAP4 SWAP8 POP SWAP4 SWAP8 SWAP2 SWAP6 POP SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH2 0x1412 PUSH2 0x1495 JUMP JUMPDEST PUSH2 0x1451 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1448 SWAP1 PUSH2 0x39E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x15180 DUP2 PUSH2 0x1460 SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST PUSH1 0xFC DUP2 SWAP1 SSTORE POP PUSH32 0xDB4FB2FD6B8B90F67BDA8671842D5CAB4EB4B7EBA9683F5BCEC9ABA9473CC957 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14AF PUSH2 0x14A2 PUSH2 0x1E96 JUMP JUMPDEST PUSH2 0x14AA PUSH2 0x1990 JUMP JUMPDEST PUSH2 0x1398 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0xFB SLOAD DUP2 LT ISZERO PUSH2 0x16EA JUMPI PUSH1 0x0 DUP1 PUSH2 0x15E3 DUP7 DUP5 PUSH2 0x102 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3BF4C082 DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x159D SWAP2 SWAP1 PUSH2 0x3584 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x15BA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x15DE SWAP2 SWAP1 PUSH2 0x3B03 JUMP JUMPDEST PUSH2 0x6B6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x16C8 JUMPI PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1659 JUMPI PUSH2 0x1658 PUSH2 0x3930 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD TIMESTAMP GT PUSH2 0x1685 JUMPI PUSH1 0x0 PUSH2 0x1696 JUMP JUMPDEST DUP2 PUSH1 0x0 ADD SLOAD TIMESTAMP PUSH2 0x1695 SWAP2 SWAP1 PUSH2 0x3B30 JUMP JUMPDEST JUMPDEST SWAP1 POP DUP1 DUP3 PUSH1 0x4 ADD SLOAD PUSH2 0x16A8 SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST DUP6 PUSH2 0x16B3 SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST SWAP5 POP DUP3 PUSH2 0x16BF SWAP1 PUSH2 0x38B9 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x15E8 JUMP JUMPDEST POP DUP2 DUP5 PUSH2 0x16D5 SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST SWAP4 POP DUP3 PUSH2 0x16E1 SWAP1 PUSH2 0x38B9 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x152F JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x16FD DUP3 PUSH2 0x8D9 JUMP JUMPDEST PUSH2 0x1706 DUP2 PUSH2 0x189B JUMP JUMPDEST PUSH2 0x1710 DUP4 DUP4 PUSH2 0x1998 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x103 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD DUP2 PUSH1 0x0 ADD MLOAD SWAP3 POP SWAP3 POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 TIMESTAMP PUSH2 0x17A7 DUP6 DUP6 DUP6 PUSH2 0x14B4 JUMP JUMPDEST GT ISZERO PUSH2 0x17DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x707001B500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x17EC DUP6 DUP6 DUP6 PUSH2 0x21ED JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1825 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB00FCB1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18AC DUP2 PUSH2 0x18A7 PUSH2 0x1990 JUMP JUMPDEST PUSH2 0x258F JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x18B9 DUP3 DUP3 PUSH2 0x1398 JUMP JUMPDEST PUSH2 0x198C JUMPI PUSH1 0x1 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x1931 PUSH2 0x1990 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x19A2 DUP3 DUP3 PUSH2 0x1398 JUMP JUMPDEST ISZERO PUSH2 0x1A76 JUMPI PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x1A1B PUSH2 0x1990 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1A82 PUSH2 0x2614 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x1AC6 PUSH2 0x1990 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1AD3 SWAP2 SWAP1 PUSH2 0x3D2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0xC9 SLOAD SUB PUSH2 0x1B22 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B19 SWAP1 PUSH2 0x3D92 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 PUSH2 0x1B3B PUSH2 0x1990 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1BDE JUMPI PUSH1 0x40 MLOAD PUSH32 0x96AE3E8200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1BF2 PUSH2 0x1BEB PUSH2 0x1990 JUMP JUMPDEST DUP10 DUP10 PUSH2 0x21ED JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1C2B JUMPI PUSH1 0x40 MLOAD PUSH32 0xB00FCB1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH2 0x1D79 JUMPI PUSH1 0x0 DUP10 PUSH2 0x104 PUSH1 0x0 PUSH2 0x1C40 PUSH2 0x1990 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x1CAA SWAP2 SWAP1 PUSH2 0x3B30 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0x278D00 PUSH1 0xFC SLOAD TIMESTAMP PUSH2 0x1CC0 SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST PUSH2 0x1CCA SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x1CDA DUP5 DUP14 DUP14 PUSH2 0x265D JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1D15 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB00FCB1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1D74 PUSH2 0x1D20 PUSH2 0x1990 JUMP JUMPDEST ADDRESS DUP4 DUP7 DUP15 DUP15 DUP15 PUSH2 0x100 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2C82 SWAP1 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1DE2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DD9 SWAP1 PUSH2 0x3C0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1DEA PUSH2 0x2E4F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1E3B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E32 SWAP1 PUSH2 0x3C0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1E8C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E83 SWAP1 PUSH2 0x3C0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1E94 PUSH2 0x2EBB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EF1 DUP4 PUSH2 0x8D9 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x97 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP8 PUSH2 0x104 PUSH1 0x0 PUSH2 0x1F53 PUSH2 0x1990 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x1FBD SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST SWAP1 POP PUSH2 0x104 PUSH1 0x0 PUSH2 0x1FCC PUSH2 0x1990 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x208D JUMPI PUSH1 0x0 PUSH2 0x2052 PUSH2 0x204B PUSH2 0x1990 JUMP JUMPDEST DUP10 DUP10 PUSH2 0x21ED JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x208B JUMPI PUSH1 0x40 MLOAD PUSH32 0xB00FCB1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST PUSH1 0x0 PUSH3 0x278D00 PUSH1 0xFC SLOAD TIMESTAMP PUSH2 0x20A1 SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST PUSH2 0x20AB SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x20BB DUP5 DUP12 DUP12 PUSH2 0x265D JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x20F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB00FCB1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2155 PUSH2 0x2101 PUSH2 0x1990 JUMP JUMPDEST ADDRESS DUP4 DUP7 DUP13 DUP13 DUP13 PUSH2 0x100 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2C82 SWAP1 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 SWAP5 POP POP POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2192 PUSH2 0x2F14 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x21D6 PUSH2 0x1990 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21E3 SWAP2 SWAP1 PUSH2 0x3D2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x104 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x229C JUMPI PUSH1 0x40 MLOAD PUSH32 0x96AE3E8200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x6 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD TIMESTAMP GT PUSH2 0x22CD JUMPI PUSH1 0x0 PUSH2 0x22F4 JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD TIMESTAMP GT PUSH2 0x22ED JUMPI DUP2 PUSH1 0x0 ADD SLOAD TIMESTAMP PUSH2 0x22E8 SWAP2 SWAP1 PUSH2 0x3B30 JUMP JUMPDEST PUSH2 0x22F3 JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x4 ADD SLOAD DUP3 PUSH2 0x2308 SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SUB PUSH2 0x231E JUMPI PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x2588 JUMP JUMPDEST DUP3 PUSH1 0x4 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2375 SWAP2 SWAP1 PUSH2 0x3B30 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x5 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x23D3 SWAP2 SWAP1 PUSH2 0x3B30 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP4 PUSH1 0x4 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0x2 ADD SLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x102 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x26A6E9EB DUP11 DUP11 DUP6 DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2450 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3DB2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x246F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2493 SWAP2 SWAP1 PUSH2 0x3E0C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x79CC6790 DUP13 DUP8 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x24F5 SWAP3 SWAP2 SWAP1 PUSH2 0x3E39 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2514 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2538 SWAP2 SWAP1 PUSH2 0x3E0C JUMP JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 PUSH2 0x2545 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x257C JUMPI PUSH1 0x40 MLOAD PUSH32 0xB00FCB1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP8 POP POP POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2599 DUP3 DUP3 PUSH2 0x1398 JUMP JUMPDEST PUSH2 0x2610 JUMPI PUSH2 0x25A6 DUP2 PUSH2 0x2F5E JUMP JUMPDEST PUSH2 0x25B4 DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0x2F8B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x25C5 SWAP3 SWAP2 SWAP1 PUSH2 0x3F6B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2607 SWAP2 SWAP1 PUSH2 0x3FEF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x261C PUSH2 0xD0D JUMP JUMPDEST PUSH2 0x265B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2652 SWAP1 PUSH2 0x405D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH8 0xDE0B6B3A7640000 DUP6 LT ISZERO PUSH2 0x26A1 JUMPI PUSH1 0x40 MLOAD PUSH31 0xCD474300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x102 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5657F79D DUP6 DUP8 DUP7 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2701 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x407D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x271E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2742 SWAP2 SWAP1 PUSH2 0x3E0C JUMP JUMPDEST PUSH2 0x2778 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1E45D1B400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x104 PUSH1 0x0 PUSH2 0x2785 PUSH2 0x1990 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x2829 JUMPI PUSH1 0x40 MLOAD PUSH32 0x707001B500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x104 PUSH1 0x0 PUSH2 0x2838 PUSH2 0x1990 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x103 PUSH1 0x0 PUSH2 0x28A5 PUSH2 0x1990 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x2 ADD SLOAD PUSH2 0x101 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 PUSH2 0x292F PUSH2 0x1990 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x294B SWAP2 SWAP1 PUSH2 0x3D2B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2968 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x298C SWAP2 SWAP1 PUSH2 0x3B03 JUMP JUMPDEST PUSH2 0x2996 SWAP2 SWAP1 PUSH2 0x3B30 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP10 PUSH2 0x102 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5952A8C6 DUP12 DUP12 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A02 SWAP3 SWAP2 SWAP1 PUSH2 0x3861 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A1F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2A43 SWAP2 SWAP1 PUSH2 0x3B03 JUMP JUMPDEST PUSH2 0x2A4D SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST PUSH2 0x2A57 SWAP2 SWAP1 PUSH2 0x40E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 DUP5 PUSH1 0x1 ADD SLOAD PUSH2 0x2A6B SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0xFE SLOAD DUP3 PUSH2 0x2A7C SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST GT ISZERO PUSH2 0x2AB4 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE4B581A500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 PUSH2 0x2AC2 SWAP2 SWAP1 PUSH2 0x40E3 JUMP JUMPDEST SWAP1 POP DUP3 DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2AD8 SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP11 DUP7 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP DUP3 DUP7 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP TIMESTAMP DUP7 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP PUSH1 0xFD SLOAD TIMESTAMP PUSH2 0x2B08 SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST DUP7 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH1 0xFC SLOAD DUP2 LT PUSH2 0x2B30 JUMPI PUSH1 0xFC SLOAD DUP7 PUSH1 0x0 ADD SLOAD PUSH2 0x2B2B SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST PUSH2 0x2B41 JUMP JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD SLOAD PUSH2 0x2B40 SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST JUMPDEST DUP7 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP3 DUP2 PUSH2 0x2B55 SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST DUP7 PUSH1 0x5 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP7 PUSH1 0x6 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP6 PUSH1 0x5 ADD SLOAD DUP6 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2B92 SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x0 ADD SLOAD DUP7 PUSH1 0x1 ADD SLOAD LT PUSH2 0x2BB2 JUMPI DUP6 PUSH1 0x1 ADD SLOAD PUSH2 0x2BB8 JUMP JUMPDEST DUP5 PUSH1 0x0 ADD SLOAD JUMPDEST DUP6 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x102 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD9895C70 DUP13 DUP13 DUP16 DUP9 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C24 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3DB2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2C43 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2C67 SWAP2 SWAP1 PUSH2 0x3E0C JUMP JUMPDEST SWAP1 POP DUP1 DUP8 PUSH1 0x5 ADD SLOAD SWAP9 POP SWAP9 POP POP POP POP POP POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7ECEBE00 DUP10 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2CBD SWAP2 SWAP1 PUSH2 0x3D2B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2CDA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2CFE SWAP2 SWAP1 PUSH2 0x3B03 JUMP JUMPDEST SWAP1 POP DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD505ACCF DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D45 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4123 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2D73 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7ECEBE00 DUP11 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DB2 SWAP2 SWAP1 PUSH2 0x3D2B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2DCF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2DF3 SWAP2 SWAP1 PUSH2 0x3B03 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP3 PUSH2 0x2E02 SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST DUP2 EQ PUSH2 0x2E43 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E3A SWAP1 PUSH2 0x4204 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2E9E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E95 SWAP1 PUSH2 0x3C0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2F0A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F01 SWAP1 PUSH2 0x3C0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x2F1C PUSH2 0xD0D JUMP JUMPDEST ISZERO PUSH2 0x2F5C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F53 SWAP1 PUSH2 0x4270 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2F84 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0x2F8B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0x2F9E SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST PUSH2 0x2FA8 SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2FC1 JUMPI PUSH2 0x2FC0 PUSH2 0x3901 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2FF3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x302B JUMPI PUSH2 0x302A PUSH2 0x3930 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x308F JUMPI PUSH2 0x308E PUSH2 0x3930 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0x30CF SWAP2 SWAP1 PUSH2 0x3A02 JUMP JUMPDEST PUSH2 0x30D9 SWAP2 SWAP1 PUSH2 0x3B64 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x3179 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0x311B JUMPI PUSH2 0x311A PUSH2 0x3930 JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3132 JUMPI PUSH2 0x3131 PUSH2 0x3930 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0x3172 SWAP1 PUSH2 0x4290 JUMP JUMPDEST SWAP1 POP PUSH2 0x30DC JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0x31BD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x31B4 SWAP1 PUSH2 0x4305 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3201 DUP2 PUSH2 0x31CC JUMP JUMPDEST DUP2 EQ PUSH2 0x320C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x321E DUP2 PUSH2 0x31F8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x323A JUMPI PUSH2 0x3239 PUSH2 0x31C7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3248 DUP5 DUP3 DUP6 ADD PUSH2 0x320F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3266 DUP2 PUSH2 0x3251 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3281 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x325D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32B2 DUP3 PUSH2 0x3287 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x32C2 DUP2 PUSH2 0x32A7 JUMP JUMPDEST DUP2 EQ PUSH2 0x32CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x32DF DUP2 PUSH2 0x32B9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x32F8 DUP2 PUSH2 0x32E5 JUMP JUMPDEST DUP2 EQ PUSH2 0x3303 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3315 DUP2 PUSH2 0x32EF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3334 JUMPI PUSH2 0x3333 PUSH2 0x31C7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3342 DUP7 DUP3 DUP8 ADD PUSH2 0x32D0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3353 DUP7 DUP3 DUP8 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x3364 DUP7 DUP3 DUP8 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x33A3 DUP2 PUSH2 0x32E5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33B5 DUP4 DUP4 PUSH2 0x339A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33D9 DUP3 PUSH2 0x336E JUMP JUMPDEST PUSH2 0x33E3 DUP2 DUP6 PUSH2 0x3379 JUMP JUMPDEST SWAP4 POP PUSH2 0x33EE DUP4 PUSH2 0x338A JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x341F JUMPI DUP2 MLOAD PUSH2 0x3406 DUP9 DUP3 PUSH2 0x33A9 JUMP JUMPDEST SWAP8 POP PUSH2 0x3411 DUP4 PUSH2 0x33C1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x33F2 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3446 DUP2 DUP5 PUSH2 0x33CE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3461 DUP2 PUSH2 0x344E JUMP JUMPDEST DUP2 EQ PUSH2 0x346C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x347E DUP2 PUSH2 0x3458 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x349A JUMPI PUSH2 0x3499 PUSH2 0x31C7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x34A8 DUP5 DUP3 DUP6 ADD PUSH2 0x346F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x34BA DUP2 PUSH2 0x344E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x34D5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x34B1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x34F1 JUMPI PUSH2 0x34F0 PUSH2 0x31C7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x34FF DUP5 DUP3 DUP6 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x351F JUMPI PUSH2 0x351E PUSH2 0x31C7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x352D DUP6 DUP3 DUP7 ADD PUSH2 0x346F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x353E DUP6 DUP3 DUP7 ADD PUSH2 0x32D0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x355E JUMPI PUSH2 0x355D PUSH2 0x31C7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x356C DUP5 DUP3 DUP6 ADD PUSH2 0x32D0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x357E DUP2 PUSH2 0x32E5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3599 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3575 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x35B6 JUMPI PUSH2 0x35B5 PUSH2 0x31C7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x35C4 DUP6 DUP3 DUP7 ADD PUSH2 0x32D0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x35D5 DUP6 DUP3 DUP7 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x35F5 DUP2 PUSH2 0x35DF JUMP JUMPDEST DUP2 EQ PUSH2 0x3600 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3612 DUP2 PUSH2 0x35EC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3621 DUP2 PUSH2 0x3251 JUMP JUMPDEST DUP2 EQ PUSH2 0x362C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x363E DUP2 PUSH2 0x3618 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x3663 JUMPI PUSH2 0x3662 PUSH2 0x31C7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3671 DUP11 DUP3 DUP12 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x3682 DUP11 DUP3 DUP12 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x3693 DUP11 DUP3 DUP12 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x36A4 DUP11 DUP3 DUP12 ADD PUSH2 0x3603 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x36B5 DUP11 DUP3 DUP12 ADD PUSH2 0x346F JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x36C6 DUP11 DUP3 DUP12 ADD PUSH2 0x346F JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x36D7 DUP11 DUP3 DUP12 ADD PUSH2 0x362F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3703 JUMPI PUSH2 0x3702 PUSH2 0x31C7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3711 DUP10 DUP3 DUP11 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x3722 DUP10 DUP3 DUP11 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0x3733 DUP10 DUP3 DUP11 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0x3744 DUP10 DUP3 DUP11 ADD PUSH2 0x3603 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0x3755 DUP10 DUP3 DUP11 ADD PUSH2 0x346F JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH2 0x3766 DUP10 DUP3 DUP11 ADD PUSH2 0x346F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3790 JUMPI PUSH2 0x378F PUSH2 0x31C7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x379E DUP10 DUP3 DUP11 ADD PUSH2 0x32D0 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x37AF DUP10 DUP3 DUP11 ADD PUSH2 0x32D0 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0x37C0 DUP10 DUP3 DUP11 ADD PUSH2 0x32D0 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0x37D1 DUP10 DUP3 DUP11 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0x37E2 DUP10 DUP3 DUP11 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH2 0x37F3 DUP10 DUP3 DUP11 ADD PUSH2 0x3306 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x3815 PUSH1 0x0 DUP4 ADD DUP10 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x3822 PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x382F PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x383C PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x3849 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x3856 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x325D JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3876 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x3883 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3575 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x38C4 DUP3 PUSH2 0x32E5 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x38F6 JUMPI PUSH2 0x38F5 PUSH2 0x388A JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D75737420686176652061646D696E20726F6C6520746F20706572666F726D20 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7468697320616374696F6E2E0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39CC PUSH1 0x2C DUP4 PUSH2 0x395F JUMP JUMPDEST SWAP2 POP PUSH2 0x39D7 DUP3 PUSH2 0x3970 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x39FB DUP2 PUSH2 0x39BF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A0D DUP3 PUSH2 0x32E5 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A18 DUP4 PUSH2 0x32E5 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3A51 JUMPI PUSH2 0x3A50 PUSH2 0x388A JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AB8 PUSH1 0x2F DUP4 PUSH2 0x395F JUMP JUMPDEST SWAP2 POP PUSH2 0x3AC3 DUP3 PUSH2 0x3A5C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3AE7 DUP2 PUSH2 0x3AAB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3AFD DUP2 PUSH2 0x32EF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3B19 JUMPI PUSH2 0x3B18 PUSH2 0x31C7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3B27 DUP5 DUP3 DUP6 ADD PUSH2 0x3AEE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B3B DUP3 PUSH2 0x32E5 JUMP JUMPDEST SWAP2 POP PUSH2 0x3B46 DUP4 PUSH2 0x32E5 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x3B5E JUMPI PUSH2 0x3B5D PUSH2 0x388A JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B6F DUP3 PUSH2 0x32E5 JUMP JUMPDEST SWAP2 POP PUSH2 0x3B7A DUP4 PUSH2 0x32E5 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x3B92 JUMPI PUSH2 0x3B91 PUSH2 0x388A JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BF4 PUSH1 0x2B DUP4 PUSH2 0x395F JUMP JUMPDEST SWAP2 POP PUSH2 0x3BFF DUP3 PUSH2 0x3B98 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3C23 DUP2 PUSH2 0x3BE7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C86 PUSH1 0x2E DUP4 PUSH2 0x395F JUMP JUMPDEST SWAP2 POP PUSH2 0x3C91 DUP3 PUSH2 0x3C2A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3CB5 DUP2 PUSH2 0x3C79 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CEB PUSH2 0x3CE6 PUSH2 0x3CE1 DUP5 PUSH2 0x3CBC JUMP JUMPDEST PUSH2 0x3CC6 JUMP JUMPDEST PUSH2 0x35DF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3CFB DUP2 PUSH2 0x3CD0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3D16 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3CF2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3D25 DUP2 PUSH2 0x32A7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3D40 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3D1C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D7C PUSH1 0x1F DUP4 PUSH2 0x395F JUMP JUMPDEST SWAP2 POP PUSH2 0x3D87 DUP3 PUSH2 0x3D46 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3DAB DUP2 PUSH2 0x3D6F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x3DC7 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x3DD4 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x3DE1 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x3DEE PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x3575 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3E06 DUP2 PUSH2 0x3618 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3E22 JUMPI PUSH2 0x3E21 PUSH2 0x31C7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3E30 DUP5 DUP3 DUP6 ADD PUSH2 0x3DF7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3E4E PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3D1C JUMP JUMPDEST PUSH2 0x3E5B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3575 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3EA3 PUSH1 0x17 DUP4 PUSH2 0x3E62 JUMP JUMPDEST SWAP2 POP PUSH2 0x3EAE DUP3 PUSH2 0x3E6D JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3EE2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3EC7 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3EF9 DUP3 PUSH2 0x3EB9 JUMP JUMPDEST PUSH2 0x3F03 DUP2 DUP6 PUSH2 0x3E62 JUMP JUMPDEST SWAP4 POP PUSH2 0x3F13 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3EC4 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F55 PUSH1 0x11 DUP4 PUSH2 0x3E62 JUMP JUMPDEST SWAP2 POP PUSH2 0x3F60 DUP3 PUSH2 0x3F1F JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F76 DUP3 PUSH2 0x3E96 JUMP JUMPDEST SWAP2 POP PUSH2 0x3F82 DUP3 DUP6 PUSH2 0x3EEE JUMP JUMPDEST SWAP2 POP PUSH2 0x3F8D DUP3 PUSH2 0x3F48 JUMP JUMPDEST SWAP2 POP PUSH2 0x3F99 DUP3 DUP5 PUSH2 0x3EEE JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FC1 DUP3 PUSH2 0x3EB9 JUMP JUMPDEST PUSH2 0x3FCB DUP2 DUP6 PUSH2 0x395F JUMP JUMPDEST SWAP4 POP PUSH2 0x3FDB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3EC4 JUMP JUMPDEST PUSH2 0x3FE4 DUP2 PUSH2 0x3FA5 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4009 DUP2 DUP5 PUSH2 0x3FB6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4047 PUSH1 0x14 DUP4 PUSH2 0x395F JUMP JUMPDEST SWAP2 POP PUSH2 0x4052 DUP3 PUSH2 0x4011 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4076 DUP2 PUSH2 0x403A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x4092 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x409F PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x40AC PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x3575 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x40EE DUP3 PUSH2 0x32E5 JUMP JUMPDEST SWAP2 POP PUSH2 0x40F9 DUP4 PUSH2 0x32E5 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x4109 JUMPI PUSH2 0x4108 PUSH2 0x40B4 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x411D DUP2 PUSH2 0x35DF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH2 0x4138 PUSH1 0x0 DUP4 ADD DUP11 PUSH2 0x3D1C JUMP JUMPDEST PUSH2 0x4145 PUSH1 0x20 DUP4 ADD DUP10 PUSH2 0x3D1C JUMP JUMPDEST PUSH2 0x4152 PUSH1 0x40 DUP4 ADD DUP9 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x415F PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x3575 JUMP JUMPDEST PUSH2 0x416C PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x4114 JUMP JUMPDEST PUSH2 0x4179 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x34B1 JUMP JUMPDEST PUSH2 0x4186 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x34B1 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A207065726D697420646964206E6F7420737563636565 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x41EE PUSH1 0x21 DUP4 PUSH2 0x395F JUMP JUMPDEST SWAP2 POP PUSH2 0x41F9 DUP3 PUSH2 0x4192 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x421D DUP2 PUSH2 0x41E1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x425A PUSH1 0x10 DUP4 PUSH2 0x395F JUMP JUMPDEST SWAP2 POP PUSH2 0x4265 DUP3 PUSH2 0x4224 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4289 DUP2 PUSH2 0x424D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x429B DUP3 PUSH2 0x32E5 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x42AE JUMPI PUSH2 0x42AD PUSH2 0x388A JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42EF PUSH1 0x20 DUP4 PUSH2 0x395F JUMP JUMPDEST SWAP2 POP PUSH2 0x42FA DUP3 PUSH2 0x42B9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x431E DUP2 PUSH2 0x42E2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x27 PUSH21 0xC3A7975A94A92BF13FA5D1A07228ABF4B52DF9BBCA 0xF8 DUP1 MSTORE8 DUP3 0xC8 GAS 0xA7 SLT 0x4F PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"620:21316:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2903:213:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;16605:935:22;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4708:129:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5470:170:22;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5133:145:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6242:214;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4918:65:22;;;:::i;:::-;;21386:289;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;19143:738;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5124:194;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1858:84:3;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8268:397:22;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;21681:253;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;734:549:20;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6347:355:22;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4039:806;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;10403:116;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;20159:255;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4851:61;;;:::i;:::-;;20420:623;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;3203:145:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2324:49;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5777:161:22;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1289:117:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;19888:265:22;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;17563:925;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5558:147:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;21049:331:22;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;9861:536;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2903:213:0;2988:4;3026:43;3011:58;;;:11;:58;;;;:98;;;;3073:36;3097:11;3073:23;:36::i;:::-;3011:98;3004:105;;2903:213;;;:::o;16605:935:22:-;16764:16;16792:27;16837:6;16833:270;16853:16;16849:1;:20;16833:270;;;16886:42;16931:18;:31;16950:11;16931:31;;;;;;;;;;;;;;;:43;16963:10;16931:43;;;;;;;;;;;:46;16975:1;16931:46;;;;;;;;;;;16886:91;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16995:17;:25;;;16991:85;;;17040:21;;;;:::i;:::-;;;16991:85;17089:3;;;;:::i;:::-;;;16872:231;16833:270;;;;17112:25;17154:19;17140:34;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17112:62;;17184:15;17217:6;17213:298;17233:16;17229:1;:20;17213:298;;;17266:43;17312:18;:31;17331:11;17312:31;;;;;;;;;;;;;;;:43;17344:10;17312:43;;;;;;;;;;;:46;17356:1;17312:46;;;;;;;;;;;17266:92;;17376:17;:25;;;;;;;;;;;;17372:112;;;17441:1;17421:8;17430:7;17421:17;;;;;;;;:::i;:::-;;;;;;;:21;;;;;17460:9;;;;:::i;:::-;;;17372:112;17497:3;;;;:::i;:::-;;;17252:259;17213:298;;;;17525:8;17518:15;;;;;16605:935;;;;;:::o;4708:129:0:-;4782:7;4808:6;:12;4815:4;4808:12;;;;;;;;;;;:22;;;4801:29;;4708:129;;;:::o;5470:170:22:-;652:9:20;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;5586:7:22::1;5572:11;:21;;;;:::i;:::-;5552:17;:41;;;;5608:25;;;;;;;;;;5470:170:::0;:::o;5133:145:0:-;5216:18;5229:4;5216:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5246:25:::1;5257:4;5263:7;5246:10;:25::i;:::-;5133:145:::0;;;:::o;6242:214::-;6348:12;:10;:12::i;:::-;6337:23;;:7;:23;;;6329:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;6423:26;6435:4;6441:7;6423:11;:26::i;:::-;6242:214;;:::o;4918:65:22:-;652:9:20;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;4966:10:22::1;:8;:10::i;:::-;4918:65::o:0;21386:289::-;21495:7;21513:54;21570:24;:37;21595:11;21570:37;;;;;;;;;;;;;;;21513:94;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21624:23;:43;;;21617:50;;;21386:289;;;:::o;19143:738::-;19270:7;19289:23;19315:1;19289:27;;19326:25;19354:101;19376:11;19389:10;19401:18;;;;;;;;;;;:41;;;19443:10;19401:53;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;19354:21;:101::i;:::-;19326:129;;19469:9;19465:378;19485:8;:15;19482:1;:18;19465:378;;;19516:49;19568:18;:31;19587:11;19568:31;;;;;;;;;;;;;;;:43;19600:10;19568:43;;;;;;;;;;;:56;19612:8;19621:1;19612:11;;;;;;;;:::i;:::-;;;;;;;;19568:56;;;;;;;;;;;19516:108;;19638:16;19694:23;:33;;;19658:23;:33;;;:69;;;;:::i;:::-;19638:90;;19806:8;19762:23;:41;;;:52;;;;:::i;:::-;19742:73;;;;;:::i;:::-;;;19829:3;;;;:::i;:::-;;;19502:341;;19465:378;;;;19859:15;19852:22;;;;19143:738;;;;:::o;5124:194::-;652:9:20;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;5256:9:22::1;5240:13;:25;;;;:::i;:::-;5214:23;:51;;;;5280:31;;;;;;;;;;5124:194:::0;:::o;1858:84:3:-;1905:4;1928:7;;;;;;;;;;;1921:14;;1858:84;:::o;8268:397:22:-;8518:4;2505:21:4;:19;:21::i;:::-;8534:12:22::1;8549:85;8571:13;8586:10;8598:13;8613:1;8616;8619;8622:11;8549:21;:85::i;:::-;8534:100;;8651:7;8644:14;;;2547:20:4::0;:18;:20::i;:::-;8268:397:22;;;;;;;;;:::o;21681:253::-;21829:7;21855:18;:31;21874:11;21855:31;;;;;;;;;;;;;;;:43;21887:10;21855:43;;;;;;;;;;;:58;21899:13;21855:58;;;;;;;;;;;:72;;;21848:79;;21681:253;;;;;:::o;734:549:20:-;5363:13:2;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;845:1:20::1;828:19;;:5;:19;;::::0;825:99:::1;;870:43;;;;;;;;;;;;;;825:99;933:17;:15;:17::i;:::-;960:22;:20;:22::i;:::-;992:24;:22;:24::i;:::-;1027:43;1038:24;:22;:24::i;:::-;1064:5;1027:10;:43::i;:::-;1080:44;1091:25;:23;:25::i;:::-;1118:5;1080:10;:44::i;:::-;1135:66;1149:25;:23;:25::i;:::-;1176:24;:22;:24::i;:::-;1135:13;:66::i;:::-;1211:65;1225:24;:22;:24::i;:::-;1251;:22;:24::i;:::-;1211:13;:65::i;:::-;734:549:::0;:::o;6347:355:22:-;6570:4;2505:21:4;:19;:21::i;:::-;6586:12:22::1;6601:70;6621:13;6636:10;6648:13;6663:1;6666;6669;6601:19;:70::i;:::-;6586:85;;6688:7;6681:14;;;2547:20:4::0;:18;:20::i;:::-;6347:355:22;;;;;;;;:::o;4039:806::-;4301:4;3268:19:2;3291:13;;;;;;;;;;;3290:14;3268:36;;3336:14;:34;;;;;3369:1;3354:12;;;;;;;;;;:16;;;3336:34;3335:108;;;;3377:44;3415:4;3377:29;:44::i;:::-;3376:45;:66;;;;;3441:1;3425:12;;;;;;;;;;:17;;;3376:66;3335:108;3314:201;;;;;;;;;;;;:::i;:::-;;;;;;;;;3540:1;3525:12;;:16;;;;;;;;;;;;;;;;;;3555:14;3551:65;;;3601:4;3585:13;;:20;;;;;;;;;;;;;;;;;;3551:65;4336:1:22::1;4317:16;:20;;;;4382:9;4365:14;:26;;;;:::i;:::-;4347:15;:44;;;;4440:9;4421:16;:28;;;;:::i;:::-;4401:17;:48;;;;4511:9;4486:22;:34;;;;:::i;:::-;4460:23;:60;;;;4560:15;4530:9;;:46;;;;;;;;;;;;;;;;;;4628:15;4586;;:58;;;;;;;;;;;;;;;;;;4679:13;4654:7;;:39;;;;;;;;;;;;;;;;;;4743:19;4703:18;;:60;;;;;;;;;;;;;;;;;;4773:44;4804:12;:10;:12::i;:::-;4773:30;:44::i;:::-;4834:4;4827:11;;3640:14:2::0;3636:99;;;3686:5;3670:13;;:21;;;;;;;;;;;;;;;;;;3710:14;3722:1;3710:14;;;;;;:::i;:::-;;;;;;;;3636:99;3258:483;4039:806:22;;;;;;;;:::o;10403:116::-;10505:4;10403:116;;;;:::o;20159:255::-;20318:4;20341:18;:31;20360:11;20341:31;;;;;;;;;;;;;;;:43;20373:10;20341:43;;;;;;;;;;;:58;20385:13;20341:58;;;;;;;;;;;:66;;;;;;;;;;;;20334:73;;20159:255;;;;;:::o;4851:61::-;652:9:20;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;4897:8:22::1;:6;:8::i;:::-;4851:61::o:0;20420:623::-;20577:7;20586;20595;20604;20613;20622:4;20638:42;20683:18;:31;20702:11;20683:31;;;;;;;;;;;;;;;:43;20715:10;20683:43;;;;;;;;;;;:58;20727:13;20683:58;;;;;;;;;;;20638:103;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20772:17;:31;;;20818:17;:35;;;20867:17;:34;;;20915:17;:27;;;20956:17;:27;;;20997:17;:25;;;20751:285;;;;;;;;;;;;;20420:623;;;;;;;;;;:::o;3203:145:0:-;3289:4;3312:6;:12;3319:4;3312:12;;;;;;;;;;;:20;;:29;3333:7;3312:29;;;;;;;;;;;;;;;;;;;;;;;;;3305:36;;3203:145;;;;:::o;2324:49::-;2369:4;2324:49;;;:::o;5777:161:22:-;652:9:20;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;5887:6:22::1;5874:10;:19;;;;:::i;:::-;5856:15;:37;;;;5908:23;;;;;;;;;;5777:161:::0;:::o;1289:117:20:-;1329:4;1352:47;1360:24;:22;:24::i;:::-;1386:12;:10;:12::i;:::-;1352:7;:47::i;:::-;1345:54;;1289:117;:::o;19888:265:22:-;20052:7;20078:18;:31;20097:11;20078:31;;;;;;;;;;;;;;;:43;20110:10;20078:43;;;;;;;;;;;:58;20122:13;20078:58;;;;;;;;;;;:68;;;20071:75;;19888:265;;;;;:::o;17563:925::-;17652:7;17671:29;17703:1;17671:33;;17718:9;17714:730;17735:16;;17731:1;:20;17714:730;;;17768:23;17809:25;17837:83;17859:11;17872:1;17875:18;;;;;;;;;;;:41;;;17917:1;17875:44;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;17837:21;:83::i;:::-;17809:111;;17938:9;17934:429;17955:8;:15;17951:1;:19;17934:429;;;17991:49;18043:18;:31;18062:11;18043:31;;;;;;;;;;;;;;;:34;18075:1;18043:34;;;;;;;;;;;:47;18078:8;18087:1;18078:11;;;;;;;;:::i;:::-;;;;;;;;18043:47;;;;;;;;;;;17991:99;;18108:16;18145:23;:33;;;18127:15;:51;:109;;18235:1;18127:109;;;18199:23;:33;;;18181:15;:51;;;;:::i;:::-;18127:109;18108:128;;18318:8;18274:23;:41;;;:52;;;;:::i;:::-;18254:73;;;;;:::i;:::-;;;18345:3;;;;:::i;:::-;;;17973:390;;17934:429;;;;18401:15;18376:40;;;;;:::i;:::-;;;18430:3;;;;:::i;:::-;;;17754:690;;17714:730;;;;18460:21;18453:28;;;17563:925;;;:::o;5558:147:0:-;5642:18;5655:4;5642:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5672:26:::1;5684:4;5690:7;5672:11;:26::i;:::-;5558:147:::0;;;:::o;21049:331:22:-;21153:7;21162;21181:54;21238:24;:38;21263:12;21238:38;;;;;;;;;;;;;;;21181:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21294:23;:43;;;21339:23;:33;;;21286:87;;;;;21049:331;;;:::o;9861:536::-;9994:4;10112:15;10027:69;10057:11;10070:10;10082:13;10027:29;:69::i;:::-;:100;10010:192;;;10159:32;;;;;;;;;;;;;;10010:192;10211:12;10226:59;10246:11;10259:10;10271:13;10226:19;:59::i;:::-;10211:74;;10300:7;10295:75;;10330:29;;;;;;;;;;;;;;10295:75;10386:4;10379:11;;;9861:536;;;;;:::o;1060:166:17:-;1145:4;1183:36;1168:51;;;:11;:51;;;;1161:58;;1060:166;;;:::o;3642:103:0:-;3708:30;3719:4;3725:12;:10;:12::i;:::-;3708:10;:30::i;:::-;3642:103;:::o;7791:233::-;7874:22;7882:4;7888:7;7874;:22::i;:::-;7869:149;;7944:4;7912:6;:12;7919:4;7912:12;;;;;;;;;;;:20;;:29;7933:7;7912:29;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;;;;;;7994:12;:10;:12::i;:::-;7967:40;;7985:7;7967:40;;7979:4;7967:40;;;;;;;;;;7869:149;7791:233;;:::o;850:96:12:-;903:7;929:10;922:17;;850:96;:::o;8195:234:0:-;8278:22;8286:4;8292:7;8278;:22::i;:::-;8274:149;;;8348:5;8316:6;:12;8323:4;8316:12;;;;;;;;;;;:20;;:29;8337:7;8316:29;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;8399:12;:10;:12::i;:::-;8372:40;;8390:7;8372:40;;8384:4;8372:40;;;;;;;;;;8274:149;8195:234;;:::o;2676:117:3:-;1729:16;:14;:16::i;:::-;2744:5:::1;2734:7;;:15;;;;;;;;;;;;;;;;;;2764:22;2773:12;:10;:12::i;:::-;2764:22;;;;;;:::i;:::-;;;;;;;;2676:117::o:0;2580:287:4:-;1830:1;2712:7;;:19;2704:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1830:1;2842:7;:18;;;;2580:287::o;8680:1175:22:-;8908:4;8929:18;:32;8948:12;:10;:12::i;:::-;8929:32;;;;;;;;;;;;;;;:44;8962:10;8929:44;;;;;;;;;;;:59;8974:13;8929:59;;;;;;;;;;;:67;;;;;;;;;;;;8924:135;;9019:29;;;;;;;;;;;;;;8924:135;9068:23;9094:60;9114:12;:10;:12::i;:::-;9128:10;9140:13;9094:19;:60::i;:::-;9068:86;;9169:18;9164:86;;9210:29;;;;;;;;;;;;;;9164:86;9264:11;9259:569;;9291:24;9394:13;9318:18;:32;9337:12;:10;:12::i;:::-;9318:32;;;;;;;;;;;;;;;:44;9351:10;9318:44;;;;;;;;;;;:59;9363:13;9318:59;;;;;;;;;;;:73;;;:89;;;;:::i;:::-;9291:116;;9421:16;9476:7;9458:15;;9440;:33;;;;:::i;:::-;:43;;;;:::i;:::-;9421:62;;9498:20;9520:21;9545:62;9563:16;9581:10;9593:13;9545:17;:62::i;:::-;9497:110;;;;9626:15;9621:91;;9668:29;;;;;;;;;;;;;;9621:91;9725:89;9752:12;:10;:12::i;:::-;9774:4;9781:13;9796:8;9806:1;9809;9812;9725:15;;;;;;;;;;;:26;;;;:89;;;;;;;;;;:::i;:::-;9277:551;;;;9259:569;9844:4;9837:11;;;8680:1175;;;;;;;;;:::o;2873:209:4:-;1787:1;3053:7;:22;;;;2873:209::o;1063:97:3:-;5363:13:2;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1126:27:3::1;:25;:27::i;:::-;1063:97::o:0;2025:65:0:-;5363:13:2;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2025:65:0:o;1868:111:4:-;5363:13:2;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1938:34:4::1;:32;:34::i;:::-;1868:111::o:0;222:90:21:-;269:7;124:23;288:17;;222:90;:::o;318:92::-;366:7;191:24;385:18;;318:92;:::o;7376:247:0:-;7459:25;7487:18;7500:4;7487:12;:18::i;:::-;7459:46;;7540:9;7515:6;:12;7522:4;7515:12;;;;;;;;;;;:22;;:34;;;;7606:9;7587:17;7581:4;7564:52;;;;;;;;;;7449:174;7376:247;;:::o;6717:1050:22:-;6917:4;6933:24;7036:13;6960:18;:32;6979:12;:10;:12::i;:::-;6960:32;;;;;;;;;;;;;;;:44;6993:10;6960:44;;;;;;;;;;;:59;7005:13;6960:59;;;;;;;;;;;:73;;;:89;;;;:::i;:::-;6933:116;;7063:18;:32;7082:12;:10;:12::i;:::-;7063:32;;;;;;;;;;;;;;;:44;7096:10;7063:44;;;;;;;;;;;:59;7108:13;7063:59;;;;;;;;;;;:67;;;;;;;;;;;;7059:291;;;7146:23;7172:60;7192:12;:10;:12::i;:::-;7206:10;7218:13;7172:19;:60::i;:::-;7146:86;;7251:18;7246:94;;7296:29;;;;;;;;;;;;;;7246:94;7132:218;7059:291;7362:16;7417:7;7399:15;;7381;:33;;;;:::i;:::-;:43;;;;:::i;:::-;7362:62;;7437:20;7459:21;7484:62;7502:16;7520:10;7532:13;7484:17;:62::i;:::-;7436:110;;;;7561:15;7556:83;;7599:29;;;;;;;;;;;;;;7556:83;7648:89;7675:12;:10;:12::i;:::-;7697:4;7704:13;7719:8;7729:1;7732;7735;7648:15;;;;;;;;;;;:26;;;;:89;;;;;;;;;;:::i;:::-;7756:4;7749:11;;;;;;6717:1050;;;;;;;;:::o;1186:320:11:-;1246:4;1498:1;1476:7;:19;;;:23;1469:30;;1186:320;;;:::o;2429:115:3:-;1482:19;:17;:19::i;:::-;2498:4:::1;2488:7;;:14;;;;;;;;;;;;;;;;;;2517:20;2524:12;:10;:12::i;:::-;2517:20;;;;;;:::i;:::-;;;;;;;;2429:115::o:0;13431:1500:22:-;13572:4;13588:43;13634:18;:31;13653:11;13634:31;;;;;;;;;;;;;;;:43;13666:10;13634:43;;;;;;;;;;;:58;13678:13;13634:58;;;;;;;;;;;13588:104;;13707:17;:25;;;;;;;;;;;;13702:93;;13755:29;;;;;;;;;;;;;;13702:93;13832:5;13804:17;:25;;;:33;;;;;;;;;;;;;;;;;;13847:16;13899:17;:27;;;13881:15;:45;13880:230;;14109:1;13880:230;;;13967:17;:27;;;13949:15;:45;13948:144;;14064:17;:27;;;14046:15;:45;;;;:::i;:::-;13948:144;;;14015:17;:27;;;13948:144;13880:230;13847:264;;14121:24;14160:17;:35;;;14149:8;:46;;;;:::i;:::-;14121:75;;14230:1;14210:16;:21;14206:63;;14254:4;14247:11;;;;;;;14206:63;14340:17;:35;;;14279:24;:37;14304:11;14279:37;;;;;;;;;;;;;;;:57;;;:96;;;;;;;:::i;:::-;;;;;;;;14446:17;:31;;;14385:24;:37;14410:11;14385:37;;;;;;;;;;;;;;;:57;;;:92;;;;;;;:::i;:::-;;;;;;;;14487:16;14506:17;:35;;;14487:54;;14551:21;14575:17;:31;;;14551:55;;14616:12;14631:18;;;;;;;;;;;:40;;;14672:10;14684:13;14699;14714:8;14631:92;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;14616:107;;14733:16;14752:7;;;;;;;;;;;:16;;;14769:11;14782:16;14752:47;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;14733:66;;14815:7;14814:8;14813:28;;;;14829:11;14828:12;14813:28;14809:95;;;14864:29;;;;;;;;;;;;;;14809:95;14920:4;14913:11;;;;;;;;;13431:1500;;;;;;:::o;4026:501:0:-;4114:22;4122:4;4128:7;4114;:22::i;:::-;4109:412;;4297:39;4328:7;4297:30;:39::i;:::-;4407:49;4446:4;4438:13;;4453:2;4407:30;:49::i;:::-;4204:274;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4152:358;;;;;;;;;;;:::i;:::-;;;;;;;;4109:412;4026:501;;:::o;2188:106:3:-;2254:8;:6;:8::i;:::-;2246:41;;;;;;;;;;;;:::i;:::-;;;;;;;;;2188:106::o;10627:2703:22:-;10766:4;10772:7;10811:4;10795:13;:20;10791:96;;;10838:38;;;;;;;;;;;;;;10791:96;10915:18;;;;;;;;;;;:36;;;10952:10;10964:13;10979;10915:78;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10896:177;;11030:32;;;;;;;;;;;;;;10896:177;11086:18;:32;11105:12;:10;:12::i;:::-;11086:32;;;;;;;;;;;;;;;:44;11119:10;11086:44;;;;;;;;;;;:59;11131:13;11086:59;;;;;;;;;;;:67;;;;;;;;;;;;11082:137;;;11176:32;;;;;;;;;;;;;;11082:137;11237:43;11283:18;:32;11302:12;:10;:12::i;:::-;11283:32;;;;;;;;;;;;;;;:44;11316:10;11283:44;;;;;;;;;;;:59;11328:13;11283:59;;;;;;;;;;;11237:105;;11352:55;11410:24;:38;11435:12;:10;:12::i;:::-;11410:38;;;;;;;;;;;;;;;11352:96;;11467:28;11532:23;:43;;;11498:7;;;;;;;;;;;:17;;;11516:12;:10;:12::i;:::-;11498:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:77;;;;:::i;:::-;11467:108;;11585:28;11713:4;11696:13;11630:18;;;;;;;;;;;:36;;;11667:10;11679:13;11630:63;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:79;;;;:::i;:::-;11616:101;;;;:::i;:::-;11585:132;;11727:34;11810:20;11764:23;:43;;;:66;;;;:::i;:::-;11727:103;;12007:20;11980:23;;11951:26;:52;;;;:::i;:::-;11950:77;11946:157;;;12050:42;;;;;;;;;;;;;;11946:157;12113:17;12157:20;12134;:43;;;;:::i;:::-;12113:65;;12235:20;12188:23;:43;;;:67;;;;;;;:::i;:::-;;;;;;;;12299:13;12265:17;:31;;:47;;;;12360:20;12322:17;:35;;:58;;;;12427:15;12390:17;:34;;:52;;;;12500:17;;12482:15;:35;;;;:::i;:::-;12452:17;:27;;:65;;;;12583:15;;12571:9;:27;:130;;12686:15;;12656:17;:27;;;:45;;;;:::i;:::-;12571:130;;;12644:9;12614:17;:27;;;:39;;;;:::i;:::-;12571:130;12527:17;:27;;:184;;;;12767:20;12755:9;:32;;;;:::i;:::-;12721:17;:31;;:66;;;;12825:4;12797:17;:25;;;:32;;;;;;;;;;;;;;;;;;12895:17;:31;;;12848:23;:43;;;:78;;;;;;;:::i;:::-;;;;;;;;13016:23;:33;;;12986:17;:27;;;:63;:142;;13101:17;:27;;;12986:142;;;13065:23;:33;;;12986:142;12936:23;:33;;:202;;;;13148:12;13163:18;;;;;;;;;;;:37;;;13201:10;13213:13;13228;13243:20;13163:101;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13148:116;;13282:7;13291:17;:31;;;13274:49;;;;;;;;;;;10627:2703;;;;;;:::o;3002:483:10:-;3238:19;3260:5;:12;;;3273:5;3260:19;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3238:41;;3289:5;:12;;;3302:5;3309:7;3318:5;3325:8;3335:1;3338;3341;3289:54;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3353:18;3374:5;:12;;;3387:5;3374:19;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3353:40;;3439:1;3425:11;:15;;;;:::i;:::-;3411:10;:29;3403:75;;;;;;;;;;;;:::i;:::-;;;;;;;;;3228:257;;3002:483;;;;;;;;:::o;1166:95:3:-;5363:13:2;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1249:5:3::1;1239:7;;:15;;;;;;;;;;;;;;;;;;1166:95::o:0;1985:109:4:-;5363:13:2;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1787:1:4::1;2065:7;:22;;;;1985:109::o:0;2010:106:3:-;2080:8;:6;:8::i;:::-;2079:9;2071:38;;;;;;;;;;;;:::i;:::-;;;;;;;;;2010:106::o;2146:149:14:-;2204:13;2236:52;2264:4;2248:22;;333:2;2236:52;;:11;:52::i;:::-;2229:59;;2146:149;;;:::o;1557:437::-;1632:13;1657:19;1702:1;1693:6;1689:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1679:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1657:47;;1714:15;:6;1721:1;1714:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1739;:6;1746:1;1739:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1769:9;1794:1;1785:6;1781:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1769:26;;1764:128;1801:1;1797;:5;1764:128;;;1835:8;1852:3;1844:5;:11;1835:21;;;;;;;:::i;:::-;;;;;1823:6;1830:1;1823:9;;;;;;;;:::i;:::-;;;;;:33;;;;;;;;;;;1880:1;1870:11;;;;;1804:3;;;;:::i;:::-;;;1764:128;;;;1918:1;1909:5;:10;1901:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;1980:6;1966:21;;;1557:437;;;;:::o;88:117:27:-;197:1;194;187:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:126::-;1555:7;1595:42;1588:5;1584:54;1573:65;;1518:126;;;:::o;1650:96::-;1687:7;1716:24;1734:5;1716:24;:::i;:::-;1705:35;;1650:96;;;:::o;1752:122::-;1825:24;1843:5;1825:24;:::i;:::-;1818:5;1815:35;1805:63;;1864:1;1861;1854:12;1805:63;1752:122;:::o;1880:139::-;1926:5;1964:6;1951:20;1942:29;;1980:33;2007:5;1980:33;:::i;:::-;1880:139;;;;:::o;2025:77::-;2062:7;2091:5;2080:16;;2025:77;;;:::o;2108:122::-;2181:24;2199:5;2181:24;:::i;:::-;2174:5;2171:35;2161:63;;2220:1;2217;2210:12;2161:63;2108:122;:::o;2236:139::-;2282:5;2320:6;2307:20;2298:29;;2336:33;2363:5;2336:33;:::i;:::-;2236:139;;;;:::o;2381:619::-;2458:6;2466;2474;2523:2;2511:9;2502:7;2498:23;2494:32;2491:119;;;2529:79;;:::i;:::-;2491:119;2649:1;2674:53;2719:7;2710:6;2699:9;2695:22;2674:53;:::i;:::-;2664:63;;2620:117;2776:2;2802:53;2847:7;2838:6;2827:9;2823:22;2802:53;:::i;:::-;2792:63;;2747:118;2904:2;2930:53;2975:7;2966:6;2955:9;2951:22;2930:53;:::i;:::-;2920:63;;2875:118;2381:619;;;;;:::o;3006:114::-;3073:6;3107:5;3101:12;3091:22;;3006:114;;;:::o;3126:184::-;3225:11;3259:6;3254:3;3247:19;3299:4;3294:3;3290:14;3275:29;;3126:184;;;;:::o;3316:132::-;3383:4;3406:3;3398:11;;3436:4;3431:3;3427:14;3419:22;;3316:132;;;:::o;3454:108::-;3531:24;3549:5;3531:24;:::i;:::-;3526:3;3519:37;3454:108;;:::o;3568:179::-;3637:10;3658:46;3700:3;3692:6;3658:46;:::i;:::-;3736:4;3731:3;3727:14;3713:28;;3568:179;;;;:::o;3753:113::-;3823:4;3855;3850:3;3846:14;3838:22;;3753:113;;;:::o;3902:732::-;4021:3;4050:54;4098:5;4050:54;:::i;:::-;4120:86;4199:6;4194:3;4120:86;:::i;:::-;4113:93;;4230:56;4280:5;4230:56;:::i;:::-;4309:7;4340:1;4325:284;4350:6;4347:1;4344:13;4325:284;;;4426:6;4420:13;4453:63;4512:3;4497:13;4453:63;:::i;:::-;4446:70;;4539:60;4592:6;4539:60;:::i;:::-;4529:70;;4385:224;4372:1;4369;4365:9;4360:14;;4325:284;;;4329:14;4625:3;4618:10;;4026:608;;;3902:732;;;;:::o;4640:373::-;4783:4;4821:2;4810:9;4806:18;4798:26;;4870:9;4864:4;4860:20;4856:1;4845:9;4841:17;4834:47;4898:108;5001:4;4992:6;4898:108;:::i;:::-;4890:116;;4640:373;;;;:::o;5019:77::-;5056:7;5085:5;5074:16;;5019:77;;;:::o;5102:122::-;5175:24;5193:5;5175:24;:::i;:::-;5168:5;5165:35;5155:63;;5214:1;5211;5204:12;5155:63;5102:122;:::o;5230:139::-;5276:5;5314:6;5301:20;5292:29;;5330:33;5357:5;5330:33;:::i;:::-;5230:139;;;;:::o;5375:329::-;5434:6;5483:2;5471:9;5462:7;5458:23;5454:32;5451:119;;;5489:79;;:::i;:::-;5451:119;5609:1;5634:53;5679:7;5670:6;5659:9;5655:22;5634:53;:::i;:::-;5624:63;;5580:117;5375:329;;;;:::o;5710:118::-;5797:24;5815:5;5797:24;:::i;:::-;5792:3;5785:37;5710:118;;:::o;5834:222::-;5927:4;5965:2;5954:9;5950:18;5942:26;;5978:71;6046:1;6035:9;6031:17;6022:6;5978:71;:::i;:::-;5834:222;;;;:::o;6062:329::-;6121:6;6170:2;6158:9;6149:7;6145:23;6141:32;6138:119;;;6176:79;;:::i;:::-;6138:119;6296:1;6321:53;6366:7;6357:6;6346:9;6342:22;6321:53;:::i;:::-;6311:63;;6267:117;6062:329;;;;:::o;6397:474::-;6465:6;6473;6522:2;6510:9;6501:7;6497:23;6493:32;6490:119;;;6528:79;;:::i;:::-;6490:119;6648:1;6673:53;6718:7;6709:6;6698:9;6694:22;6673:53;:::i;:::-;6663:63;;6619:117;6775:2;6801:53;6846:7;6837:6;6826:9;6822:22;6801:53;:::i;:::-;6791:63;;6746:118;6397:474;;;;;:::o;6877:329::-;6936:6;6985:2;6973:9;6964:7;6960:23;6956:32;6953:119;;;6991:79;;:::i;:::-;6953:119;7111:1;7136:53;7181:7;7172:6;7161:9;7157:22;7136:53;:::i;:::-;7126:63;;7082:117;6877:329;;;;:::o;7212:118::-;7299:24;7317:5;7299:24;:::i;:::-;7294:3;7287:37;7212:118;;:::o;7336:222::-;7429:4;7467:2;7456:9;7452:18;7444:26;;7480:71;7548:1;7537:9;7533:17;7524:6;7480:71;:::i;:::-;7336:222;;;;:::o;7564:474::-;7632:6;7640;7689:2;7677:9;7668:7;7664:23;7660:32;7657:119;;;7695:79;;:::i;:::-;7657:119;7815:1;7840:53;7885:7;7876:6;7865:9;7861:22;7840:53;:::i;:::-;7830:63;;7786:117;7942:2;7968:53;8013:7;8004:6;7993:9;7989:22;7968:53;:::i;:::-;7958:63;;7913:118;7564:474;;;;;:::o;8044:86::-;8079:7;8119:4;8112:5;8108:16;8097:27;;8044:86;;;:::o;8136:118::-;8207:22;8223:5;8207:22;:::i;:::-;8200:5;8197:33;8187:61;;8244:1;8241;8234:12;8187:61;8136:118;:::o;8260:135::-;8304:5;8342:6;8329:20;8320:29;;8358:31;8383:5;8358:31;:::i;:::-;8260:135;;;;:::o;8401:116::-;8471:21;8486:5;8471:21;:::i;:::-;8464:5;8461:32;8451:60;;8507:1;8504;8497:12;8451:60;8401:116;:::o;8523:133::-;8566:5;8604:6;8591:20;8582:29;;8620:30;8644:5;8620:30;:::i;:::-;8523:133;;;;:::o;8662:1193::-;8770:6;8778;8786;8794;8802;8810;8818;8867:3;8855:9;8846:7;8842:23;8838:33;8835:120;;;8874:79;;:::i;:::-;8835:120;8994:1;9019:53;9064:7;9055:6;9044:9;9040:22;9019:53;:::i;:::-;9009:63;;8965:117;9121:2;9147:53;9192:7;9183:6;9172:9;9168:22;9147:53;:::i;:::-;9137:63;;9092:118;9249:2;9275:53;9320:7;9311:6;9300:9;9296:22;9275:53;:::i;:::-;9265:63;;9220:118;9377:2;9403:51;9446:7;9437:6;9426:9;9422:22;9403:51;:::i;:::-;9393:61;;9348:116;9503:3;9530:53;9575:7;9566:6;9555:9;9551:22;9530:53;:::i;:::-;9520:63;;9474:119;9632:3;9659:53;9704:7;9695:6;9684:9;9680:22;9659:53;:::i;:::-;9649:63;;9603:119;9761:3;9788:50;9830:7;9821:6;9810:9;9806:22;9788:50;:::i;:::-;9778:60;;9732:116;8662:1193;;;;;;;;;;:::o;9861:1053::-;9963:6;9971;9979;9987;9995;10003;10052:3;10040:9;10031:7;10027:23;10023:33;10020:120;;;10059:79;;:::i;:::-;10020:120;10179:1;10204:53;10249:7;10240:6;10229:9;10225:22;10204:53;:::i;:::-;10194:63;;10150:117;10306:2;10332:53;10377:7;10368:6;10357:9;10353:22;10332:53;:::i;:::-;10322:63;;10277:118;10434:2;10460:53;10505:7;10496:6;10485:9;10481:22;10460:53;:::i;:::-;10450:63;;10405:118;10562:2;10588:51;10631:7;10622:6;10611:9;10607:22;10588:51;:::i;:::-;10578:61;;10533:116;10688:3;10715:53;10760:7;10751:6;10740:9;10736:22;10715:53;:::i;:::-;10705:63;;10659:119;10817:3;10844:53;10889:7;10880:6;10869:9;10865:22;10844:53;:::i;:::-;10834:63;;10788:119;9861:1053;;;;;;;;:::o;10920:1057::-;11024:6;11032;11040;11048;11056;11064;11113:3;11101:9;11092:7;11088:23;11084:33;11081:120;;;11120:79;;:::i;:::-;11081:120;11240:1;11265:53;11310:7;11301:6;11290:9;11286:22;11265:53;:::i;:::-;11255:63;;11211:117;11367:2;11393:53;11438:7;11429:6;11418:9;11414:22;11393:53;:::i;:::-;11383:63;;11338:118;11495:2;11521:53;11566:7;11557:6;11546:9;11542:22;11521:53;:::i;:::-;11511:63;;11466:118;11623:2;11649:53;11694:7;11685:6;11674:9;11670:22;11649:53;:::i;:::-;11639:63;;11594:118;11751:3;11778:53;11823:7;11814:6;11803:9;11799:22;11778:53;:::i;:::-;11768:63;;11722:119;11880:3;11907:53;11952:7;11943:6;11932:9;11928:22;11907:53;:::i;:::-;11897:63;;11851:119;10920:1057;;;;;;;;:::o;11983:763::-;12210:4;12248:3;12237:9;12233:19;12225:27;;12262:71;12330:1;12319:9;12315:17;12306:6;12262:71;:::i;:::-;12343:72;12411:2;12400:9;12396:18;12387:6;12343:72;:::i;:::-;12425;12493:2;12482:9;12478:18;12469:6;12425:72;:::i;:::-;12507;12575:2;12564:9;12560:18;12551:6;12507:72;:::i;:::-;12589:73;12657:3;12646:9;12642:19;12633:6;12589:73;:::i;:::-;12672:67;12734:3;12723:9;12719:19;12710:6;12672:67;:::i;:::-;11983:763;;;;;;;;;:::o;12752:332::-;12873:4;12911:2;12900:9;12896:18;12888:26;;12924:71;12992:1;12981:9;12977:17;12968:6;12924:71;:::i;:::-;13005:72;13073:2;13062:9;13058:18;13049:6;13005:72;:::i;:::-;12752:332;;;;;:::o;13090:180::-;13138:77;13135:1;13128:88;13235:4;13232:1;13225:15;13259:4;13256:1;13249:15;13276:233;13315:3;13338:24;13356:5;13338:24;:::i;:::-;13329:33;;13384:66;13377:5;13374:77;13371:103;;13454:18;;:::i;:::-;13371:103;13501:1;13494:5;13490:13;13483:20;;13276:233;;;:::o;13515:180::-;13563:77;13560:1;13553:88;13660:4;13657:1;13650:15;13684:4;13681:1;13674:15;13701:180;13749:77;13746:1;13739:88;13846:4;13843:1;13836:15;13870:4;13867:1;13860:15;13887:169;13971:11;14005:6;14000:3;13993:19;14045:4;14040:3;14036:14;14021:29;;13887:169;;;;:::o;14062:231::-;14202:34;14198:1;14190:6;14186:14;14179:58;14271:14;14266:2;14258:6;14254:15;14247:39;14062:231;:::o;14299:366::-;14441:3;14462:67;14526:2;14521:3;14462:67;:::i;:::-;14455:74;;14538:93;14627:3;14538:93;:::i;:::-;14656:2;14651:3;14647:12;14640:19;;14299:366;;;:::o;14671:419::-;14837:4;14875:2;14864:9;14860:18;14852:26;;14924:9;14918:4;14914:20;14910:1;14899:9;14895:17;14888:47;14952:131;15078:4;14952:131;:::i;:::-;14944:139;;14671:419;;;:::o;15096:348::-;15136:7;15159:20;15177:1;15159:20;:::i;:::-;15154:25;;15193:20;15211:1;15193:20;:::i;:::-;15188:25;;15381:1;15313:66;15309:74;15306:1;15303:81;15298:1;15291:9;15284:17;15280:105;15277:131;;;15388:18;;:::i;:::-;15277:131;15436:1;15433;15429:9;15418:20;;15096:348;;;;:::o;15450:234::-;15590:34;15586:1;15578:6;15574:14;15567:58;15659:17;15654:2;15646:6;15642:15;15635:42;15450:234;:::o;15690:366::-;15832:3;15853:67;15917:2;15912:3;15853:67;:::i;:::-;15846:74;;15929:93;16018:3;15929:93;:::i;:::-;16047:2;16042:3;16038:12;16031:19;;15690:366;;;:::o;16062:419::-;16228:4;16266:2;16255:9;16251:18;16243:26;;16315:9;16309:4;16305:20;16301:1;16290:9;16286:17;16279:47;16343:131;16469:4;16343:131;:::i;:::-;16335:139;;16062:419;;;:::o;16487:143::-;16544:5;16575:6;16569:13;16560:22;;16591:33;16618:5;16591:33;:::i;:::-;16487:143;;;;:::o;16636:351::-;16706:6;16755:2;16743:9;16734:7;16730:23;16726:32;16723:119;;;16761:79;;:::i;:::-;16723:119;16881:1;16906:64;16962:7;16953:6;16942:9;16938:22;16906:64;:::i;:::-;16896:74;;16852:128;16636:351;;;;:::o;16993:194::-;17033:4;17053:20;17071:1;17053:20;:::i;:::-;17048:25;;17087:20;17105:1;17087:20;:::i;:::-;17082:25;;17131:1;17128;17124:9;17116:17;;17155:1;17149:4;17146:11;17143:37;;;17160:18;;:::i;:::-;17143:37;16993:194;;;;:::o;17193:191::-;17233:3;17252:20;17270:1;17252:20;:::i;:::-;17247:25;;17286:20;17304:1;17286:20;:::i;:::-;17281:25;;17329:1;17326;17322:9;17315:16;;17350:3;17347:1;17344:10;17341:36;;;17357:18;;:::i;:::-;17341:36;17193:191;;;;:::o;17390:230::-;17530:34;17526:1;17518:6;17514:14;17507:58;17599:13;17594:2;17586:6;17582:15;17575:38;17390:230;:::o;17626:366::-;17768:3;17789:67;17853:2;17848:3;17789:67;:::i;:::-;17782:74;;17865:93;17954:3;17865:93;:::i;:::-;17983:2;17978:3;17974:12;17967:19;;17626:366;;;:::o;17998:419::-;18164:4;18202:2;18191:9;18187:18;18179:26;;18251:9;18245:4;18241:20;18237:1;18226:9;18222:17;18215:47;18279:131;18405:4;18279:131;:::i;:::-;18271:139;;17998:419;;;:::o;18423:233::-;18563:34;18559:1;18551:6;18547:14;18540:58;18632:16;18627:2;18619:6;18615:15;18608:41;18423:233;:::o;18662:366::-;18804:3;18825:67;18889:2;18884:3;18825:67;:::i;:::-;18818:74;;18901:93;18990:3;18901:93;:::i;:::-;19019:2;19014:3;19010:12;19003:19;;18662:366;;;:::o;19034:419::-;19200:4;19238:2;19227:9;19223:18;19215:26;;19287:9;19281:4;19277:20;19273:1;19262:9;19258:17;19251:47;19315:131;19441:4;19315:131;:::i;:::-;19307:139;;19034:419;;;:::o;19459:85::-;19504:7;19533:5;19522:16;;19459:85;;;:::o;19550:60::-;19578:3;19599:5;19592:12;;19550:60;;;:::o;19616:154::-;19672:9;19705:59;19721:42;19730:32;19756:5;19730:32;:::i;:::-;19721:42;:::i;:::-;19705:59;:::i;:::-;19692:72;;19616:154;;;:::o;19776:143::-;19869:43;19906:5;19869:43;:::i;:::-;19864:3;19857:56;19776:143;;:::o;19925:234::-;20024:4;20062:2;20051:9;20047:18;20039:26;;20075:77;20149:1;20138:9;20134:17;20125:6;20075:77;:::i;:::-;19925:234;;;;:::o;20165:118::-;20252:24;20270:5;20252:24;:::i;:::-;20247:3;20240:37;20165:118;;:::o;20289:222::-;20382:4;20420:2;20409:9;20405:18;20397:26;;20433:71;20501:1;20490:9;20486:17;20477:6;20433:71;:::i;:::-;20289:222;;;;:::o;20517:181::-;20657:33;20653:1;20645:6;20641:14;20634:57;20517:181;:::o;20704:366::-;20846:3;20867:67;20931:2;20926:3;20867:67;:::i;:::-;20860:74;;20943:93;21032:3;20943:93;:::i;:::-;21061:2;21056:3;21052:12;21045:19;;20704:366;;;:::o;21076:419::-;21242:4;21280:2;21269:9;21265:18;21257:26;;21329:9;21323:4;21319:20;21315:1;21304:9;21300:17;21293:47;21357:131;21483:4;21357:131;:::i;:::-;21349:139;;21076:419;;;:::o;21501:553::-;21678:4;21716:3;21705:9;21701:19;21693:27;;21730:71;21798:1;21787:9;21783:17;21774:6;21730:71;:::i;:::-;21811:72;21879:2;21868:9;21864:18;21855:6;21811:72;:::i;:::-;21893;21961:2;21950:9;21946:18;21937:6;21893:72;:::i;:::-;21975;22043:2;22032:9;22028:18;22019:6;21975:72;:::i;:::-;21501:553;;;;;;;:::o;22060:137::-;22114:5;22145:6;22139:13;22130:22;;22161:30;22185:5;22161:30;:::i;:::-;22060:137;;;;:::o;22203:345::-;22270:6;22319:2;22307:9;22298:7;22294:23;22290:32;22287:119;;;22325:79;;:::i;:::-;22287:119;22445:1;22470:61;22523:7;22514:6;22503:9;22499:22;22470:61;:::i;:::-;22460:71;;22416:125;22203:345;;;;:::o;22554:332::-;22675:4;22713:2;22702:9;22698:18;22690:26;;22726:71;22794:1;22783:9;22779:17;22770:6;22726:71;:::i;:::-;22807:72;22875:2;22864:9;22860:18;22851:6;22807:72;:::i;:::-;22554:332;;;;;:::o;22892:148::-;22994:11;23031:3;23016:18;;22892:148;;;;:::o;23046:173::-;23186:25;23182:1;23174:6;23170:14;23163:49;23046:173;:::o;23225:402::-;23385:3;23406:85;23488:2;23483:3;23406:85;:::i;:::-;23399:92;;23500:93;23589:3;23500:93;:::i;:::-;23618:2;23613:3;23609:12;23602:19;;23225:402;;;:::o;23633:99::-;23685:6;23719:5;23713:12;23703:22;;23633:99;;;:::o;23738:246::-;23819:1;23829:113;23843:6;23840:1;23837:13;23829:113;;;23928:1;23923:3;23919:11;23913:18;23909:1;23904:3;23900:11;23893:39;23865:2;23862:1;23858:10;23853:15;;23829:113;;;23976:1;23967:6;23962:3;23958:16;23951:27;23800:184;23738:246;;;:::o;23990:390::-;24096:3;24124:39;24157:5;24124:39;:::i;:::-;24179:89;24261:6;24256:3;24179:89;:::i;:::-;24172:96;;24277:65;24335:6;24330:3;24323:4;24316:5;24312:16;24277:65;:::i;:::-;24367:6;24362:3;24358:16;24351:23;;24100:280;23990:390;;;;:::o;24386:167::-;24526:19;24522:1;24514:6;24510:14;24503:43;24386:167;:::o;24559:402::-;24719:3;24740:85;24822:2;24817:3;24740:85;:::i;:::-;24733:92;;24834:93;24923:3;24834:93;:::i;:::-;24952:2;24947:3;24943:12;24936:19;;24559:402;;;:::o;24967:967::-;25349:3;25371:148;25515:3;25371:148;:::i;:::-;25364:155;;25536:95;25627:3;25618:6;25536:95;:::i;:::-;25529:102;;25648:148;25792:3;25648:148;:::i;:::-;25641:155;;25813:95;25904:3;25895:6;25813:95;:::i;:::-;25806:102;;25925:3;25918:10;;24967:967;;;;;:::o;25940:102::-;25981:6;26032:2;26028:7;26023:2;26016:5;26012:14;26008:28;25998:38;;25940:102;;;:::o;26048:377::-;26136:3;26164:39;26197:5;26164:39;:::i;:::-;26219:71;26283:6;26278:3;26219:71;:::i;:::-;26212:78;;26299:65;26357:6;26352:3;26345:4;26338:5;26334:16;26299:65;:::i;:::-;26389:29;26411:6;26389:29;:::i;:::-;26384:3;26380:39;26373:46;;26140:285;26048:377;;;;:::o;26431:313::-;26544:4;26582:2;26571:9;26567:18;26559:26;;26631:9;26625:4;26621:20;26617:1;26606:9;26602:17;26595:47;26659:78;26732:4;26723:6;26659:78;:::i;:::-;26651:86;;26431:313;;;;:::o;26750:170::-;26890:22;26886:1;26878:6;26874:14;26867:46;26750:170;:::o;26926:366::-;27068:3;27089:67;27153:2;27148:3;27089:67;:::i;:::-;27082:74;;27165:93;27254:3;27165:93;:::i;:::-;27283:2;27278:3;27274:12;27267:19;;26926:366;;;:::o;27298:419::-;27464:4;27502:2;27491:9;27487:18;27479:26;;27551:9;27545:4;27541:20;27537:1;27526:9;27522:17;27515:47;27579:131;27705:4;27579:131;:::i;:::-;27571:139;;27298:419;;;:::o;27723:442::-;27872:4;27910:2;27899:9;27895:18;27887:26;;27923:71;27991:1;27980:9;27976:17;27967:6;27923:71;:::i;:::-;28004:72;28072:2;28061:9;28057:18;28048:6;28004:72;:::i;:::-;28086;28154:2;28143:9;28139:18;28130:6;28086:72;:::i;:::-;27723:442;;;;;;:::o;28171:180::-;28219:77;28216:1;28209:88;28316:4;28313:1;28306:15;28340:4;28337:1;28330:15;28357:185;28397:1;28414:20;28432:1;28414:20;:::i;:::-;28409:25;;28448:20;28466:1;28448:20;:::i;:::-;28443:25;;28487:1;28477:35;;28492:18;;:::i;:::-;28477:35;28534:1;28531;28527:9;28522:14;;28357:185;;;;:::o;28548:112::-;28631:22;28647:5;28631:22;:::i;:::-;28626:3;28619:35;28548:112;;:::o;28666:878::-;28923:4;28961:3;28950:9;28946:19;28938:27;;28975:71;29043:1;29032:9;29028:17;29019:6;28975:71;:::i;:::-;29056:72;29124:2;29113:9;29109:18;29100:6;29056:72;:::i;:::-;29138;29206:2;29195:9;29191:18;29182:6;29138:72;:::i;:::-;29220;29288:2;29277:9;29273:18;29264:6;29220:72;:::i;:::-;29302:69;29366:3;29355:9;29351:19;29342:6;29302:69;:::i;:::-;29381:73;29449:3;29438:9;29434:19;29425:6;29381:73;:::i;:::-;29464;29532:3;29521:9;29517:19;29508:6;29464:73;:::i;:::-;28666:878;;;;;;;;;;:::o;29550:220::-;29690:34;29686:1;29678:6;29674:14;29667:58;29759:3;29754:2;29746:6;29742:15;29735:28;29550:220;:::o;29776:366::-;29918:3;29939:67;30003:2;29998:3;29939:67;:::i;:::-;29932:74;;30015:93;30104:3;30015:93;:::i;:::-;30133:2;30128:3;30124:12;30117:19;;29776:366;;;:::o;30148:419::-;30314:4;30352:2;30341:9;30337:18;30329:26;;30401:9;30395:4;30391:20;30387:1;30376:9;30372:17;30365:47;30429:131;30555:4;30429:131;:::i;:::-;30421:139;;30148:419;;;:::o;30573:166::-;30713:18;30709:1;30701:6;30697:14;30690:42;30573:166;:::o;30745:366::-;30887:3;30908:67;30972:2;30967:3;30908:67;:::i;:::-;30901:74;;30984:93;31073:3;30984:93;:::i;:::-;31102:2;31097:3;31093:12;31086:19;;30745:366;;;:::o;31117:419::-;31283:4;31321:2;31310:9;31306:18;31298:26;;31370:9;31364:4;31360:20;31356:1;31345:9;31341:17;31334:47;31398:131;31524:4;31398:131;:::i;:::-;31390:139;;31117:419;;;:::o;31542:171::-;31581:3;31604:24;31622:5;31604:24;:::i;:::-;31595:33;;31650:4;31643:5;31640:15;31637:41;;31658:18;;:::i;:::-;31637:41;31705:1;31698:5;31694:13;31687:20;;31542:171;;;:::o;31719:182::-;31859:34;31855:1;31847:6;31843:14;31836:58;31719:182;:::o;31907:366::-;32049:3;32070:67;32134:2;32129:3;32070:67;:::i;:::-;32063:74;;32146:93;32235:3;32146:93;:::i;:::-;32264:2;32259:3;32255:12;32248:19;;31907:366;;;:::o;32279:419::-;32445:4;32483:2;32472:9;32468:18;32460:26;;32532:9;32526:4;32522:20;32518:1;32507:9;32503:17;32496:47;32560:131;32686:4;32560:131;:::i;:::-;32552:139;;32279:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"3448600","executionCost":"3852","totalCost":"3452452"},"external":{"DEFAULT_ADMIN_ROLE()":"380","__BaseUpgradeablePausable_init(address)":"infinite","addInsuranceAmount(uint256,uint256,uint256,uint8,bytes32,bytes32)":"infinite","calculateTotalFlowMade(address)":"infinite","calculateTotalFlowMade(address,uint256)":"infinite","claimPremium(address,uint256)":"912","claimPremium(address,uint256,uint256)":"infinite","findActivePremiumCost(address,uint256,uint256)":"infinite","getGlobalUserInsuranceInfo(address)":"infinite","getGlobalUserInsurancePremiumCost(address)":"7206","getRoleAdmin(bytes32)":"infinite","getUserInsuranceInfo(address,uint256,uint256)":"infinite","getUserInsuranceStatus(address,uint256,uint256)":"infinite","getUserInsuranceValidTillInfo(address,uint256,uint256)":"infinite","getUserInsuredAmount(address,uint256,uint256)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"3251","initialize(address,address,address,uint256,uint256,uint256)":"infinite","isAdmin()":"2859","minusInsuranceAmount(uint256,uint256,uint256,uint8,bytes32,bytes32,bool)":"infinite","pause()":"infinite","paused()":"2524","renounceRole(bytes32,address)":"infinite","revokeRole(bytes32,address)":"infinite","supportsInterface(bytes4)":"774","unpause()":"infinite","updateMaxInsuredDays(uint256)":"infinite","updateMinimumInsurancePeriod(uint256)":"infinite","updateStartWaitingTime(uint256)":"infinite"},"internal":{"_addInsuranceAmount(uint256,uint256,uint256,uint8,bytes32,bytes32)":"infinite","_calculateTotalFlowMade(address,uint256,uint256[] memory)":"infinite","_minusInsuranceAmount(uint256,uint256,uint256,uint8,bytes32,bytes32,bool)":"infinite","activateInsurance(uint256,uint256,uint256)":"infinite","deactivateCategoryInsurance(address,uint256)":"infinite","deactivateInsurance(address,uint256,uint256)":"infinite"}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","__BaseUpgradeablePausable_init(address)":"6e810b1a","addInsuranceAmount(uint256,uint256,uint256,uint8,bytes32,bytes32)":"6e8847bd","calculateTotalFlowMade(address)":"cff5eede","calculateTotalFlowMade(address,uint256)":"4e94c048","claimPremium(address,uint256)":"77bd35fc","claimPremium(address,uint256,uint256)":"f099dd50","findActivePremiumCost(address,uint256,uint256)":"1a5c8f28","getGlobalUserInsuranceInfo(address)":"ec249164","getGlobalUserInsurancePremiumCost(address)":"42f6b8a7","getRoleAdmin(bytes32)":"248a9ca3","getUserInsuranceInfo(address,uint256,uint256)":"88295fb2","getUserInsuranceStatus(address,uint256,uint256)":"81280d2b","getUserInsuranceValidTillInfo(address,uint256,uint256)":"c392e850","getUserInsuredAmount(address,uint256,uint256)":"6b6d105e","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","initialize(address,address,address,uint256,uint256,uint256)":"728cdbca","isAdmin()":"b6db75a0","minusInsuranceAmount(uint256,uint256,uint256,uint8,bytes32,bytes32,bool)":"642adc28","pause()":"8456cb59","paused()":"5c975abb","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7","unpause()":"3f4ba83a","updateMaxInsuredDays(uint256)":"b4706268","updateMinimumInsurancePeriod(uint256)":"56eb66bb","updateStartWaitingTime(uint256)":"24b7ab24"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BaseUpgradeablePausable__ZeroAddressError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__ActiveInsuranceExistError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__ImmutableChangesError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__InactiveInsuranceError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__InsuranceCoverNotAvailableError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__NotEvenMinimumInsurancePeriodAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__SubCategoryNotActiveError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__TransactionFailedError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdatedMaxInsuredDays\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdatedMinimumInsurancePeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdatedStartWaitingTime\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"insuredAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"addInsuranceAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"}],\"name\":\"calculateTotalFlowMade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"calculateTotalFlowMade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"}],\"name\":\"claimPremium\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"}],\"name\":\"claimPremium\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryCount\",\"type\":\"uint256\"}],\"name\":\"findActivePremiumCost\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getGlobalUserInsuranceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getGlobalUserInsurancePremiumCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"}],\"name\":\"getUserInsuranceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"}],\"name\":\"getUserInsuranceStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"}],\"name\":\"getUserInsuranceValidTillInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"}],\"name\":\"getUserInsuredAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenDAIaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sztDAIAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"insuranceRegistryCA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumInsurancePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startWaitingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxInsuredDays\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"insuredAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"closeStream\",\"type\":\"bool\"}],\"name\":\"minusInsuranceAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeInDays\",\"type\":\"uint256\"}],\"name\":\"updateMaxInsuredDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeInMinutes\",\"type\":\"uint256\"}],\"name\":\"updateMinimumInsurancePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeInHours\",\"type\":\"uint256\"}],\"name\":\"updateStartWaitingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"anshik@safezen.finance\",\"kind\":\"dev\",\"methods\":{\"addInsuranceAmount(uint256,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"this function aims to create or top-up user insurance coverage amount.\",\"params\":{\"categoryID\":\": insurance category, e.g., stablecoin depeg insurance.\",\"insuredAmount\":\": maximum user coverage amount\",\"subCategoryID\":\": insurance sub-category, e.g., USDC depeg coverage, DAI depeg coverage.\"},\"returns\":{\"_0\":\"bool: true if the function executues successfully else false.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,address,uint256,uint256,uint256)\":{\"details\":\"one-time function aims to initialize the contractMUST revert if called more than once.\",\"params\":{\"insuranceRegistryCA\":\": address of the Protocol Registry contract\",\"minimumInsurancePeriod\":\": minimum insurance period\",\"sztDAIAddress\":\"address of the sztDAI ERC20 token\",\"tokenDAIaddress\":\": address of the DAI ERC20 token\"},\"returns\":{\"_0\":\"bool: true if the function executues successfully else false. [PRODUCTION TODO: _startWaitingTime =  startWaitingTime * 1 hours;] [PRODUCTION TODO: _maxInsuredDays = maxInsuredDays * 1 days;]\"}},\"minusInsuranceAmount(uint256,uint256,uint256,uint8,bytes32,bytes32,bool)\":{\"details\":\"this function aims to close or reduce user insurance coverage amount.\",\"params\":{\"categoryID\":\": insurance category, e.g., stablecoin depeg insurance.\",\"closeStream\":\": checks whether user initiate to deactivate its insurance or not.\",\"insuredAmount\":\": maximum user coverage amount\",\"subCategoryID\":\": insurance sub-category, e.g., USDC depeg coverage, DAI depeg coverage.\"},\"returns\":{\"_0\":\"bool: true if the function executues successfully else false.\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateMaxInsuredDays(uint256)\":{\"details\":\"this function aims to update the maximum insurance period\",\"params\":{\"timeInDays\":\": 90 days will be kept as default.\"}},\"updateMinimumInsurancePeriod(uint256)\":{\"details\":\"this function aims to updates minimum insurance period\",\"params\":{\"timeInMinutes\":\": 120 minutes will be kept as default.\"}},\"updateStartWaitingTime(uint256)\":{\"details\":\"this function aims to update the insurance activation waiting period\",\"params\":{\"timeInHours\":\": 4-8 hours will be kept as default. \"}}},\"stateVariables\":{\"usersGlobalInsuranceInfo\":{\"details\":\"mapping to store UserGlobalInsuranceInfo maps: userAddress => UserGlobalInsuranceInfo\"},\"usersInsuranceInfo\":{\"details\":\"mapping to store UserInsurance Info maps: userAddress => categoryID => subCategoryID => UserInsuranceInfo\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateTotalFlowMade(address)\":{\"notice\":\"DURATION\"},\"calculateTotalFlowMade(address,uint256)\":{\"notice\":\"DURATION\"},\"findActivePremiumCost(address,uint256,uint256)\":{\"notice\":\"VIEW FUNCTIONS\"}},\"notice\":\"Report any bug or issues at:\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/payAsYouGo/ConstantFlowAgreement.sol\":\"ConstantFlowAgreement\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"contracts/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./Constants.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nerror BaseUpgradeablePausable__ZeroAddressError();\\n\\ncontract BaseUpgradeablePausable is \\n    Initializable, \\n    PausableUpgradeable, \\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable \\n{\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin(), \\\"Must have admin role to perform this action.\\\");\\n        _;\\n    }\\n\\n    function __BaseUpgradeablePausable_init(address owner) public onlyInitializing() {\\n        if(owner == address(0)) {\\n            revert BaseUpgradeablePausable__ZeroAddressError();\\n        }\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        _grantRole(Constants.getAdminRole(), owner);\\n        _grantRole(Constants.getPauserRole(), owner);\\n\\n        _setRoleAdmin(Constants.getPauserRole(), Constants.getAdminRole());\\n        _setRoleAdmin(Constants.getAdminRole(), Constants.getAdminRole());\\n    }\\n\\n    function isAdmin() public view returns (bool) {\\n        return hasRole(Constants.getAdminRole(), _msgSender());\\n    }\\n\\n  \\n}\",\"keccak256\":\"0x29b172c9fffe9bc60c702a071bae35f301b1b5c3824f0ca44b3d2dcabbda5af9\",\"license\":\"MIT\"},\"contracts/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nlibrary Constants {\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    function getAdminRole() internal pure returns (bytes32) {\\n        return ADMIN_ROLE;\\n    }\\n\\n    function getPauserRole() internal pure returns (bytes32) {\\n        return PAUSER_ROLE;\\n    }\\n}\",\"keccak256\":\"0xeae9d870bc2ace9284ae575eb6c534c177ff6f4a60b98f10a0a8156f19f760cf\",\"license\":\"BUSL-1.1\"},\"contracts/core/payAsYouGo/ConstantFlowAgreement.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// @title Constant Flow Agreement Contract\\n/// @author Anshik Bansal <anshik@safezen.finance>\\n\\n/// Importing required interfaces\\nimport \\\"./../../interfaces/ICFA.sol\\\";\\nimport \\\"./../../interfaces/IERC20Extended.sol\\\";\\nimport \\\"./../../interfaces/IInsuranceRegistry.sol\\\";\\n\\n/// Importing required libraries\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n/// Importing required contracts\\nimport \\\"./../../BaseUpgradeablePausable.sol\\\";\\n\\n/// Report any bug or issues at:\\n/// @custom:security-contact anshik@safezen.finance\\n\\ncontract ConstantFlowAgreement is ICFA, BaseUpgradeablePausable {\\n    /// _initVersion: counter to initialize the init one-time function, max value can be 1.\\n    /// _categoriesCount: counter to keep track of the available insurance categories.\\n    /// _maxInsuredDays: the maximum insurance period [in days], 90 days will be kept as default.\\n    /// _startWaitingTime: insurance activation waiting period, 4-8 hours will be kept as default.\\n    /// _minimumInsurancePeriod: the minimum insurance period, 120 minutes will be kept as default.\\n    uint256 private _categoriesCount;\\n    uint256 private _maxInsuredDays;\\n    uint256 private _startWaitingTime;\\n    uint256 private _minimumInsurancePeriod;\\n\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeERC20Upgradeable for IERC20PermitUpgradeable;\\n\\n    /// _tokenDAI: DAI ERC20 token\\n    /// _sztDAI: sztDAI ERC20 token\\n    /// _insuranceRegistry: Insurance Registry Contract\\n    IERC20Upgradeable private _tokenDAI;\\n    IERC20PermitUpgradeable private _tokenPermitDAI;\\n    IERC20Extended private _sztDAI;\\n    IInsuranceRegistry private _insuranceRegistry;\\n\\n    /// @dev collects user information for particular insurance\\n    /// @param startTime: insurance activation time\\n    /// @param validTill: insurance validation till\\n    /// @param insuredAmount: maximum insurance amount covered\\n    /// @param insuranceFlowRate: amount to be charged per second [insurance flow rate * amount to be insured]\\n    /// @param insuranceCost: expected insurance premium cost for the registered duration\\n    /// @param registrationTime: insurance registration time\\n    /// @param isValid: checks whether user is an active insurance holder or not\\n    struct UserInsuranceInfo {\\n        uint256 startTime;\\n        uint256 validTill;\\n        uint256 insuredAmount;\\n        uint256 registrationTime;\\n        uint256 insuranceFlowRate;\\n        uint256 insuranceCost;\\n        bool isValid;\\n    }\\n\\n    /// @dev collects user global insurance information\\n    /// @param validTill: expected insurance valid period\\n    /// @param insuranceStreamRate: global insurance flow rate per second\\n    /// @param globalInsuranceCost: expected global insurance premium cost for the registered duration\\n    struct UserGlobalInsuranceInfo {\\n        uint256 validTill;\\n        uint256 insuranceStreamRate;\\n        uint256 globalInsuranceCost;\\n    }\\n\\n    /// @dev mapping to store UserGlobalInsuranceInfo\\n    /// maps: userAddress => UserGlobalInsuranceInfo\\n    mapping(address => UserGlobalInsuranceInfo) private usersGlobalInsuranceInfo;\\n\\n    /// @dev mapping to store UserInsurance Info\\n    /// maps: userAddress => categoryID => subCategoryID => UserInsuranceInfo\\n    mapping(address => mapping(uint256 => mapping(uint256 => UserInsuranceInfo))) private usersInsuranceInfo;\\n\\n    /// @dev one-time function aims to initialize the contract\\n    /// @dev MUST revert if called more than once.\\n    /// @param tokenDAIaddress: address of the DAI ERC20 token\\n    /// @param sztDAIAddress address of the sztDAI ERC20 token\\n    /// @param insuranceRegistryCA: address of the Protocol Registry contract\\n    /// @param minimumInsurancePeriod: minimum insurance period\\n    /// @return bool: true if the function executues successfully else false.\\n    /// [PRODUCTION TODO: _startWaitingTime =  startWaitingTime * 1 hours;]\\n    /// [PRODUCTION TODO: _maxInsuredDays = maxInsuredDays * 1 days;]\\n    function initialize(\\n        address tokenDAIaddress,\\n        address sztDAIAddress,\\n        address insuranceRegistryCA,\\n        uint256 minimumInsurancePeriod,\\n        uint256 startWaitingTime,\\n        uint256 maxInsuredDays\\n    ) external initializer returns(bool) {\\n        _categoriesCount = 0;\\n        _maxInsuredDays = maxInsuredDays * 1 minutes;\\n        _startWaitingTime = startWaitingTime * 1 minutes; \\n        _minimumInsurancePeriod = minimumInsurancePeriod * 1 minutes;\\n        _tokenDAI = IERC20Upgradeable(tokenDAIaddress);\\n        _tokenPermitDAI = IERC20PermitUpgradeable(tokenDAIaddress);\\n        _sztDAI = IERC20Extended(sztDAIAddress);\\n        _insuranceRegistry = IInsuranceRegistry(insuranceRegistryCA);\\n        __BaseUpgradeablePausable_init(_msgSender());\\n        return true;\\n    }\\n\\n    function pause() external onlyAdmin {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyAdmin {\\n        _unpause();\\n    }\\n\\n    /// @dev this function aims to updates minimum insurance period\\n    /// @param timeInMinutes: 120 minutes will be kept as default.\\n    function updateMinimumInsurancePeriod(uint256 timeInMinutes) external onlyAdmin {\\n        _minimumInsurancePeriod = timeInMinutes * 1 minutes;\\n        emit UpdatedMinimumInsurancePeriod();\\n    }\\n\\n    /// @dev this function aims to update the insurance activation waiting period\\n    /// @param timeInHours: 4-8 hours will be kept as default. \\n    function updateStartWaitingTime(uint256 timeInHours) external onlyAdmin {\\n        _startWaitingTime = timeInHours * 1 hours;\\n        emit UpdatedStartWaitingTime();\\n    }\\n\\n    /// @dev this function aims to update the maximum insurance period\\n    /// @param timeInDays: 90 days will be kept as default.\\n    function updateMaxInsuredDays(uint256 timeInDays) external onlyAdmin {\\n        _maxInsuredDays = timeInDays * 1 days;\\n        emit UpdatedMaxInsuredDays();\\n    }\\n\\n    /// @dev this function aims to create or top-up user insurance coverage amount.\\n    /// @param insuredAmount: maximum user coverage amount\\n    /// @param categoryID: insurance category, e.g., stablecoin depeg insurance.\\n    /// @param subCategoryID: insurance sub-category, e.g., USDC depeg coverage, DAI depeg coverage.\\n    /// @return bool: true if the function executues successfully else false.\\n    function addInsuranceAmount(\\n        uint256 insuredAmount, \\n        uint256 categoryID, \\n        uint256 subCategoryID, \\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) external override nonReentrant returns(bool) {\\n        bool success = _addInsuranceAmount(insuredAmount, categoryID, subCategoryID, v, r, s);\\n        return success;\\n    }\\n    \\n    \\n    function _addInsuranceAmount(\\n        uint256 insuredAmount, \\n        uint256 categoryID, \\n        uint256 subCategoryID,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) private returns(bool) {\\n        uint256 newInsuredAmount = usersInsuranceInfo[_msgSender()][categoryID][subCategoryID].insuredAmount + insuredAmount;\\n        if (usersInsuranceInfo[_msgSender()][categoryID][subCategoryID].isValid) {\\n            bool closeStreamSuccess = deactivateInsurance(_msgSender(), categoryID, subCategoryID);\\n            if (!closeStreamSuccess) {\\n                revert CFA__TransactionFailedError();\\n            }\\n        }   \\n        uint256 deadline = block.timestamp + _maxInsuredDays + 30 days;  \\n        (bool activateSuccess, uint256 insuranceCost) = activateInsurance(newInsuredAmount, categoryID, subCategoryID);\\n        if (!activateSuccess) {\\n            revert CFA__TransactionFailedError();\\n        }\\n        _tokenPermitDAI.safePermit(_msgSender(), address(this), insuranceCost, deadline, v, r, s);  \\n        return true;\\n    }\\n\\n    /// @dev this function aims to close or reduce user insurance coverage amount.\\n    /// @param insuredAmount: maximum user coverage amount\\n    /// @param categoryID: insurance category, e.g., stablecoin depeg insurance.\\n    /// @param subCategoryID: insurance sub-category, e.g., USDC depeg coverage, DAI depeg coverage.\\n    /// @param closeStream: checks whether user initiate to deactivate its insurance or not.\\n    /// @return bool: true if the function executues successfully else false.\\n    function minusInsuranceAmount(\\n        uint256 insuredAmount, \\n        uint256 categoryID, \\n        uint256 subCategoryID,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s,\\n        bool closeStream\\n    ) external override nonReentrant returns(bool) {\\n        bool success = _minusInsuranceAmount(insuredAmount, categoryID, subCategoryID, v, r, s, closeStream);\\n        return success;\\n    }\\n    \\n    \\n    function _minusInsuranceAmount(\\n        uint256 insuredAmount, \\n        uint256 categoryID, \\n        uint256 subCategoryID,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s,\\n        bool closeStream\\n    ) private returns(bool) {\\n        if (!usersInsuranceInfo[_msgSender()][categoryID][subCategoryID].isValid) {\\n            revert CFA__InactiveInsuranceError();\\n        }\\n        bool closeStreamSuccess = deactivateInsurance(_msgSender(), categoryID, subCategoryID);\\n        if (!closeStreamSuccess) {\\n            revert CFA__TransactionFailedError();\\n        }\\n        if (!closeStream) {\\n            uint256 newInsuredAmount = usersInsuranceInfo[_msgSender()][categoryID][subCategoryID].insuredAmount - insuredAmount;\\n            uint256 deadline = block.timestamp + _maxInsuredDays + 30 days;\\n            (bool activateSuccess, uint256 insuranceCost) = activateInsurance(newInsuredAmount, categoryID, subCategoryID);\\n            if (!activateSuccess) {\\n                revert CFA__TransactionFailedError();\\n            }\\n            _tokenPermitDAI.safePermit(_msgSender(), address(this), insuranceCost, deadline, v, r, s);  \\n\\n        }\\n        return true;\\n    }\\n\\n    function claimPremium(\\n        address userAddress,\\n        uint256 categoryID,\\n        uint256 subCategoryID\\n    ) external returns(bool) {\\n        if (\\n            getUserInsuranceValidTillInfo(userAddress, categoryID, subCategoryID) > \\n            block.timestamp\\n        ) {\\n            revert CFA__ActiveInsuranceExistError();\\n        }\\n        bool success = deactivateInsurance(userAddress, categoryID, subCategoryID);\\n        if (!success) {\\n            revert CFA__TransactionFailedError();\\n        }\\n        return true;\\n    }\\n\\n    function claimPremium(\\n        address userAddress,\\n        uint256 categoryID\\n    ) external returns(bool) {\\n\\n    }\\n\\n    /// @param insuredAmount: insured amount\\n    /// @param categoryID: like Smart Contract Insurance\\n    function activateInsurance(\\n        uint256 insuredAmount,\\n        uint256 categoryID,\\n        uint256 subCategoryID\\n    ) private returns(bool, uint256) {\\n        if (insuredAmount < 1e18) {\\n            revert CFA__InsuranceCoverNotAvailableError();\\n        }\\n        if (\\n            (!_insuranceRegistry.ifEnoughLiquidity(categoryID, insuredAmount, subCategoryID))    \\n        ) {\\n            revert CFA__SubCategoryNotActiveError();\\n        }\\n        if (usersInsuranceInfo[_msgSender()][categoryID][subCategoryID].isValid) {\\n            revert CFA__ActiveInsuranceExistError();\\n        }\\n        \\n        UserInsuranceInfo storage userInsuranceInfo = usersInsuranceInfo[_msgSender()][categoryID][subCategoryID];\\n        UserGlobalInsuranceInfo storage userGlobalInsuranceInfo = usersGlobalInsuranceInfo[_msgSender()];\\n        \\n        uint256 userEstimatedBalance = _sztDAI.balanceOf(_msgSender()) - userGlobalInsuranceInfo.globalInsuranceCost;\\n        uint256 incomingAmountPerSec = (\\n            _insuranceRegistry.getStreamFlowRate(categoryID, subCategoryID) * insuredAmount) / 1e18;\\n        uint256 globalIncomingAmountPerSec = userGlobalInsuranceInfo.insuranceStreamRate + incomingAmountPerSec;\\n        // user balance should be enough to run the insurance for atleast minimum insurance time duration\\n        if ((globalIncomingAmountPerSec * _minimumInsurancePeriod) > userEstimatedBalance) {\\n            revert CFA__NotEvenMinimumInsurancePeriodAmount();\\n        }\\n\\n        uint256 validTill = (userEstimatedBalance / incomingAmountPerSec);\\n        userGlobalInsuranceInfo.insuranceStreamRate += incomingAmountPerSec;\\n        userInsuranceInfo.insuredAmount = insuredAmount;\\n        userInsuranceInfo.insuranceFlowRate = incomingAmountPerSec;\\n        userInsuranceInfo.registrationTime = block.timestamp;\\n        userInsuranceInfo.startTime = block.timestamp + _startWaitingTime;\\n        userInsuranceInfo.validTill = (\\n            validTill < _maxInsuredDays ? \\n            userInsuranceInfo.startTime + validTill : userInsuranceInfo.startTime + _maxInsuredDays\\n        );\\n        userInsuranceInfo.insuranceCost = validTill * incomingAmountPerSec;\\n        userInsuranceInfo.isValid = true;\\n        \\n        userGlobalInsuranceInfo.globalInsuranceCost += userInsuranceInfo.insuranceCost;\\n        userGlobalInsuranceInfo.validTill = (\\n            userInsuranceInfo.validTill < userGlobalInsuranceInfo.validTill ? \\n            userGlobalInsuranceInfo.validTill : userInsuranceInfo.validTill\\n        );\\n        bool success = _insuranceRegistry.addCoverageOffered(categoryID, subCategoryID, insuredAmount, incomingAmountPerSec);\\n        return (success, userInsuranceInfo.insuranceCost);\\n    }\\n\\n    /// NOTE: few if and else to consider for globalinsuranceinfo like endtime and start time \\n    function deactivateInsurance(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) private returns(bool) {\\n        UserInsuranceInfo storage userInsuranceInfo = usersInsuranceInfo[userAddress][categoryID][subCategoryID];\\n        if (!userInsuranceInfo.isValid) {\\n            revert CFA__InactiveInsuranceError();\\n        }\\n        userInsuranceInfo.isValid = false;\\n        uint256 duration = (\\n            (block.timestamp > userInsuranceInfo.startTime) ? (\\n                (block.timestamp > userInsuranceInfo.validTill) ? \\n                userInsuranceInfo.validTill : (block.timestamp - userInsuranceInfo.startTime)\\n            ) : 0);\\n        uint256 amountToBeBurned = (duration * userInsuranceInfo.insuranceFlowRate);\\n        if (amountToBeBurned == 0) {\\n            return true;\\n        } \\n        usersGlobalInsuranceInfo[userAddress].insuranceStreamRate -= userInsuranceInfo.insuranceFlowRate;\\n        usersGlobalInsuranceInfo[userAddress].globalInsuranceCost -= userInsuranceInfo.insuranceCost;\\n        uint256 flowRate = userInsuranceInfo.insuranceFlowRate;\\n        uint256 insuredAmount = userInsuranceInfo.insuredAmount;\\n        bool success = _insuranceRegistry.removeCoverageOffered(categoryID, subCategoryID, insuredAmount, flowRate);\\n        bool burnSuccess = _sztDAI.burnFrom(userAddress, amountToBeBurned);\\n        if ((!success) || (!burnSuccess)) {\\n            revert CFA__TransactionFailedError();\\n        }\\n        return true;\\n    }\\n\\n    /// @dev this function aims to deactivate user's all activated insurance in a single-call.\\n    /// @param userAddress: user wallet address\\n    /// @param categoryID: insurance category, e.g., stablecoin depeg insurance.\\n    function deactivateCategoryInsurance(\\n        address userAddress, \\n        uint256 categoryID\\n    ) internal returns(bool) {\\n        uint256[] memory activeID = findActivePremiumCost(userAddress, categoryID, _insuranceRegistry.getLatestSubCategoryID(categoryID));\\n        uint256 expectedAmountToBePaid = _calculateTotalFlowMade(userAddress, categoryID, activeID);\\n        for(uint256 i=0; i < activeID.length;) {\\n            usersInsuranceInfo[userAddress][categoryID][activeID[i]].isValid = false;\\n            uint256 flowRate = usersInsuranceInfo[userAddress][categoryID][activeID[i]].insuranceFlowRate;\\n            uint256 insuredAmount = usersInsuranceInfo[userAddress][categoryID][activeID[i]].insuredAmount;\\n            bool coverageRemoveSuccess = _insuranceRegistry.removeCoverageOffered(categoryID, activeID[i], insuredAmount, flowRate);\\n            if (!coverageRemoveSuccess) {\\n                revert CFA__TransactionFailedError();\\n            }\\n            ++i;\\n        }\\n        uint256 userBalance = _sztDAI.balanceOf(userAddress); \\n        uint256 amountToBeBurned = expectedAmountToBePaid > userBalance ? userBalance : expectedAmountToBePaid;\\n        usersGlobalInsuranceInfo[userAddress].insuranceStreamRate = 0;\\n        bool success = _sztDAI.burnFrom(userAddress, amountToBeBurned);\\n        if (!success) {\\n            revert CFA__TransactionFailedError();\\n        }\\n        return true;\\n    }\\n\\n    /// VIEW FUNCTIONS\\n\\n    function findActivePremiumCost(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryCount\\n    ) public view override returns(uint256[] memory) {\\n        uint256 activeProtocolCount = 0;\\n        for(uint i = 0; i < subCategoryCount;) {\\n            UserInsuranceInfo memory userInsuranceInfo = usersInsuranceInfo[userAddress][categoryID][i];\\n            if (userInsuranceInfo.isValid) {\\n                ++activeProtocolCount;\\n            }\\n            ++i;\\n        }\\n        uint256[] memory activeID = new uint256[](activeProtocolCount);\\n        uint256 counter = 0;\\n        for(uint i = 0; i < subCategoryCount;) {\\n            UserInsuranceInfo storage userInsuranceInfo = usersInsuranceInfo[userAddress][categoryID][i];\\n            if (userInsuranceInfo.isValid) {\\n                activeID[counter] = i;\\n                ++counter;\\n            }\\n            ++i;\\n        }\\n      return activeID;\\n    }\\n\\n    /// DURATION\\n    function calculateTotalFlowMade(\\n        address userAddress\\n    ) external view returns(uint256) {\\n        uint256 globalBalanceToBePaid = 0;\\n        for(uint256 i=0; i < _categoriesCount;) {\\n            uint256 balanceToBePaid = 0;\\n            uint256[] memory activeID = findActivePremiumCost(userAddress, i, _insuranceRegistry.getLatestSubCategoryID(i));\\n            for(uint256 j=0; j < activeID.length;) {\\n                UserInsuranceInfo storage userActiveInsuranceInfo = usersInsuranceInfo[userAddress][i][activeID[j]];\\n                uint256 duration = block.timestamp > userActiveInsuranceInfo.startTime ? block.timestamp - userActiveInsuranceInfo.startTime : 0;\\n                balanceToBePaid += (userActiveInsuranceInfo.insuranceFlowRate * duration);\\n                ++j;\\n            }\\n            globalBalanceToBePaid += balanceToBePaid;\\n            ++i;\\n        }\\n        return globalBalanceToBePaid;\\n    }\\n\\n    function _calculateTotalFlowMade(\\n        address userAddress, \\n        uint256 categoryID,\\n        uint256[] memory activeID\\n    ) internal view returns(uint256) {\\n        uint256 balanceToBePaid = 0;\\n        for(uint256 i=0; i< activeID.length;){\\n            UserInsuranceInfo storage userActiveInsuranceInfo = usersInsuranceInfo[userAddress][categoryID][activeID[i]];\\n            uint256 duration = (userActiveInsuranceInfo.validTill - userActiveInsuranceInfo.startTime);\\n            balanceToBePaid += (userActiveInsuranceInfo.insuranceFlowRate * duration);\\n            ++i;\\n        }\\n        return balanceToBePaid;\\n    }\\n\\n    /// DURATION\\n    function calculateTotalFlowMade(\\n        address userAddress, \\n        uint256 categoryID\\n    ) external view override returns(uint256) {\\n        uint256 balanceToBePaid = 0;\\n        uint256[] memory activeID = findActivePremiumCost(userAddress, categoryID, _insuranceRegistry.getLatestSubCategoryID(categoryID));\\n        for(uint256 i=0; i< activeID.length;){\\n            UserInsuranceInfo storage userActiveInsuranceInfo = usersInsuranceInfo[userAddress][categoryID][activeID[i]];\\n            uint256 duration = (userActiveInsuranceInfo.validTill - userActiveInsuranceInfo.startTime);\\n            balanceToBePaid += (userActiveInsuranceInfo.insuranceFlowRate * duration);\\n            ++i;\\n        }\\n        return balanceToBePaid;\\n    } \\n\\n    function getUserInsuranceValidTillInfo(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) public view override returns(uint256) {\\n        return usersInsuranceInfo[userAddress][categoryID][subCategoryID].validTill;\\n    }\\n\\n    function getUserInsuranceStatus(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) external view override returns(bool) {\\n        return usersInsuranceInfo[userAddress][categoryID][subCategoryID].isValid;\\n    }\\n\\n    function getUserInsuranceInfo(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) external view override returns(uint256, uint256, uint256, uint256, uint256, bool) {\\n        UserInsuranceInfo memory userInsuranceInfo = usersInsuranceInfo[userAddress][categoryID][subCategoryID];\\n        return (\\n            userInsuranceInfo.insuredAmount, \\n            userInsuranceInfo.insuranceFlowRate,\\n            userInsuranceInfo.registrationTime,\\n            userInsuranceInfo.startTime,\\n            userInsuranceInfo.validTill,\\n            userInsuranceInfo.isValid\\n            );\\n    }\\n\\n    function getGlobalUserInsuranceInfo(\\n        address _userAddress\\n    ) external view override returns (uint256, uint256) {\\n        UserGlobalInsuranceInfo memory userGlobalInsuranceInfo = usersGlobalInsuranceInfo[_userAddress];\\n        return (userGlobalInsuranceInfo.insuranceStreamRate, userGlobalInsuranceInfo.validTill);\\n    }\\n\\n    function getGlobalUserInsurancePremiumCost(\\n        address userAddress\\n    ) external view override returns(uint256) {\\n       UserGlobalInsuranceInfo memory userGlobalInsuranceInfo = usersGlobalInsuranceInfo[userAddress];\\n        return userGlobalInsuranceInfo.globalInsuranceCost; \\n    }\\n\\n    function getUserInsuredAmount(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) external view returns(uint256) {\\n        return usersInsuranceInfo[userAddress][categoryID][subCategoryID].insuredAmount;\\n    }\\n}\",\"keccak256\":\"0x7e2aa417af521d4101fb3f46606446e791940023225d66e79a3058674ade35ae\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ICFA.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n\\ninterface ICFA {\\n    // CFA Events\\n    event UpdatedMaxInsuredDays();\\n    event UpdatedStartWaitingTime();\\n    event UpdatedMinimumInsurancePeriod();\\n\\n    // CFA Custom Error Code\\n    error CFA__ImmutableChangesError();\\n    error CFA__TransactionFailedError();\\n    error CFA__InactiveInsuranceError();\\n    error CFA__SubCategoryNotActiveError();\\n    error CFA__ActiveInsuranceExistError();\\n    error CFA__InsuranceCoverNotAvailableError();\\n    error CFA__NotEvenMinimumInsurancePeriodAmount();\\n\\n    function addInsuranceAmount(\\n        uint256 insuredAmount, \\n        uint256 categoryID, \\n        uint256 subCategoryID,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) external returns(bool);\\n\\n    function minusInsuranceAmount(\\n        uint256 insuredAmount, \\n        uint256 categoryID, \\n        uint256 subCategoryID,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s,\\n        bool closeStream\\n    ) external returns(bool);\\n\\n    function findActivePremiumCost(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 insuranceCount\\n    ) external view returns(uint256[] memory);\\n\\n    function calculateTotalFlowMade(\\n        address userAddress, \\n        uint256 categoryID\\n    ) external view returns(uint256);  \\n\\n    function calculateTotalFlowMade(\\n        address userAddress\\n    ) external view returns(uint256); \\n\\n    function getUserInsuranceValidTillInfo(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) external view returns(uint256);\\n\\n    function getUserInsuranceStatus(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) external view returns(bool);\\n\\n    function getUserInsuranceInfo(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) external view returns(uint256, uint256, uint256, uint256, uint256, bool);\\n    \\n    function getGlobalUserInsuranceInfo(\\n        address _userAddress\\n    ) external view returns (uint256, uint256);\\n\\n    function getGlobalUserInsurancePremiumCost(\\n        address userAddress\\n    ) external view returns(uint256);\\n}\",\"keccak256\":\"0x104c6cb8a06b415043bc44feaca5daac335a908da1cbabcda5435a26ddda0476\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional mint and burnFrom functions from the ERC20 standard.\\n */\\ninterface IERC20Extended is IERC20Upgradeable {\\n    \\n    function mint(address to, uint256 amount) external returns(bool);\\n\\n    function burnFrom(address account, uint256 amount) external returns(bool);\\n    \\n}\",\"keccak256\":\"0x77d287ad89310c9c5b7acef41830a116628435e9f209b78088282a3e9d683213\",\"license\":\"MIT\"},\"contracts/interfaces/IInsuranceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// Report any bug or issues at:\\n/// @custom:security-contact anshik@safezen.finance\\ninterface IInsuranceRegistry {\\n\\n    error InsuranceRegistry__ImmutableChangesError();\\n    error InsuranceRegistry__TransactionFailedError();\\n    error InsuranceRegistry__NotEnoughLiquidityError();\\n\\n    event UpdatedClaimStakedValue();\\n\\n    function addInsuranceLiquidity(\\n        uint256 categoryID,\\n        uint256 subCategoryID_,\\n        uint256 liquiditySupplied\\n    ) external returns(bool);\\n\\n    function removeInsuranceLiquidity(\\n        uint256 categoryID,\\n        uint256 subCategoryID_, \\n        uint256 liquiditySupplied\\n    ) external returns(bool);\\n\\n    function addCoverageOffered(\\n        uint256 categoryID,\\n        uint256 subCategoryID_, \\n        uint256 coverageAmount,\\n        uint256 incomingFlowRate\\n    ) external returns(bool);\\n\\n    function removeCoverageOffered(\\n        uint256 categoryID,\\n        uint256 subCategoryID_, \\n        uint256 coverageAmount, \\n        uint256 incomingFlowRate\\n    ) external returns(bool);\\n\\n    function claimAdded(\\n        uint256 stakedTokenID, \\n        uint256 categoryID, \\n        uint256 subCategoryID_\\n    ) external returns(bool);\\n\\n    function getVersionID(uint256 categoryID) external view returns(uint256);\\n\\n    function calculateUnderwriterBalance(\\n        uint256 categoryID,\\n        uint256 subCategoryID_\\n    ) external view returns(uint256);\\n\\n    function getLatestCategoryID() external view returns(uint256);\\n\\n    function getLatestSubCategoryID(uint256 categoryID) external view returns(uint256);\\n\\n    function ifEnoughLiquidity(uint256 categoryID, uint256 insuredAmount, uint256 subCategoryID_) external view returns(bool);\\n\\n    function getStreamFlowRate(uint256 categoryID, uint256 subCategoryID_) external view returns(uint256);\\n}\",\"keccak256\":\"0xf9afae03190ba6aa377519032f994fc5670704353cf2818a416f4db9c2b14b9e\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[{"astId":415,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":418,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2325,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":598,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":703,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":3129,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"__gap","offset":0,"slot":"101","type":"t_array(t_uint256)50_storage"},{"astId":39,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_roles","offset":0,"slot":"151","type":"t_mapping(t_bytes32,t_struct(RoleData)34_storage)"},{"astId":334,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"__gap","offset":0,"slot":"152","type":"t_array(t_uint256)49_storage"},{"astId":718,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_status","offset":0,"slot":"201","type":"t_uint256"},{"astId":776,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"__gap","offset":0,"slot":"202","type":"t_array(t_uint256)49_storage"},{"astId":4153,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_categoriesCount","offset":0,"slot":"251","type":"t_uint256"},{"astId":4155,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_maxInsuredDays","offset":0,"slot":"252","type":"t_uint256"},{"astId":4157,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_startWaitingTime","offset":0,"slot":"253","type":"t_uint256"},{"astId":4159,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_minimumInsurancePeriod","offset":0,"slot":"254","type":"t_uint256"},{"astId":4171,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_tokenDAI","offset":0,"slot":"255","type":"t_contract(IERC20Upgradeable)1467"},{"astId":4174,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_tokenPermitDAI","offset":0,"slot":"256","type":"t_contract(IERC20PermitUpgradeable)1719"},{"astId":4177,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_sztDAI","offset":0,"slot":"257","type":"t_contract(IERC20Extended)6160"},{"astId":4180,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"_insuranceRegistry","offset":0,"slot":"258","type":"t_contract(IInsuranceRegistry)6279"},{"astId":4208,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"usersGlobalInsuranceInfo","offset":0,"slot":"259","type":"t_mapping(t_address,t_struct(UserGlobalInsuranceInfo)4202_storage)"},{"astId":4218,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"usersInsuranceInfo","offset":0,"slot":"260","type":"t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserInsuranceInfo)4195_storage)))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(IERC20Extended)6160":{"encoding":"inplace","label":"contract IERC20Extended","numberOfBytes":"20"},"t_contract(IERC20PermitUpgradeable)1719":{"encoding":"inplace","label":"contract IERC20PermitUpgradeable","numberOfBytes":"20"},"t_contract(IERC20Upgradeable)1467":{"encoding":"inplace","label":"contract IERC20Upgradeable","numberOfBytes":"20"},"t_contract(IInsuranceRegistry)6279":{"encoding":"inplace","label":"contract IInsuranceRegistry","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserInsuranceInfo)4195_storage)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo)))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserInsuranceInfo)4195_storage))"},"t_mapping(t_address,t_struct(UserGlobalInsuranceInfo)4202_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct ConstantFlowAgreement.UserGlobalInsuranceInfo)","numberOfBytes":"32","value":"t_struct(UserGlobalInsuranceInfo)4202_storage"},"t_mapping(t_bytes32,t_struct(RoleData)34_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)34_storage"},"t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserInsuranceInfo)4195_storage))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_struct(UserInsuranceInfo)4195_storage)"},"t_mapping(t_uint256,t_struct(UserInsuranceInfo)4195_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct ConstantFlowAgreement.UserInsuranceInfo)","numberOfBytes":"32","value":"t_struct(UserInsuranceInfo)4195_storage"},"t_struct(RoleData)34_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":31,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":33,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(UserGlobalInsuranceInfo)4202_storage":{"encoding":"inplace","label":"struct ConstantFlowAgreement.UserGlobalInsuranceInfo","members":[{"astId":4197,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"validTill","offset":0,"slot":"0","type":"t_uint256"},{"astId":4199,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"insuranceStreamRate","offset":0,"slot":"1","type":"t_uint256"},{"astId":4201,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"globalInsuranceCost","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_struct(UserInsuranceInfo)4195_storage":{"encoding":"inplace","label":"struct ConstantFlowAgreement.UserInsuranceInfo","members":[{"astId":4182,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"startTime","offset":0,"slot":"0","type":"t_uint256"},{"astId":4184,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"validTill","offset":0,"slot":"1","type":"t_uint256"},{"astId":4186,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"insuredAmount","offset":0,"slot":"2","type":"t_uint256"},{"astId":4188,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"registrationTime","offset":0,"slot":"3","type":"t_uint256"},{"astId":4190,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"insuranceFlowRate","offset":0,"slot":"4","type":"t_uint256"},{"astId":4192,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"insuranceCost","offset":0,"slot":"5","type":"t_uint256"},{"astId":4194,"contract":"contracts/core/payAsYouGo/ConstantFlowAgreement.sol:ConstantFlowAgreement","label":"isValid","offset":0,"slot":"6","type":"t_bool"}],"numberOfBytes":"224"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"calculateTotalFlowMade(address)":{"notice":"DURATION"},"calculateTotalFlowMade(address,uint256)":{"notice":"DURATION"},"findActivePremiumCost(address,uint256,uint256)":{"notice":"VIEW FUNCTIONS"}},"notice":"Report any bug or issues at:","version":1}}},"contracts/core/token/SZTDAIERC20.sol":{"SZTDAI":{"abi":[{"inputs":[],"name":"BaseUpgradeablePausable__ZeroAddressError","type":"error"},{"inputs":[],"name":"ERC20__ImmutableChangesError","type":"error"},{"inputs":[],"name":"ERC20__InsufficientBalanceError","type":"error"},{"inputs":[],"name":"ERC20__SameAdressTransferError","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"__BaseUpgradeablePausable_init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_addressSwapDAI","type":"address"},{"internalType":"address","name":"_addressCFA","type":"address"}],"name":"init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isAdmin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"swapContractDAI","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"custom:security-contact":"anshik@safezen.finance","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"See {IERC20Permit-DOMAIN_SEPARATOR}."},"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"nonces(address)":{"details":"See {IERC20Permit-nonces}."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"See {IERC20Permit-permit}."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44E4 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E810B1A GT PUSH2 0x10F JUMPI DUP1 PUSH4 0xA217FDDF GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xD505ACCF GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x5AA JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x5C6 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x5E2 JUMPI DUP1 PUSH4 0xF09A4016 EQ PUSH2 0x612 JUMPI PUSH2 0x1E5 JUMP JUMPDEST DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x50E JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x52C JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x55C JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x58C JUMPI PUSH2 0x1E5 JUMP JUMPDEST DUP1 PUSH4 0x8129FC1C GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x4AC JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x4B6 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x4C0 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x4F0 JUMPI PUSH2 0x1E5 JUMP JUMPDEST DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x400 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x41C JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x44C JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x47C JUMPI PUSH2 0x1E5 JUMP JUMPDEST DUP1 PUSH4 0x2F2FF15D GT PUSH2 0x187 JUMPI DUP1 PUSH4 0x39509351 GT PUSH2 0x156 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x378 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x3A8 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x3B2 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x3E2 JUMPI PUSH2 0x1E5 JUMP JUMPDEST DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x304 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x320 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x33E JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x35C JUMPI PUSH2 0x1E5 JUMP JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x286 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x2B6 JUMPI DUP1 PUSH4 0x276EC86A EQ PUSH2 0x2E6 JUMPI PUSH2 0x1E5 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x21A JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x238 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x204 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FF SWAP2 SWAP1 PUSH2 0x2C99 JUMP JUMPDEST PUSH2 0x62E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x211 SWAP2 SWAP1 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x222 PUSH2 0x6A8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x22F SWAP2 SWAP1 PUSH2 0x2D8C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x252 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x24D SWAP2 SWAP1 PUSH2 0x2E42 JUMP JUMPDEST PUSH2 0x73A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25F SWAP2 SWAP1 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x270 PUSH2 0x75D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27D SWAP2 SWAP1 PUSH2 0x2E91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x29B SWAP2 SWAP1 PUSH2 0x2EAC JUMP JUMPDEST PUSH2 0x767 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2AD SWAP2 SWAP1 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2D0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2CB SWAP2 SWAP1 PUSH2 0x2F35 JUMP JUMPDEST PUSH2 0x8F1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2DD SWAP2 SWAP1 PUSH2 0x2F71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2EE PUSH2 0x912 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FB SWAP2 SWAP1 PUSH2 0x2F9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x319 SWAP2 SWAP1 PUSH2 0x2FB6 JUMP JUMPDEST PUSH2 0x939 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x328 PUSH2 0x95A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x335 SWAP2 SWAP1 PUSH2 0x3012 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x346 PUSH2 0x963 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x353 SWAP2 SWAP1 PUSH2 0x2F71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x376 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x371 SWAP2 SWAP1 PUSH2 0x2FB6 JUMP JUMPDEST PUSH2 0x972 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x392 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x38D SWAP2 SWAP1 PUSH2 0x2E42 JUMP JUMPDEST PUSH2 0x9F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x39F SWAP2 SWAP1 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3B0 PUSH2 0xA2C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3CC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3C7 SWAP2 SWAP1 PUSH2 0x2E42 JUMP JUMPDEST PUSH2 0xA7D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3D9 SWAP2 SWAP1 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3EA PUSH2 0xB55 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F7 SWAP2 SWAP1 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x41A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x415 SWAP2 SWAP1 PUSH2 0x302D JUMP JUMPDEST PUSH2 0xB6C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x436 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x431 SWAP2 SWAP1 PUSH2 0x302D JUMP JUMPDEST PUSH2 0xC8E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x443 SWAP2 SWAP1 PUSH2 0x2E91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x466 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x461 SWAP2 SWAP1 PUSH2 0x2E42 JUMP JUMPDEST PUSH2 0xCD7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x473 SWAP2 SWAP1 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x496 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x491 SWAP2 SWAP1 PUSH2 0x302D JUMP JUMPDEST PUSH2 0xCFF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4A3 SWAP2 SWAP1 PUSH2 0x2E91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4B4 PUSH2 0xD4F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4BE PUSH2 0xF47 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4DA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4D5 SWAP2 SWAP1 PUSH2 0x2FB6 JUMP JUMPDEST PUSH2 0xF98 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4E7 SWAP2 SWAP1 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4F8 PUSH2 0x1004 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x505 SWAP2 SWAP1 PUSH2 0x2D8C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x516 PUSH2 0x1096 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x523 SWAP2 SWAP1 PUSH2 0x2F71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x546 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x541 SWAP2 SWAP1 PUSH2 0x2E42 JUMP JUMPDEST PUSH2 0x109D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x553 SWAP2 SWAP1 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x576 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x571 SWAP2 SWAP1 PUSH2 0x2E42 JUMP JUMPDEST PUSH2 0x1114 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x583 SWAP2 SWAP1 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x594 PUSH2 0x123A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5A1 SWAP2 SWAP1 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5BF SWAP2 SWAP1 PUSH2 0x3086 JUMP JUMPDEST PUSH2 0x1259 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5DB SWAP2 SWAP1 PUSH2 0x2FB6 JUMP JUMPDEST PUSH2 0x139B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5FC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5F7 SWAP2 SWAP1 PUSH2 0x3128 JUMP JUMPDEST PUSH2 0x13BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x609 SWAP2 SWAP1 PUSH2 0x2E91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x62C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x627 SWAP2 SWAP1 PUSH2 0x3128 JUMP JUMPDEST PUSH2 0x1443 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x6A1 JUMPI POP PUSH2 0x6A0 DUP3 PUSH2 0x1567 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x6B7 SWAP1 PUSH2 0x3197 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x6E3 SWAP1 PUSH2 0x3197 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x730 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x705 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x730 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x713 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x745 PUSH2 0x15D1 JUMP JUMPDEST SWAP1 POP PUSH2 0x752 DUP2 DUP6 DUP6 PUSH2 0x15D9 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x35 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x7CE JUMPI PUSH1 0x40 MLOAD PUSH32 0xCED4EF3500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x7D9 DUP6 PUSH2 0xC8E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x196 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42F6B8A7 DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x839 SWAP2 SWAP1 PUSH2 0x2F9B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x856 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x87A SWAP2 SWAP1 PUSH2 0x31DD JUMP JUMPDEST SWAP1 POP DUP4 DUP2 DUP4 PUSH2 0x889 SWAP2 SWAP1 PUSH2 0x3239 JUMP JUMPDEST LT ISZERO PUSH2 0x8C1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x9950252700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x8CB PUSH2 0x15D1 JUMP JUMPDEST SWAP1 POP PUSH2 0x8D8 DUP8 DUP3 DUP8 PUSH2 0x17A2 JUMP JUMPDEST PUSH2 0x8E3 DUP8 DUP8 DUP8 PUSH2 0x182E JUMP JUMPDEST PUSH1 0x1 SWAP4 POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x130 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x195 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x942 DUP3 PUSH2 0x8F1 JUMP JUMPDEST PUSH2 0x94B DUP2 PUSH2 0x1AA7 JUMP JUMPDEST PUSH2 0x955 DUP4 DUP4 PUSH2 0x1ABB JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x96D PUSH2 0x1B9D JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x97A PUSH2 0x15D1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x9E7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9DE SWAP1 PUSH2 0x32DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9F1 DUP3 DUP3 PUSH2 0x1BDD JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xA00 PUSH2 0x15D1 JUMP JUMPDEST SWAP1 POP PUSH2 0xA21 DUP2 DUP6 DUP6 PUSH2 0xA12 DUP6 DUP10 PUSH2 0x13BC JUMP JUMPDEST PUSH2 0xA1C SWAP2 SWAP1 PUSH2 0x32FF JUMP JUMPDEST PUSH2 0x15D9 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xA34 PUSH2 0x123A JUMP JUMPDEST PUSH2 0xA73 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA6A SWAP1 PUSH2 0x33A5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA7B PUSH2 0x1CC0 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x195 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xAC1 PUSH2 0x15D1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB38 JUMPI POP PUSH2 0x196 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB20 PUSH2 0x15D1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0xB41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB4B DUP4 DUP4 PUSH2 0x1D23 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xCC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xBBB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBB2 SWAP1 PUSH2 0x3437 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC21 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC29 PUSH2 0x1E7A JUMP JUMPDEST PUSH2 0xC31 PUSH2 0x1ED3 JUMP JUMPDEST PUSH2 0xC39 PUSH2 0x1F24 JUMP JUMPDEST PUSH2 0xC4A PUSH2 0xC44 PUSH2 0x1F7D JUMP JUMPDEST DUP3 PUSH2 0x1ABB JUMP JUMPDEST PUSH2 0xC5B PUSH2 0xC55 PUSH2 0x1FA5 JUMP JUMPDEST DUP3 PUSH2 0x1ABB JUMP JUMPDEST PUSH2 0xC73 PUSH2 0xC66 PUSH2 0x1FA5 JUMP JUMPDEST PUSH2 0xC6E PUSH2 0x1F7D JUMP JUMPDEST PUSH2 0x1FCD JUMP JUMPDEST PUSH2 0xC8B PUSH2 0xC7E PUSH2 0x1F7D JUMP JUMPDEST PUSH2 0xC86 PUSH2 0x1F7D JUMP JUMPDEST PUSH2 0x1FCD JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCEB DUP4 PUSH2 0xCE5 PUSH2 0x15D1 JUMP JUMPDEST DUP5 PUSH2 0x17A2 JUMP JUMPDEST PUSH2 0xCF5 DUP4 DUP4 PUSH2 0x202A JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD48 PUSH1 0x99 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x21F9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0xD80 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0xDAD JUMPI POP PUSH2 0xD8F ADDRESS PUSH2 0x2207 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0xDAC JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0xDEC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDE3 SWAP1 PUSH2 0x34C9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0xE29 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0xE9D PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x14 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x535A54204441492053747265616D20546F6B656E000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x535A544441490000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x222A JUMP JUMPDEST PUSH2 0xEDB PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x535A544441490000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x2287 JUMP JUMPDEST PUSH2 0xEEB PUSH2 0xEE6 PUSH2 0x15D1 JUMP JUMPDEST PUSH2 0xB6C JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF44 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0xF3B SWAP2 SWAP1 PUSH2 0x352E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH2 0xF4F PUSH2 0x123A JUMP JUMPDEST PUSH2 0xF8E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF85 SWAP1 PUSH2 0x33A5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF96 PUSH2 0x2318 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x130 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x1013 SWAP1 PUSH2 0x3197 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x103F SWAP1 PUSH2 0x3197 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x108C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1061 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x108C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x106F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10A8 PUSH2 0x15D1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x10B6 DUP3 DUP7 PUSH2 0x13BC JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x10FB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10F2 SWAP1 PUSH2 0x35BB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1108 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x15D9 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x111F PUSH2 0x15D1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1133 PUSH2 0x112E PUSH2 0x15D1 JUMP JUMPDEST PUSH2 0xC8E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x196 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42F6B8A7 PUSH2 0x117E PUSH2 0x15D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x119A SWAP2 SWAP1 PUSH2 0x2F9B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11DB SWAP2 SWAP1 PUSH2 0x31DD JUMP JUMPDEST SWAP1 POP DUP5 DUP2 DUP4 PUSH2 0x11EA SWAP2 SWAP1 PUSH2 0x3239 JUMP JUMPDEST LT ISZERO PUSH2 0x1222 JUMPI PUSH1 0x40 MLOAD PUSH32 0x9950252700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x122D DUP4 DUP8 DUP8 PUSH2 0x182E JUMP JUMPDEST PUSH1 0x1 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1254 PUSH2 0x1247 PUSH2 0x1F7D JUMP JUMPDEST PUSH2 0x124F PUSH2 0x15D1 JUMP JUMPDEST PUSH2 0xF98 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x129C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1293 SWAP1 PUSH2 0x3627 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x12CB DUP13 PUSH2 0x237B JUMP JUMPDEST DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x12E1 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3647 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x1304 DUP3 PUSH2 0x23D9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1314 DUP3 DUP8 DUP8 DUP8 PUSH2 0x23F3 JUMP JUMPDEST SWAP1 POP DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1384 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x137B SWAP1 PUSH2 0x36F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x138F DUP11 DUP11 DUP11 PUSH2 0x15D9 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x13A4 DUP3 PUSH2 0x8F1 JUMP JUMPDEST PUSH2 0x13AD DUP2 PUSH2 0x1AA7 JUMP JUMPDEST PUSH2 0x13B7 DUP4 DUP4 PUSH2 0x1BDD JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x34 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x144B PUSH2 0x123A JUMP JUMPDEST PUSH2 0x148A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1481 SWAP1 PUSH2 0x33A5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x194 SLOAD GT ISZERO PUSH2 0x14C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2669450E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x194 PUSH1 0x0 DUP2 SLOAD PUSH2 0x14D8 SWAP1 PUSH2 0x3714 JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE POP DUP2 PUSH2 0x195 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH2 0x196 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1648 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x163F SWAP1 PUSH2 0x37CE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x16B7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16AE SWAP1 PUSH2 0x3860 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x34 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1795 SWAP2 SWAP1 PUSH2 0x2E91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17AE DUP5 DUP5 PUSH2 0x13BC JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x1828 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x181A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1811 SWAP1 PUSH2 0x38CC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1827 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x15D9 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x189D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1894 SWAP1 PUSH2 0x395E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x190C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1903 SWAP1 PUSH2 0x39F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1917 DUP4 DUP4 DUP4 PUSH2 0x241E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x199E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1995 SWAP1 PUSH2 0x3A82 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x33 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x1A8E SWAP2 SWAP1 PUSH2 0x2E91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x1AA1 DUP5 DUP5 DUP5 PUSH2 0x2423 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1AB8 DUP2 PUSH2 0x1AB3 PUSH2 0x15D1 JUMP JUMPDEST PUSH2 0x2428 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1AC5 DUP3 DUP3 PUSH2 0xF98 JUMP JUMPDEST PUSH2 0x1B99 JUMPI PUSH1 0x1 PUSH2 0x130 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x1B3E PUSH2 0x15D1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BD8 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x1BCB PUSH2 0x24AD JUMP JUMPDEST PUSH2 0x1BD3 PUSH2 0x24B7 JUMP JUMPDEST PUSH2 0x24C1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1BE7 DUP3 DUP3 PUSH2 0xF98 JUMP JUMPDEST ISZERO PUSH2 0x1CBC JUMPI PUSH1 0x0 PUSH2 0x130 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x1C61 PUSH2 0x15D1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1CC8 PUSH2 0x24FB JUMP JUMPDEST PUSH1 0x0 PUSH1 0xCC PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x1D0C PUSH2 0x15D1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D19 SWAP2 SWAP1 PUSH2 0x2F9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1D92 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D89 SWAP1 PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1D9E PUSH1 0x0 DUP4 DUP4 PUSH2 0x241E JUMP JUMPDEST DUP1 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1DB0 SWAP2 SWAP1 PUSH2 0x32FF JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x33 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x1E62 SWAP2 SWAP1 PUSH2 0x2E91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x1E76 PUSH1 0x0 DUP4 DUP4 PUSH2 0x2423 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1EC9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1EC0 SWAP1 PUSH2 0x3437 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1ED1 PUSH2 0x2544 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1F22 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F19 SWAP1 PUSH2 0x3437 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1F73 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F6A SWAP1 PUSH2 0x3437 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1F7B PUSH2 0x25B0 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FD8 DUP4 PUSH2 0x8F1 JUMP JUMPDEST SWAP1 POP DUP2 PUSH2 0x130 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2099 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2090 SWAP1 PUSH2 0x3B80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x20A5 DUP3 PUSH1 0x0 DUP4 PUSH2 0x241E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x212C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2123 SWAP1 PUSH2 0x3C12 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x21E0 SWAP2 SWAP1 PUSH2 0x2E91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x21F4 DUP4 PUSH1 0x0 DUP5 PUSH2 0x2423 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2279 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2270 SWAP1 PUSH2 0x3437 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2283 DUP3 DUP3 PUSH2 0x260A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x22D6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x22CD SWAP1 PUSH2 0x3437 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2315 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3100000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x267D JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x2320 PUSH2 0x26F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xCC PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x2364 PUSH2 0x15D1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2371 SWAP2 SWAP1 PUSH2 0x2F9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x99 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x23C8 DUP2 PUSH2 0x21F9 JUMP JUMPDEST SWAP2 POP PUSH2 0x23D3 DUP2 PUSH2 0x2742 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23EC PUSH2 0x23E6 PUSH2 0x1B9D JUMP JUMPDEST DUP4 PUSH2 0x2758 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2404 DUP8 DUP8 DUP8 DUP8 PUSH2 0x278B JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x2411 DUP2 PUSH2 0x286D JUMP JUMPDEST DUP2 SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x2432 DUP3 DUP3 PUSH2 0xF98 JUMP JUMPDEST PUSH2 0x24A9 JUMPI PUSH2 0x243F DUP2 PUSH2 0x29D3 JUMP JUMPDEST PUSH2 0x244D DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0x2A00 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x245E SWAP3 SWAP2 SWAP1 PUSH2 0x3D06 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x24A0 SWAP2 SWAP1 PUSH2 0x2D8C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x65 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x66 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x24DC SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3D40 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2503 PUSH2 0xB55 JUMP JUMPDEST PUSH2 0x2542 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2539 SWAP1 PUSH2 0x3DDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2593 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x258A SWAP1 PUSH2 0x3437 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xCC PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x25FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25F6 SWAP1 PUSH2 0x3437 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH2 0x162 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2659 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2650 SWAP1 PUSH2 0x3437 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x36 SWAP1 DUP2 PUSH2 0x2668 SWAP2 SWAP1 PUSH2 0x3FD0 JUMP JUMPDEST POP DUP1 PUSH1 0x37 SWAP1 DUP2 PUSH2 0x2678 SWAP2 SWAP1 PUSH2 0x3FD0 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x26CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x26C3 SWAP1 PUSH2 0x3437 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP DUP2 PUSH1 0x65 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x66 DUP2 SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2700 PUSH2 0xB55 JUMP JUMPDEST ISZERO PUSH2 0x2740 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2737 SWAP1 PUSH2 0x40EE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x276D SWAP3 SWAP2 SWAP1 PUSH2 0x417B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 PUSH1 0x0 SHR GT ISZERO PUSH2 0x27C6 JUMPI PUSH1 0x0 PUSH1 0x3 SWAP2 POP SWAP2 POP PUSH2 0x2864 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x27EB SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x41B2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x280D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x285B JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x2864 JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP3 POP SWAP3 POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2881 JUMPI PUSH2 0x2880 PUSH2 0x41F7 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2894 JUMPI PUSH2 0x2893 PUSH2 0x41F7 JUMP JUMPDEST JUMPDEST SUB ISZERO PUSH2 0x29D0 JUMPI PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x28AE JUMPI PUSH2 0x28AD PUSH2 0x41F7 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x28C1 JUMPI PUSH2 0x28C0 PUSH2 0x41F7 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x2901 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28F8 SWAP1 PUSH2 0x4272 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2915 JUMPI PUSH2 0x2914 PUSH2 0x41F7 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2928 JUMPI PUSH2 0x2927 PUSH2 0x41F7 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x2968 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x295F SWAP1 PUSH2 0x42DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x297C JUMPI PUSH2 0x297B PUSH2 0x41F7 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x298F JUMPI PUSH2 0x298E PUSH2 0x41F7 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x29CF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x29C6 SWAP1 PUSH2 0x4370 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x29F9 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0x2A00 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0x2A13 SWAP2 SWAP1 PUSH2 0x4390 JUMP JUMPDEST PUSH2 0x2A1D SWAP2 SWAP1 PUSH2 0x32FF JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A36 JUMPI PUSH2 0x2A35 PUSH2 0x3DFF JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2A68 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2AA0 JUMPI PUSH2 0x2A9F PUSH2 0x43EA JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x2B04 JUMPI PUSH2 0x2B03 PUSH2 0x43EA JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0x2B44 SWAP2 SWAP1 PUSH2 0x4390 JUMP JUMPDEST PUSH2 0x2B4E SWAP2 SWAP1 PUSH2 0x32FF JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2BEE JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0x2B90 JUMPI PUSH2 0x2B8F PUSH2 0x43EA JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2BA7 JUMPI PUSH2 0x2BA6 PUSH2 0x43EA JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0x2BE7 SWAP1 PUSH2 0x4419 JUMP JUMPDEST SWAP1 POP PUSH2 0x2B51 JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0x2C32 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C29 SWAP1 PUSH2 0x448E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2C76 DUP2 PUSH2 0x2C41 JUMP JUMPDEST DUP2 EQ PUSH2 0x2C81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2C93 DUP2 PUSH2 0x2C6D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CAF JUMPI PUSH2 0x2CAE PUSH2 0x2C3C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2CBD DUP5 DUP3 DUP6 ADD PUSH2 0x2C84 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2CDB DUP2 PUSH2 0x2CC6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2CF6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2CD2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2D36 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2D1B JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D5E DUP3 PUSH2 0x2CFC JUMP JUMPDEST PUSH2 0x2D68 DUP2 DUP6 PUSH2 0x2D07 JUMP JUMPDEST SWAP4 POP PUSH2 0x2D78 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2D18 JUMP JUMPDEST PUSH2 0x2D81 DUP2 PUSH2 0x2D42 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2DA6 DUP2 DUP5 PUSH2 0x2D53 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DD9 DUP3 PUSH2 0x2DAE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2DE9 DUP2 PUSH2 0x2DCE JUMP JUMPDEST DUP2 EQ PUSH2 0x2DF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2E06 DUP2 PUSH2 0x2DE0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2E1F DUP2 PUSH2 0x2E0C JUMP JUMPDEST DUP2 EQ PUSH2 0x2E2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2E3C DUP2 PUSH2 0x2E16 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2E59 JUMPI PUSH2 0x2E58 PUSH2 0x2C3C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E67 DUP6 DUP3 DUP7 ADD PUSH2 0x2DF7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2E78 DUP6 DUP3 DUP7 ADD PUSH2 0x2E2D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2E8B DUP2 PUSH2 0x2E0C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2EA6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2E82 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2EC5 JUMPI PUSH2 0x2EC4 PUSH2 0x2C3C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2ED3 DUP7 DUP3 DUP8 ADD PUSH2 0x2DF7 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2EE4 DUP7 DUP3 DUP8 ADD PUSH2 0x2DF7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2EF5 DUP7 DUP3 DUP8 ADD PUSH2 0x2E2D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2F12 DUP2 PUSH2 0x2EFF JUMP JUMPDEST DUP2 EQ PUSH2 0x2F1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2F2F DUP2 PUSH2 0x2F09 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F4B JUMPI PUSH2 0x2F4A PUSH2 0x2C3C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2F59 DUP5 DUP3 DUP6 ADD PUSH2 0x2F20 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2F6B DUP2 PUSH2 0x2EFF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2F86 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2F62 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2F95 DUP2 PUSH2 0x2DCE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2FB0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2F8C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2FCD JUMPI PUSH2 0x2FCC PUSH2 0x2C3C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2FDB DUP6 DUP3 DUP7 ADD PUSH2 0x2F20 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2FEC DUP6 DUP3 DUP7 ADD PUSH2 0x2DF7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x300C DUP2 PUSH2 0x2FF6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3027 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3003 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3043 JUMPI PUSH2 0x3042 PUSH2 0x2C3C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3051 DUP5 DUP3 DUP6 ADD PUSH2 0x2DF7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3063 DUP2 PUSH2 0x2FF6 JUMP JUMPDEST DUP2 EQ PUSH2 0x306E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3080 DUP2 PUSH2 0x305A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x30A5 JUMPI PUSH2 0x30A4 PUSH2 0x2C3C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x30B3 DUP11 DUP3 DUP12 ADD PUSH2 0x2DF7 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x30C4 DUP11 DUP3 DUP12 ADD PUSH2 0x2DF7 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x30D5 DUP11 DUP3 DUP12 ADD PUSH2 0x2E2D JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x30E6 DUP11 DUP3 DUP12 ADD PUSH2 0x2E2D JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x30F7 DUP11 DUP3 DUP12 ADD PUSH2 0x3071 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x3108 DUP11 DUP3 DUP12 ADD PUSH2 0x2F20 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x3119 DUP11 DUP3 DUP12 ADD PUSH2 0x2F20 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x313F JUMPI PUSH2 0x313E PUSH2 0x2C3C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x314D DUP6 DUP3 DUP7 ADD PUSH2 0x2DF7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x315E DUP6 DUP3 DUP7 ADD PUSH2 0x2DF7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x31AF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x31C2 JUMPI PUSH2 0x31C1 PUSH2 0x3168 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x31D7 DUP2 PUSH2 0x2E16 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x31F3 JUMPI PUSH2 0x31F2 PUSH2 0x2C3C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3201 DUP5 DUP3 DUP6 ADD PUSH2 0x31C8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3244 DUP3 PUSH2 0x2E0C JUMP JUMPDEST SWAP2 POP PUSH2 0x324F DUP4 PUSH2 0x2E0C JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x3267 JUMPI PUSH2 0x3266 PUSH2 0x320A JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32C9 PUSH1 0x2F DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x32D4 DUP3 PUSH2 0x326D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x32F8 DUP2 PUSH2 0x32BC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x330A DUP3 PUSH2 0x2E0C JUMP JUMPDEST SWAP2 POP PUSH2 0x3315 DUP4 PUSH2 0x2E0C JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x332D JUMPI PUSH2 0x332C PUSH2 0x320A JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D75737420686176652061646D696E20726F6C6520746F20706572666F726D20 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7468697320616374696F6E2E0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x338F PUSH1 0x2C DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x339A DUP3 PUSH2 0x3333 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x33BE DUP2 PUSH2 0x3382 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3421 PUSH1 0x2B DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x342C DUP3 PUSH2 0x33C5 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3450 DUP2 PUSH2 0x3414 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34B3 PUSH1 0x2E DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x34BE DUP3 PUSH2 0x3457 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x34E2 DUP2 PUSH2 0x34A6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3518 PUSH2 0x3513 PUSH2 0x350E DUP5 PUSH2 0x34E9 JUMP JUMPDEST PUSH2 0x34F3 JUMP JUMPDEST PUSH2 0x2FF6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3528 DUP2 PUSH2 0x34FD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3543 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x351F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35A5 PUSH1 0x25 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x35B0 DUP3 PUSH2 0x3549 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x35D4 DUP2 PUSH2 0x3598 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3611 PUSH1 0x1D DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x361C DUP3 PUSH2 0x35DB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3640 DUP2 PUSH2 0x3604 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x365C PUSH1 0x0 DUP4 ADD DUP10 PUSH2 0x2F62 JUMP JUMPDEST PUSH2 0x3669 PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x2F8C JUMP JUMPDEST PUSH2 0x3676 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x2F8C JUMP JUMPDEST PUSH2 0x3683 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x2E82 JUMP JUMPDEST PUSH2 0x3690 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x2E82 JUMP JUMPDEST PUSH2 0x369D PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x2E82 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36DE PUSH1 0x1E DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x36E9 DUP3 PUSH2 0x36A8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x370D DUP2 PUSH2 0x36D1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x371F DUP3 PUSH2 0x2E0C JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x3751 JUMPI PUSH2 0x3750 PUSH2 0x320A JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37B8 PUSH1 0x24 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x37C3 DUP3 PUSH2 0x375C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x37E7 DUP2 PUSH2 0x37AB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x384A PUSH1 0x22 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x3855 DUP3 PUSH2 0x37EE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3879 DUP2 PUSH2 0x383D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x38B6 PUSH1 0x1D DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x38C1 DUP3 PUSH2 0x3880 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x38E5 DUP2 PUSH2 0x38A9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3948 PUSH1 0x25 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x3953 DUP3 PUSH2 0x38EC JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3977 DUP2 PUSH2 0x393B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39DA PUSH1 0x23 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x39E5 DUP3 PUSH2 0x397E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A09 DUP2 PUSH2 0x39CD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A6C PUSH1 0x26 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A77 DUP3 PUSH2 0x3A10 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A9B DUP2 PUSH2 0x3A5F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AD8 PUSH1 0x1F DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x3AE3 DUP3 PUSH2 0x3AA2 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3B07 DUP2 PUSH2 0x3ACB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B6A PUSH1 0x21 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x3B75 DUP3 PUSH2 0x3B0E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3B99 DUP2 PUSH2 0x3B5D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6365000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BFC PUSH1 0x22 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x3C07 DUP3 PUSH2 0x3BA0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3C2B DUP2 PUSH2 0x3BEF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C73 PUSH1 0x17 DUP4 PUSH2 0x3C32 JUMP JUMPDEST SWAP2 POP PUSH2 0x3C7E DUP3 PUSH2 0x3C3D JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C94 DUP3 PUSH2 0x2CFC JUMP JUMPDEST PUSH2 0x3C9E DUP2 DUP6 PUSH2 0x3C32 JUMP JUMPDEST SWAP4 POP PUSH2 0x3CAE DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2D18 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CF0 PUSH1 0x11 DUP4 PUSH2 0x3C32 JUMP JUMPDEST SWAP2 POP PUSH2 0x3CFB DUP3 PUSH2 0x3CBA JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D11 DUP3 PUSH2 0x3C66 JUMP JUMPDEST SWAP2 POP PUSH2 0x3D1D DUP3 DUP6 PUSH2 0x3C89 JUMP JUMPDEST SWAP2 POP PUSH2 0x3D28 DUP3 PUSH2 0x3CE3 JUMP JUMPDEST SWAP2 POP PUSH2 0x3D34 DUP3 DUP5 PUSH2 0x3C89 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x3D55 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x2F62 JUMP JUMPDEST PUSH2 0x3D62 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x2F62 JUMP JUMPDEST PUSH2 0x3D6F PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x2F62 JUMP JUMPDEST PUSH2 0x3D7C PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x2E82 JUMP JUMPDEST PUSH2 0x3D89 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x2F8C JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DC9 PUSH1 0x14 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x3DD4 DUP3 PUSH2 0x3D93 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3DF8 DUP2 PUSH2 0x3DBC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x3E90 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x3E53 JUMP JUMPDEST PUSH2 0x3E9A DUP7 DUP4 PUSH2 0x3E53 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3ECD PUSH2 0x3EC8 PUSH2 0x3EC3 DUP5 PUSH2 0x2E0C JUMP JUMPDEST PUSH2 0x34F3 JUMP JUMPDEST PUSH2 0x2E0C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3EE7 DUP4 PUSH2 0x3EB2 JUMP JUMPDEST PUSH2 0x3EFB PUSH2 0x3EF3 DUP3 PUSH2 0x3ED4 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x3E60 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3F10 PUSH2 0x3F03 JUMP JUMPDEST PUSH2 0x3F1B DUP2 DUP5 DUP5 PUSH2 0x3EDE JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3F3F JUMPI PUSH2 0x3F34 PUSH1 0x0 DUP3 PUSH2 0x3F08 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3F21 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3F84 JUMPI PUSH2 0x3F55 DUP2 PUSH2 0x3E2E JUMP JUMPDEST PUSH2 0x3F5E DUP5 PUSH2 0x3E43 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x3F6D JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x3F81 PUSH2 0x3F79 DUP6 PUSH2 0x3E43 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x3F20 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FA7 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x3F89 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FC0 DUP4 DUP4 PUSH2 0x3F96 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3FD9 DUP3 PUSH2 0x2CFC JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3FF2 JUMPI PUSH2 0x3FF1 PUSH2 0x3DFF JUMP JUMPDEST JUMPDEST PUSH2 0x3FFC DUP3 SLOAD PUSH2 0x3197 JUMP JUMPDEST PUSH2 0x4007 DUP3 DUP3 DUP6 PUSH2 0x3F43 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x403A JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x4028 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x4032 DUP6 DUP3 PUSH2 0x3FB4 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x409A JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x4048 DUP7 PUSH2 0x3E2E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4070 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x404B JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x408D JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x4089 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x3F96 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x40D8 PUSH1 0x10 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x40E3 DUP3 PUSH2 0x40A2 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4107 DUP2 PUSH2 0x40CB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4144 PUSH1 0x2 DUP4 PUSH2 0x3C32 JUMP JUMPDEST SWAP2 POP PUSH2 0x414F DUP3 PUSH2 0x410E JUMP JUMPDEST PUSH1 0x2 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4175 PUSH2 0x4170 DUP3 PUSH2 0x2EFF JUMP JUMPDEST PUSH2 0x415A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4186 DUP3 PUSH2 0x4137 JUMP JUMPDEST SWAP2 POP PUSH2 0x4192 DUP3 DUP6 PUSH2 0x4164 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x41A2 DUP3 DUP5 PUSH2 0x4164 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x41C7 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2F62 JUMP JUMPDEST PUSH2 0x41D4 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x3003 JUMP JUMPDEST PUSH2 0x41E1 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2F62 JUMP JUMPDEST PUSH2 0x41EE PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x2F62 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x425C PUSH1 0x18 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x4267 DUP3 PUSH2 0x4226 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x428B DUP2 PUSH2 0x424F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42C8 PUSH1 0x1F DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x42D3 DUP3 PUSH2 0x4292 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x42F7 DUP2 PUSH2 0x42BB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x435A PUSH1 0x22 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x4365 DUP3 PUSH2 0x42FE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4389 DUP2 PUSH2 0x434D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x439B DUP3 PUSH2 0x2E0C JUMP JUMPDEST SWAP2 POP PUSH2 0x43A6 DUP4 PUSH2 0x2E0C JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x43DF JUMPI PUSH2 0x43DE PUSH2 0x320A JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4424 DUP3 PUSH2 0x2E0C JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x4437 JUMPI PUSH2 0x4436 PUSH2 0x320A JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4478 PUSH1 0x20 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x4483 DUP3 PUSH2 0x4442 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x44A7 DUP2 PUSH2 0x446B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 0xED 0x2A COINBASE 0xE8 0xD9 0xD5 ADDRESS 0xDE 0xD9 ADD SWAP16 MSIZE STOP POP ADDMOD 0xE3 LOG3 RETURNDATACOPY 0x2C BALANCE 0xE4 DUP12 PUSH12 0x335E9C5D13BB7C464736F6C PUSH4 0x43000810 STOP CALLER ","sourceMap":"761:2716:23:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEFAULT_ADMIN_ROLE_42":{"entryPoint":4246,"id":42,"parameterSlots":0,"returnSlots":0},"@DOMAIN_SEPARATOR_1648":{"entryPoint":2403,"id":1648,"parameterSlots":0,"returnSlots":1},"@_EIP712NameHash_3071":{"entryPoint":9389,"id":3071,"parameterSlots":0,"returnSlots":1},"@_EIP712VersionHash_3080":{"entryPoint":9399,"id":3080,"parameterSlots":0,"returnSlots":1},"@__AccessControl_init_21":{"entryPoint":7891,"id":21,"parameterSlots":0,"returnSlots":0},"@__BaseUpgradeablePausable_init_4094":{"entryPoint":2924,"id":4094,"parameterSlots":1,"returnSlots":0},"@__EIP712_init_unchained_3004":{"entryPoint":9853,"id":3004,"parameterSlots":2,"returnSlots":0},"@__ERC20Permit_init_1540":{"entryPoint":8839,"id":1540,"parameterSlots":1,"returnSlots":0},"@__ERC20_init_824":{"entryPoint":8746,"id":824,"parameterSlots":2,"returnSlots":0},"@__ERC20_init_unchained_842":{"entryPoint":9738,"id":842,"parameterSlots":2,"returnSlots":0},"@__Pausable_init_608":{"entryPoint":7802,"id":608,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_unchained_618":{"entryPoint":9540,"id":618,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_727":{"entryPoint":7972,"id":727,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_unchained_737":{"entryPoint":9648,"id":737,"parameterSlots":0,"returnSlots":0},"@_afterTokenTransfer_1383":{"entryPoint":9251,"id":1383,"parameterSlots":3,"returnSlots":0},"@_approve_1318":{"entryPoint":5593,"id":1318,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_1372":{"entryPoint":9246,"id":1372,"parameterSlots":3,"returnSlots":0},"@_buildDomainSeparator_3046":{"entryPoint":9409,"id":3046,"parameterSlots":3,"returnSlots":1},"@_burn_1273":{"entryPoint":8234,"id":1273,"parameterSlots":2,"returnSlots":0},"@_checkRole_107":{"entryPoint":6823,"id":107,"parameterSlots":1,"returnSlots":0},"@_checkRole_146":{"entryPoint":9256,"id":146,"parameterSlots":2,"returnSlots":0},"@_domainSeparatorV4_3019":{"entryPoint":7069,"id":3019,"parameterSlots":0,"returnSlots":1},"@_grantRole_298":{"entryPoint":6843,"id":298,"parameterSlots":2,"returnSlots":0},"@_hashTypedDataV4_3062":{"entryPoint":9177,"id":3062,"parameterSlots":1,"returnSlots":1},"@_mint_1201":{"entryPoint":7459,"id":1201,"parameterSlots":2,"returnSlots":0},"@_msgSender_2311":{"entryPoint":5585,"id":2311,"parameterSlots":0,"returnSlots":1},"@_pause_682":{"entryPoint":8984,"id":682,"parameterSlots":0,"returnSlots":0},"@_requireNotPaused_655":{"entryPoint":9976,"id":655,"parameterSlots":0,"returnSlots":0},"@_requirePaused_666":{"entryPoint":9467,"id":666,"parameterSlots":0,"returnSlots":0},"@_revokeRole_329":{"entryPoint":7133,"id":329,"parameterSlots":2,"returnSlots":0},"@_setRoleAdmin_266":{"entryPoint":8141,"id":266,"parameterSlots":2,"returnSlots":0},"@_spendAllowance_1361":{"entryPoint":6050,"id":1361,"parameterSlots":3,"returnSlots":0},"@_throwError_2629":{"entryPoint":10349,"id":2629,"parameterSlots":1,"returnSlots":0},"@_transfer_1144":{"entryPoint":6190,"id":1144,"parameterSlots":3,"returnSlots":0},"@_unpause_698":{"entryPoint":7360,"id":698,"parameterSlots":0,"returnSlots":0},"@_useNonce_1677":{"entryPoint":9083,"id":1677,"parameterSlots":1,"returnSlots":1},"@allowance_939":{"entryPoint":5052,"id":939,"parameterSlots":2,"returnSlots":1},"@approve_964":{"entryPoint":1850,"id":964,"parameterSlots":2,"returnSlots":1},"@balanceOf_896":{"entryPoint":3214,"id":896,"parameterSlots":1,"returnSlots":1},"@burnFrom_5870":{"entryPoint":3287,"id":5870,"parameterSlots":2,"returnSlots":1},"@current_2344":{"entryPoint":8697,"id":2344,"parameterSlots":1,"returnSlots":1},"@decimals_872":{"entryPoint":2394,"id":872,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_1067":{"entryPoint":4253,"id":1067,"parameterSlots":2,"returnSlots":1},"@getAdminRole_4129":{"entryPoint":8061,"id":4129,"parameterSlots":0,"returnSlots":1},"@getPauserRole_4137":{"entryPoint":8101,"id":4137,"parameterSlots":0,"returnSlots":1},"@getRoleAdmin_161":{"entryPoint":2289,"id":161,"parameterSlots":1,"returnSlots":1},"@grantRole_181":{"entryPoint":2361,"id":181,"parameterSlots":2,"returnSlots":0},"@hasRole_94":{"entryPoint":3992,"id":94,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_1026":{"entryPoint":2549,"id":1026,"parameterSlots":2,"returnSlots":1},"@increment_2358":{"entryPoint":10050,"id":2358,"parameterSlots":1,"returnSlots":0},"@init_5807":{"entryPoint":5187,"id":5807,"parameterSlots":2,"returnSlots":0},"@initialize_5776":{"entryPoint":3407,"id":5776,"parameterSlots":0,"returnSlots":0},"@isAdmin_4108":{"entryPoint":4666,"id":4108,"parameterSlots":0,"returnSlots":1},"@isContract_2018":{"entryPoint":8711,"id":2018,"parameterSlots":1,"returnSlots":1},"@mint_5845":{"entryPoint":2685,"id":5845,"parameterSlots":2,"returnSlots":1},"@name_852":{"entryPoint":1704,"id":852,"parameterSlots":0,"returnSlots":1},"@nonces_1637":{"entryPoint":3327,"id":1637,"parameterSlots":1,"returnSlots":1},"@pause_5816":{"entryPoint":3911,"id":5816,"parameterSlots":0,"returnSlots":0},"@paused_643":{"entryPoint":2901,"id":643,"parameterSlots":0,"returnSlots":1},"@permit_1621":{"entryPoint":4697,"id":1621,"parameterSlots":7,"returnSlots":0},"@recover_2876":{"entryPoint":9203,"id":2876,"parameterSlots":4,"returnSlots":1},"@renounceRole_224":{"entryPoint":2418,"id":224,"parameterSlots":2,"returnSlots":0},"@revokeRole_201":{"entryPoint":5019,"id":201,"parameterSlots":2,"returnSlots":0},"@supportsInterface_3124":{"entryPoint":5479,"id":3124,"parameterSlots":1,"returnSlots":1},"@supportsInterface_75":{"entryPoint":1582,"id":75,"parameterSlots":1,"returnSlots":1},"@swapContractDAI_5732":{"entryPoint":2322,"id":5732,"parameterSlots":0,"returnSlots":0},"@symbol_862":{"entryPoint":4100,"id":862,"parameterSlots":0,"returnSlots":1},"@toHexString_2554":{"entryPoint":10752,"id":2554,"parameterSlots":2,"returnSlots":1},"@toHexString_2574":{"entryPoint":10707,"id":2574,"parameterSlots":1,"returnSlots":1},"@toTypedDataHash_2935":{"entryPoint":10072,"id":2935,"parameterSlots":2,"returnSlots":1},"@totalSupply_882":{"entryPoint":1885,"id":882,"parameterSlots":0,"returnSlots":1},"@transferFrom_5988":{"entryPoint":1895,"id":5988,"parameterSlots":3,"returnSlots":1},"@transfer_5922":{"entryPoint":4372,"id":5922,"parameterSlots":2,"returnSlots":1},"@tryRecover_2843":{"entryPoint":10123,"id":2843,"parameterSlots":4,"returnSlots":2},"@unpause_5825":{"entryPoint":2604,"id":5825,"parameterSlots":0,"returnSlots":0},"abi_decode_t_address":{"entryPoint":11767,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":12064,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":11396,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":11821,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":12744,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint8":{"entryPoint":12401,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":12333,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":12584,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":11948,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32":{"entryPoint":12422,"id":null,"parameterSlots":2,"returnSlots":7},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":11842,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":12085,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":12214,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":11417,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":12765,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":12172,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":11474,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":12130,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack":{"entryPoint":16740,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack":{"entryPoint":13599,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":11603,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":15497,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack":{"entryPoint":16975,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack":{"entryPoint":17515,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack":{"entryPoint":14797,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack":{"entryPoint":15804,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack":{"entryPoint":15343,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack":{"entryPoint":17083,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack":{"entryPoint":14397,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":16695,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack":{"entryPoint":14505,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd_to_t_string_memory_ptr_fromStack":{"entryPoint":13828,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack":{"entryPoint":14943,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack":{"entryPoint":17229,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack":{"entryPoint":16587,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack":{"entryPoint":13478,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124_to_t_string_memory_ptr_fromStack":{"entryPoint":14033,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack":{"entryPoint":13186,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack":{"entryPoint":15197,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack":{"entryPoint":14651,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack":{"entryPoint":14251,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":13332,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":15462,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack":{"entryPoint":13720,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":15587,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack":{"entryPoint":12988,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack":{"entryPoint":15051,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":11906,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":12291,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":16763,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":15622,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":12187,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":11489,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":12145,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":13895,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed":{"entryPoint":15680,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":16818,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":13614,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11660,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17010,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17550,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14832,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15839,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15378,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17118,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14432,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14540,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13863,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14978,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17264,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16622,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13513,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14068,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13221,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15232,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14686,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14286,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13367,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13755,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13023,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15086,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":11921,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":12306,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":15918,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":11516,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":11527,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":15410,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":13055,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":17296,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":12857,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":16195,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":11726,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":11462,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":12031,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":11329,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_1_by_1":{"entryPoint":13545,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":11694,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":11788,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":12278,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":16160,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_rational_1_by_1_to_t_uint8":{"entryPoint":13565,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint256_to_t_uint256":{"entryPoint":16050,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":16336,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":11544,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":17433,"id":null,"parameterSlots":1,"returnSlots":1},"divide_by_32_ceil":{"entryPoint":15939,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":12695,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":16308,"id":null,"parameterSlots":2,"returnSlots":1},"identity":{"entryPoint":13555,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":14100,"id":null,"parameterSlots":1,"returnSlots":1},"leftAlign_t_bytes32":{"entryPoint":16730,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":16278,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":12810,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":16887,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":12648,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":17386,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":15871,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":16084,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":11324,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":11586,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":15955,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":16265,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":16136,"id":null,"parameterSlots":2,"returnSlots":0},"store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be":{"entryPoint":16934,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2":{"entryPoint":17474,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f":{"entryPoint":14718,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a":{"entryPoint":15763,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd":{"entryPoint":15264,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77":{"entryPoint":17042,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029":{"entryPoint":14318,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541":{"entryPoint":16654,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe":{"entryPoint":14464,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd":{"entryPoint":13787,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6":{"entryPoint":14864,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd":{"entryPoint":17150,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a":{"entryPoint":16546,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759":{"entryPoint":13399,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124":{"entryPoint":13992,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513":{"entryPoint":13107,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f":{"entryPoint":15118,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea":{"entryPoint":14572,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208":{"entryPoint":14172,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":13253,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874":{"entryPoint":15421,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8":{"entryPoint":13641,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69":{"entryPoint":15546,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b":{"entryPoint":12909,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e":{"entryPoint":15010,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":15968,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":16094,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":11744,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":12041,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":11373,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":11798,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint8":{"entryPoint":12378,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":16131,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:46100:27","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:27","statements":[{"nodeType":"YulAssignment","src":"57:19:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:27","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:27"},"nodeType":"YulFunctionCall","src":"67:9:27"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:27"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:27","type":""}],"src":"7:75:27"},{"body":{"nodeType":"YulBlock","src":"177:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:27"},"nodeType":"YulFunctionCall","src":"187:12:27"},"nodeType":"YulExpressionStatement","src":"187:12:27"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:27"},{"body":{"nodeType":"YulBlock","src":"300:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:27"},"nodeType":"YulFunctionCall","src":"310:12:27"},"nodeType":"YulExpressionStatement","src":"310:12:27"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:27"},{"body":{"nodeType":"YulBlock","src":"378:105:27","statements":[{"nodeType":"YulAssignment","src":"388:89:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:27","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:27"},"nodeType":"YulFunctionCall","src":"399:78:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:27"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:27","type":""}],"src":"334:149:27"},{"body":{"nodeType":"YulBlock","src":"531:78:27","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:27"},"nodeType":"YulFunctionCall","src":"589:12:27"},"nodeType":"YulExpressionStatement","src":"589:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:27"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:27"},"nodeType":"YulFunctionCall","src":"561:23:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:27"},"nodeType":"YulFunctionCall","src":"551:34:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:27"},"nodeType":"YulFunctionCall","src":"544:42:27"},"nodeType":"YulIf","src":"541:62:27"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:27","type":""}],"src":"489:120:27"},{"body":{"nodeType":"YulBlock","src":"666:86:27","statements":[{"nodeType":"YulAssignment","src":"676:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:27"},"nodeType":"YulFunctionCall","src":"685:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:27"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:27"},"nodeType":"YulFunctionCall","src":"714:32:27"},"nodeType":"YulExpressionStatement","src":"714:32:27"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:27","type":""}],"src":"615:137:27"},{"body":{"nodeType":"YulBlock","src":"823:262:27","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:27"},"nodeType":"YulFunctionCall","src":"871:79:27"},"nodeType":"YulExpressionStatement","src":"871:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:27"},"nodeType":"YulFunctionCall","src":"840:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:27"},"nodeType":"YulFunctionCall","src":"836:32:27"},"nodeType":"YulIf","src":"833:119:27"},{"nodeType":"YulBlock","src":"962:116:27","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:27","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:27"},"nodeType":"YulFunctionCall","src":"1036:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:27"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:27"},"nodeType":"YulFunctionCall","src":"1016:52:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:27"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:27","type":""}],"src":"758:327:27"},{"body":{"nodeType":"YulBlock","src":"1133:48:27","statements":[{"nodeType":"YulAssignment","src":"1143:32:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:27"},"nodeType":"YulFunctionCall","src":"1161:13:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:27"},"nodeType":"YulFunctionCall","src":"1154:21:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:27"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:27","type":""}],"src":"1091:90:27"},{"body":{"nodeType":"YulBlock","src":"1246:50:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:27"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:27"},"nodeType":"YulFunctionCall","src":"1268:21:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:27"},"nodeType":"YulFunctionCall","src":"1256:34:27"},"nodeType":"YulExpressionStatement","src":"1256:34:27"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:27","type":""}],"src":"1187:109:27"},{"body":{"nodeType":"YulBlock","src":"1394:118:27","statements":[{"nodeType":"YulAssignment","src":"1404:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:27"},"nodeType":"YulFunctionCall","src":"1412:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:27"},"nodeType":"YulFunctionCall","src":"1487:17:27"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:27"},"nodeType":"YulFunctionCall","src":"1440:65:27"},"nodeType":"YulExpressionStatement","src":"1440:65:27"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:27","type":""}],"src":"1302:210:27"},{"body":{"nodeType":"YulBlock","src":"1577:40:27","statements":[{"nodeType":"YulAssignment","src":"1588:22:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1604:5:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1598:5:27"},"nodeType":"YulFunctionCall","src":"1598:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1588:6:27"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1560:5:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1570:6:27","type":""}],"src":"1518:99:27"},{"body":{"nodeType":"YulBlock","src":"1719:73:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1736:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"1741:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1729:6:27"},"nodeType":"YulFunctionCall","src":"1729:19:27"},"nodeType":"YulExpressionStatement","src":"1729:19:27"},{"nodeType":"YulAssignment","src":"1757:29:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1776:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"1781:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:27"},"nodeType":"YulFunctionCall","src":"1772:14:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1757:11:27"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1691:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"1696:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1707:11:27","type":""}],"src":"1623:169:27"},{"body":{"nodeType":"YulBlock","src":"1860:184:27","statements":[{"nodeType":"YulVariableDeclaration","src":"1870:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"1879:1:27","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1874:1:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"1939:63:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1964:3:27"},{"name":"i","nodeType":"YulIdentifier","src":"1969:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1960:3:27"},"nodeType":"YulFunctionCall","src":"1960:11:27"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1983:3:27"},{"name":"i","nodeType":"YulIdentifier","src":"1988:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1979:3:27"},"nodeType":"YulFunctionCall","src":"1979:11:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1973:5:27"},"nodeType":"YulFunctionCall","src":"1973:18:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1953:6:27"},"nodeType":"YulFunctionCall","src":"1953:39:27"},"nodeType":"YulExpressionStatement","src":"1953:39:27"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1900:1:27"},{"name":"length","nodeType":"YulIdentifier","src":"1903:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1897:2:27"},"nodeType":"YulFunctionCall","src":"1897:13:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1911:19:27","statements":[{"nodeType":"YulAssignment","src":"1913:15:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1922:1:27"},{"kind":"number","nodeType":"YulLiteral","src":"1925:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1918:3:27"},"nodeType":"YulFunctionCall","src":"1918:10:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1913:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"1893:3:27","statements":[]},"src":"1889:113:27"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2022:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"2027:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2018:3:27"},"nodeType":"YulFunctionCall","src":"2018:16:27"},{"kind":"number","nodeType":"YulLiteral","src":"2036:1:27","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2011:6:27"},"nodeType":"YulFunctionCall","src":"2011:27:27"},"nodeType":"YulExpressionStatement","src":"2011:27:27"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1842:3:27","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1847:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"1852:6:27","type":""}],"src":"1798:246:27"},{"body":{"nodeType":"YulBlock","src":"2098:54:27","statements":[{"nodeType":"YulAssignment","src":"2108:38:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2126:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"2133:2:27","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2122:3:27"},"nodeType":"YulFunctionCall","src":"2122:14:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2142:2:27","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2138:3:27"},"nodeType":"YulFunctionCall","src":"2138:7:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2118:3:27"},"nodeType":"YulFunctionCall","src":"2118:28:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2108:6:27"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2081:5:27","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2091:6:27","type":""}],"src":"2050:102:27"},{"body":{"nodeType":"YulBlock","src":"2250:285:27","statements":[{"nodeType":"YulVariableDeclaration","src":"2260:53:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2307:5:27"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2274:32:27"},"nodeType":"YulFunctionCall","src":"2274:39:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2264:6:27","type":""}]},{"nodeType":"YulAssignment","src":"2322:78:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2388:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"2393:6:27"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2329:58:27"},"nodeType":"YulFunctionCall","src":"2329:71:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2322:3:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2448:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"2455:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2444:3:27"},"nodeType":"YulFunctionCall","src":"2444:16:27"},{"name":"pos","nodeType":"YulIdentifier","src":"2462:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"2467:6:27"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2409:34:27"},"nodeType":"YulFunctionCall","src":"2409:65:27"},"nodeType":"YulExpressionStatement","src":"2409:65:27"},{"nodeType":"YulAssignment","src":"2483:46:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2494:3:27"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2521:6:27"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2499:21:27"},"nodeType":"YulFunctionCall","src":"2499:29:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2490:3:27"},"nodeType":"YulFunctionCall","src":"2490:39:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2483:3:27"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2231:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2238:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2246:3:27","type":""}],"src":"2158:377:27"},{"body":{"nodeType":"YulBlock","src":"2659:195:27","statements":[{"nodeType":"YulAssignment","src":"2669:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2681:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2692:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2677:3:27"},"nodeType":"YulFunctionCall","src":"2677:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2669:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2716:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2727:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:27"},"nodeType":"YulFunctionCall","src":"2712:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2735:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"2741:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2731:3:27"},"nodeType":"YulFunctionCall","src":"2731:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2705:6:27"},"nodeType":"YulFunctionCall","src":"2705:47:27"},"nodeType":"YulExpressionStatement","src":"2705:47:27"},{"nodeType":"YulAssignment","src":"2761:86:27","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2833:6:27"},{"name":"tail","nodeType":"YulIdentifier","src":"2842:4:27"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2769:63:27"},"nodeType":"YulFunctionCall","src":"2769:78:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2761:4:27"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2631:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2643:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2654:4:27","type":""}],"src":"2541:313:27"},{"body":{"nodeType":"YulBlock","src":"2905:81:27","statements":[{"nodeType":"YulAssignment","src":"2915:65:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2930:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"2937:42:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2926:3:27"},"nodeType":"YulFunctionCall","src":"2926:54:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2915:7:27"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2887:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2897:7:27","type":""}],"src":"2860:126:27"},{"body":{"nodeType":"YulBlock","src":"3037:51:27","statements":[{"nodeType":"YulAssignment","src":"3047:35:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3076:5:27"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3058:17:27"},"nodeType":"YulFunctionCall","src":"3058:24:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3047:7:27"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3019:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3029:7:27","type":""}],"src":"2992:96:27"},{"body":{"nodeType":"YulBlock","src":"3137:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"3194:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3203:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3206:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3196:6:27"},"nodeType":"YulFunctionCall","src":"3196:12:27"},"nodeType":"YulExpressionStatement","src":"3196:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3160:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3185:5:27"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3167:17:27"},"nodeType":"YulFunctionCall","src":"3167:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3157:2:27"},"nodeType":"YulFunctionCall","src":"3157:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3150:6:27"},"nodeType":"YulFunctionCall","src":"3150:43:27"},"nodeType":"YulIf","src":"3147:63:27"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3130:5:27","type":""}],"src":"3094:122:27"},{"body":{"nodeType":"YulBlock","src":"3274:87:27","statements":[{"nodeType":"YulAssignment","src":"3284:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3306:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3293:12:27"},"nodeType":"YulFunctionCall","src":"3293:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3284:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3349:5:27"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"3322:26:27"},"nodeType":"YulFunctionCall","src":"3322:33:27"},"nodeType":"YulExpressionStatement","src":"3322:33:27"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3252:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"3260:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3268:5:27","type":""}],"src":"3222:139:27"},{"body":{"nodeType":"YulBlock","src":"3412:32:27","statements":[{"nodeType":"YulAssignment","src":"3422:16:27","value":{"name":"value","nodeType":"YulIdentifier","src":"3433:5:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3422:7:27"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3394:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3404:7:27","type":""}],"src":"3367:77:27"},{"body":{"nodeType":"YulBlock","src":"3493:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"3550:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3559:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3562:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3552:6:27"},"nodeType":"YulFunctionCall","src":"3552:12:27"},"nodeType":"YulExpressionStatement","src":"3552:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3516:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3541:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3523:17:27"},"nodeType":"YulFunctionCall","src":"3523:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3513:2:27"},"nodeType":"YulFunctionCall","src":"3513:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3506:6:27"},"nodeType":"YulFunctionCall","src":"3506:43:27"},"nodeType":"YulIf","src":"3503:63:27"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3486:5:27","type":""}],"src":"3450:122:27"},{"body":{"nodeType":"YulBlock","src":"3630:87:27","statements":[{"nodeType":"YulAssignment","src":"3640:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3662:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3649:12:27"},"nodeType":"YulFunctionCall","src":"3649:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3640:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3705:5:27"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3678:26:27"},"nodeType":"YulFunctionCall","src":"3678:33:27"},"nodeType":"YulExpressionStatement","src":"3678:33:27"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3608:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"3616:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3624:5:27","type":""}],"src":"3578:139:27"},{"body":{"nodeType":"YulBlock","src":"3806:391:27","statements":[{"body":{"nodeType":"YulBlock","src":"3852:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3854:77:27"},"nodeType":"YulFunctionCall","src":"3854:79:27"},"nodeType":"YulExpressionStatement","src":"3854:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3827:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"3836:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3823:3:27"},"nodeType":"YulFunctionCall","src":"3823:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"3848:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3819:3:27"},"nodeType":"YulFunctionCall","src":"3819:32:27"},"nodeType":"YulIf","src":"3816:119:27"},{"nodeType":"YulBlock","src":"3945:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"3960:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"3974:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3964:6:27","type":""}]},{"nodeType":"YulAssignment","src":"3989:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4024:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"4035:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4020:3:27"},"nodeType":"YulFunctionCall","src":"4020:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4044:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3999:20:27"},"nodeType":"YulFunctionCall","src":"3999:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3989:6:27"}]}]},{"nodeType":"YulBlock","src":"4072:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"4087:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"4101:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4091:6:27","type":""}]},{"nodeType":"YulAssignment","src":"4117:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4152:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"4163:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4148:3:27"},"nodeType":"YulFunctionCall","src":"4148:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4172:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4127:20:27"},"nodeType":"YulFunctionCall","src":"4127:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4117:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3768:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3779:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3791:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3799:6:27","type":""}],"src":"3723:474:27"},{"body":{"nodeType":"YulBlock","src":"4268:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4285:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4308:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4290:17:27"},"nodeType":"YulFunctionCall","src":"4290:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4278:6:27"},"nodeType":"YulFunctionCall","src":"4278:37:27"},"nodeType":"YulExpressionStatement","src":"4278:37:27"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4256:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4263:3:27","type":""}],"src":"4203:118:27"},{"body":{"nodeType":"YulBlock","src":"4425:124:27","statements":[{"nodeType":"YulAssignment","src":"4435:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4447:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4458:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4443:3:27"},"nodeType":"YulFunctionCall","src":"4443:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4435:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4515:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4528:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4539:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4524:3:27"},"nodeType":"YulFunctionCall","src":"4524:17:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"4471:43:27"},"nodeType":"YulFunctionCall","src":"4471:71:27"},"nodeType":"YulExpressionStatement","src":"4471:71:27"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4397:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4409:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4420:4:27","type":""}],"src":"4327:222:27"},{"body":{"nodeType":"YulBlock","src":"4655:519:27","statements":[{"body":{"nodeType":"YulBlock","src":"4701:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4703:77:27"},"nodeType":"YulFunctionCall","src":"4703:79:27"},"nodeType":"YulExpressionStatement","src":"4703:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4676:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"4685:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4672:3:27"},"nodeType":"YulFunctionCall","src":"4672:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"4697:2:27","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4668:3:27"},"nodeType":"YulFunctionCall","src":"4668:32:27"},"nodeType":"YulIf","src":"4665:119:27"},{"nodeType":"YulBlock","src":"4794:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"4809:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"4823:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4813:6:27","type":""}]},{"nodeType":"YulAssignment","src":"4838:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4873:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"4884:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4869:3:27"},"nodeType":"YulFunctionCall","src":"4869:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4893:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4848:20:27"},"nodeType":"YulFunctionCall","src":"4848:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4838:6:27"}]}]},{"nodeType":"YulBlock","src":"4921:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"4936:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"4950:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4940:6:27","type":""}]},{"nodeType":"YulAssignment","src":"4966:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5001:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"5012:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4997:3:27"},"nodeType":"YulFunctionCall","src":"4997:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5021:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4976:20:27"},"nodeType":"YulFunctionCall","src":"4976:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4966:6:27"}]}]},{"nodeType":"YulBlock","src":"5049:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"5064:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"5078:2:27","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5068:6:27","type":""}]},{"nodeType":"YulAssignment","src":"5094:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5129:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"5140:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5125:3:27"},"nodeType":"YulFunctionCall","src":"5125:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5149:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5104:20:27"},"nodeType":"YulFunctionCall","src":"5104:53:27"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5094:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4609:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4620:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4632:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4640:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4648:6:27","type":""}],"src":"4555:619:27"},{"body":{"nodeType":"YulBlock","src":"5225:32:27","statements":[{"nodeType":"YulAssignment","src":"5235:16:27","value":{"name":"value","nodeType":"YulIdentifier","src":"5246:5:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5235:7:27"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5207:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5217:7:27","type":""}],"src":"5180:77:27"},{"body":{"nodeType":"YulBlock","src":"5306:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"5363:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5372:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5375:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5365:6:27"},"nodeType":"YulFunctionCall","src":"5365:12:27"},"nodeType":"YulExpressionStatement","src":"5365:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5329:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5354:5:27"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"5336:17:27"},"nodeType":"YulFunctionCall","src":"5336:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5326:2:27"},"nodeType":"YulFunctionCall","src":"5326:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5319:6:27"},"nodeType":"YulFunctionCall","src":"5319:43:27"},"nodeType":"YulIf","src":"5316:63:27"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5299:5:27","type":""}],"src":"5263:122:27"},{"body":{"nodeType":"YulBlock","src":"5443:87:27","statements":[{"nodeType":"YulAssignment","src":"5453:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5475:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5462:12:27"},"nodeType":"YulFunctionCall","src":"5462:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5453:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5518:5:27"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"5491:26:27"},"nodeType":"YulFunctionCall","src":"5491:33:27"},"nodeType":"YulExpressionStatement","src":"5491:33:27"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5421:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"5429:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5437:5:27","type":""}],"src":"5391:139:27"},{"body":{"nodeType":"YulBlock","src":"5602:263:27","statements":[{"body":{"nodeType":"YulBlock","src":"5648:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5650:77:27"},"nodeType":"YulFunctionCall","src":"5650:79:27"},"nodeType":"YulExpressionStatement","src":"5650:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5623:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"5632:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5619:3:27"},"nodeType":"YulFunctionCall","src":"5619:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"5644:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5615:3:27"},"nodeType":"YulFunctionCall","src":"5615:32:27"},"nodeType":"YulIf","src":"5612:119:27"},{"nodeType":"YulBlock","src":"5741:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"5756:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"5770:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5760:6:27","type":""}]},{"nodeType":"YulAssignment","src":"5785:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5820:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"5831:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5816:3:27"},"nodeType":"YulFunctionCall","src":"5816:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5840:7:27"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"5795:20:27"},"nodeType":"YulFunctionCall","src":"5795:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5785:6:27"}]}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5572:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5583:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5595:6:27","type":""}],"src":"5536:329:27"},{"body":{"nodeType":"YulBlock","src":"5936:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5953:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5976:5:27"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"5958:17:27"},"nodeType":"YulFunctionCall","src":"5958:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5946:6:27"},"nodeType":"YulFunctionCall","src":"5946:37:27"},"nodeType":"YulExpressionStatement","src":"5946:37:27"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5924:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5931:3:27","type":""}],"src":"5871:118:27"},{"body":{"nodeType":"YulBlock","src":"6093:124:27","statements":[{"nodeType":"YulAssignment","src":"6103:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6115:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"6126:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6111:3:27"},"nodeType":"YulFunctionCall","src":"6111:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6103:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6183:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6196:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"6207:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6192:3:27"},"nodeType":"YulFunctionCall","src":"6192:17:27"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"6139:43:27"},"nodeType":"YulFunctionCall","src":"6139:71:27"},"nodeType":"YulExpressionStatement","src":"6139:71:27"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6065:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6077:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6088:4:27","type":""}],"src":"5995:222:27"},{"body":{"nodeType":"YulBlock","src":"6288:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6305:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6328:5:27"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"6310:17:27"},"nodeType":"YulFunctionCall","src":"6310:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6298:6:27"},"nodeType":"YulFunctionCall","src":"6298:37:27"},"nodeType":"YulExpressionStatement","src":"6298:37:27"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6276:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6283:3:27","type":""}],"src":"6223:118:27"},{"body":{"nodeType":"YulBlock","src":"6445:124:27","statements":[{"nodeType":"YulAssignment","src":"6455:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6467:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"6478:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6463:3:27"},"nodeType":"YulFunctionCall","src":"6463:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6455:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6535:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6548:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"6559:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6544:3:27"},"nodeType":"YulFunctionCall","src":"6544:17:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"6491:43:27"},"nodeType":"YulFunctionCall","src":"6491:71:27"},"nodeType":"YulExpressionStatement","src":"6491:71:27"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6417:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6429:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6440:4:27","type":""}],"src":"6347:222:27"},{"body":{"nodeType":"YulBlock","src":"6658:391:27","statements":[{"body":{"nodeType":"YulBlock","src":"6704:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6706:77:27"},"nodeType":"YulFunctionCall","src":"6706:79:27"},"nodeType":"YulExpressionStatement","src":"6706:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6679:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"6688:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6675:3:27"},"nodeType":"YulFunctionCall","src":"6675:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"6700:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6671:3:27"},"nodeType":"YulFunctionCall","src":"6671:32:27"},"nodeType":"YulIf","src":"6668:119:27"},{"nodeType":"YulBlock","src":"6797:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"6812:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"6826:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6816:6:27","type":""}]},{"nodeType":"YulAssignment","src":"6841:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6876:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"6887:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6872:3:27"},"nodeType":"YulFunctionCall","src":"6872:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6896:7:27"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"6851:20:27"},"nodeType":"YulFunctionCall","src":"6851:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6841:6:27"}]}]},{"nodeType":"YulBlock","src":"6924:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"6939:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"6953:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6943:6:27","type":""}]},{"nodeType":"YulAssignment","src":"6969:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7004:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"7015:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7000:3:27"},"nodeType":"YulFunctionCall","src":"7000:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7024:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6979:20:27"},"nodeType":"YulFunctionCall","src":"6979:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6969:6:27"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6620:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6631:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6643:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6651:6:27","type":""}],"src":"6575:474:27"},{"body":{"nodeType":"YulBlock","src":"7098:43:27","statements":[{"nodeType":"YulAssignment","src":"7108:27:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7123:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"7130:4:27","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7119:3:27"},"nodeType":"YulFunctionCall","src":"7119:16:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7108:7:27"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7080:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7090:7:27","type":""}],"src":"7055:86:27"},{"body":{"nodeType":"YulBlock","src":"7208:51:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7225:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7246:5:27"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"7230:15:27"},"nodeType":"YulFunctionCall","src":"7230:22:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7218:6:27"},"nodeType":"YulFunctionCall","src":"7218:35:27"},"nodeType":"YulExpressionStatement","src":"7218:35:27"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7196:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7203:3:27","type":""}],"src":"7147:112:27"},{"body":{"nodeType":"YulBlock","src":"7359:120:27","statements":[{"nodeType":"YulAssignment","src":"7369:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7381:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"7392:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7377:3:27"},"nodeType":"YulFunctionCall","src":"7377:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7369:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7445:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7458:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"7469:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7454:3:27"},"nodeType":"YulFunctionCall","src":"7454:17:27"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"7405:39:27"},"nodeType":"YulFunctionCall","src":"7405:67:27"},"nodeType":"YulExpressionStatement","src":"7405:67:27"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7331:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7343:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7354:4:27","type":""}],"src":"7265:214:27"},{"body":{"nodeType":"YulBlock","src":"7551:263:27","statements":[{"body":{"nodeType":"YulBlock","src":"7597:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7599:77:27"},"nodeType":"YulFunctionCall","src":"7599:79:27"},"nodeType":"YulExpressionStatement","src":"7599:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7572:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"7581:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7568:3:27"},"nodeType":"YulFunctionCall","src":"7568:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"7593:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7564:3:27"},"nodeType":"YulFunctionCall","src":"7564:32:27"},"nodeType":"YulIf","src":"7561:119:27"},{"nodeType":"YulBlock","src":"7690:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"7705:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"7719:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7709:6:27","type":""}]},{"nodeType":"YulAssignment","src":"7734:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7769:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"7780:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7765:3:27"},"nodeType":"YulFunctionCall","src":"7765:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7789:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7744:20:27"},"nodeType":"YulFunctionCall","src":"7744:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7734:6:27"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7521:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7532:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7544:6:27","type":""}],"src":"7485:329:27"},{"body":{"nodeType":"YulBlock","src":"7861:77:27","statements":[{"body":{"nodeType":"YulBlock","src":"7916:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7925:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7928:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7918:6:27"},"nodeType":"YulFunctionCall","src":"7918:12:27"},"nodeType":"YulExpressionStatement","src":"7918:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7884:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7907:5:27"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"7891:15:27"},"nodeType":"YulFunctionCall","src":"7891:22:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7881:2:27"},"nodeType":"YulFunctionCall","src":"7881:33:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7874:6:27"},"nodeType":"YulFunctionCall","src":"7874:41:27"},"nodeType":"YulIf","src":"7871:61:27"}]},"name":"validator_revert_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7854:5:27","type":""}],"src":"7820:118:27"},{"body":{"nodeType":"YulBlock","src":"7994:85:27","statements":[{"nodeType":"YulAssignment","src":"8004:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8026:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8013:12:27"},"nodeType":"YulFunctionCall","src":"8013:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"8004:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8067:5:27"}],"functionName":{"name":"validator_revert_t_uint8","nodeType":"YulIdentifier","src":"8042:24:27"},"nodeType":"YulFunctionCall","src":"8042:31:27"},"nodeType":"YulExpressionStatement","src":"8042:31:27"}]},"name":"abi_decode_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7972:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"7980:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"7988:5:27","type":""}],"src":"7944:135:27"},{"body":{"nodeType":"YulBlock","src":"8251:1033:27","statements":[{"body":{"nodeType":"YulBlock","src":"8298:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8300:77:27"},"nodeType":"YulFunctionCall","src":"8300:79:27"},"nodeType":"YulExpressionStatement","src":"8300:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8272:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"8281:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8268:3:27"},"nodeType":"YulFunctionCall","src":"8268:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"8293:3:27","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8264:3:27"},"nodeType":"YulFunctionCall","src":"8264:33:27"},"nodeType":"YulIf","src":"8261:120:27"},{"nodeType":"YulBlock","src":"8391:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"8406:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"8420:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8410:6:27","type":""}]},{"nodeType":"YulAssignment","src":"8435:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8470:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"8481:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8466:3:27"},"nodeType":"YulFunctionCall","src":"8466:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8490:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"8445:20:27"},"nodeType":"YulFunctionCall","src":"8445:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8435:6:27"}]}]},{"nodeType":"YulBlock","src":"8518:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"8533:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"8547:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8537:6:27","type":""}]},{"nodeType":"YulAssignment","src":"8563:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8598:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"8609:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8594:3:27"},"nodeType":"YulFunctionCall","src":"8594:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8618:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"8573:20:27"},"nodeType":"YulFunctionCall","src":"8573:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8563:6:27"}]}]},{"nodeType":"YulBlock","src":"8646:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"8661:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"8675:2:27","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8665:6:27","type":""}]},{"nodeType":"YulAssignment","src":"8691:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8726:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"8737:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8722:3:27"},"nodeType":"YulFunctionCall","src":"8722:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8746:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"8701:20:27"},"nodeType":"YulFunctionCall","src":"8701:53:27"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"8691:6:27"}]}]},{"nodeType":"YulBlock","src":"8774:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"8789:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"8803:2:27","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8793:6:27","type":""}]},{"nodeType":"YulAssignment","src":"8819:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8854:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"8865:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8850:3:27"},"nodeType":"YulFunctionCall","src":"8850:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8874:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"8829:20:27"},"nodeType":"YulFunctionCall","src":"8829:53:27"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"8819:6:27"}]}]},{"nodeType":"YulBlock","src":"8902:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"8917:17:27","value":{"kind":"number","nodeType":"YulLiteral","src":"8931:3:27","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8921:6:27","type":""}]},{"nodeType":"YulAssignment","src":"8948:61:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8981:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"8992:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8977:3:27"},"nodeType":"YulFunctionCall","src":"8977:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9001:7:27"}],"functionName":{"name":"abi_decode_t_uint8","nodeType":"YulIdentifier","src":"8958:18:27"},"nodeType":"YulFunctionCall","src":"8958:51:27"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"8948:6:27"}]}]},{"nodeType":"YulBlock","src":"9029:119:27","statements":[{"nodeType":"YulVariableDeclaration","src":"9044:17:27","value":{"kind":"number","nodeType":"YulLiteral","src":"9058:3:27","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9048:6:27","type":""}]},{"nodeType":"YulAssignment","src":"9075:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9110:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"9121:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9106:3:27"},"nodeType":"YulFunctionCall","src":"9106:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9130:7:27"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"9085:20:27"},"nodeType":"YulFunctionCall","src":"9085:53:27"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"9075:6:27"}]}]},{"nodeType":"YulBlock","src":"9158:119:27","statements":[{"nodeType":"YulVariableDeclaration","src":"9173:17:27","value":{"kind":"number","nodeType":"YulLiteral","src":"9187:3:27","type":"","value":"192"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9177:6:27","type":""}]},{"nodeType":"YulAssignment","src":"9204:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9239:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"9250:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9235:3:27"},"nodeType":"YulFunctionCall","src":"9235:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9259:7:27"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"9214:20:27"},"nodeType":"YulFunctionCall","src":"9214:53:27"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"9204:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8173:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8184:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8196:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8204:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8212:6:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8220:6:27","type":""},{"name":"value4","nodeType":"YulTypedName","src":"8228:6:27","type":""},{"name":"value5","nodeType":"YulTypedName","src":"8236:6:27","type":""},{"name":"value6","nodeType":"YulTypedName","src":"8244:6:27","type":""}],"src":"8085:1199:27"},{"body":{"nodeType":"YulBlock","src":"9373:391:27","statements":[{"body":{"nodeType":"YulBlock","src":"9419:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9421:77:27"},"nodeType":"YulFunctionCall","src":"9421:79:27"},"nodeType":"YulExpressionStatement","src":"9421:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9394:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"9403:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9390:3:27"},"nodeType":"YulFunctionCall","src":"9390:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"9415:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9386:3:27"},"nodeType":"YulFunctionCall","src":"9386:32:27"},"nodeType":"YulIf","src":"9383:119:27"},{"nodeType":"YulBlock","src":"9512:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"9527:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"9541:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9531:6:27","type":""}]},{"nodeType":"YulAssignment","src":"9556:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9591:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"9602:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9587:3:27"},"nodeType":"YulFunctionCall","src":"9587:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9611:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9566:20:27"},"nodeType":"YulFunctionCall","src":"9566:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9556:6:27"}]}]},{"nodeType":"YulBlock","src":"9639:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"9654:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"9668:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9658:6:27","type":""}]},{"nodeType":"YulAssignment","src":"9684:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9719:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"9730:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9715:3:27"},"nodeType":"YulFunctionCall","src":"9715:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9739:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9694:20:27"},"nodeType":"YulFunctionCall","src":"9694:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9684:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9335:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9346:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9358:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9366:6:27","type":""}],"src":"9290:474:27"},{"body":{"nodeType":"YulBlock","src":"9798:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9815:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9818:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9808:6:27"},"nodeType":"YulFunctionCall","src":"9808:88:27"},"nodeType":"YulExpressionStatement","src":"9808:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9912:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9915:4:27","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9905:6:27"},"nodeType":"YulFunctionCall","src":"9905:15:27"},"nodeType":"YulExpressionStatement","src":"9905:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9936:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9939:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9929:6:27"},"nodeType":"YulFunctionCall","src":"9929:15:27"},"nodeType":"YulExpressionStatement","src":"9929:15:27"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"9770:180:27"},{"body":{"nodeType":"YulBlock","src":"10007:269:27","statements":[{"nodeType":"YulAssignment","src":"10017:22:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10031:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"10037:1:27","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"10027:3:27"},"nodeType":"YulFunctionCall","src":"10027:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10017:6:27"}]},{"nodeType":"YulVariableDeclaration","src":"10048:38:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10078:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"10084:1:27","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10074:3:27"},"nodeType":"YulFunctionCall","src":"10074:12:27"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"10052:18:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"10125:51:27","statements":[{"nodeType":"YulAssignment","src":"10139:27:27","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10153:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"10161:4:27","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10149:3:27"},"nodeType":"YulFunctionCall","src":"10149:17:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10139:6:27"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10105:18:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10098:6:27"},"nodeType":"YulFunctionCall","src":"10098:26:27"},"nodeType":"YulIf","src":"10095:81:27"},{"body":{"nodeType":"YulBlock","src":"10228:42:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"10242:16:27"},"nodeType":"YulFunctionCall","src":"10242:18:27"},"nodeType":"YulExpressionStatement","src":"10242:18:27"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10192:18:27"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10215:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"10223:2:27","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10212:2:27"},"nodeType":"YulFunctionCall","src":"10212:14:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10189:2:27"},"nodeType":"YulFunctionCall","src":"10189:38:27"},"nodeType":"YulIf","src":"10186:84:27"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"9991:4:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"10000:6:27","type":""}],"src":"9956:320:27"},{"body":{"nodeType":"YulBlock","src":"10345:80:27","statements":[{"nodeType":"YulAssignment","src":"10355:22:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10370:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10364:5:27"},"nodeType":"YulFunctionCall","src":"10364:13:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"10355:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10413:5:27"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"10386:26:27"},"nodeType":"YulFunctionCall","src":"10386:33:27"},"nodeType":"YulExpressionStatement","src":"10386:33:27"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"10323:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"10331:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"10339:5:27","type":""}],"src":"10282:143:27"},{"body":{"nodeType":"YulBlock","src":"10508:274:27","statements":[{"body":{"nodeType":"YulBlock","src":"10554:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10556:77:27"},"nodeType":"YulFunctionCall","src":"10556:79:27"},"nodeType":"YulExpressionStatement","src":"10556:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10529:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"10538:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10525:3:27"},"nodeType":"YulFunctionCall","src":"10525:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"10550:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10521:3:27"},"nodeType":"YulFunctionCall","src":"10521:32:27"},"nodeType":"YulIf","src":"10518:119:27"},{"nodeType":"YulBlock","src":"10647:128:27","statements":[{"nodeType":"YulVariableDeclaration","src":"10662:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"10676:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10666:6:27","type":""}]},{"nodeType":"YulAssignment","src":"10691:74:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10737:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"10748:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10733:3:27"},"nodeType":"YulFunctionCall","src":"10733:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10757:7:27"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"10701:31:27"},"nodeType":"YulFunctionCall","src":"10701:64:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10691:6:27"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10478:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10489:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10501:6:27","type":""}],"src":"10431:351:27"},{"body":{"nodeType":"YulBlock","src":"10816:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10833:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10836:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10826:6:27"},"nodeType":"YulFunctionCall","src":"10826:88:27"},"nodeType":"YulExpressionStatement","src":"10826:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10930:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10933:4:27","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10923:6:27"},"nodeType":"YulFunctionCall","src":"10923:15:27"},"nodeType":"YulExpressionStatement","src":"10923:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10954:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10957:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10947:6:27"},"nodeType":"YulFunctionCall","src":"10947:15:27"},"nodeType":"YulExpressionStatement","src":"10947:15:27"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"10788:180:27"},{"body":{"nodeType":"YulBlock","src":"11019:149:27","statements":[{"nodeType":"YulAssignment","src":"11029:25:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11052:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11034:17:27"},"nodeType":"YulFunctionCall","src":"11034:20:27"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"11029:1:27"}]},{"nodeType":"YulAssignment","src":"11063:25:27","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11086:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11068:17:27"},"nodeType":"YulFunctionCall","src":"11068:20:27"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"11063:1:27"}]},{"nodeType":"YulAssignment","src":"11097:17:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11109:1:27"},{"name":"y","nodeType":"YulIdentifier","src":"11112:1:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11105:3:27"},"nodeType":"YulFunctionCall","src":"11105:9:27"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"11097:4:27"}]},{"body":{"nodeType":"YulBlock","src":"11139:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11141:16:27"},"nodeType":"YulFunctionCall","src":"11141:18:27"},"nodeType":"YulExpressionStatement","src":"11141:18:27"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"11130:4:27"},{"name":"x","nodeType":"YulIdentifier","src":"11136:1:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11127:2:27"},"nodeType":"YulFunctionCall","src":"11127:11:27"},"nodeType":"YulIf","src":"11124:37:27"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11005:1:27","type":""},{"name":"y","nodeType":"YulTypedName","src":"11008:1:27","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"11014:4:27","type":""}],"src":"10974:194:27"},{"body":{"nodeType":"YulBlock","src":"11280:128:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11302:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"11310:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11298:3:27"},"nodeType":"YulFunctionCall","src":"11298:14:27"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"11314:34:27","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11291:6:27"},"nodeType":"YulFunctionCall","src":"11291:58:27"},"nodeType":"YulExpressionStatement","src":"11291:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11370:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"11378:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11366:3:27"},"nodeType":"YulFunctionCall","src":"11366:15:27"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"11383:17:27","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11359:6:27"},"nodeType":"YulFunctionCall","src":"11359:42:27"},"nodeType":"YulExpressionStatement","src":"11359:42:27"}]},"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11272:6:27","type":""}],"src":"11174:234:27"},{"body":{"nodeType":"YulBlock","src":"11560:220:27","statements":[{"nodeType":"YulAssignment","src":"11570:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11636:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"11641:2:27","type":"","value":"47"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11577:58:27"},"nodeType":"YulFunctionCall","src":"11577:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11570:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11742:3:27"}],"functionName":{"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulIdentifier","src":"11653:88:27"},"nodeType":"YulFunctionCall","src":"11653:93:27"},"nodeType":"YulExpressionStatement","src":"11653:93:27"},{"nodeType":"YulAssignment","src":"11755:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11766:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"11771:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11762:3:27"},"nodeType":"YulFunctionCall","src":"11762:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11755:3:27"}]}]},"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11548:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11556:3:27","type":""}],"src":"11414:366:27"},{"body":{"nodeType":"YulBlock","src":"11957:248:27","statements":[{"nodeType":"YulAssignment","src":"11967:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11979:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"11990:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11975:3:27"},"nodeType":"YulFunctionCall","src":"11975:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11967:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12014:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12025:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12010:3:27"},"nodeType":"YulFunctionCall","src":"12010:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12033:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"12039:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12029:3:27"},"nodeType":"YulFunctionCall","src":"12029:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12003:6:27"},"nodeType":"YulFunctionCall","src":"12003:47:27"},"nodeType":"YulExpressionStatement","src":"12003:47:27"},{"nodeType":"YulAssignment","src":"12059:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12193:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12067:124:27"},"nodeType":"YulFunctionCall","src":"12067:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12059:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11937:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11952:4:27","type":""}],"src":"11786:419:27"},{"body":{"nodeType":"YulBlock","src":"12255:147:27","statements":[{"nodeType":"YulAssignment","src":"12265:25:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12288:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"12270:17:27"},"nodeType":"YulFunctionCall","src":"12270:20:27"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"12265:1:27"}]},{"nodeType":"YulAssignment","src":"12299:25:27","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"12322:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"12304:17:27"},"nodeType":"YulFunctionCall","src":"12304:20:27"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"12299:1:27"}]},{"nodeType":"YulAssignment","src":"12333:16:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12344:1:27"},{"name":"y","nodeType":"YulIdentifier","src":"12347:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12340:3:27"},"nodeType":"YulFunctionCall","src":"12340:9:27"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"12333:3:27"}]},{"body":{"nodeType":"YulBlock","src":"12373:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12375:16:27"},"nodeType":"YulFunctionCall","src":"12375:18:27"},"nodeType":"YulExpressionStatement","src":"12375:18:27"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12365:1:27"},{"name":"sum","nodeType":"YulIdentifier","src":"12368:3:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12362:2:27"},"nodeType":"YulFunctionCall","src":"12362:10:27"},"nodeType":"YulIf","src":"12359:36:27"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"12242:1:27","type":""},{"name":"y","nodeType":"YulTypedName","src":"12245:1:27","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"12251:3:27","type":""}],"src":"12211:191:27"},{"body":{"nodeType":"YulBlock","src":"12514:125:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12536:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"12544:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12532:3:27"},"nodeType":"YulFunctionCall","src":"12532:14:27"},{"hexValue":"4d75737420686176652061646d696e20726f6c6520746f20706572666f726d20","kind":"string","nodeType":"YulLiteral","src":"12548:34:27","type":"","value":"Must have admin role to perform "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12525:6:27"},"nodeType":"YulFunctionCall","src":"12525:58:27"},"nodeType":"YulExpressionStatement","src":"12525:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12604:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"12612:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12600:3:27"},"nodeType":"YulFunctionCall","src":"12600:15:27"},{"hexValue":"7468697320616374696f6e2e","kind":"string","nodeType":"YulLiteral","src":"12617:14:27","type":"","value":"this action."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12593:6:27"},"nodeType":"YulFunctionCall","src":"12593:39:27"},"nodeType":"YulExpressionStatement","src":"12593:39:27"}]},"name":"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12506:6:27","type":""}],"src":"12408:231:27"},{"body":{"nodeType":"YulBlock","src":"12791:220:27","statements":[{"nodeType":"YulAssignment","src":"12801:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12867:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"12872:2:27","type":"","value":"44"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12808:58:27"},"nodeType":"YulFunctionCall","src":"12808:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12801:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12973:3:27"}],"functionName":{"name":"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","nodeType":"YulIdentifier","src":"12884:88:27"},"nodeType":"YulFunctionCall","src":"12884:93:27"},"nodeType":"YulExpressionStatement","src":"12884:93:27"},{"nodeType":"YulAssignment","src":"12986:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12997:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"13002:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12993:3:27"},"nodeType":"YulFunctionCall","src":"12993:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12986:3:27"}]}]},"name":"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12779:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12787:3:27","type":""}],"src":"12645:366:27"},{"body":{"nodeType":"YulBlock","src":"13188:248:27","statements":[{"nodeType":"YulAssignment","src":"13198:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13210:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"13221:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13206:3:27"},"nodeType":"YulFunctionCall","src":"13206:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13198:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13245:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"13256:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13241:3:27"},"nodeType":"YulFunctionCall","src":"13241:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13264:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"13270:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13260:3:27"},"nodeType":"YulFunctionCall","src":"13260:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13234:6:27"},"nodeType":"YulFunctionCall","src":"13234:47:27"},"nodeType":"YulExpressionStatement","src":"13234:47:27"},{"nodeType":"YulAssignment","src":"13290:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13424:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13298:124:27"},"nodeType":"YulFunctionCall","src":"13298:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13290:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13168:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13183:4:27","type":""}],"src":"13017:419:27"},{"body":{"nodeType":"YulBlock","src":"13548:124:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13570:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"13578:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13566:3:27"},"nodeType":"YulFunctionCall","src":"13566:14:27"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"13582:34:27","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13559:6:27"},"nodeType":"YulFunctionCall","src":"13559:58:27"},"nodeType":"YulExpressionStatement","src":"13559:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13638:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"13646:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13634:3:27"},"nodeType":"YulFunctionCall","src":"13634:15:27"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"13651:13:27","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13627:6:27"},"nodeType":"YulFunctionCall","src":"13627:38:27"},"nodeType":"YulExpressionStatement","src":"13627:38:27"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13540:6:27","type":""}],"src":"13442:230:27"},{"body":{"nodeType":"YulBlock","src":"13824:220:27","statements":[{"nodeType":"YulAssignment","src":"13834:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13900:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"13905:2:27","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13841:58:27"},"nodeType":"YulFunctionCall","src":"13841:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13834:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14006:3:27"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"13917:88:27"},"nodeType":"YulFunctionCall","src":"13917:93:27"},"nodeType":"YulExpressionStatement","src":"13917:93:27"},{"nodeType":"YulAssignment","src":"14019:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14030:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"14035:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14026:3:27"},"nodeType":"YulFunctionCall","src":"14026:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14019:3:27"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13812:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13820:3:27","type":""}],"src":"13678:366:27"},{"body":{"nodeType":"YulBlock","src":"14221:248:27","statements":[{"nodeType":"YulAssignment","src":"14231:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14243:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"14254:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14239:3:27"},"nodeType":"YulFunctionCall","src":"14239:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14231:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14278:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"14289:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14274:3:27"},"nodeType":"YulFunctionCall","src":"14274:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14297:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"14303:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14293:3:27"},"nodeType":"YulFunctionCall","src":"14293:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14267:6:27"},"nodeType":"YulFunctionCall","src":"14267:47:27"},"nodeType":"YulExpressionStatement","src":"14267:47:27"},{"nodeType":"YulAssignment","src":"14323:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14457:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14331:124:27"},"nodeType":"YulFunctionCall","src":"14331:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14323:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14201:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14216:4:27","type":""}],"src":"14050:419:27"},{"body":{"nodeType":"YulBlock","src":"14581:127:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14603:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"14611:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14599:3:27"},"nodeType":"YulFunctionCall","src":"14599:14:27"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"14615:34:27","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14592:6:27"},"nodeType":"YulFunctionCall","src":"14592:58:27"},"nodeType":"YulExpressionStatement","src":"14592:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14671:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"14679:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14667:3:27"},"nodeType":"YulFunctionCall","src":"14667:15:27"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"14684:16:27","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14660:6:27"},"nodeType":"YulFunctionCall","src":"14660:41:27"},"nodeType":"YulExpressionStatement","src":"14660:41:27"}]},"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14573:6:27","type":""}],"src":"14475:233:27"},{"body":{"nodeType":"YulBlock","src":"14860:220:27","statements":[{"nodeType":"YulAssignment","src":"14870:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14936:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"14941:2:27","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14877:58:27"},"nodeType":"YulFunctionCall","src":"14877:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14870:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15042:3:27"}],"functionName":{"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulIdentifier","src":"14953:88:27"},"nodeType":"YulFunctionCall","src":"14953:93:27"},"nodeType":"YulExpressionStatement","src":"14953:93:27"},{"nodeType":"YulAssignment","src":"15055:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15066:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"15071:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15062:3:27"},"nodeType":"YulFunctionCall","src":"15062:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15055:3:27"}]}]},"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14848:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14856:3:27","type":""}],"src":"14714:366:27"},{"body":{"nodeType":"YulBlock","src":"15257:248:27","statements":[{"nodeType":"YulAssignment","src":"15267:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15279:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"15290:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15275:3:27"},"nodeType":"YulFunctionCall","src":"15275:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15267:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15314:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"15325:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15310:3:27"},"nodeType":"YulFunctionCall","src":"15310:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15333:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"15339:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15329:3:27"},"nodeType":"YulFunctionCall","src":"15329:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15303:6:27"},"nodeType":"YulFunctionCall","src":"15303:47:27"},"nodeType":"YulExpressionStatement","src":"15303:47:27"},{"nodeType":"YulAssignment","src":"15359:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15493:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15367:124:27"},"nodeType":"YulFunctionCall","src":"15367:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15359:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15237:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15252:4:27","type":""}],"src":"15086:419:27"},{"body":{"nodeType":"YulBlock","src":"15564:32:27","statements":[{"nodeType":"YulAssignment","src":"15574:16:27","value":{"name":"value","nodeType":"YulIdentifier","src":"15585:5:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"15574:7:27"}]}]},"name":"cleanup_t_rational_1_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15546:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"15556:7:27","type":""}],"src":"15511:85:27"},{"body":{"nodeType":"YulBlock","src":"15634:28:27","statements":[{"nodeType":"YulAssignment","src":"15644:12:27","value":{"name":"value","nodeType":"YulIdentifier","src":"15651:5:27"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"15644:3:27"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15620:5:27","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"15630:3:27","type":""}],"src":"15602:60:27"},{"body":{"nodeType":"YulBlock","src":"15734:88:27","statements":[{"nodeType":"YulAssignment","src":"15744:72:27","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15808:5:27"}],"functionName":{"name":"cleanup_t_rational_1_by_1","nodeType":"YulIdentifier","src":"15782:25:27"},"nodeType":"YulFunctionCall","src":"15782:32:27"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"15773:8:27"},"nodeType":"YulFunctionCall","src":"15773:42:27"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"15757:15:27"},"nodeType":"YulFunctionCall","src":"15757:59:27"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"15744:9:27"}]}]},"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15714:5:27","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"15724:9:27","type":""}],"src":"15668:154:27"},{"body":{"nodeType":"YulBlock","src":"15899:72:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15916:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15958:5:27"}],"functionName":{"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulIdentifier","src":"15921:36:27"},"nodeType":"YulFunctionCall","src":"15921:43:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15909:6:27"},"nodeType":"YulFunctionCall","src":"15909:56:27"},"nodeType":"YulExpressionStatement","src":"15909:56:27"}]},"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15887:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15894:3:27","type":""}],"src":"15828:143:27"},{"body":{"nodeType":"YulBlock","src":"16081:130:27","statements":[{"nodeType":"YulAssignment","src":"16091:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16103:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"16114:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16099:3:27"},"nodeType":"YulFunctionCall","src":"16099:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16091:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16177:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16190:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"16201:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16186:3:27"},"nodeType":"YulFunctionCall","src":"16186:17:27"}],"functionName":{"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"16127:49:27"},"nodeType":"YulFunctionCall","src":"16127:77:27"},"nodeType":"YulExpressionStatement","src":"16127:77:27"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16053:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16065:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16076:4:27","type":""}],"src":"15977:234:27"},{"body":{"nodeType":"YulBlock","src":"16323:118:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16345:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"16353:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16341:3:27"},"nodeType":"YulFunctionCall","src":"16341:14:27"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"16357:34:27","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16334:6:27"},"nodeType":"YulFunctionCall","src":"16334:58:27"},"nodeType":"YulExpressionStatement","src":"16334:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16413:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"16421:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16409:3:27"},"nodeType":"YulFunctionCall","src":"16409:15:27"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"16426:7:27","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16402:6:27"},"nodeType":"YulFunctionCall","src":"16402:32:27"},"nodeType":"YulExpressionStatement","src":"16402:32:27"}]},"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"16315:6:27","type":""}],"src":"16217:224:27"},{"body":{"nodeType":"YulBlock","src":"16593:220:27","statements":[{"nodeType":"YulAssignment","src":"16603:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16669:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"16674:2:27","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16610:58:27"},"nodeType":"YulFunctionCall","src":"16610:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16603:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16775:3:27"}],"functionName":{"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulIdentifier","src":"16686:88:27"},"nodeType":"YulFunctionCall","src":"16686:93:27"},"nodeType":"YulExpressionStatement","src":"16686:93:27"},{"nodeType":"YulAssignment","src":"16788:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16799:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"16804:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16795:3:27"},"nodeType":"YulFunctionCall","src":"16795:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16788:3:27"}]}]},"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16581:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16589:3:27","type":""}],"src":"16447:366:27"},{"body":{"nodeType":"YulBlock","src":"16990:248:27","statements":[{"nodeType":"YulAssignment","src":"17000:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17012:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"17023:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17008:3:27"},"nodeType":"YulFunctionCall","src":"17008:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17000:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17047:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"17058:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17043:3:27"},"nodeType":"YulFunctionCall","src":"17043:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17066:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"17072:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17062:3:27"},"nodeType":"YulFunctionCall","src":"17062:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17036:6:27"},"nodeType":"YulFunctionCall","src":"17036:47:27"},"nodeType":"YulExpressionStatement","src":"17036:47:27"},{"nodeType":"YulAssignment","src":"17092:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17226:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17100:124:27"},"nodeType":"YulFunctionCall","src":"17100:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17092:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16970:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16985:4:27","type":""}],"src":"16819:419:27"},{"body":{"nodeType":"YulBlock","src":"17350:73:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17372:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"17380:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17368:3:27"},"nodeType":"YulFunctionCall","src":"17368:14:27"},{"hexValue":"45524332305065726d69743a206578706972656420646561646c696e65","kind":"string","nodeType":"YulLiteral","src":"17384:31:27","type":"","value":"ERC20Permit: expired deadline"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17361:6:27"},"nodeType":"YulFunctionCall","src":"17361:55:27"},"nodeType":"YulExpressionStatement","src":"17361:55:27"}]},"name":"store_literal_in_memory_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17342:6:27","type":""}],"src":"17244:179:27"},{"body":{"nodeType":"YulBlock","src":"17575:220:27","statements":[{"nodeType":"YulAssignment","src":"17585:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17651:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"17656:2:27","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17592:58:27"},"nodeType":"YulFunctionCall","src":"17592:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17585:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17757:3:27"}],"functionName":{"name":"store_literal_in_memory_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd","nodeType":"YulIdentifier","src":"17668:88:27"},"nodeType":"YulFunctionCall","src":"17668:93:27"},"nodeType":"YulExpressionStatement","src":"17668:93:27"},{"nodeType":"YulAssignment","src":"17770:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17781:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"17786:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17777:3:27"},"nodeType":"YulFunctionCall","src":"17777:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17770:3:27"}]}]},"name":"abi_encode_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17563:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17571:3:27","type":""}],"src":"17429:366:27"},{"body":{"nodeType":"YulBlock","src":"17972:248:27","statements":[{"nodeType":"YulAssignment","src":"17982:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17994:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"18005:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17990:3:27"},"nodeType":"YulFunctionCall","src":"17990:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17982:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18029:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"18040:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18025:3:27"},"nodeType":"YulFunctionCall","src":"18025:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18048:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"18054:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18044:3:27"},"nodeType":"YulFunctionCall","src":"18044:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18018:6:27"},"nodeType":"YulFunctionCall","src":"18018:47:27"},"nodeType":"YulExpressionStatement","src":"18018:47:27"},{"nodeType":"YulAssignment","src":"18074:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18208:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18082:124:27"},"nodeType":"YulFunctionCall","src":"18082:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18074:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17952:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17967:4:27","type":""}],"src":"17801:419:27"},{"body":{"nodeType":"YulBlock","src":"18464:537:27","statements":[{"nodeType":"YulAssignment","src":"18474:27:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18486:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"18497:3:27","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18482:3:27"},"nodeType":"YulFunctionCall","src":"18482:19:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18474:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18555:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18568:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"18579:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18564:3:27"},"nodeType":"YulFunctionCall","src":"18564:17:27"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"18511:43:27"},"nodeType":"YulFunctionCall","src":"18511:71:27"},"nodeType":"YulExpressionStatement","src":"18511:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"18636:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18649:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"18660:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18645:3:27"},"nodeType":"YulFunctionCall","src":"18645:18:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"18592:43:27"},"nodeType":"YulFunctionCall","src":"18592:72:27"},"nodeType":"YulExpressionStatement","src":"18592:72:27"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"18718:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18731:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"18742:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18727:3:27"},"nodeType":"YulFunctionCall","src":"18727:18:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"18674:43:27"},"nodeType":"YulFunctionCall","src":"18674:72:27"},"nodeType":"YulExpressionStatement","src":"18674:72:27"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"18800:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18813:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"18824:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18809:3:27"},"nodeType":"YulFunctionCall","src":"18809:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"18756:43:27"},"nodeType":"YulFunctionCall","src":"18756:72:27"},"nodeType":"YulExpressionStatement","src":"18756:72:27"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"18882:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18895:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"18906:3:27","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18891:3:27"},"nodeType":"YulFunctionCall","src":"18891:19:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"18838:43:27"},"nodeType":"YulFunctionCall","src":"18838:73:27"},"nodeType":"YulExpressionStatement","src":"18838:73:27"},{"expression":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"18965:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18978:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"18989:3:27","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18974:3:27"},"nodeType":"YulFunctionCall","src":"18974:19:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"18921:43:27"},"nodeType":"YulFunctionCall","src":"18921:73:27"},"nodeType":"YulExpressionStatement","src":"18921:73:27"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18396:9:27","type":""},{"name":"value5","nodeType":"YulTypedName","src":"18408:6:27","type":""},{"name":"value4","nodeType":"YulTypedName","src":"18416:6:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"18424:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"18432:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18440:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18448:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18459:4:27","type":""}],"src":"18226:775:27"},{"body":{"nodeType":"YulBlock","src":"19113:74:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19135:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"19143:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19131:3:27"},"nodeType":"YulFunctionCall","src":"19131:14:27"},{"hexValue":"45524332305065726d69743a20696e76616c6964207369676e6174757265","kind":"string","nodeType":"YulLiteral","src":"19147:32:27","type":"","value":"ERC20Permit: invalid signature"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19124:6:27"},"nodeType":"YulFunctionCall","src":"19124:56:27"},"nodeType":"YulExpressionStatement","src":"19124:56:27"}]},"name":"store_literal_in_memory_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19105:6:27","type":""}],"src":"19007:180:27"},{"body":{"nodeType":"YulBlock","src":"19339:220:27","statements":[{"nodeType":"YulAssignment","src":"19349:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19415:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"19420:2:27","type":"","value":"30"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19356:58:27"},"nodeType":"YulFunctionCall","src":"19356:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19349:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19521:3:27"}],"functionName":{"name":"store_literal_in_memory_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124","nodeType":"YulIdentifier","src":"19432:88:27"},"nodeType":"YulFunctionCall","src":"19432:93:27"},"nodeType":"YulExpressionStatement","src":"19432:93:27"},{"nodeType":"YulAssignment","src":"19534:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19545:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"19550:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19541:3:27"},"nodeType":"YulFunctionCall","src":"19541:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19534:3:27"}]}]},"name":"abi_encode_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19327:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19335:3:27","type":""}],"src":"19193:366:27"},{"body":{"nodeType":"YulBlock","src":"19736:248:27","statements":[{"nodeType":"YulAssignment","src":"19746:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19758:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"19769:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19754:3:27"},"nodeType":"YulFunctionCall","src":"19754:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19746:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19793:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"19804:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19789:3:27"},"nodeType":"YulFunctionCall","src":"19789:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19812:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"19818:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19808:3:27"},"nodeType":"YulFunctionCall","src":"19808:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19782:6:27"},"nodeType":"YulFunctionCall","src":"19782:47:27"},"nodeType":"YulExpressionStatement","src":"19782:47:27"},{"nodeType":"YulAssignment","src":"19838:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19972:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19846:124:27"},"nodeType":"YulFunctionCall","src":"19846:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19838:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19716:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19731:4:27","type":""}],"src":"19565:419:27"},{"body":{"nodeType":"YulBlock","src":"20033:190:27","statements":[{"nodeType":"YulAssignment","src":"20043:33:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20070:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"20052:17:27"},"nodeType":"YulFunctionCall","src":"20052:24:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"20043:5:27"}]},{"body":{"nodeType":"YulBlock","src":"20166:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"20168:16:27"},"nodeType":"YulFunctionCall","src":"20168:18:27"},"nodeType":"YulExpressionStatement","src":"20168:18:27"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20091:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"20098:66:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"20088:2:27"},"nodeType":"YulFunctionCall","src":"20088:77:27"},"nodeType":"YulIf","src":"20085:103:27"},{"nodeType":"YulAssignment","src":"20197:20:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20208:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"20215:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20204:3:27"},"nodeType":"YulFunctionCall","src":"20204:13:27"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"20197:3:27"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20019:5:27","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"20029:3:27","type":""}],"src":"19990:233:27"},{"body":{"nodeType":"YulBlock","src":"20335:117:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20357:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"20365:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20353:3:27"},"nodeType":"YulFunctionCall","src":"20353:14:27"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"20369:34:27","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20346:6:27"},"nodeType":"YulFunctionCall","src":"20346:58:27"},"nodeType":"YulExpressionStatement","src":"20346:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20425:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"20433:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20421:3:27"},"nodeType":"YulFunctionCall","src":"20421:15:27"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"20438:6:27","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20414:6:27"},"nodeType":"YulFunctionCall","src":"20414:31:27"},"nodeType":"YulExpressionStatement","src":"20414:31:27"}]},"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20327:6:27","type":""}],"src":"20229:223:27"},{"body":{"nodeType":"YulBlock","src":"20604:220:27","statements":[{"nodeType":"YulAssignment","src":"20614:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20680:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"20685:2:27","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20621:58:27"},"nodeType":"YulFunctionCall","src":"20621:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20614:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20786:3:27"}],"functionName":{"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulIdentifier","src":"20697:88:27"},"nodeType":"YulFunctionCall","src":"20697:93:27"},"nodeType":"YulExpressionStatement","src":"20697:93:27"},{"nodeType":"YulAssignment","src":"20799:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20810:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"20815:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20806:3:27"},"nodeType":"YulFunctionCall","src":"20806:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20799:3:27"}]}]},"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20592:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20600:3:27","type":""}],"src":"20458:366:27"},{"body":{"nodeType":"YulBlock","src":"21001:248:27","statements":[{"nodeType":"YulAssignment","src":"21011:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21023:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"21034:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21019:3:27"},"nodeType":"YulFunctionCall","src":"21019:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21011:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21058:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"21069:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21054:3:27"},"nodeType":"YulFunctionCall","src":"21054:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21077:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"21083:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21073:3:27"},"nodeType":"YulFunctionCall","src":"21073:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21047:6:27"},"nodeType":"YulFunctionCall","src":"21047:47:27"},"nodeType":"YulExpressionStatement","src":"21047:47:27"},{"nodeType":"YulAssignment","src":"21103:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21237:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21111:124:27"},"nodeType":"YulFunctionCall","src":"21111:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21103:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20981:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20996:4:27","type":""}],"src":"20830:419:27"},{"body":{"nodeType":"YulBlock","src":"21361:115:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21383:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"21391:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21379:3:27"},"nodeType":"YulFunctionCall","src":"21379:14:27"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"21395:34:27","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21372:6:27"},"nodeType":"YulFunctionCall","src":"21372:58:27"},"nodeType":"YulExpressionStatement","src":"21372:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21451:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"21459:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21447:3:27"},"nodeType":"YulFunctionCall","src":"21447:15:27"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"21464:4:27","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21440:6:27"},"nodeType":"YulFunctionCall","src":"21440:29:27"},"nodeType":"YulExpressionStatement","src":"21440:29:27"}]},"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21353:6:27","type":""}],"src":"21255:221:27"},{"body":{"nodeType":"YulBlock","src":"21628:220:27","statements":[{"nodeType":"YulAssignment","src":"21638:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21704:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"21709:2:27","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21645:58:27"},"nodeType":"YulFunctionCall","src":"21645:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21638:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21810:3:27"}],"functionName":{"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulIdentifier","src":"21721:88:27"},"nodeType":"YulFunctionCall","src":"21721:93:27"},"nodeType":"YulExpressionStatement","src":"21721:93:27"},{"nodeType":"YulAssignment","src":"21823:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21834:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"21839:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21830:3:27"},"nodeType":"YulFunctionCall","src":"21830:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21823:3:27"}]}]},"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21616:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21624:3:27","type":""}],"src":"21482:366:27"},{"body":{"nodeType":"YulBlock","src":"22025:248:27","statements":[{"nodeType":"YulAssignment","src":"22035:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22047:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"22058:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22043:3:27"},"nodeType":"YulFunctionCall","src":"22043:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22035:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22082:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"22093:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22078:3:27"},"nodeType":"YulFunctionCall","src":"22078:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22101:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"22107:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22097:3:27"},"nodeType":"YulFunctionCall","src":"22097:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22071:6:27"},"nodeType":"YulFunctionCall","src":"22071:47:27"},"nodeType":"YulExpressionStatement","src":"22071:47:27"},{"nodeType":"YulAssignment","src":"22127:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22261:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22135:124:27"},"nodeType":"YulFunctionCall","src":"22135:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22127:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22005:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22020:4:27","type":""}],"src":"21854:419:27"},{"body":{"nodeType":"YulBlock","src":"22385:73:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22407:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"22415:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22403:3:27"},"nodeType":"YulFunctionCall","src":"22403:14:27"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"22419:31:27","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22396:6:27"},"nodeType":"YulFunctionCall","src":"22396:55:27"},"nodeType":"YulExpressionStatement","src":"22396:55:27"}]},"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22377:6:27","type":""}],"src":"22279:179:27"},{"body":{"nodeType":"YulBlock","src":"22610:220:27","statements":[{"nodeType":"YulAssignment","src":"22620:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22686:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"22691:2:27","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22627:58:27"},"nodeType":"YulFunctionCall","src":"22627:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22620:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22792:3:27"}],"functionName":{"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulIdentifier","src":"22703:88:27"},"nodeType":"YulFunctionCall","src":"22703:93:27"},"nodeType":"YulExpressionStatement","src":"22703:93:27"},{"nodeType":"YulAssignment","src":"22805:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22816:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"22821:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22812:3:27"},"nodeType":"YulFunctionCall","src":"22812:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22805:3:27"}]}]},"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22598:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22606:3:27","type":""}],"src":"22464:366:27"},{"body":{"nodeType":"YulBlock","src":"23007:248:27","statements":[{"nodeType":"YulAssignment","src":"23017:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23029:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"23040:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23025:3:27"},"nodeType":"YulFunctionCall","src":"23025:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23017:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23064:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"23075:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23060:3:27"},"nodeType":"YulFunctionCall","src":"23060:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23083:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"23089:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23079:3:27"},"nodeType":"YulFunctionCall","src":"23079:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23053:6:27"},"nodeType":"YulFunctionCall","src":"23053:47:27"},"nodeType":"YulExpressionStatement","src":"23053:47:27"},{"nodeType":"YulAssignment","src":"23109:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23243:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23117:124:27"},"nodeType":"YulFunctionCall","src":"23117:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23109:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22987:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23002:4:27","type":""}],"src":"22836:419:27"},{"body":{"nodeType":"YulBlock","src":"23367:118:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23389:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"23397:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23385:3:27"},"nodeType":"YulFunctionCall","src":"23385:14:27"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"23401:34:27","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23378:6:27"},"nodeType":"YulFunctionCall","src":"23378:58:27"},"nodeType":"YulExpressionStatement","src":"23378:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23457:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"23465:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23453:3:27"},"nodeType":"YulFunctionCall","src":"23453:15:27"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"23470:7:27","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23446:6:27"},"nodeType":"YulFunctionCall","src":"23446:32:27"},"nodeType":"YulExpressionStatement","src":"23446:32:27"}]},"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"23359:6:27","type":""}],"src":"23261:224:27"},{"body":{"nodeType":"YulBlock","src":"23637:220:27","statements":[{"nodeType":"YulAssignment","src":"23647:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23713:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"23718:2:27","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23654:58:27"},"nodeType":"YulFunctionCall","src":"23654:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23647:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23819:3:27"}],"functionName":{"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulIdentifier","src":"23730:88:27"},"nodeType":"YulFunctionCall","src":"23730:93:27"},"nodeType":"YulExpressionStatement","src":"23730:93:27"},{"nodeType":"YulAssignment","src":"23832:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23843:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"23848:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23839:3:27"},"nodeType":"YulFunctionCall","src":"23839:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"23832:3:27"}]}]},"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23625:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"23633:3:27","type":""}],"src":"23491:366:27"},{"body":{"nodeType":"YulBlock","src":"24034:248:27","statements":[{"nodeType":"YulAssignment","src":"24044:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24056:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"24067:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24052:3:27"},"nodeType":"YulFunctionCall","src":"24052:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24044:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24091:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"24102:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24087:3:27"},"nodeType":"YulFunctionCall","src":"24087:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24110:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"24116:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24106:3:27"},"nodeType":"YulFunctionCall","src":"24106:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24080:6:27"},"nodeType":"YulFunctionCall","src":"24080:47:27"},"nodeType":"YulExpressionStatement","src":"24080:47:27"},{"nodeType":"YulAssignment","src":"24136:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24270:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24144:124:27"},"nodeType":"YulFunctionCall","src":"24144:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24136:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24014:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24029:4:27","type":""}],"src":"23863:419:27"},{"body":{"nodeType":"YulBlock","src":"24394:116:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24416:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"24424:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24412:3:27"},"nodeType":"YulFunctionCall","src":"24412:14:27"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"24428:34:27","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24405:6:27"},"nodeType":"YulFunctionCall","src":"24405:58:27"},"nodeType":"YulExpressionStatement","src":"24405:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24484:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"24492:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24480:3:27"},"nodeType":"YulFunctionCall","src":"24480:15:27"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"24497:5:27","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24473:6:27"},"nodeType":"YulFunctionCall","src":"24473:30:27"},"nodeType":"YulExpressionStatement","src":"24473:30:27"}]},"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24386:6:27","type":""}],"src":"24288:222:27"},{"body":{"nodeType":"YulBlock","src":"24662:220:27","statements":[{"nodeType":"YulAssignment","src":"24672:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24738:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"24743:2:27","type":"","value":"35"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24679:58:27"},"nodeType":"YulFunctionCall","src":"24679:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24672:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24844:3:27"}],"functionName":{"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulIdentifier","src":"24755:88:27"},"nodeType":"YulFunctionCall","src":"24755:93:27"},"nodeType":"YulExpressionStatement","src":"24755:93:27"},{"nodeType":"YulAssignment","src":"24857:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24868:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"24873:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24864:3:27"},"nodeType":"YulFunctionCall","src":"24864:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24857:3:27"}]}]},"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24650:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24658:3:27","type":""}],"src":"24516:366:27"},{"body":{"nodeType":"YulBlock","src":"25059:248:27","statements":[{"nodeType":"YulAssignment","src":"25069:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25081:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"25092:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25077:3:27"},"nodeType":"YulFunctionCall","src":"25077:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25069:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25116:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"25127:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25112:3:27"},"nodeType":"YulFunctionCall","src":"25112:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25135:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"25141:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25131:3:27"},"nodeType":"YulFunctionCall","src":"25131:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25105:6:27"},"nodeType":"YulFunctionCall","src":"25105:47:27"},"nodeType":"YulExpressionStatement","src":"25105:47:27"},{"nodeType":"YulAssignment","src":"25161:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25295:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25169:124:27"},"nodeType":"YulFunctionCall","src":"25169:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25161:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25039:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25054:4:27","type":""}],"src":"24888:419:27"},{"body":{"nodeType":"YulBlock","src":"25419:119:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"25441:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"25449:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25437:3:27"},"nodeType":"YulFunctionCall","src":"25437:14:27"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"25453:34:27","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25430:6:27"},"nodeType":"YulFunctionCall","src":"25430:58:27"},"nodeType":"YulExpressionStatement","src":"25430:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"25509:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"25517:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25505:3:27"},"nodeType":"YulFunctionCall","src":"25505:15:27"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"25522:8:27","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25498:6:27"},"nodeType":"YulFunctionCall","src":"25498:33:27"},"nodeType":"YulExpressionStatement","src":"25498:33:27"}]},"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"25411:6:27","type":""}],"src":"25313:225:27"},{"body":{"nodeType":"YulBlock","src":"25690:220:27","statements":[{"nodeType":"YulAssignment","src":"25700:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25766:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"25771:2:27","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25707:58:27"},"nodeType":"YulFunctionCall","src":"25707:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25700:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25872:3:27"}],"functionName":{"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulIdentifier","src":"25783:88:27"},"nodeType":"YulFunctionCall","src":"25783:93:27"},"nodeType":"YulExpressionStatement","src":"25783:93:27"},{"nodeType":"YulAssignment","src":"25885:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25896:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"25901:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25892:3:27"},"nodeType":"YulFunctionCall","src":"25892:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25885:3:27"}]}]},"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25678:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"25686:3:27","type":""}],"src":"25544:366:27"},{"body":{"nodeType":"YulBlock","src":"26087:248:27","statements":[{"nodeType":"YulAssignment","src":"26097:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26109:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"26120:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26105:3:27"},"nodeType":"YulFunctionCall","src":"26105:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26097:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26144:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"26155:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26140:3:27"},"nodeType":"YulFunctionCall","src":"26140:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26163:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"26169:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26159:3:27"},"nodeType":"YulFunctionCall","src":"26159:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26133:6:27"},"nodeType":"YulFunctionCall","src":"26133:47:27"},"nodeType":"YulExpressionStatement","src":"26133:47:27"},{"nodeType":"YulAssignment","src":"26189:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26323:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26197:124:27"},"nodeType":"YulFunctionCall","src":"26197:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26189:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26067:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26082:4:27","type":""}],"src":"25916:419:27"},{"body":{"nodeType":"YulBlock","src":"26447:75:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26469:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"26477:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26465:3:27"},"nodeType":"YulFunctionCall","src":"26465:14:27"},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"26481:33:27","type":"","value":"ERC20: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26458:6:27"},"nodeType":"YulFunctionCall","src":"26458:57:27"},"nodeType":"YulExpressionStatement","src":"26458:57:27"}]},"name":"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26439:6:27","type":""}],"src":"26341:181:27"},{"body":{"nodeType":"YulBlock","src":"26674:220:27","statements":[{"nodeType":"YulAssignment","src":"26684:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26750:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"26755:2:27","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26691:58:27"},"nodeType":"YulFunctionCall","src":"26691:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26684:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26856:3:27"}],"functionName":{"name":"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","nodeType":"YulIdentifier","src":"26767:88:27"},"nodeType":"YulFunctionCall","src":"26767:93:27"},"nodeType":"YulExpressionStatement","src":"26767:93:27"},{"nodeType":"YulAssignment","src":"26869:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26880:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"26885:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26876:3:27"},"nodeType":"YulFunctionCall","src":"26876:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26869:3:27"}]}]},"name":"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26662:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26670:3:27","type":""}],"src":"26528:366:27"},{"body":{"nodeType":"YulBlock","src":"27071:248:27","statements":[{"nodeType":"YulAssignment","src":"27081:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27093:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"27104:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27089:3:27"},"nodeType":"YulFunctionCall","src":"27089:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27081:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27128:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"27139:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27124:3:27"},"nodeType":"YulFunctionCall","src":"27124:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27147:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"27153:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27143:3:27"},"nodeType":"YulFunctionCall","src":"27143:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27117:6:27"},"nodeType":"YulFunctionCall","src":"27117:47:27"},"nodeType":"YulExpressionStatement","src":"27117:47:27"},{"nodeType":"YulAssignment","src":"27173:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27307:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27181:124:27"},"nodeType":"YulFunctionCall","src":"27181:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27173:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27051:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27066:4:27","type":""}],"src":"26900:419:27"},{"body":{"nodeType":"YulBlock","src":"27431:114:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27453:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"27461:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27449:3:27"},"nodeType":"YulFunctionCall","src":"27449:14:27"},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f20616464726573","kind":"string","nodeType":"YulLiteral","src":"27465:34:27","type":"","value":"ERC20: burn from the zero addres"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27442:6:27"},"nodeType":"YulFunctionCall","src":"27442:58:27"},"nodeType":"YulExpressionStatement","src":"27442:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27521:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"27529:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27517:3:27"},"nodeType":"YulFunctionCall","src":"27517:15:27"},{"hexValue":"73","kind":"string","nodeType":"YulLiteral","src":"27534:3:27","type":"","value":"s"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27510:6:27"},"nodeType":"YulFunctionCall","src":"27510:28:27"},"nodeType":"YulExpressionStatement","src":"27510:28:27"}]},"name":"store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"27423:6:27","type":""}],"src":"27325:220:27"},{"body":{"nodeType":"YulBlock","src":"27697:220:27","statements":[{"nodeType":"YulAssignment","src":"27707:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27773:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"27778:2:27","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27714:58:27"},"nodeType":"YulFunctionCall","src":"27714:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27707:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27879:3:27"}],"functionName":{"name":"store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","nodeType":"YulIdentifier","src":"27790:88:27"},"nodeType":"YulFunctionCall","src":"27790:93:27"},"nodeType":"YulExpressionStatement","src":"27790:93:27"},{"nodeType":"YulAssignment","src":"27892:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27903:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"27908:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27899:3:27"},"nodeType":"YulFunctionCall","src":"27899:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27892:3:27"}]}]},"name":"abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"27685:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27693:3:27","type":""}],"src":"27551:366:27"},{"body":{"nodeType":"YulBlock","src":"28094:248:27","statements":[{"nodeType":"YulAssignment","src":"28104:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28116:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"28127:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28112:3:27"},"nodeType":"YulFunctionCall","src":"28112:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28104:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28151:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"28162:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28147:3:27"},"nodeType":"YulFunctionCall","src":"28147:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28170:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"28176:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28166:3:27"},"nodeType":"YulFunctionCall","src":"28166:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28140:6:27"},"nodeType":"YulFunctionCall","src":"28140:47:27"},"nodeType":"YulExpressionStatement","src":"28140:47:27"},{"nodeType":"YulAssignment","src":"28196:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28330:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28204:124:27"},"nodeType":"YulFunctionCall","src":"28204:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28196:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28074:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28089:4:27","type":""}],"src":"27923:419:27"},{"body":{"nodeType":"YulBlock","src":"28454:115:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28476:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"28484:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28472:3:27"},"nodeType":"YulFunctionCall","src":"28472:14:27"},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e","kind":"string","nodeType":"YulLiteral","src":"28488:34:27","type":"","value":"ERC20: burn amount exceeds balan"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28465:6:27"},"nodeType":"YulFunctionCall","src":"28465:58:27"},"nodeType":"YulExpressionStatement","src":"28465:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28544:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"28552:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28540:3:27"},"nodeType":"YulFunctionCall","src":"28540:15:27"},{"hexValue":"6365","kind":"string","nodeType":"YulLiteral","src":"28557:4:27","type":"","value":"ce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28533:6:27"},"nodeType":"YulFunctionCall","src":"28533:29:27"},"nodeType":"YulExpressionStatement","src":"28533:29:27"}]},"name":"store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"28446:6:27","type":""}],"src":"28348:221:27"},{"body":{"nodeType":"YulBlock","src":"28721:220:27","statements":[{"nodeType":"YulAssignment","src":"28731:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28797:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"28802:2:27","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28738:58:27"},"nodeType":"YulFunctionCall","src":"28738:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28731:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28903:3:27"}],"functionName":{"name":"store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","nodeType":"YulIdentifier","src":"28814:88:27"},"nodeType":"YulFunctionCall","src":"28814:93:27"},"nodeType":"YulExpressionStatement","src":"28814:93:27"},{"nodeType":"YulAssignment","src":"28916:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28927:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"28932:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28923:3:27"},"nodeType":"YulFunctionCall","src":"28923:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28916:3:27"}]}]},"name":"abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28709:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28717:3:27","type":""}],"src":"28575:366:27"},{"body":{"nodeType":"YulBlock","src":"29118:248:27","statements":[{"nodeType":"YulAssignment","src":"29128:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29140:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"29151:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29136:3:27"},"nodeType":"YulFunctionCall","src":"29136:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29128:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29175:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"29186:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29171:3:27"},"nodeType":"YulFunctionCall","src":"29171:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29194:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"29200:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29190:3:27"},"nodeType":"YulFunctionCall","src":"29190:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29164:6:27"},"nodeType":"YulFunctionCall","src":"29164:47:27"},"nodeType":"YulExpressionStatement","src":"29164:47:27"},{"nodeType":"YulAssignment","src":"29220:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29354:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29228:124:27"},"nodeType":"YulFunctionCall","src":"29228:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29220:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29098:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29113:4:27","type":""}],"src":"28947:419:27"},{"body":{"nodeType":"YulBlock","src":"29486:34:27","statements":[{"nodeType":"YulAssignment","src":"29496:18:27","value":{"name":"pos","nodeType":"YulIdentifier","src":"29511:3:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"29496:11:27"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29458:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"29463:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"29474:11:27","type":""}],"src":"29372:148:27"},{"body":{"nodeType":"YulBlock","src":"29632:67:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29654:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"29662:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29650:3:27"},"nodeType":"YulFunctionCall","src":"29650:14:27"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nodeType":"YulLiteral","src":"29666:25:27","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29643:6:27"},"nodeType":"YulFunctionCall","src":"29643:49:27"},"nodeType":"YulExpressionStatement","src":"29643:49:27"}]},"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"29624:6:27","type":""}],"src":"29526:173:27"},{"body":{"nodeType":"YulBlock","src":"29869:238:27","statements":[{"nodeType":"YulAssignment","src":"29879:92:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29963:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"29968:2:27","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"29886:76:27"},"nodeType":"YulFunctionCall","src":"29886:85:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29879:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30069:3:27"}],"functionName":{"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulIdentifier","src":"29980:88:27"},"nodeType":"YulFunctionCall","src":"29980:93:27"},"nodeType":"YulExpressionStatement","src":"29980:93:27"},{"nodeType":"YulAssignment","src":"30082:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30093:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"30098:2:27","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30089:3:27"},"nodeType":"YulFunctionCall","src":"30089:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"30082:3:27"}]}]},"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29857:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29865:3:27","type":""}],"src":"29705:402:27"},{"body":{"nodeType":"YulBlock","src":"30223:280:27","statements":[{"nodeType":"YulVariableDeclaration","src":"30233:53:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"30280:5:27"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"30247:32:27"},"nodeType":"YulFunctionCall","src":"30247:39:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"30237:6:27","type":""}]},{"nodeType":"YulAssignment","src":"30295:96:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30379:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"30384:6:27"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"30302:76:27"},"nodeType":"YulFunctionCall","src":"30302:89:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"30295:3:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"30439:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"30446:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30435:3:27"},"nodeType":"YulFunctionCall","src":"30435:16:27"},{"name":"pos","nodeType":"YulIdentifier","src":"30453:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"30458:6:27"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"30400:34:27"},"nodeType":"YulFunctionCall","src":"30400:65:27"},"nodeType":"YulExpressionStatement","src":"30400:65:27"},{"nodeType":"YulAssignment","src":"30474:23:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30485:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"30490:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30481:3:27"},"nodeType":"YulFunctionCall","src":"30481:16:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"30474:3:27"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"30204:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"30211:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"30219:3:27","type":""}],"src":"30113:390:27"},{"body":{"nodeType":"YulBlock","src":"30615:61:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30637:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"30645:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30633:3:27"},"nodeType":"YulFunctionCall","src":"30633:14:27"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nodeType":"YulLiteral","src":"30649:19:27","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30626:6:27"},"nodeType":"YulFunctionCall","src":"30626:43:27"},"nodeType":"YulExpressionStatement","src":"30626:43:27"}]},"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30607:6:27","type":""}],"src":"30509:167:27"},{"body":{"nodeType":"YulBlock","src":"30846:238:27","statements":[{"nodeType":"YulAssignment","src":"30856:92:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30940:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"30945:2:27","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"30863:76:27"},"nodeType":"YulFunctionCall","src":"30863:85:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"30856:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31046:3:27"}],"functionName":{"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulIdentifier","src":"30957:88:27"},"nodeType":"YulFunctionCall","src":"30957:93:27"},"nodeType":"YulExpressionStatement","src":"30957:93:27"},{"nodeType":"YulAssignment","src":"31059:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31070:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"31075:2:27","type":"","value":"17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31066:3:27"},"nodeType":"YulFunctionCall","src":"31066:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"31059:3:27"}]}]},"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"30834:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"30842:3:27","type":""}],"src":"30682:402:27"},{"body":{"nodeType":"YulBlock","src":"31476:581:27","statements":[{"nodeType":"YulAssignment","src":"31487:155:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31638:3:27"}],"functionName":{"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"31494:142:27"},"nodeType":"YulFunctionCall","src":"31494:148:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"31487:3:27"}]},{"nodeType":"YulAssignment","src":"31652:102:27","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"31741:6:27"},{"name":"pos","nodeType":"YulIdentifier","src":"31750:3:27"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"31659:81:27"},"nodeType":"YulFunctionCall","src":"31659:95:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"31652:3:27"}]},{"nodeType":"YulAssignment","src":"31764:155:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31915:3:27"}],"functionName":{"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"31771:142:27"},"nodeType":"YulFunctionCall","src":"31771:148:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"31764:3:27"}]},{"nodeType":"YulAssignment","src":"31929:102:27","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"32018:6:27"},{"name":"pos","nodeType":"YulIdentifier","src":"32027:3:27"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"31936:81:27"},"nodeType":"YulFunctionCall","src":"31936:95:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"31929:3:27"}]},{"nodeType":"YulAssignment","src":"32041:10:27","value":{"name":"pos","nodeType":"YulIdentifier","src":"32048:3:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"32041:3:27"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"31447:3:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"31453:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"31461:6:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"31472:3:27","type":""}],"src":"31090:967:27"},{"body":{"nodeType":"YulBlock","src":"32273:454:27","statements":[{"nodeType":"YulAssignment","src":"32283:27:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32295:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"32306:3:27","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32291:3:27"},"nodeType":"YulFunctionCall","src":"32291:19:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32283:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"32364:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32377:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"32388:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32373:3:27"},"nodeType":"YulFunctionCall","src":"32373:17:27"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"32320:43:27"},"nodeType":"YulFunctionCall","src":"32320:71:27"},"nodeType":"YulExpressionStatement","src":"32320:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"32445:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32458:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"32469:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32454:3:27"},"nodeType":"YulFunctionCall","src":"32454:18:27"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"32401:43:27"},"nodeType":"YulFunctionCall","src":"32401:72:27"},"nodeType":"YulExpressionStatement","src":"32401:72:27"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"32527:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32540:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"32551:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32536:3:27"},"nodeType":"YulFunctionCall","src":"32536:18:27"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"32483:43:27"},"nodeType":"YulFunctionCall","src":"32483:72:27"},"nodeType":"YulExpressionStatement","src":"32483:72:27"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"32609:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32622:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"32633:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32618:3:27"},"nodeType":"YulFunctionCall","src":"32618:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"32565:43:27"},"nodeType":"YulFunctionCall","src":"32565:72:27"},"nodeType":"YulExpressionStatement","src":"32565:72:27"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"32691:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32704:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"32715:3:27","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32700:3:27"},"nodeType":"YulFunctionCall","src":"32700:19:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"32647:43:27"},"nodeType":"YulFunctionCall","src":"32647:73:27"},"nodeType":"YulExpressionStatement","src":"32647:73:27"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32213:9:27","type":""},{"name":"value4","nodeType":"YulTypedName","src":"32225:6:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"32233:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"32241:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"32249:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"32257:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32268:4:27","type":""}],"src":"32063:664:27"},{"body":{"nodeType":"YulBlock","src":"32839:64:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"32861:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"32869:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32857:3:27"},"nodeType":"YulFunctionCall","src":"32857:14:27"},{"hexValue":"5061757361626c653a206e6f7420706175736564","kind":"string","nodeType":"YulLiteral","src":"32873:22:27","type":"","value":"Pausable: not paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32850:6:27"},"nodeType":"YulFunctionCall","src":"32850:46:27"},"nodeType":"YulExpressionStatement","src":"32850:46:27"}]},"name":"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"32831:6:27","type":""}],"src":"32733:170:27"},{"body":{"nodeType":"YulBlock","src":"33055:220:27","statements":[{"nodeType":"YulAssignment","src":"33065:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33131:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"33136:2:27","type":"","value":"20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"33072:58:27"},"nodeType":"YulFunctionCall","src":"33072:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"33065:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33237:3:27"}],"functionName":{"name":"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","nodeType":"YulIdentifier","src":"33148:88:27"},"nodeType":"YulFunctionCall","src":"33148:93:27"},"nodeType":"YulExpressionStatement","src":"33148:93:27"},{"nodeType":"YulAssignment","src":"33250:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33261:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"33266:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33257:3:27"},"nodeType":"YulFunctionCall","src":"33257:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"33250:3:27"}]}]},"name":"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"33043:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"33051:3:27","type":""}],"src":"32909:366:27"},{"body":{"nodeType":"YulBlock","src":"33452:248:27","statements":[{"nodeType":"YulAssignment","src":"33462:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33474:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"33485:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33470:3:27"},"nodeType":"YulFunctionCall","src":"33470:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33462:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33509:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"33520:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33505:3:27"},"nodeType":"YulFunctionCall","src":"33505:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"33528:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"33534:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"33524:3:27"},"nodeType":"YulFunctionCall","src":"33524:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33498:6:27"},"nodeType":"YulFunctionCall","src":"33498:47:27"},"nodeType":"YulExpressionStatement","src":"33498:47:27"},{"nodeType":"YulAssignment","src":"33554:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"33688:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"33562:124:27"},"nodeType":"YulFunctionCall","src":"33562:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33554:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"33432:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"33447:4:27","type":""}],"src":"33281:419:27"},{"body":{"nodeType":"YulBlock","src":"33734:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33751:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33754:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33744:6:27"},"nodeType":"YulFunctionCall","src":"33744:88:27"},"nodeType":"YulExpressionStatement","src":"33744:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33848:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"33851:4:27","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33841:6:27"},"nodeType":"YulFunctionCall","src":"33841:15:27"},"nodeType":"YulExpressionStatement","src":"33841:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33872:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33875:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"33865:6:27"},"nodeType":"YulFunctionCall","src":"33865:15:27"},"nodeType":"YulExpressionStatement","src":"33865:15:27"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"33706:180:27"},{"body":{"nodeType":"YulBlock","src":"33946:87:27","statements":[{"nodeType":"YulAssignment","src":"33956:11:27","value":{"name":"ptr","nodeType":"YulIdentifier","src":"33964:3:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"33956:4:27"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33984:1:27","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"33987:3:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33977:6:27"},"nodeType":"YulFunctionCall","src":"33977:14:27"},"nodeType":"YulExpressionStatement","src":"33977:14:27"},{"nodeType":"YulAssignment","src":"34000:26:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34018:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"34021:4:27","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"34008:9:27"},"nodeType":"YulFunctionCall","src":"34008:18:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"34000:4:27"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"33933:3:27","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"33941:4:27","type":""}],"src":"33892:141:27"},{"body":{"nodeType":"YulBlock","src":"34083:49:27","statements":[{"nodeType":"YulAssignment","src":"34093:33:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"34111:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"34118:2:27","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34107:3:27"},"nodeType":"YulFunctionCall","src":"34107:14:27"},{"kind":"number","nodeType":"YulLiteral","src":"34123:2:27","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"34103:3:27"},"nodeType":"YulFunctionCall","src":"34103:23:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"34093:6:27"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34066:5:27","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"34076:6:27","type":""}],"src":"34039:93:27"},{"body":{"nodeType":"YulBlock","src":"34191:54:27","statements":[{"nodeType":"YulAssignment","src":"34201:37:27","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"34226:4:27"},{"name":"value","nodeType":"YulIdentifier","src":"34232:5:27"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"34222:3:27"},"nodeType":"YulFunctionCall","src":"34222:16:27"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"34201:8:27"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"34166:4:27","type":""},{"name":"value","nodeType":"YulTypedName","src":"34172:5:27","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"34182:8:27","type":""}],"src":"34138:107:27"},{"body":{"nodeType":"YulBlock","src":"34327:317:27","statements":[{"nodeType":"YulVariableDeclaration","src":"34337:35:27","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"34358:10:27"},{"kind":"number","nodeType":"YulLiteral","src":"34370:1:27","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"34354:3:27"},"nodeType":"YulFunctionCall","src":"34354:18:27"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"34341:9:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"34381:109:27","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"34412:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"34423:66:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"34393:18:27"},"nodeType":"YulFunctionCall","src":"34393:97:27"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"34385:4:27","type":""}]},{"nodeType":"YulAssignment","src":"34499:51:27","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"34530:9:27"},{"name":"toInsert","nodeType":"YulIdentifier","src":"34541:8:27"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"34511:18:27"},"nodeType":"YulFunctionCall","src":"34511:39:27"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"34499:8:27"}]},{"nodeType":"YulAssignment","src":"34559:30:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"34572:5:27"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"34583:4:27"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"34579:3:27"},"nodeType":"YulFunctionCall","src":"34579:9:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"34568:3:27"},"nodeType":"YulFunctionCall","src":"34568:21:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"34559:5:27"}]},{"nodeType":"YulAssignment","src":"34598:40:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"34611:5:27"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"34622:8:27"},{"name":"mask","nodeType":"YulIdentifier","src":"34632:4:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"34618:3:27"},"nodeType":"YulFunctionCall","src":"34618:19:27"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"34608:2:27"},"nodeType":"YulFunctionCall","src":"34608:30:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"34598:6:27"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34288:5:27","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"34295:10:27","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"34307:8:27","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"34320:6:27","type":""}],"src":"34251:393:27"},{"body":{"nodeType":"YulBlock","src":"34710:82:27","statements":[{"nodeType":"YulAssignment","src":"34720:66:27","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"34778:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"34760:17:27"},"nodeType":"YulFunctionCall","src":"34760:24:27"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"34751:8:27"},"nodeType":"YulFunctionCall","src":"34751:34:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"34733:17:27"},"nodeType":"YulFunctionCall","src":"34733:53:27"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"34720:9:27"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34690:5:27","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"34700:9:27","type":""}],"src":"34650:142:27"},{"body":{"nodeType":"YulBlock","src":"34845:28:27","statements":[{"nodeType":"YulAssignment","src":"34855:12:27","value":{"name":"value","nodeType":"YulIdentifier","src":"34862:5:27"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"34855:3:27"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34831:5:27","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"34841:3:27","type":""}],"src":"34798:75:27"},{"body":{"nodeType":"YulBlock","src":"34955:193:27","statements":[{"nodeType":"YulVariableDeclaration","src":"34965:63:27","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"35020:7:27"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"34989:30:27"},"nodeType":"YulFunctionCall","src":"34989:39:27"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"34969:16:27","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"35044:4:27"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"35084:4:27"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"35078:5:27"},"nodeType":"YulFunctionCall","src":"35078:11:27"},{"name":"offset","nodeType":"YulIdentifier","src":"35091:6:27"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"35123:16:27"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"35099:23:27"},"nodeType":"YulFunctionCall","src":"35099:41:27"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"35050:27:27"},"nodeType":"YulFunctionCall","src":"35050:91:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"35037:6:27"},"nodeType":"YulFunctionCall","src":"35037:105:27"},"nodeType":"YulExpressionStatement","src":"35037:105:27"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"34932:4:27","type":""},{"name":"offset","nodeType":"YulTypedName","src":"34938:6:27","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"34946:7:27","type":""}],"src":"34879:269:27"},{"body":{"nodeType":"YulBlock","src":"35203:24:27","statements":[{"nodeType":"YulAssignment","src":"35213:8:27","value":{"kind":"number","nodeType":"YulLiteral","src":"35220:1:27","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"35213:3:27"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"35199:3:27","type":""}],"src":"35154:73:27"},{"body":{"nodeType":"YulBlock","src":"35286:136:27","statements":[{"nodeType":"YulVariableDeclaration","src":"35296:46:27","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"35310:30:27"},"nodeType":"YulFunctionCall","src":"35310:32:27"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"35300:6:27","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"35395:4:27"},{"name":"offset","nodeType":"YulIdentifier","src":"35401:6:27"},{"name":"zero_0","nodeType":"YulIdentifier","src":"35409:6:27"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"35351:43:27"},"nodeType":"YulFunctionCall","src":"35351:65:27"},"nodeType":"YulExpressionStatement","src":"35351:65:27"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"35272:4:27","type":""},{"name":"offset","nodeType":"YulTypedName","src":"35278:6:27","type":""}],"src":"35233:189:27"},{"body":{"nodeType":"YulBlock","src":"35478:136:27","statements":[{"body":{"nodeType":"YulBlock","src":"35545:63:27","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"35589:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"35596:1:27","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"35559:29:27"},"nodeType":"YulFunctionCall","src":"35559:39:27"},"nodeType":"YulExpressionStatement","src":"35559:39:27"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"35498:5:27"},{"name":"end","nodeType":"YulIdentifier","src":"35505:3:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"35495:2:27"},"nodeType":"YulFunctionCall","src":"35495:14:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"35510:26:27","statements":[{"nodeType":"YulAssignment","src":"35512:22:27","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"35525:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"35532:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35521:3:27"},"nodeType":"YulFunctionCall","src":"35521:13:27"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"35512:5:27"}]}]},"pre":{"nodeType":"YulBlock","src":"35492:2:27","statements":[]},"src":"35488:120:27"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"35466:5:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"35473:3:27","type":""}],"src":"35428:186:27"},{"body":{"nodeType":"YulBlock","src":"35699:464:27","statements":[{"body":{"nodeType":"YulBlock","src":"35725:431:27","statements":[{"nodeType":"YulVariableDeclaration","src":"35739:54:27","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"35787:5:27"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"35755:31:27"},"nodeType":"YulFunctionCall","src":"35755:38:27"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"35743:8:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"35806:63:27","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"35829:8:27"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"35857:10:27"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"35839:17:27"},"nodeType":"YulFunctionCall","src":"35839:29:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35825:3:27"},"nodeType":"YulFunctionCall","src":"35825:44:27"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"35810:11:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"36026:27:27","statements":[{"nodeType":"YulAssignment","src":"36028:23:27","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"36043:8:27"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"36028:11:27"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"36010:10:27"},{"kind":"number","nodeType":"YulLiteral","src":"36022:2:27","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"36007:2:27"},"nodeType":"YulFunctionCall","src":"36007:18:27"},"nodeType":"YulIf","src":"36004:49:27"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"36095:11:27"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"36112:8:27"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"36140:3:27"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"36122:17:27"},"nodeType":"YulFunctionCall","src":"36122:22:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36108:3:27"},"nodeType":"YulFunctionCall","src":"36108:37:27"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"36066:28:27"},"nodeType":"YulFunctionCall","src":"36066:80:27"},"nodeType":"YulExpressionStatement","src":"36066:80:27"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"35716:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"35721:2:27","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"35713:2:27"},"nodeType":"YulFunctionCall","src":"35713:11:27"},"nodeType":"YulIf","src":"35710:446:27"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"35675:5:27","type":""},{"name":"len","nodeType":"YulTypedName","src":"35682:3:27","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"35687:10:27","type":""}],"src":"35620:543:27"},{"body":{"nodeType":"YulBlock","src":"36232:54:27","statements":[{"nodeType":"YulAssignment","src":"36242:37:27","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"36267:4:27"},{"name":"value","nodeType":"YulIdentifier","src":"36273:5:27"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"36263:3:27"},"nodeType":"YulFunctionCall","src":"36263:16:27"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"36242:8:27"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"36207:4:27","type":""},{"name":"value","nodeType":"YulTypedName","src":"36213:5:27","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"36223:8:27","type":""}],"src":"36169:117:27"},{"body":{"nodeType":"YulBlock","src":"36343:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"36353:68:27","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"36402:1:27","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"36405:5:27"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"36398:3:27"},"nodeType":"YulFunctionCall","src":"36398:13:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"36417:1:27","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"36413:3:27"},"nodeType":"YulFunctionCall","src":"36413:6:27"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"36369:28:27"},"nodeType":"YulFunctionCall","src":"36369:51:27"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"36365:3:27"},"nodeType":"YulFunctionCall","src":"36365:56:27"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"36357:4:27","type":""}]},{"nodeType":"YulAssignment","src":"36430:25:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"36444:4:27"},{"name":"mask","nodeType":"YulIdentifier","src":"36450:4:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"36440:3:27"},"nodeType":"YulFunctionCall","src":"36440:15:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"36430:6:27"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"36320:4:27","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"36326:5:27","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"36336:6:27","type":""}],"src":"36292:169:27"},{"body":{"nodeType":"YulBlock","src":"36547:214:27","statements":[{"nodeType":"YulAssignment","src":"36680:37:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"36707:4:27"},{"name":"len","nodeType":"YulIdentifier","src":"36713:3:27"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"36688:18:27"},"nodeType":"YulFunctionCall","src":"36688:29:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"36680:4:27"}]},{"nodeType":"YulAssignment","src":"36726:29:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"36737:4:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"36747:1:27","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"36750:3:27"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"36743:3:27"},"nodeType":"YulFunctionCall","src":"36743:11:27"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"36734:2:27"},"nodeType":"YulFunctionCall","src":"36734:21:27"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"36726:4:27"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"36528:4:27","type":""},{"name":"len","nodeType":"YulTypedName","src":"36534:3:27","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"36542:4:27","type":""}],"src":"36466:295:27"},{"body":{"nodeType":"YulBlock","src":"36858:1303:27","statements":[{"nodeType":"YulVariableDeclaration","src":"36869:51:27","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"36916:3:27"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"36883:32:27"},"nodeType":"YulFunctionCall","src":"36883:37:27"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"36873:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"37005:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"37007:16:27"},"nodeType":"YulFunctionCall","src":"37007:18:27"},"nodeType":"YulExpressionStatement","src":"37007:18:27"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"36977:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"36985:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"36974:2:27"},"nodeType":"YulFunctionCall","src":"36974:30:27"},"nodeType":"YulIf","src":"36971:56:27"},{"nodeType":"YulVariableDeclaration","src":"37037:52:27","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"37083:4:27"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"37077:5:27"},"nodeType":"YulFunctionCall","src":"37077:11:27"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"37051:25:27"},"nodeType":"YulFunctionCall","src":"37051:38:27"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"37041:6:27","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"37182:4:27"},{"name":"oldLen","nodeType":"YulIdentifier","src":"37188:6:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"37196:6:27"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"37136:45:27"},"nodeType":"YulFunctionCall","src":"37136:67:27"},"nodeType":"YulExpressionStatement","src":"37136:67:27"},{"nodeType":"YulVariableDeclaration","src":"37213:18:27","value":{"kind":"number","nodeType":"YulLiteral","src":"37230:1:27","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"37217:9:27","type":""}]},{"nodeType":"YulAssignment","src":"37241:17:27","value":{"kind":"number","nodeType":"YulLiteral","src":"37254:4:27","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"37241:9:27"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"37305:611:27","statements":[{"nodeType":"YulVariableDeclaration","src":"37319:37:27","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"37338:6:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"37350:4:27","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"37346:3:27"},"nodeType":"YulFunctionCall","src":"37346:9:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"37334:3:27"},"nodeType":"YulFunctionCall","src":"37334:22:27"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"37323:7:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"37370:51:27","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"37416:4:27"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"37384:31:27"},"nodeType":"YulFunctionCall","src":"37384:37:27"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"37374:6:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"37434:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"37443:1:27","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"37438:1:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"37502:163:27","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"37527:6:27"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"37545:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"37550:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37541:3:27"},"nodeType":"YulFunctionCall","src":"37541:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"37535:5:27"},"nodeType":"YulFunctionCall","src":"37535:26:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"37520:6:27"},"nodeType":"YulFunctionCall","src":"37520:42:27"},"nodeType":"YulExpressionStatement","src":"37520:42:27"},{"nodeType":"YulAssignment","src":"37579:24:27","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"37593:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"37601:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37589:3:27"},"nodeType":"YulFunctionCall","src":"37589:14:27"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"37579:6:27"}]},{"nodeType":"YulAssignment","src":"37620:31:27","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"37637:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"37648:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37633:3:27"},"nodeType":"YulFunctionCall","src":"37633:18:27"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"37620:9:27"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"37468:1:27"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"37471:7:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"37465:2:27"},"nodeType":"YulFunctionCall","src":"37465:14:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"37480:21:27","statements":[{"nodeType":"YulAssignment","src":"37482:17:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"37491:1:27"},{"kind":"number","nodeType":"YulLiteral","src":"37494:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37487:3:27"},"nodeType":"YulFunctionCall","src":"37487:12:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"37482:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"37461:3:27","statements":[]},"src":"37457:208:27"},{"body":{"nodeType":"YulBlock","src":"37701:156:27","statements":[{"nodeType":"YulVariableDeclaration","src":"37719:43:27","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"37746:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"37751:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37742:3:27"},"nodeType":"YulFunctionCall","src":"37742:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"37736:5:27"},"nodeType":"YulFunctionCall","src":"37736:26:27"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"37723:9:27","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"37786:6:27"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"37813:9:27"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"37828:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"37836:4:27","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"37824:3:27"},"nodeType":"YulFunctionCall","src":"37824:17:27"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"37794:18:27"},"nodeType":"YulFunctionCall","src":"37794:48:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"37779:6:27"},"nodeType":"YulFunctionCall","src":"37779:64:27"},"nodeType":"YulExpressionStatement","src":"37779:64:27"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"37684:7:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"37693:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"37681:2:27"},"nodeType":"YulFunctionCall","src":"37681:19:27"},"nodeType":"YulIf","src":"37678:179:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"37877:4:27"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"37891:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"37899:1:27","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"37887:3:27"},"nodeType":"YulFunctionCall","src":"37887:14:27"},{"kind":"number","nodeType":"YulLiteral","src":"37903:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37883:3:27"},"nodeType":"YulFunctionCall","src":"37883:22:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"37870:6:27"},"nodeType":"YulFunctionCall","src":"37870:36:27"},"nodeType":"YulExpressionStatement","src":"37870:36:27"}]},"nodeType":"YulCase","src":"37298:618:27","value":{"kind":"number","nodeType":"YulLiteral","src":"37303:1:27","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"37933:222:27","statements":[{"nodeType":"YulVariableDeclaration","src":"37947:14:27","value":{"kind":"number","nodeType":"YulLiteral","src":"37960:1:27","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"37951:5:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"37984:67:27","statements":[{"nodeType":"YulAssignment","src":"38002:35:27","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"38021:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"38026:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38017:3:27"},"nodeType":"YulFunctionCall","src":"38017:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"38011:5:27"},"nodeType":"YulFunctionCall","src":"38011:26:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"38002:5:27"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"37977:6:27"},"nodeType":"YulIf","src":"37974:77:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"38071:4:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38130:5:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"38137:6:27"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"38077:52:27"},"nodeType":"YulFunctionCall","src":"38077:67:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"38064:6:27"},"nodeType":"YulFunctionCall","src":"38064:81:27"},"nodeType":"YulExpressionStatement","src":"38064:81:27"}]},"nodeType":"YulCase","src":"37925:230:27","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"37278:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"37286:2:27","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"37275:2:27"},"nodeType":"YulFunctionCall","src":"37275:14:27"},"nodeType":"YulSwitch","src":"37268:887:27"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"36847:4:27","type":""},{"name":"src","nodeType":"YulTypedName","src":"36853:3:27","type":""}],"src":"36766:1395:27"},{"body":{"nodeType":"YulBlock","src":"38273:60:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"38295:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"38303:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38291:3:27"},"nodeType":"YulFunctionCall","src":"38291:14:27"},{"hexValue":"5061757361626c653a20706175736564","kind":"string","nodeType":"YulLiteral","src":"38307:18:27","type":"","value":"Pausable: paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38284:6:27"},"nodeType":"YulFunctionCall","src":"38284:42:27"},"nodeType":"YulExpressionStatement","src":"38284:42:27"}]},"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"38265:6:27","type":""}],"src":"38167:166:27"},{"body":{"nodeType":"YulBlock","src":"38485:220:27","statements":[{"nodeType":"YulAssignment","src":"38495:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38561:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"38566:2:27","type":"","value":"16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"38502:58:27"},"nodeType":"YulFunctionCall","src":"38502:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"38495:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38667:3:27"}],"functionName":{"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulIdentifier","src":"38578:88:27"},"nodeType":"YulFunctionCall","src":"38578:93:27"},"nodeType":"YulExpressionStatement","src":"38578:93:27"},{"nodeType":"YulAssignment","src":"38680:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38691:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"38696:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38687:3:27"},"nodeType":"YulFunctionCall","src":"38687:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"38680:3:27"}]}]},"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"38473:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"38481:3:27","type":""}],"src":"38339:366:27"},{"body":{"nodeType":"YulBlock","src":"38882:248:27","statements":[{"nodeType":"YulAssignment","src":"38892:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38904:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"38915:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38900:3:27"},"nodeType":"YulFunctionCall","src":"38900:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"38892:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38939:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"38950:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38935:3:27"},"nodeType":"YulFunctionCall","src":"38935:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"38958:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"38964:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"38954:3:27"},"nodeType":"YulFunctionCall","src":"38954:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38928:6:27"},"nodeType":"YulFunctionCall","src":"38928:47:27"},"nodeType":"YulExpressionStatement","src":"38928:47:27"},{"nodeType":"YulAssignment","src":"38984:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"39118:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"38992:124:27"},"nodeType":"YulFunctionCall","src":"38992:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"38984:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"38862:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"38877:4:27","type":""}],"src":"38711:419:27"},{"body":{"nodeType":"YulBlock","src":"39242:108:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"39264:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"39272:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39260:3:27"},"nodeType":"YulFunctionCall","src":"39260:14:27"},{"kind":"number","nodeType":"YulLiteral","src":"39276:66:27","type":"","value":"0x1901000000000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39253:6:27"},"nodeType":"YulFunctionCall","src":"39253:90:27"},"nodeType":"YulExpressionStatement","src":"39253:90:27"}]},"name":"store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"39234:6:27","type":""}],"src":"39136:214:27"},{"body":{"nodeType":"YulBlock","src":"39520:236:27","statements":[{"nodeType":"YulAssignment","src":"39530:91:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39614:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"39619:1:27","type":"","value":"2"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"39537:76:27"},"nodeType":"YulFunctionCall","src":"39537:84:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"39530:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39719:3:27"}],"functionName":{"name":"store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","nodeType":"YulIdentifier","src":"39630:88:27"},"nodeType":"YulFunctionCall","src":"39630:93:27"},"nodeType":"YulExpressionStatement","src":"39630:93:27"},{"nodeType":"YulAssignment","src":"39732:18:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39743:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"39748:1:27","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39739:3:27"},"nodeType":"YulFunctionCall","src":"39739:11:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"39732:3:27"}]}]},"name":"abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"39508:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"39516:3:27","type":""}],"src":"39356:400:27"},{"body":{"nodeType":"YulBlock","src":"39809:32:27","statements":[{"nodeType":"YulAssignment","src":"39819:16:27","value":{"name":"value","nodeType":"YulIdentifier","src":"39830:5:27"},"variableNames":[{"name":"aligned","nodeType":"YulIdentifier","src":"39819:7:27"}]}]},"name":"leftAlign_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"39791:5:27","type":""}],"returnVariables":[{"name":"aligned","nodeType":"YulTypedName","src":"39801:7:27","type":""}],"src":"39762:79:27"},{"body":{"nodeType":"YulBlock","src":"39930:74:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39947:3:27"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"39990:5:27"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"39972:17:27"},"nodeType":"YulFunctionCall","src":"39972:24:27"}],"functionName":{"name":"leftAlign_t_bytes32","nodeType":"YulIdentifier","src":"39952:19:27"},"nodeType":"YulFunctionCall","src":"39952:45:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39940:6:27"},"nodeType":"YulFunctionCall","src":"39940:58:27"},"nodeType":"YulExpressionStatement","src":"39940:58:27"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"39918:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"39925:3:27","type":""}],"src":"39847:157:27"},{"body":{"nodeType":"YulBlock","src":"40255:418:27","statements":[{"nodeType":"YulAssignment","src":"40266:155:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"40417:3:27"}],"functionName":{"name":"abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"40273:142:27"},"nodeType":"YulFunctionCall","src":"40273:148:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"40266:3:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"40493:6:27"},{"name":"pos","nodeType":"YulIdentifier","src":"40502:3:27"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"40431:61:27"},"nodeType":"YulFunctionCall","src":"40431:75:27"},"nodeType":"YulExpressionStatement","src":"40431:75:27"},{"nodeType":"YulAssignment","src":"40515:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"40526:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"40531:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40522:3:27"},"nodeType":"YulFunctionCall","src":"40522:12:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"40515:3:27"}]},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"40606:6:27"},{"name":"pos","nodeType":"YulIdentifier","src":"40615:3:27"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"40544:61:27"},"nodeType":"YulFunctionCall","src":"40544:75:27"},"nodeType":"YulExpressionStatement","src":"40544:75:27"},{"nodeType":"YulAssignment","src":"40628:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"40639:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"40644:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40635:3:27"},"nodeType":"YulFunctionCall","src":"40635:12:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"40628:3:27"}]},{"nodeType":"YulAssignment","src":"40657:10:27","value":{"name":"pos","nodeType":"YulIdentifier","src":"40664:3:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"40657:3:27"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"40226:3:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"40232:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"40240:6:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"40251:3:27","type":""}],"src":"40010:663:27"},{"body":{"nodeType":"YulBlock","src":"40857:367:27","statements":[{"nodeType":"YulAssignment","src":"40867:27:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40879:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"40890:3:27","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40875:3:27"},"nodeType":"YulFunctionCall","src":"40875:19:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"40867:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"40948:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40961:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"40972:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40957:3:27"},"nodeType":"YulFunctionCall","src":"40957:17:27"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"40904:43:27"},"nodeType":"YulFunctionCall","src":"40904:71:27"},"nodeType":"YulExpressionStatement","src":"40904:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"41025:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41038:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"41049:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41034:3:27"},"nodeType":"YulFunctionCall","src":"41034:18:27"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"40985:39:27"},"nodeType":"YulFunctionCall","src":"40985:68:27"},"nodeType":"YulExpressionStatement","src":"40985:68:27"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"41107:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41120:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"41131:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41116:3:27"},"nodeType":"YulFunctionCall","src":"41116:18:27"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"41063:43:27"},"nodeType":"YulFunctionCall","src":"41063:72:27"},"nodeType":"YulExpressionStatement","src":"41063:72:27"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"41189:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41202:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"41213:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41198:3:27"},"nodeType":"YulFunctionCall","src":"41198:18:27"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"41145:43:27"},"nodeType":"YulFunctionCall","src":"41145:72:27"},"nodeType":"YulExpressionStatement","src":"41145:72:27"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"40805:9:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"40817:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"40825:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"40833:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"40841:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"40852:4:27","type":""}],"src":"40679:545:27"},{"body":{"nodeType":"YulBlock","src":"41258:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"41275:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"41278:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41268:6:27"},"nodeType":"YulFunctionCall","src":"41268:88:27"},"nodeType":"YulExpressionStatement","src":"41268:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"41372:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"41375:4:27","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41365:6:27"},"nodeType":"YulFunctionCall","src":"41365:15:27"},"nodeType":"YulExpressionStatement","src":"41365:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"41396:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"41399:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"41389:6:27"},"nodeType":"YulFunctionCall","src":"41389:15:27"},"nodeType":"YulExpressionStatement","src":"41389:15:27"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"41230:180:27"},{"body":{"nodeType":"YulBlock","src":"41522:68:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"41544:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"41552:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41540:3:27"},"nodeType":"YulFunctionCall","src":"41540:14:27"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","kind":"string","nodeType":"YulLiteral","src":"41556:26:27","type":"","value":"ECDSA: invalid signature"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41533:6:27"},"nodeType":"YulFunctionCall","src":"41533:50:27"},"nodeType":"YulExpressionStatement","src":"41533:50:27"}]},"name":"store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"41514:6:27","type":""}],"src":"41416:174:27"},{"body":{"nodeType":"YulBlock","src":"41742:220:27","statements":[{"nodeType":"YulAssignment","src":"41752:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"41818:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"41823:2:27","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"41759:58:27"},"nodeType":"YulFunctionCall","src":"41759:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"41752:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"41924:3:27"}],"functionName":{"name":"store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","nodeType":"YulIdentifier","src":"41835:88:27"},"nodeType":"YulFunctionCall","src":"41835:93:27"},"nodeType":"YulExpressionStatement","src":"41835:93:27"},{"nodeType":"YulAssignment","src":"41937:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"41948:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"41953:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41944:3:27"},"nodeType":"YulFunctionCall","src":"41944:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"41937:3:27"}]}]},"name":"abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"41730:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"41738:3:27","type":""}],"src":"41596:366:27"},{"body":{"nodeType":"YulBlock","src":"42139:248:27","statements":[{"nodeType":"YulAssignment","src":"42149:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42161:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"42172:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42157:3:27"},"nodeType":"YulFunctionCall","src":"42157:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"42149:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42196:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"42207:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42192:3:27"},"nodeType":"YulFunctionCall","src":"42192:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"42215:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"42221:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"42211:3:27"},"nodeType":"YulFunctionCall","src":"42211:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42185:6:27"},"nodeType":"YulFunctionCall","src":"42185:47:27"},"nodeType":"YulExpressionStatement","src":"42185:47:27"},{"nodeType":"YulAssignment","src":"42241:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"42375:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"42249:124:27"},"nodeType":"YulFunctionCall","src":"42249:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"42241:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"42119:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"42134:4:27","type":""}],"src":"41968:419:27"},{"body":{"nodeType":"YulBlock","src":"42499:75:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"42521:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"42529:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42517:3:27"},"nodeType":"YulFunctionCall","src":"42517:14:27"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","kind":"string","nodeType":"YulLiteral","src":"42533:33:27","type":"","value":"ECDSA: invalid signature length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42510:6:27"},"nodeType":"YulFunctionCall","src":"42510:57:27"},"nodeType":"YulExpressionStatement","src":"42510:57:27"}]},"name":"store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"42491:6:27","type":""}],"src":"42393:181:27"},{"body":{"nodeType":"YulBlock","src":"42726:220:27","statements":[{"nodeType":"YulAssignment","src":"42736:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"42802:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"42807:2:27","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"42743:58:27"},"nodeType":"YulFunctionCall","src":"42743:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"42736:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"42908:3:27"}],"functionName":{"name":"store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","nodeType":"YulIdentifier","src":"42819:88:27"},"nodeType":"YulFunctionCall","src":"42819:93:27"},"nodeType":"YulExpressionStatement","src":"42819:93:27"},{"nodeType":"YulAssignment","src":"42921:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"42932:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"42937:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42928:3:27"},"nodeType":"YulFunctionCall","src":"42928:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"42921:3:27"}]}]},"name":"abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"42714:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"42722:3:27","type":""}],"src":"42580:366:27"},{"body":{"nodeType":"YulBlock","src":"43123:248:27","statements":[{"nodeType":"YulAssignment","src":"43133:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43145:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"43156:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43141:3:27"},"nodeType":"YulFunctionCall","src":"43141:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"43133:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43180:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"43191:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43176:3:27"},"nodeType":"YulFunctionCall","src":"43176:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"43199:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"43205:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"43195:3:27"},"nodeType":"YulFunctionCall","src":"43195:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43169:6:27"},"nodeType":"YulFunctionCall","src":"43169:47:27"},"nodeType":"YulExpressionStatement","src":"43169:47:27"},{"nodeType":"YulAssignment","src":"43225:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"43359:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"43233:124:27"},"nodeType":"YulFunctionCall","src":"43233:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"43225:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"43103:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"43118:4:27","type":""}],"src":"42952:419:27"},{"body":{"nodeType":"YulBlock","src":"43483:115:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"43505:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"43513:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43501:3:27"},"nodeType":"YulFunctionCall","src":"43501:14:27"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c","kind":"string","nodeType":"YulLiteral","src":"43517:34:27","type":"","value":"ECDSA: invalid signature 's' val"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43494:6:27"},"nodeType":"YulFunctionCall","src":"43494:58:27"},"nodeType":"YulExpressionStatement","src":"43494:58:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"43573:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"43581:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43569:3:27"},"nodeType":"YulFunctionCall","src":"43569:15:27"},{"hexValue":"7565","kind":"string","nodeType":"YulLiteral","src":"43586:4:27","type":"","value":"ue"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43562:6:27"},"nodeType":"YulFunctionCall","src":"43562:29:27"},"nodeType":"YulExpressionStatement","src":"43562:29:27"}]},"name":"store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"43475:6:27","type":""}],"src":"43377:221:27"},{"body":{"nodeType":"YulBlock","src":"43750:220:27","statements":[{"nodeType":"YulAssignment","src":"43760:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43826:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"43831:2:27","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"43767:58:27"},"nodeType":"YulFunctionCall","src":"43767:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"43760:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43932:3:27"}],"functionName":{"name":"store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","nodeType":"YulIdentifier","src":"43843:88:27"},"nodeType":"YulFunctionCall","src":"43843:93:27"},"nodeType":"YulExpressionStatement","src":"43843:93:27"},{"nodeType":"YulAssignment","src":"43945:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43956:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"43961:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43952:3:27"},"nodeType":"YulFunctionCall","src":"43952:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"43945:3:27"}]}]},"name":"abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"43738:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"43746:3:27","type":""}],"src":"43604:366:27"},{"body":{"nodeType":"YulBlock","src":"44147:248:27","statements":[{"nodeType":"YulAssignment","src":"44157:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"44169:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"44180:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44165:3:27"},"nodeType":"YulFunctionCall","src":"44165:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"44157:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"44204:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"44215:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44200:3:27"},"nodeType":"YulFunctionCall","src":"44200:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"44223:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"44229:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"44219:3:27"},"nodeType":"YulFunctionCall","src":"44219:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44193:6:27"},"nodeType":"YulFunctionCall","src":"44193:47:27"},"nodeType":"YulExpressionStatement","src":"44193:47:27"},{"nodeType":"YulAssignment","src":"44249:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"44383:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"44257:124:27"},"nodeType":"YulFunctionCall","src":"44257:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"44249:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"44127:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"44142:4:27","type":""}],"src":"43976:419:27"},{"body":{"nodeType":"YulBlock","src":"44449:300:27","statements":[{"nodeType":"YulAssignment","src":"44459:25:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"44482:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"44464:17:27"},"nodeType":"YulFunctionCall","src":"44464:20:27"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"44459:1:27"}]},{"nodeType":"YulAssignment","src":"44493:25:27","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"44516:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"44498:17:27"},"nodeType":"YulFunctionCall","src":"44498:20:27"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"44493:1:27"}]},{"body":{"nodeType":"YulBlock","src":"44691:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"44693:16:27"},"nodeType":"YulFunctionCall","src":"44693:18:27"},"nodeType":"YulExpressionStatement","src":"44693:18:27"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"44603:1:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"44596:6:27"},"nodeType":"YulFunctionCall","src":"44596:9:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"44589:6:27"},"nodeType":"YulFunctionCall","src":"44589:17:27"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"44611:1:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"44618:66:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"x","nodeType":"YulIdentifier","src":"44686:1:27"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"44614:3:27"},"nodeType":"YulFunctionCall","src":"44614:74:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"44608:2:27"},"nodeType":"YulFunctionCall","src":"44608:81:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"44585:3:27"},"nodeType":"YulFunctionCall","src":"44585:105:27"},"nodeType":"YulIf","src":"44582:131:27"},{"nodeType":"YulAssignment","src":"44723:20:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"44738:1:27"},{"name":"y","nodeType":"YulIdentifier","src":"44741:1:27"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"44734:3:27"},"nodeType":"YulFunctionCall","src":"44734:9:27"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"44723:7:27"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"44432:1:27","type":""},{"name":"y","nodeType":"YulTypedName","src":"44435:1:27","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"44441:7:27","type":""}],"src":"44401:348:27"},{"body":{"nodeType":"YulBlock","src":"44783:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"44800:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"44803:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44793:6:27"},"nodeType":"YulFunctionCall","src":"44793:88:27"},"nodeType":"YulExpressionStatement","src":"44793:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"44897:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"44900:4:27","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44890:6:27"},"nodeType":"YulFunctionCall","src":"44890:15:27"},"nodeType":"YulExpressionStatement","src":"44890:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"44921:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"44924:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"44914:6:27"},"nodeType":"YulFunctionCall","src":"44914:15:27"},"nodeType":"YulExpressionStatement","src":"44914:15:27"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"44755:180:27"},{"body":{"nodeType":"YulBlock","src":"44984:128:27","statements":[{"nodeType":"YulAssignment","src":"44994:33:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"45021:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"45003:17:27"},"nodeType":"YulFunctionCall","src":"45003:24:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"44994:5:27"}]},{"body":{"nodeType":"YulBlock","src":"45055:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"45057:16:27"},"nodeType":"YulFunctionCall","src":"45057:18:27"},"nodeType":"YulExpressionStatement","src":"45057:18:27"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"45042:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"45049:4:27","type":"","value":"0x00"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"45039:2:27"},"nodeType":"YulFunctionCall","src":"45039:15:27"},"nodeType":"YulIf","src":"45036:41:27"},{"nodeType":"YulAssignment","src":"45086:20:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"45097:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"45104:1:27","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"45093:3:27"},"nodeType":"YulFunctionCall","src":"45093:13:27"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"45086:3:27"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"44970:5:27","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"44980:3:27","type":""}],"src":"44941:171:27"},{"body":{"nodeType":"YulBlock","src":"45224:76:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"45246:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"45254:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45242:3:27"},"nodeType":"YulFunctionCall","src":"45242:14:27"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"45258:34:27","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45235:6:27"},"nodeType":"YulFunctionCall","src":"45235:58:27"},"nodeType":"YulExpressionStatement","src":"45235:58:27"}]},"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"45216:6:27","type":""}],"src":"45118:182:27"},{"body":{"nodeType":"YulBlock","src":"45452:220:27","statements":[{"nodeType":"YulAssignment","src":"45462:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"45528:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"45533:2:27","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"45469:58:27"},"nodeType":"YulFunctionCall","src":"45469:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"45462:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"45634:3:27"}],"functionName":{"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulIdentifier","src":"45545:88:27"},"nodeType":"YulFunctionCall","src":"45545:93:27"},"nodeType":"YulExpressionStatement","src":"45545:93:27"},{"nodeType":"YulAssignment","src":"45647:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"45658:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"45663:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45654:3:27"},"nodeType":"YulFunctionCall","src":"45654:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"45647:3:27"}]}]},"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"45440:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"45448:3:27","type":""}],"src":"45306:366:27"},{"body":{"nodeType":"YulBlock","src":"45849:248:27","statements":[{"nodeType":"YulAssignment","src":"45859:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45871:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"45882:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45867:3:27"},"nodeType":"YulFunctionCall","src":"45867:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"45859:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45906:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"45917:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45902:3:27"},"nodeType":"YulFunctionCall","src":"45902:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"45925:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"45931:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"45921:3:27"},"nodeType":"YulFunctionCall","src":"45921:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45895:6:27"},"nodeType":"YulFunctionCall","src":"45895:47:27"},"nodeType":"YulExpressionStatement","src":"45895:47:27"},{"nodeType":"YulAssignment","src":"45951:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"46085:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"45959:124:27"},"nodeType":"YulFunctionCall","src":"45959:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"45951:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"45829:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"45844:4:27","type":""}],"src":"45678:419:27"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_uint8(value) {\n        if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint8(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint8(value)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6 {\n        if slt(sub(dataEnd, headStart), 224) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint8(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 192\n\n            value6 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: can only renounce\")\n\n        mstore(add(memPtr, 32), \" roles for self\")\n\n    }\n\n    function abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)\n        store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513(memPtr) {\n\n        mstore(add(memPtr, 0), \"Must have admin role to perform \")\n\n        mstore(add(memPtr, 32), \"this action.\")\n\n    }\n\n    function abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 44)\n        store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is alrea\")\n\n        mstore(add(memPtr, 32), \"dy initialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {\n        converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: decreased allowance below\")\n\n        mstore(add(memPtr, 32), \" zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20Permit: expired deadline\")\n\n    }\n\n    function abi_encode_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 192)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value5,  add(headStart, 160))\n\n    }\n\n    function store_literal_in_memory_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20Permit: invalid signature\")\n\n    }\n\n    function abi_encode_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 30)\n        store_literal_in_memory_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve from the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve to the zero addre\")\n\n        mstore(add(memPtr, 32), \"ss\")\n\n    }\n\n    function abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: insufficient allowance\")\n\n    }\n\n    function abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer from the zero ad\")\n\n        mstore(add(memPtr, 32), \"dress\")\n\n    }\n\n    function abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer to the zero addr\")\n\n        mstore(add(memPtr, 32), \"ess\")\n\n    }\n\n    function abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer amount exceeds b\")\n\n        mstore(add(memPtr, 32), \"alance\")\n\n    }\n\n    function abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: mint to the zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: burn from the zero addres\")\n\n        mstore(add(memPtr, 32), \"s\")\n\n    }\n\n    function abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: burn amount exceeds balan\")\n\n        mstore(add(memPtr, 32), \"ce\")\n\n    }\n\n    function abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: account \")\n\n    }\n\n    function abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 23)\n        store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(pos)\n        end := add(pos, 23)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(memPtr) {\n\n        mstore(add(memPtr, 0), \" is missing role \")\n\n    }\n\n    function abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 17)\n        store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(pos)\n        end := add(pos, 17)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: not paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n        store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541(memPtr) {\n\n        mstore(add(memPtr, 0), 0x1901000000000000000000000000000000000000000000000000000000000000)\n\n    }\n\n    function abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 2)\n        store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541(pos)\n        end := add(pos, 2)\n    }\n\n    function leftAlign_t_bytes32(value) -> aligned {\n        aligned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_bytes32(cleanup_t_bytes32(value)))\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value0,  pos)\n        pos := add(pos, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value1,  pos)\n        pos := add(pos, 32)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature\")\n\n    }\n\n    function abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature length\")\n\n    }\n\n    function abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature 's' val\")\n\n        mstore(add(memPtr, 32), \"ue\")\n\n    }\n\n    function abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function decrement_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0x00) { panic_error_0x11() }\n        ret := sub(value, 1)\n    }\n\n    function store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Strings: hex length insufficient\")\n\n    }\n\n    function abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":27,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E810B1A GT PUSH2 0x10F JUMPI DUP1 PUSH4 0xA217FDDF GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xD505ACCF GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x5AA JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x5C6 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x5E2 JUMPI DUP1 PUSH4 0xF09A4016 EQ PUSH2 0x612 JUMPI PUSH2 0x1E5 JUMP JUMPDEST DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x50E JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x52C JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x55C JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x58C JUMPI PUSH2 0x1E5 JUMP JUMPDEST DUP1 PUSH4 0x8129FC1C GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x4AC JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x4B6 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x4C0 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x4F0 JUMPI PUSH2 0x1E5 JUMP JUMPDEST DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x400 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x41C JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x44C JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x47C JUMPI PUSH2 0x1E5 JUMP JUMPDEST DUP1 PUSH4 0x2F2FF15D GT PUSH2 0x187 JUMPI DUP1 PUSH4 0x39509351 GT PUSH2 0x156 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x378 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x3A8 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x3B2 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x3E2 JUMPI PUSH2 0x1E5 JUMP JUMPDEST DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x304 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x320 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x33E JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x35C JUMPI PUSH2 0x1E5 JUMP JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x286 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x2B6 JUMPI DUP1 PUSH4 0x276EC86A EQ PUSH2 0x2E6 JUMPI PUSH2 0x1E5 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x21A JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x238 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x204 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FF SWAP2 SWAP1 PUSH2 0x2C99 JUMP JUMPDEST PUSH2 0x62E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x211 SWAP2 SWAP1 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x222 PUSH2 0x6A8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x22F SWAP2 SWAP1 PUSH2 0x2D8C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x252 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x24D SWAP2 SWAP1 PUSH2 0x2E42 JUMP JUMPDEST PUSH2 0x73A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25F SWAP2 SWAP1 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x270 PUSH2 0x75D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27D SWAP2 SWAP1 PUSH2 0x2E91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x29B SWAP2 SWAP1 PUSH2 0x2EAC JUMP JUMPDEST PUSH2 0x767 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2AD SWAP2 SWAP1 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2D0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2CB SWAP2 SWAP1 PUSH2 0x2F35 JUMP JUMPDEST PUSH2 0x8F1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2DD SWAP2 SWAP1 PUSH2 0x2F71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2EE PUSH2 0x912 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FB SWAP2 SWAP1 PUSH2 0x2F9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x319 SWAP2 SWAP1 PUSH2 0x2FB6 JUMP JUMPDEST PUSH2 0x939 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x328 PUSH2 0x95A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x335 SWAP2 SWAP1 PUSH2 0x3012 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x346 PUSH2 0x963 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x353 SWAP2 SWAP1 PUSH2 0x2F71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x376 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x371 SWAP2 SWAP1 PUSH2 0x2FB6 JUMP JUMPDEST PUSH2 0x972 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x392 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x38D SWAP2 SWAP1 PUSH2 0x2E42 JUMP JUMPDEST PUSH2 0x9F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x39F SWAP2 SWAP1 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3B0 PUSH2 0xA2C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3CC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3C7 SWAP2 SWAP1 PUSH2 0x2E42 JUMP JUMPDEST PUSH2 0xA7D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3D9 SWAP2 SWAP1 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3EA PUSH2 0xB55 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F7 SWAP2 SWAP1 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x41A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x415 SWAP2 SWAP1 PUSH2 0x302D JUMP JUMPDEST PUSH2 0xB6C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x436 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x431 SWAP2 SWAP1 PUSH2 0x302D JUMP JUMPDEST PUSH2 0xC8E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x443 SWAP2 SWAP1 PUSH2 0x2E91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x466 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x461 SWAP2 SWAP1 PUSH2 0x2E42 JUMP JUMPDEST PUSH2 0xCD7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x473 SWAP2 SWAP1 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x496 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x491 SWAP2 SWAP1 PUSH2 0x302D JUMP JUMPDEST PUSH2 0xCFF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4A3 SWAP2 SWAP1 PUSH2 0x2E91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4B4 PUSH2 0xD4F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4BE PUSH2 0xF47 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4DA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4D5 SWAP2 SWAP1 PUSH2 0x2FB6 JUMP JUMPDEST PUSH2 0xF98 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4E7 SWAP2 SWAP1 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4F8 PUSH2 0x1004 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x505 SWAP2 SWAP1 PUSH2 0x2D8C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x516 PUSH2 0x1096 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x523 SWAP2 SWAP1 PUSH2 0x2F71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x546 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x541 SWAP2 SWAP1 PUSH2 0x2E42 JUMP JUMPDEST PUSH2 0x109D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x553 SWAP2 SWAP1 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x576 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x571 SWAP2 SWAP1 PUSH2 0x2E42 JUMP JUMPDEST PUSH2 0x1114 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x583 SWAP2 SWAP1 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x594 PUSH2 0x123A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5A1 SWAP2 SWAP1 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5BF SWAP2 SWAP1 PUSH2 0x3086 JUMP JUMPDEST PUSH2 0x1259 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5DB SWAP2 SWAP1 PUSH2 0x2FB6 JUMP JUMPDEST PUSH2 0x139B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5FC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5F7 SWAP2 SWAP1 PUSH2 0x3128 JUMP JUMPDEST PUSH2 0x13BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x609 SWAP2 SWAP1 PUSH2 0x2E91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x62C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x627 SWAP2 SWAP1 PUSH2 0x3128 JUMP JUMPDEST PUSH2 0x1443 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x6A1 JUMPI POP PUSH2 0x6A0 DUP3 PUSH2 0x1567 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x6B7 SWAP1 PUSH2 0x3197 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x6E3 SWAP1 PUSH2 0x3197 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x730 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x705 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x730 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x713 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x745 PUSH2 0x15D1 JUMP JUMPDEST SWAP1 POP PUSH2 0x752 DUP2 DUP6 DUP6 PUSH2 0x15D9 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x35 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x7CE JUMPI PUSH1 0x40 MLOAD PUSH32 0xCED4EF3500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x7D9 DUP6 PUSH2 0xC8E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x196 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42F6B8A7 DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x839 SWAP2 SWAP1 PUSH2 0x2F9B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x856 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x87A SWAP2 SWAP1 PUSH2 0x31DD JUMP JUMPDEST SWAP1 POP DUP4 DUP2 DUP4 PUSH2 0x889 SWAP2 SWAP1 PUSH2 0x3239 JUMP JUMPDEST LT ISZERO PUSH2 0x8C1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x9950252700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x8CB PUSH2 0x15D1 JUMP JUMPDEST SWAP1 POP PUSH2 0x8D8 DUP8 DUP3 DUP8 PUSH2 0x17A2 JUMP JUMPDEST PUSH2 0x8E3 DUP8 DUP8 DUP8 PUSH2 0x182E JUMP JUMPDEST PUSH1 0x1 SWAP4 POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x130 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x195 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x942 DUP3 PUSH2 0x8F1 JUMP JUMPDEST PUSH2 0x94B DUP2 PUSH2 0x1AA7 JUMP JUMPDEST PUSH2 0x955 DUP4 DUP4 PUSH2 0x1ABB JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x96D PUSH2 0x1B9D JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x97A PUSH2 0x15D1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x9E7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9DE SWAP1 PUSH2 0x32DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9F1 DUP3 DUP3 PUSH2 0x1BDD JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xA00 PUSH2 0x15D1 JUMP JUMPDEST SWAP1 POP PUSH2 0xA21 DUP2 DUP6 DUP6 PUSH2 0xA12 DUP6 DUP10 PUSH2 0x13BC JUMP JUMPDEST PUSH2 0xA1C SWAP2 SWAP1 PUSH2 0x32FF JUMP JUMPDEST PUSH2 0x15D9 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xA34 PUSH2 0x123A JUMP JUMPDEST PUSH2 0xA73 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA6A SWAP1 PUSH2 0x33A5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA7B PUSH2 0x1CC0 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x195 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xAC1 PUSH2 0x15D1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB38 JUMPI POP PUSH2 0x196 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB20 PUSH2 0x15D1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0xB41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB4B DUP4 DUP4 PUSH2 0x1D23 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xCC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xBBB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBB2 SWAP1 PUSH2 0x3437 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC21 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC29 PUSH2 0x1E7A JUMP JUMPDEST PUSH2 0xC31 PUSH2 0x1ED3 JUMP JUMPDEST PUSH2 0xC39 PUSH2 0x1F24 JUMP JUMPDEST PUSH2 0xC4A PUSH2 0xC44 PUSH2 0x1F7D JUMP JUMPDEST DUP3 PUSH2 0x1ABB JUMP JUMPDEST PUSH2 0xC5B PUSH2 0xC55 PUSH2 0x1FA5 JUMP JUMPDEST DUP3 PUSH2 0x1ABB JUMP JUMPDEST PUSH2 0xC73 PUSH2 0xC66 PUSH2 0x1FA5 JUMP JUMPDEST PUSH2 0xC6E PUSH2 0x1F7D JUMP JUMPDEST PUSH2 0x1FCD JUMP JUMPDEST PUSH2 0xC8B PUSH2 0xC7E PUSH2 0x1F7D JUMP JUMPDEST PUSH2 0xC86 PUSH2 0x1F7D JUMP JUMPDEST PUSH2 0x1FCD JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCEB DUP4 PUSH2 0xCE5 PUSH2 0x15D1 JUMP JUMPDEST DUP5 PUSH2 0x17A2 JUMP JUMPDEST PUSH2 0xCF5 DUP4 DUP4 PUSH2 0x202A JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD48 PUSH1 0x99 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x21F9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0xD80 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0xDAD JUMPI POP PUSH2 0xD8F ADDRESS PUSH2 0x2207 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0xDAC JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0xDEC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDE3 SWAP1 PUSH2 0x34C9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0xE29 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0xE9D PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x14 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x535A54204441492053747265616D20546F6B656E000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x535A544441490000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x222A JUMP JUMPDEST PUSH2 0xEDB PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x535A544441490000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x2287 JUMP JUMPDEST PUSH2 0xEEB PUSH2 0xEE6 PUSH2 0x15D1 JUMP JUMPDEST PUSH2 0xB6C JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF44 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0xF3B SWAP2 SWAP1 PUSH2 0x352E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH2 0xF4F PUSH2 0x123A JUMP JUMPDEST PUSH2 0xF8E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF85 SWAP1 PUSH2 0x33A5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF96 PUSH2 0x2318 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x130 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x1013 SWAP1 PUSH2 0x3197 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x103F SWAP1 PUSH2 0x3197 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x108C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1061 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x108C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x106F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10A8 PUSH2 0x15D1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x10B6 DUP3 DUP7 PUSH2 0x13BC JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x10FB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10F2 SWAP1 PUSH2 0x35BB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1108 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x15D9 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x111F PUSH2 0x15D1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1133 PUSH2 0x112E PUSH2 0x15D1 JUMP JUMPDEST PUSH2 0xC8E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x196 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42F6B8A7 PUSH2 0x117E PUSH2 0x15D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x119A SWAP2 SWAP1 PUSH2 0x2F9B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11DB SWAP2 SWAP1 PUSH2 0x31DD JUMP JUMPDEST SWAP1 POP DUP5 DUP2 DUP4 PUSH2 0x11EA SWAP2 SWAP1 PUSH2 0x3239 JUMP JUMPDEST LT ISZERO PUSH2 0x1222 JUMPI PUSH1 0x40 MLOAD PUSH32 0x9950252700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x122D DUP4 DUP8 DUP8 PUSH2 0x182E JUMP JUMPDEST PUSH1 0x1 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1254 PUSH2 0x1247 PUSH2 0x1F7D JUMP JUMPDEST PUSH2 0x124F PUSH2 0x15D1 JUMP JUMPDEST PUSH2 0xF98 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x129C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1293 SWAP1 PUSH2 0x3627 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x12CB DUP13 PUSH2 0x237B JUMP JUMPDEST DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x12E1 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3647 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x1304 DUP3 PUSH2 0x23D9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1314 DUP3 DUP8 DUP8 DUP8 PUSH2 0x23F3 JUMP JUMPDEST SWAP1 POP DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1384 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x137B SWAP1 PUSH2 0x36F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x138F DUP11 DUP11 DUP11 PUSH2 0x15D9 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x13A4 DUP3 PUSH2 0x8F1 JUMP JUMPDEST PUSH2 0x13AD DUP2 PUSH2 0x1AA7 JUMP JUMPDEST PUSH2 0x13B7 DUP4 DUP4 PUSH2 0x1BDD JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x34 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x144B PUSH2 0x123A JUMP JUMPDEST PUSH2 0x148A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1481 SWAP1 PUSH2 0x33A5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x194 SLOAD GT ISZERO PUSH2 0x14C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2669450E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x194 PUSH1 0x0 DUP2 SLOAD PUSH2 0x14D8 SWAP1 PUSH2 0x3714 JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE POP DUP2 PUSH2 0x195 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH2 0x196 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1648 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x163F SWAP1 PUSH2 0x37CE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x16B7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16AE SWAP1 PUSH2 0x3860 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x34 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1795 SWAP2 SWAP1 PUSH2 0x2E91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17AE DUP5 DUP5 PUSH2 0x13BC JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x1828 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x181A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1811 SWAP1 PUSH2 0x38CC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1827 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x15D9 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x189D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1894 SWAP1 PUSH2 0x395E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x190C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1903 SWAP1 PUSH2 0x39F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1917 DUP4 DUP4 DUP4 PUSH2 0x241E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x199E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1995 SWAP1 PUSH2 0x3A82 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x33 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x1A8E SWAP2 SWAP1 PUSH2 0x2E91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x1AA1 DUP5 DUP5 DUP5 PUSH2 0x2423 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1AB8 DUP2 PUSH2 0x1AB3 PUSH2 0x15D1 JUMP JUMPDEST PUSH2 0x2428 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1AC5 DUP3 DUP3 PUSH2 0xF98 JUMP JUMPDEST PUSH2 0x1B99 JUMPI PUSH1 0x1 PUSH2 0x130 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x1B3E PUSH2 0x15D1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BD8 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x1BCB PUSH2 0x24AD JUMP JUMPDEST PUSH2 0x1BD3 PUSH2 0x24B7 JUMP JUMPDEST PUSH2 0x24C1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1BE7 DUP3 DUP3 PUSH2 0xF98 JUMP JUMPDEST ISZERO PUSH2 0x1CBC JUMPI PUSH1 0x0 PUSH2 0x130 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x1C61 PUSH2 0x15D1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1CC8 PUSH2 0x24FB JUMP JUMPDEST PUSH1 0x0 PUSH1 0xCC PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x1D0C PUSH2 0x15D1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D19 SWAP2 SWAP1 PUSH2 0x2F9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1D92 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D89 SWAP1 PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1D9E PUSH1 0x0 DUP4 DUP4 PUSH2 0x241E JUMP JUMPDEST DUP1 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1DB0 SWAP2 SWAP1 PUSH2 0x32FF JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x33 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x1E62 SWAP2 SWAP1 PUSH2 0x2E91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x1E76 PUSH1 0x0 DUP4 DUP4 PUSH2 0x2423 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1EC9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1EC0 SWAP1 PUSH2 0x3437 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1ED1 PUSH2 0x2544 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1F22 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F19 SWAP1 PUSH2 0x3437 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1F73 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F6A SWAP1 PUSH2 0x3437 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1F7B PUSH2 0x25B0 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FD8 DUP4 PUSH2 0x8F1 JUMP JUMPDEST SWAP1 POP DUP2 PUSH2 0x130 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2099 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2090 SWAP1 PUSH2 0x3B80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x20A5 DUP3 PUSH1 0x0 DUP4 PUSH2 0x241E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x212C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2123 SWAP1 PUSH2 0x3C12 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x21E0 SWAP2 SWAP1 PUSH2 0x2E91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x21F4 DUP4 PUSH1 0x0 DUP5 PUSH2 0x2423 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2279 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2270 SWAP1 PUSH2 0x3437 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2283 DUP3 DUP3 PUSH2 0x260A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x22D6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x22CD SWAP1 PUSH2 0x3437 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2315 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3100000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x267D JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x2320 PUSH2 0x26F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xCC PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x2364 PUSH2 0x15D1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2371 SWAP2 SWAP1 PUSH2 0x2F9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x99 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x23C8 DUP2 PUSH2 0x21F9 JUMP JUMPDEST SWAP2 POP PUSH2 0x23D3 DUP2 PUSH2 0x2742 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23EC PUSH2 0x23E6 PUSH2 0x1B9D JUMP JUMPDEST DUP4 PUSH2 0x2758 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2404 DUP8 DUP8 DUP8 DUP8 PUSH2 0x278B JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x2411 DUP2 PUSH2 0x286D JUMP JUMPDEST DUP2 SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x2432 DUP3 DUP3 PUSH2 0xF98 JUMP JUMPDEST PUSH2 0x24A9 JUMPI PUSH2 0x243F DUP2 PUSH2 0x29D3 JUMP JUMPDEST PUSH2 0x244D DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0x2A00 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x245E SWAP3 SWAP2 SWAP1 PUSH2 0x3D06 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x24A0 SWAP2 SWAP1 PUSH2 0x2D8C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x65 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x66 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x24DC SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3D40 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2503 PUSH2 0xB55 JUMP JUMPDEST PUSH2 0x2542 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2539 SWAP1 PUSH2 0x3DDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2593 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x258A SWAP1 PUSH2 0x3437 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xCC PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x25FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25F6 SWAP1 PUSH2 0x3437 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH2 0x162 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2659 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2650 SWAP1 PUSH2 0x3437 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x36 SWAP1 DUP2 PUSH2 0x2668 SWAP2 SWAP1 PUSH2 0x3FD0 JUMP JUMPDEST POP DUP1 PUSH1 0x37 SWAP1 DUP2 PUSH2 0x2678 SWAP2 SWAP1 PUSH2 0x3FD0 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x26CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x26C3 SWAP1 PUSH2 0x3437 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP DUP2 PUSH1 0x65 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x66 DUP2 SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2700 PUSH2 0xB55 JUMP JUMPDEST ISZERO PUSH2 0x2740 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2737 SWAP1 PUSH2 0x40EE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x276D SWAP3 SWAP2 SWAP1 PUSH2 0x417B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 PUSH1 0x0 SHR GT ISZERO PUSH2 0x27C6 JUMPI PUSH1 0x0 PUSH1 0x3 SWAP2 POP SWAP2 POP PUSH2 0x2864 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x27EB SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x41B2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x280D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x285B JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x2864 JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP3 POP SWAP3 POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2881 JUMPI PUSH2 0x2880 PUSH2 0x41F7 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2894 JUMPI PUSH2 0x2893 PUSH2 0x41F7 JUMP JUMPDEST JUMPDEST SUB ISZERO PUSH2 0x29D0 JUMPI PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x28AE JUMPI PUSH2 0x28AD PUSH2 0x41F7 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x28C1 JUMPI PUSH2 0x28C0 PUSH2 0x41F7 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x2901 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28F8 SWAP1 PUSH2 0x4272 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2915 JUMPI PUSH2 0x2914 PUSH2 0x41F7 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2928 JUMPI PUSH2 0x2927 PUSH2 0x41F7 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x2968 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x295F SWAP1 PUSH2 0x42DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x297C JUMPI PUSH2 0x297B PUSH2 0x41F7 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x298F JUMPI PUSH2 0x298E PUSH2 0x41F7 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x29CF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x29C6 SWAP1 PUSH2 0x4370 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x29F9 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0x2A00 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0x2A13 SWAP2 SWAP1 PUSH2 0x4390 JUMP JUMPDEST PUSH2 0x2A1D SWAP2 SWAP1 PUSH2 0x32FF JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A36 JUMPI PUSH2 0x2A35 PUSH2 0x3DFF JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2A68 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2AA0 JUMPI PUSH2 0x2A9F PUSH2 0x43EA JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x2B04 JUMPI PUSH2 0x2B03 PUSH2 0x43EA JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0x2B44 SWAP2 SWAP1 PUSH2 0x4390 JUMP JUMPDEST PUSH2 0x2B4E SWAP2 SWAP1 PUSH2 0x32FF JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2BEE JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0x2B90 JUMPI PUSH2 0x2B8F PUSH2 0x43EA JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2BA7 JUMPI PUSH2 0x2BA6 PUSH2 0x43EA JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0x2BE7 SWAP1 PUSH2 0x4419 JUMP JUMPDEST SWAP1 POP PUSH2 0x2B51 JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0x2C32 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C29 SWAP1 PUSH2 0x448E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2C76 DUP2 PUSH2 0x2C41 JUMP JUMPDEST DUP2 EQ PUSH2 0x2C81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2C93 DUP2 PUSH2 0x2C6D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CAF JUMPI PUSH2 0x2CAE PUSH2 0x2C3C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2CBD DUP5 DUP3 DUP6 ADD PUSH2 0x2C84 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2CDB DUP2 PUSH2 0x2CC6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2CF6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2CD2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2D36 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2D1B JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D5E DUP3 PUSH2 0x2CFC JUMP JUMPDEST PUSH2 0x2D68 DUP2 DUP6 PUSH2 0x2D07 JUMP JUMPDEST SWAP4 POP PUSH2 0x2D78 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2D18 JUMP JUMPDEST PUSH2 0x2D81 DUP2 PUSH2 0x2D42 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2DA6 DUP2 DUP5 PUSH2 0x2D53 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DD9 DUP3 PUSH2 0x2DAE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2DE9 DUP2 PUSH2 0x2DCE JUMP JUMPDEST DUP2 EQ PUSH2 0x2DF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2E06 DUP2 PUSH2 0x2DE0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2E1F DUP2 PUSH2 0x2E0C JUMP JUMPDEST DUP2 EQ PUSH2 0x2E2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2E3C DUP2 PUSH2 0x2E16 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2E59 JUMPI PUSH2 0x2E58 PUSH2 0x2C3C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E67 DUP6 DUP3 DUP7 ADD PUSH2 0x2DF7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2E78 DUP6 DUP3 DUP7 ADD PUSH2 0x2E2D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2E8B DUP2 PUSH2 0x2E0C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2EA6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2E82 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2EC5 JUMPI PUSH2 0x2EC4 PUSH2 0x2C3C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2ED3 DUP7 DUP3 DUP8 ADD PUSH2 0x2DF7 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2EE4 DUP7 DUP3 DUP8 ADD PUSH2 0x2DF7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2EF5 DUP7 DUP3 DUP8 ADD PUSH2 0x2E2D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2F12 DUP2 PUSH2 0x2EFF JUMP JUMPDEST DUP2 EQ PUSH2 0x2F1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2F2F DUP2 PUSH2 0x2F09 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F4B JUMPI PUSH2 0x2F4A PUSH2 0x2C3C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2F59 DUP5 DUP3 DUP6 ADD PUSH2 0x2F20 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2F6B DUP2 PUSH2 0x2EFF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2F86 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2F62 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2F95 DUP2 PUSH2 0x2DCE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2FB0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2F8C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2FCD JUMPI PUSH2 0x2FCC PUSH2 0x2C3C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2FDB DUP6 DUP3 DUP7 ADD PUSH2 0x2F20 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2FEC DUP6 DUP3 DUP7 ADD PUSH2 0x2DF7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x300C DUP2 PUSH2 0x2FF6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3027 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3003 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3043 JUMPI PUSH2 0x3042 PUSH2 0x2C3C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3051 DUP5 DUP3 DUP6 ADD PUSH2 0x2DF7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3063 DUP2 PUSH2 0x2FF6 JUMP JUMPDEST DUP2 EQ PUSH2 0x306E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3080 DUP2 PUSH2 0x305A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x30A5 JUMPI PUSH2 0x30A4 PUSH2 0x2C3C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x30B3 DUP11 DUP3 DUP12 ADD PUSH2 0x2DF7 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x30C4 DUP11 DUP3 DUP12 ADD PUSH2 0x2DF7 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x30D5 DUP11 DUP3 DUP12 ADD PUSH2 0x2E2D JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x30E6 DUP11 DUP3 DUP12 ADD PUSH2 0x2E2D JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x30F7 DUP11 DUP3 DUP12 ADD PUSH2 0x3071 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x3108 DUP11 DUP3 DUP12 ADD PUSH2 0x2F20 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x3119 DUP11 DUP3 DUP12 ADD PUSH2 0x2F20 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x313F JUMPI PUSH2 0x313E PUSH2 0x2C3C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x314D DUP6 DUP3 DUP7 ADD PUSH2 0x2DF7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x315E DUP6 DUP3 DUP7 ADD PUSH2 0x2DF7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x31AF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x31C2 JUMPI PUSH2 0x31C1 PUSH2 0x3168 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x31D7 DUP2 PUSH2 0x2E16 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x31F3 JUMPI PUSH2 0x31F2 PUSH2 0x2C3C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3201 DUP5 DUP3 DUP6 ADD PUSH2 0x31C8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3244 DUP3 PUSH2 0x2E0C JUMP JUMPDEST SWAP2 POP PUSH2 0x324F DUP4 PUSH2 0x2E0C JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x3267 JUMPI PUSH2 0x3266 PUSH2 0x320A JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32C9 PUSH1 0x2F DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x32D4 DUP3 PUSH2 0x326D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x32F8 DUP2 PUSH2 0x32BC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x330A DUP3 PUSH2 0x2E0C JUMP JUMPDEST SWAP2 POP PUSH2 0x3315 DUP4 PUSH2 0x2E0C JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x332D JUMPI PUSH2 0x332C PUSH2 0x320A JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D75737420686176652061646D696E20726F6C6520746F20706572666F726D20 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7468697320616374696F6E2E0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x338F PUSH1 0x2C DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x339A DUP3 PUSH2 0x3333 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x33BE DUP2 PUSH2 0x3382 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3421 PUSH1 0x2B DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x342C DUP3 PUSH2 0x33C5 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3450 DUP2 PUSH2 0x3414 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34B3 PUSH1 0x2E DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x34BE DUP3 PUSH2 0x3457 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x34E2 DUP2 PUSH2 0x34A6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3518 PUSH2 0x3513 PUSH2 0x350E DUP5 PUSH2 0x34E9 JUMP JUMPDEST PUSH2 0x34F3 JUMP JUMPDEST PUSH2 0x2FF6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3528 DUP2 PUSH2 0x34FD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3543 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x351F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35A5 PUSH1 0x25 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x35B0 DUP3 PUSH2 0x3549 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x35D4 DUP2 PUSH2 0x3598 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3611 PUSH1 0x1D DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x361C DUP3 PUSH2 0x35DB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3640 DUP2 PUSH2 0x3604 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x365C PUSH1 0x0 DUP4 ADD DUP10 PUSH2 0x2F62 JUMP JUMPDEST PUSH2 0x3669 PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x2F8C JUMP JUMPDEST PUSH2 0x3676 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x2F8C JUMP JUMPDEST PUSH2 0x3683 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x2E82 JUMP JUMPDEST PUSH2 0x3690 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x2E82 JUMP JUMPDEST PUSH2 0x369D PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x2E82 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36DE PUSH1 0x1E DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x36E9 DUP3 PUSH2 0x36A8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x370D DUP2 PUSH2 0x36D1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x371F DUP3 PUSH2 0x2E0C JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x3751 JUMPI PUSH2 0x3750 PUSH2 0x320A JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37B8 PUSH1 0x24 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x37C3 DUP3 PUSH2 0x375C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x37E7 DUP2 PUSH2 0x37AB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x384A PUSH1 0x22 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x3855 DUP3 PUSH2 0x37EE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3879 DUP2 PUSH2 0x383D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x38B6 PUSH1 0x1D DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x38C1 DUP3 PUSH2 0x3880 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x38E5 DUP2 PUSH2 0x38A9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3948 PUSH1 0x25 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x3953 DUP3 PUSH2 0x38EC JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3977 DUP2 PUSH2 0x393B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39DA PUSH1 0x23 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x39E5 DUP3 PUSH2 0x397E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A09 DUP2 PUSH2 0x39CD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A6C PUSH1 0x26 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A77 DUP3 PUSH2 0x3A10 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A9B DUP2 PUSH2 0x3A5F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AD8 PUSH1 0x1F DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x3AE3 DUP3 PUSH2 0x3AA2 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3B07 DUP2 PUSH2 0x3ACB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B6A PUSH1 0x21 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x3B75 DUP3 PUSH2 0x3B0E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3B99 DUP2 PUSH2 0x3B5D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6365000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BFC PUSH1 0x22 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x3C07 DUP3 PUSH2 0x3BA0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3C2B DUP2 PUSH2 0x3BEF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C73 PUSH1 0x17 DUP4 PUSH2 0x3C32 JUMP JUMPDEST SWAP2 POP PUSH2 0x3C7E DUP3 PUSH2 0x3C3D JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C94 DUP3 PUSH2 0x2CFC JUMP JUMPDEST PUSH2 0x3C9E DUP2 DUP6 PUSH2 0x3C32 JUMP JUMPDEST SWAP4 POP PUSH2 0x3CAE DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2D18 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CF0 PUSH1 0x11 DUP4 PUSH2 0x3C32 JUMP JUMPDEST SWAP2 POP PUSH2 0x3CFB DUP3 PUSH2 0x3CBA JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D11 DUP3 PUSH2 0x3C66 JUMP JUMPDEST SWAP2 POP PUSH2 0x3D1D DUP3 DUP6 PUSH2 0x3C89 JUMP JUMPDEST SWAP2 POP PUSH2 0x3D28 DUP3 PUSH2 0x3CE3 JUMP JUMPDEST SWAP2 POP PUSH2 0x3D34 DUP3 DUP5 PUSH2 0x3C89 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x3D55 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x2F62 JUMP JUMPDEST PUSH2 0x3D62 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x2F62 JUMP JUMPDEST PUSH2 0x3D6F PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x2F62 JUMP JUMPDEST PUSH2 0x3D7C PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x2E82 JUMP JUMPDEST PUSH2 0x3D89 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x2F8C JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DC9 PUSH1 0x14 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x3DD4 DUP3 PUSH2 0x3D93 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3DF8 DUP2 PUSH2 0x3DBC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x3E90 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x3E53 JUMP JUMPDEST PUSH2 0x3E9A DUP7 DUP4 PUSH2 0x3E53 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3ECD PUSH2 0x3EC8 PUSH2 0x3EC3 DUP5 PUSH2 0x2E0C JUMP JUMPDEST PUSH2 0x34F3 JUMP JUMPDEST PUSH2 0x2E0C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3EE7 DUP4 PUSH2 0x3EB2 JUMP JUMPDEST PUSH2 0x3EFB PUSH2 0x3EF3 DUP3 PUSH2 0x3ED4 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x3E60 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3F10 PUSH2 0x3F03 JUMP JUMPDEST PUSH2 0x3F1B DUP2 DUP5 DUP5 PUSH2 0x3EDE JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3F3F JUMPI PUSH2 0x3F34 PUSH1 0x0 DUP3 PUSH2 0x3F08 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3F21 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3F84 JUMPI PUSH2 0x3F55 DUP2 PUSH2 0x3E2E JUMP JUMPDEST PUSH2 0x3F5E DUP5 PUSH2 0x3E43 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x3F6D JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x3F81 PUSH2 0x3F79 DUP6 PUSH2 0x3E43 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x3F20 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FA7 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x3F89 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FC0 DUP4 DUP4 PUSH2 0x3F96 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3FD9 DUP3 PUSH2 0x2CFC JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3FF2 JUMPI PUSH2 0x3FF1 PUSH2 0x3DFF JUMP JUMPDEST JUMPDEST PUSH2 0x3FFC DUP3 SLOAD PUSH2 0x3197 JUMP JUMPDEST PUSH2 0x4007 DUP3 DUP3 DUP6 PUSH2 0x3F43 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x403A JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x4028 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x4032 DUP6 DUP3 PUSH2 0x3FB4 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x409A JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x4048 DUP7 PUSH2 0x3E2E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4070 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x404B JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x408D JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x4089 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x3F96 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x40D8 PUSH1 0x10 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x40E3 DUP3 PUSH2 0x40A2 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4107 DUP2 PUSH2 0x40CB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4144 PUSH1 0x2 DUP4 PUSH2 0x3C32 JUMP JUMPDEST SWAP2 POP PUSH2 0x414F DUP3 PUSH2 0x410E JUMP JUMPDEST PUSH1 0x2 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4175 PUSH2 0x4170 DUP3 PUSH2 0x2EFF JUMP JUMPDEST PUSH2 0x415A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4186 DUP3 PUSH2 0x4137 JUMP JUMPDEST SWAP2 POP PUSH2 0x4192 DUP3 DUP6 PUSH2 0x4164 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x41A2 DUP3 DUP5 PUSH2 0x4164 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x41C7 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2F62 JUMP JUMPDEST PUSH2 0x41D4 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x3003 JUMP JUMPDEST PUSH2 0x41E1 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2F62 JUMP JUMPDEST PUSH2 0x41EE PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x2F62 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x425C PUSH1 0x18 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x4267 DUP3 PUSH2 0x4226 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x428B DUP2 PUSH2 0x424F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42C8 PUSH1 0x1F DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x42D3 DUP3 PUSH2 0x4292 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x42F7 DUP2 PUSH2 0x42BB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x435A PUSH1 0x22 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x4365 DUP3 PUSH2 0x42FE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4389 DUP2 PUSH2 0x434D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x439B DUP3 PUSH2 0x2E0C JUMP JUMPDEST SWAP2 POP PUSH2 0x43A6 DUP4 PUSH2 0x2E0C JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x43DF JUMPI PUSH2 0x43DE PUSH2 0x320A JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4424 DUP3 PUSH2 0x2E0C JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x4437 JUMPI PUSH2 0x4436 PUSH2 0x320A JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4478 PUSH1 0x20 DUP4 PUSH2 0x2D07 JUMP JUMPDEST SWAP2 POP PUSH2 0x4483 DUP3 PUSH2 0x4442 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x44A7 DUP2 PUSH2 0x446B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 0xED 0x2A COINBASE 0xE8 0xD9 0xD5 ADDRESS 0xDE 0xD9 ADD SWAP16 MSIZE STOP POP ADDMOD 0xE3 LOG3 RETURNDATACOPY 0x2C BALANCE 0xE4 DUP12 PUSH12 0x335E9C5D13BB7C464736F6C PUSH4 0x43000810 STOP CALLER ","sourceMap":"761:2716:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2903:213:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2491:98:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4768:197;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3579:106;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2791:684:23;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4708:129:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;902:30:23;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5133:145:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3428:91:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3276:113:8;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6242:214:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6208:234:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1769:65:23;;;:::i;:::-;;1893:146;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1858:84:3;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;734:549:20;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3743:125:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2045:199:23;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3026:126:8;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1172:198:23;;;:::i;:::-;;1702:61;;;:::i;:::-;;3203:145:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2702:102:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2324:49:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6929:427:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2250:535:23;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1289:117:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2328:637:8;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5558:147:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4311:149:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1376:320:23;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2903:213:0;2988:4;3026:43;3011:58;;;:11;:58;;;;:98;;;;3073:36;3097:11;3073:23;:36::i;:::-;3011:98;3004:105;;2903:213;;;:::o;2491:98:5:-;2545:13;2577:5;2570:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2491:98;:::o;4768:197::-;4851:4;4867:13;4883:12;:10;:12::i;:::-;4867:28;;4905:32;4914:5;4921:7;4930:6;4905:8;:32::i;:::-;4954:4;4947:11;;;4768:197;;;;:::o;3579:106::-;3640:7;3666:12;;3659:19;;3579:106;:::o;2791:684:23:-;2948:4;2974;2968:10;;:2;:10;;;2964:80;;3001:32;;;;;;;;;;;;;;2964:80;3053:26;3082:15;3092:4;3082:9;:15::i;:::-;3053:44;;3107:23;3133:22;;;;;;;;;;;:56;;;3190:4;3133:62;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3107:88;;3250:6;3231:15;3210:18;:36;;;;:::i;:::-;3209:47;3205:118;;;3279:33;;;;;;;;;;;;;;3205:118;3332:15;3350:12;:10;:12::i;:::-;3332:30;;3372:38;3388:4;3394:7;3403:6;3372:15;:38::i;:::-;3420:27;3430:4;3436:2;3440:6;3420:9;:27::i;:::-;3464:4;3457:11;;;;;2791:684;;;;;:::o;4708:129:0:-;4782:7;4808:6;:12;4815:4;4808:12;;;;;;;;;;;:22;;;4801:29;;4708:129;;;:::o;902:30:23:-;;;;;;;;;;;;;:::o;5133:145:0:-;5216:18;5229:4;5216:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5246:25:::1;5257:4;5263:7;5246:10;:25::i;:::-;5133:145:::0;;;:::o;3428:91:5:-;3486:5;3510:2;3503:9;;3428:91;:::o;3276:113:8:-;3336:7;3362:20;:18;:20::i;:::-;3355:27;;3276:113;:::o;6242:214:0:-;6348:12;:10;:12::i;:::-;6337:23;;:7;:23;;;6329:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;6423:26;6435:4;6441:7;6423:11;:26::i;:::-;6242:214;;:::o;6208:234:5:-;6296:4;6312:13;6328:12;:10;:12::i;:::-;6312:28;;6350:64;6359:5;6366:7;6403:10;6375:25;6385:5;6392:7;6375:9;:25::i;:::-;:38;;;;:::i;:::-;6350:8;:64::i;:::-;6431:4;6424:11;;;6208:234;;;;:::o;1769:65:23:-;652:9:20;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;1817:10:23::1;:8;:10::i;:::-;1769:65::o:0;1893:146::-;1978:4;1056:15;;;;;;;;;;;1040:31;;:12;:10;:12::i;:::-;:31;;;1039:99;;;;1114:22;;;;;;;;;;;1090:47;;:12;:10;:12::i;:::-;:47;;;1039:99;1018:130;;;;;;1994:17:::1;2000:2;2004:6;1994:5;:17::i;:::-;2028:4;2021:11;;1893:146:::0;;;;:::o;1858:84:3:-;1905:4;1928:7;;;;;;;;;;;1921:14;;1858:84;:::o;734:549:20:-;5363:13:2;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;845:1:20::1;828:19;;:5;:19;;::::0;825:99:::1;;870:43;;;;;;;;;;;;;;825:99;933:17;:15;:17::i;:::-;960:22;:20;:22::i;:::-;992:24;:22;:24::i;:::-;1027:43;1038:24;:22;:24::i;:::-;1064:5;1027:10;:43::i;:::-;1080:44;1091:25;:23;:25::i;:::-;1118:5;1080:10;:44::i;:::-;1135:66;1149:25;:23;:25::i;:::-;1176:24;:22;:24::i;:::-;1135:13;:66::i;:::-;1211:65;1225:24;:22;:24::i;:::-;1251;:22;:24::i;:::-;1211:13;:65::i;:::-;734:549:::0;:::o;3743:125:5:-;3817:7;3843:9;:18;3853:7;3843:18;;;;;;;;;;;;;;;;3836:25;;3743:125;;;:::o;2045:199:23:-;2122:4;2138:46;2154:7;2163:12;:10;:12::i;:::-;2177:6;2138:15;:46::i;:::-;2194:22;2200:7;2209:6;2194:5;:22::i;:::-;2233:4;2226:11;;2045:199;;;;:::o;3026:126:8:-;3095:7;3121:24;:7;:14;3129:5;3121:14;;;;;;;;;;;;;;;:22;:24::i;:::-;3114:31;;3026:126;;;:::o;1172:198:23:-;3268:19:2;3291:13;;;;;;;;;;;3290:14;3268:36;;3336:14;:34;;;;;3369:1;3354:12;;;;;;;;;;:16;;;3336:34;3335:108;;;;3377:44;3415:4;3377:29;:44::i;:::-;3376:45;:66;;;;;3441:1;3425:12;;;;;;;;;;:17;;;3376:66;3335:108;3314:201;;;;;;;;;;;;:::i;:::-;;;;;;;;;3540:1;3525:12;;:16;;;;;;;;;;;;;;;;;;3555:14;3551:65;;;3601:4;3585:13;;:20;;;;;;;;;;;;;;;;;;3551:65;1225:46:23::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;::::0;:12:::1;:46::i;:::-;1281:28;;;;;;;;;;;;;;;;;::::0;:18:::1;:28::i;:::-;1319:44;1350:12;:10;:12::i;:::-;1319:30;:44::i;:::-;3640:14:2::0;3636:99;;;3686:5;3670:13;;:21;;;;;;;;;;;;;;;;;;3710:14;3722:1;3710:14;;;;;;:::i;:::-;;;;;;;;3636:99;3258:483;1172:198:23:o;1702:61::-;652:9:20;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;1748:8:23::1;:6;:8::i;:::-;1702:61::o:0;3203:145:0:-;3289:4;3312:6;:12;3319:4;3312:12;;;;;;;;;;;:20;;:29;3333:7;3312:29;;;;;;;;;;;;;;;;;;;;;;;;;3305:36;;3203:145;;;;:::o;2702:102:5:-;2758:13;2790:7;2783:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2702:102;:::o;2324:49:0:-;2369:4;2324:49;;;:::o;6929:427:5:-;7022:4;7038:13;7054:12;:10;:12::i;:::-;7038:28;;7076:24;7103:25;7113:5;7120:7;7103:9;:25::i;:::-;7076:52;;7166:15;7146:16;:35;;7138:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;7257:60;7266:5;7273:7;7301:15;7282:16;:34;7257:8;:60::i;:::-;7345:4;7338:11;;;;6929:427;;;;:::o;2250:535:23:-;2380:4;2396:13;2412:12;:10;:12::i;:::-;2396:28;;2434:26;2463:23;2473:12;:10;:12::i;:::-;2463:9;:23::i;:::-;2434:52;;2496:23;2522:22;;;;;;;;;;;:56;;;2579:12;:10;:12::i;:::-;2522:70;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2496:96;;2647:6;2628:15;2607:18;:36;;;;:::i;:::-;2606:47;2602:118;;;2676:33;;;;;;;;;;;;;;2602:118;2729:28;2739:5;2746:2;2750:6;2729:9;:28::i;:::-;2774:4;2767:11;;;;;2250:535;;;;:::o;1289:117:20:-;1329:4;1352:47;1360:24;:22;:24::i;:::-;1386:12;:10;:12::i;:::-;1352:7;:47::i;:::-;1345:54;;1289:117;:::o;2328:637:8:-;2563:8;2544:15;:27;;2536:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2616:18;1363:95;2676:5;2683:7;2692:5;2699:16;2709:5;2699:9;:16::i;:::-;2717:8;2647:79;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2637:90;;;;;;2616:111;;2738:12;2753:28;2770:10;2753:16;:28::i;:::-;2738:43;;2792:14;2809:39;2834:4;2840:1;2843;2846;2809:24;:39::i;:::-;2792:56;;2876:5;2866:15;;:6;:15;;;2858:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;2927:31;2936:5;2943:7;2952:5;2927:8;:31::i;:::-;2526:439;;;2328:637;;;;;;;:::o;5558:147:0:-;5642:18;5655:4;5642:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5672:26:::1;5684:4;5690:7;5672:11;:26::i;:::-;5558:147:::0;;;:::o;4311:149:5:-;4400:7;4426:11;:18;4438:5;4426:18;;;;;;;;;;;;;;;:27;4445:7;4426:27;;;;;;;;;;;;;;;;4419:34;;4311:149;;;;:::o;1376:320:23:-;652:9:20;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;1506:1:23::1;1491:12;;:16;1487:84;;;1530:30;;;;;;;;;;;;;;1487:84;1582:12;;1580:14;;;;;:::i;:::-;;;;;;;;1622:15;1604;;:33;;;;;;;;;;;;;;;;;;1677:11;1647:22;;:42;;;;;;;;;;;;;;;;;;1376:320:::0;;:::o;1060:166:17:-;1145:4;1183:36;1168:51;;;:11;:51;;;;1161:58;;1060:166;;;:::o;850:96:12:-;903:7;929:10;922:17;;850:96;:::o;10841:370:5:-;10989:1;10972:19;;:5;:19;;;10964:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11069:1;11050:21;;:7;:21;;;11042:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11151:6;11121:11;:18;11133:5;11121:18;;;;;;;;;;;;;;;:27;11140:7;11121:27;;;;;;;;;;;;;;;:36;;;;11188:7;11172:32;;11181:5;11172:32;;;11197:6;11172:32;;;;;;:::i;:::-;;;;;;;;10841:370;;;:::o;11492:441::-;11622:24;11649:25;11659:5;11666:7;11649:9;:25::i;:::-;11622:52;;11708:17;11688:16;:37;11684:243;;11769:6;11749:16;:26;;11741:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11851:51;11860:5;11867:7;11895:6;11876:16;:25;11851:8;:51::i;:::-;11684:243;11612:321;11492:441;;;:::o;7810:818::-;7952:1;7936:18;;:4;:18;;;7928:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;8028:1;8014:16;;:2;:16;;;8006:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;8081:38;8102:4;8108:2;8112:6;8081:20;:38::i;:::-;8130:19;8152:9;:15;8162:4;8152:15;;;;;;;;;;;;;;;;8130:37;;8200:6;8185:11;:21;;8177:72;;;;;;;;;;;;:::i;:::-;;;;;;;;;8315:6;8301:11;:20;8283:9;:15;8293:4;8283:15;;;;;;;;;;;;;;;:38;;;;8515:6;8498:9;:13;8508:2;8498:13;;;;;;;;;;;;;;;;:23;;;;;;;;;;;8562:2;8547:26;;8556:4;8547:26;;;8566:6;8547:26;;;;;;:::i;:::-;;;;;;;;8584:37;8604:4;8610:2;8614:6;8584:19;:37::i;:::-;7918:710;7810:818;;;:::o;3642:103:0:-;3708:30;3719:4;3725:12;:10;:12::i;:::-;3708:10;:30::i;:::-;3642:103;:::o;7791:233::-;7874:22;7882:4;7888:7;7874;:22::i;:::-;7869:149;;7944:4;7912:6;:12;7919:4;7912:12;;;;;;;;;;;:20;;:29;7933:7;7912:29;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;;;;;;7994:12;:10;:12::i;:::-;7967:40;;7985:7;7967:40;;7979:4;7967:40;;;;;;;;;;7869:149;7791:233;;:::o;2851:160:16:-;2904:7;2930:74;1604:95;2964:17;:15;:17::i;:::-;2983:20;:18;:20::i;:::-;2930:21;:74::i;:::-;2923:81;;2851:160;:::o;8195:234:0:-;8278:22;8286:4;8292:7;8278;:22::i;:::-;8274:149;;;8348:5;8316:6;:12;8323:4;8316:12;;;;;;;;;;;:20;;:29;8337:7;8316:29;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;8399:12;:10;:12::i;:::-;8372:40;;8390:7;8372:40;;8384:4;8372:40;;;;;;;;;;8274:149;8195:234;;:::o;2676:117:3:-;1729:16;:14;:16::i;:::-;2744:5:::1;2734:7;;:15;;;;;;;;;;;;;;;;;;2764:22;2773:12;:10;:12::i;:::-;2764:22;;;;;;:::i;:::-;;;;;;;;2676:117::o:0;8904:535:5:-;9006:1;8987:21;;:7;:21;;;8979:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;9055:49;9084:1;9088:7;9097:6;9055:20;:49::i;:::-;9131:6;9115:12;;:22;;;;;;;:::i;:::-;;;;;;;;9305:6;9283:9;:18;9293:7;9283:18;;;;;;;;;;;;;;;;:28;;;;;;;;;;;9357:7;9336:37;;9353:1;9336:37;;;9366:6;9336:37;;;;;;:::i;:::-;;;;;;;;9384:48;9412:1;9416:7;9425:6;9384:19;:48::i;:::-;8904:535;;:::o;1063:97:3:-;5363:13:2;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1126:27:3::1;:25;:27::i;:::-;1063:97::o:0;2025:65:0:-;5363:13:2;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2025:65:0:o;1868:111:4:-;5363:13:2;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1938:34:4::1;:32;:34::i;:::-;1868:111::o:0;222:90:21:-;269:7;124:23;288:17;;222:90;:::o;318:92::-;366:7;191:24;385:18;;318:92;:::o;7376:247:0:-;7459:25;7487:18;7500:4;7487:12;:18::i;:::-;7459:46;;7540:9;7515:6;:12;7522:4;7515:12;;;;;;;;;;;:22;;:34;;;;7606:9;7587:17;7581:4;7564:52;;;;;;;;;;7449:174;7376:247;;:::o;9759:659:5:-;9861:1;9842:21;;:7;:21;;;9834:67;;;;;;;;;;;;:::i;:::-;;;;;;;;;9912:49;9933:7;9950:1;9954:6;9912:20;:49::i;:::-;9972:22;9997:9;:18;10007:7;9997:18;;;;;;;;;;;;;;;;9972:43;;10051:6;10033:14;:24;;10025:71;;;;;;;;;;;;:::i;:::-;;;;;;;;;10168:6;10151:14;:23;10130:9;:18;10140:7;10130:18;;;;;;;;;;;;;;;:44;;;;10283:6;10267:12;;:22;;;;;;;;;;;10341:1;10315:37;;10324:7;10315:37;;;10345:6;10315:37;;;;;;:::i;:::-;;;;;;;;10363:48;10383:7;10400:1;10404:6;10363:19;:48::i;:::-;9824:594;9759:659;;:::o;838:112:13:-;903:7;929;:14;;;922:21;;838:112;;;:::o;1186:320:11:-;1246:4;1498:1;1476:7;:19;;;:23;1469:30;;1186:320;;;:::o;2114:147:5:-;5363:13:2;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2216:38:5::1;2239:5;2246:7;2216:22;:38::i;:::-;2114:147:::0;;:::o;2055:125:8:-;5363:13:2;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2139:34:8::1;2163:4;2139:34;;;;;;;;;;;;;;;;::::0;:23:::1;:34::i;:::-;2055:125:::0;:::o;2429:115:3:-;1482:19;:17;:19::i;:::-;2498:4:::1;2488:7;;:14;;;;;;;;;;;;;;;;;;2517:20;2524:12;:10;:12::i;:::-;2517:20;;;;;;:::i;:::-;;;;;;;;2429:115::o:0;3520:214:8:-;3580:15;3607:41;3651:7;:14;3659:5;3651:14;;;;;;;;;;;;;;;3607:58;;3685:15;:5;:13;:15::i;:::-;3675:25;;3710:17;:5;:15;:17::i;:::-;3597:137;3520:214;;;:::o;3899:176:16:-;3976:7;4002:66;4035:20;:18;:20::i;:::-;4057:10;4002:32;:66::i;:::-;3995:73;;3899:176;;;:::o;6718:270:15:-;6841:7;6861:17;6880:18;6902:25;6913:4;6919:1;6922;6925;6902:10;:25::i;:::-;6860:67;;;;6937:18;6949:5;6937:11;:18::i;:::-;6972:9;6965:16;;;;6718:270;;;;;;:::o;12517:121:5:-;;;;:::o;13226:120::-;;;;:::o;4026:501:0:-;4114:22;4122:4;4128:7;4114;:22::i;:::-;4109:412;;4297:39;4328:7;4297:30;:39::i;:::-;4407:49;4446:4;4438:13;;4453:2;4407:30;:49::i;:::-;4204:274;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4152:358;;;;;;;;;;;:::i;:::-;;;;;;;;4109:412;4026:501;;:::o;4311:103:16:-;4369:7;4395:12;;4388:19;;4311:103;:::o;4653:109::-;4714:7;4740:15;;4733:22;;4653:109;:::o;3017:257::-;3157:7;3204:8;3214;3224:11;3237:13;3260:4;3193:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3183:84;;;;;;3176:91;;3017:257;;;;;:::o;2188:106:3:-;2254:8;:6;:8::i;:::-;2246:41;;;;;;;;;;;;:::i;:::-;;;;;;;;;2188:106::o;1166:95::-;5363:13:2;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1249:5:3::1;1239:7;;:15;;;;;;;;;;;;;;;;;;1166:95::o:0;1985:109:4:-;5363:13:2;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1787:1:4::1;2065:7;:22;;;;1985:109::o:0;2267:159:5:-;5363:13:2;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2387:5:5::1;2379;:13;;;;;;:::i;:::-;;2412:7;2402;:17;;;;;;:::i;:::-;;2267:159:::0;;:::o;2468:297:16:-;5363:13:2;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2580:18:16::1;2617:4;2601:22;;;;;;2580:43;;2633:21;2673:7;2657:25;;;;;;2633:49;;2707:10;2692:12;:25;;;;2745:13;2727:15;:31;;;;2570:195;;2468:297:::0;;:::o;2010:106:3:-;2080:8;:6;:8::i;:::-;2079:9;2071:38;;;;;;;;;;;;:::i;:::-;;;;;;;;;2010:106::o;956:123:13:-;1061:1;1043:7;:14;;;:19;;;;;;;;;;;956:123;:::o;8374:194:15:-;8467:7;8532:15;8549:10;8503:57;;;;;;;;;:::i;:::-;;;;;;;;;;;;;8493:68;;;;;;8486:75;;8374:194;;;;:::o;5091:1494::-;5217:7;5226:12;6141:66;6136:1;6128:10;;:79;6124:161;;;6239:1;6243:30;6223:51;;;;;;6124:161;6379:14;6396:24;6406:4;6412:1;6415;6418;6396:24;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6379:41;;6452:1;6434:20;;:6;:20;;;6430:101;;6486:1;6490:29;6470:50;;;;;;;6430:101;6549:6;6557:20;6541:37;;;;;5091:1494;;;;;;;;:::o;592:511::-;669:20;660:29;;;;;;;;:::i;:::-;;:5;:29;;;;;;;;:::i;:::-;;;656:441;705:7;656:441;765:29;756:38;;;;;;;;:::i;:::-;;:5;:38;;;;;;;;:::i;:::-;;;752:345;;810:34;;;;;;;;;;:::i;:::-;;;;;;;;752:345;874:35;865:44;;;;;;;;:::i;:::-;;:5;:44;;;;;;;;:::i;:::-;;;861:236;;925:41;;;;;;;;;;:::i;:::-;;;;;;;;861:236;996:30;987:39;;;;;;;;:::i;:::-;;:5;:39;;;;;;;;:::i;:::-;;;983:114;;1042:44;;;;;;;;;;:::i;:::-;;;;;;;;983:114;592:511;;:::o;2146:149:14:-;2204:13;2236:52;2264:4;2248:22;;333:2;2236:52;;:11;:52::i;:::-;2229:59;;2146:149;;;:::o;1557:437::-;1632:13;1657:19;1702:1;1693:6;1689:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1679:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1657:47;;1714:15;:6;1721:1;1714:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1739;:6;1746:1;1739:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1769:9;1794:1;1785:6;1781:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1769:26;;1764:128;1801:1;1797;:5;1764:128;;;1835:8;1852:3;1844:5;:11;1835:21;;;;;;;:::i;:::-;;;;;1823:6;1830:1;1823:9;;;;;;;;:::i;:::-;;;;;:33;;;;;;;;;;;1880:1;1870:11;;;;;1804:3;;;;:::i;:::-;;;1764:128;;;;1918:1;1909:5;:10;1901:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;1980:6;1966:21;;;1557:437;;;;:::o;88:117:27:-;197:1;194;187:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:246::-;1879:1;1889:113;1903:6;1900:1;1897:13;1889:113;;;1988:1;1983:3;1979:11;1973:18;1969:1;1964:3;1960:11;1953:39;1925:2;1922:1;1918:10;1913:15;;1889:113;;;2036:1;2027:6;2022:3;2018:16;2011:27;1860:184;1798:246;;;:::o;2050:102::-;2091:6;2142:2;2138:7;2133:2;2126:5;2122:14;2118:28;2108:38;;2050:102;;;:::o;2158:377::-;2246:3;2274:39;2307:5;2274:39;:::i;:::-;2329:71;2393:6;2388:3;2329:71;:::i;:::-;2322:78;;2409:65;2467:6;2462:3;2455:4;2448:5;2444:16;2409:65;:::i;:::-;2499:29;2521:6;2499:29;:::i;:::-;2494:3;2490:39;2483:46;;2250:285;2158:377;;;;:::o;2541:313::-;2654:4;2692:2;2681:9;2677:18;2669:26;;2741:9;2735:4;2731:20;2727:1;2716:9;2712:17;2705:47;2769:78;2842:4;2833:6;2769:78;:::i;:::-;2761:86;;2541:313;;;;:::o;2860:126::-;2897:7;2937:42;2930:5;2926:54;2915:65;;2860:126;;;:::o;2992:96::-;3029:7;3058:24;3076:5;3058:24;:::i;:::-;3047:35;;2992:96;;;:::o;3094:122::-;3167:24;3185:5;3167:24;:::i;:::-;3160:5;3157:35;3147:63;;3206:1;3203;3196:12;3147:63;3094:122;:::o;3222:139::-;3268:5;3306:6;3293:20;3284:29;;3322:33;3349:5;3322:33;:::i;:::-;3222:139;;;;:::o;3367:77::-;3404:7;3433:5;3422:16;;3367:77;;;:::o;3450:122::-;3523:24;3541:5;3523:24;:::i;:::-;3516:5;3513:35;3503:63;;3562:1;3559;3552:12;3503:63;3450:122;:::o;3578:139::-;3624:5;3662:6;3649:20;3640:29;;3678:33;3705:5;3678:33;:::i;:::-;3578:139;;;;:::o;3723:474::-;3791:6;3799;3848:2;3836:9;3827:7;3823:23;3819:32;3816:119;;;3854:79;;:::i;:::-;3816:119;3974:1;3999:53;4044:7;4035:6;4024:9;4020:22;3999:53;:::i;:::-;3989:63;;3945:117;4101:2;4127:53;4172:7;4163:6;4152:9;4148:22;4127:53;:::i;:::-;4117:63;;4072:118;3723:474;;;;;:::o;4203:118::-;4290:24;4308:5;4290:24;:::i;:::-;4285:3;4278:37;4203:118;;:::o;4327:222::-;4420:4;4458:2;4447:9;4443:18;4435:26;;4471:71;4539:1;4528:9;4524:17;4515:6;4471:71;:::i;:::-;4327:222;;;;:::o;4555:619::-;4632:6;4640;4648;4697:2;4685:9;4676:7;4672:23;4668:32;4665:119;;;4703:79;;:::i;:::-;4665:119;4823:1;4848:53;4893:7;4884:6;4873:9;4869:22;4848:53;:::i;:::-;4838:63;;4794:117;4950:2;4976:53;5021:7;5012:6;5001:9;4997:22;4976:53;:::i;:::-;4966:63;;4921:118;5078:2;5104:53;5149:7;5140:6;5129:9;5125:22;5104:53;:::i;:::-;5094:63;;5049:118;4555:619;;;;;:::o;5180:77::-;5217:7;5246:5;5235:16;;5180:77;;;:::o;5263:122::-;5336:24;5354:5;5336:24;:::i;:::-;5329:5;5326:35;5316:63;;5375:1;5372;5365:12;5316:63;5263:122;:::o;5391:139::-;5437:5;5475:6;5462:20;5453:29;;5491:33;5518:5;5491:33;:::i;:::-;5391:139;;;;:::o;5536:329::-;5595:6;5644:2;5632:9;5623:7;5619:23;5615:32;5612:119;;;5650:79;;:::i;:::-;5612:119;5770:1;5795:53;5840:7;5831:6;5820:9;5816:22;5795:53;:::i;:::-;5785:63;;5741:117;5536:329;;;;:::o;5871:118::-;5958:24;5976:5;5958:24;:::i;:::-;5953:3;5946:37;5871:118;;:::o;5995:222::-;6088:4;6126:2;6115:9;6111:18;6103:26;;6139:71;6207:1;6196:9;6192:17;6183:6;6139:71;:::i;:::-;5995:222;;;;:::o;6223:118::-;6310:24;6328:5;6310:24;:::i;:::-;6305:3;6298:37;6223:118;;:::o;6347:222::-;6440:4;6478:2;6467:9;6463:18;6455:26;;6491:71;6559:1;6548:9;6544:17;6535:6;6491:71;:::i;:::-;6347:222;;;;:::o;6575:474::-;6643:6;6651;6700:2;6688:9;6679:7;6675:23;6671:32;6668:119;;;6706:79;;:::i;:::-;6668:119;6826:1;6851:53;6896:7;6887:6;6876:9;6872:22;6851:53;:::i;:::-;6841:63;;6797:117;6953:2;6979:53;7024:7;7015:6;7004:9;7000:22;6979:53;:::i;:::-;6969:63;;6924:118;6575:474;;;;;:::o;7055:86::-;7090:7;7130:4;7123:5;7119:16;7108:27;;7055:86;;;:::o;7147:112::-;7230:22;7246:5;7230:22;:::i;:::-;7225:3;7218:35;7147:112;;:::o;7265:214::-;7354:4;7392:2;7381:9;7377:18;7369:26;;7405:67;7469:1;7458:9;7454:17;7445:6;7405:67;:::i;:::-;7265:214;;;;:::o;7485:329::-;7544:6;7593:2;7581:9;7572:7;7568:23;7564:32;7561:119;;;7599:79;;:::i;:::-;7561:119;7719:1;7744:53;7789:7;7780:6;7769:9;7765:22;7744:53;:::i;:::-;7734:63;;7690:117;7485:329;;;;:::o;7820:118::-;7891:22;7907:5;7891:22;:::i;:::-;7884:5;7881:33;7871:61;;7928:1;7925;7918:12;7871:61;7820:118;:::o;7944:135::-;7988:5;8026:6;8013:20;8004:29;;8042:31;8067:5;8042:31;:::i;:::-;7944:135;;;;:::o;8085:1199::-;8196:6;8204;8212;8220;8228;8236;8244;8293:3;8281:9;8272:7;8268:23;8264:33;8261:120;;;8300:79;;:::i;:::-;8261:120;8420:1;8445:53;8490:7;8481:6;8470:9;8466:22;8445:53;:::i;:::-;8435:63;;8391:117;8547:2;8573:53;8618:7;8609:6;8598:9;8594:22;8573:53;:::i;:::-;8563:63;;8518:118;8675:2;8701:53;8746:7;8737:6;8726:9;8722:22;8701:53;:::i;:::-;8691:63;;8646:118;8803:2;8829:53;8874:7;8865:6;8854:9;8850:22;8829:53;:::i;:::-;8819:63;;8774:118;8931:3;8958:51;9001:7;8992:6;8981:9;8977:22;8958:51;:::i;:::-;8948:61;;8902:117;9058:3;9085:53;9130:7;9121:6;9110:9;9106:22;9085:53;:::i;:::-;9075:63;;9029:119;9187:3;9214:53;9259:7;9250:6;9239:9;9235:22;9214:53;:::i;:::-;9204:63;;9158:119;8085:1199;;;;;;;;;;:::o;9290:474::-;9358:6;9366;9415:2;9403:9;9394:7;9390:23;9386:32;9383:119;;;9421:79;;:::i;:::-;9383:119;9541:1;9566:53;9611:7;9602:6;9591:9;9587:22;9566:53;:::i;:::-;9556:63;;9512:117;9668:2;9694:53;9739:7;9730:6;9719:9;9715:22;9694:53;:::i;:::-;9684:63;;9639:118;9290:474;;;;;:::o;9770:180::-;9818:77;9815:1;9808:88;9915:4;9912:1;9905:15;9939:4;9936:1;9929:15;9956:320;10000:6;10037:1;10031:4;10027:12;10017:22;;10084:1;10078:4;10074:12;10105:18;10095:81;;10161:4;10153:6;10149:17;10139:27;;10095:81;10223:2;10215:6;10212:14;10192:18;10189:38;10186:84;;10242:18;;:::i;:::-;10186:84;10007:269;9956:320;;;:::o;10282:143::-;10339:5;10370:6;10364:13;10355:22;;10386:33;10413:5;10386:33;:::i;:::-;10282:143;;;;:::o;10431:351::-;10501:6;10550:2;10538:9;10529:7;10525:23;10521:32;10518:119;;;10556:79;;:::i;:::-;10518:119;10676:1;10701:64;10757:7;10748:6;10737:9;10733:22;10701:64;:::i;:::-;10691:74;;10647:128;10431:351;;;;:::o;10788:180::-;10836:77;10833:1;10826:88;10933:4;10930:1;10923:15;10957:4;10954:1;10947:15;10974:194;11014:4;11034:20;11052:1;11034:20;:::i;:::-;11029:25;;11068:20;11086:1;11068:20;:::i;:::-;11063:25;;11112:1;11109;11105:9;11097:17;;11136:1;11130:4;11127:11;11124:37;;;11141:18;;:::i;:::-;11124:37;10974:194;;;;:::o;11174:234::-;11314:34;11310:1;11302:6;11298:14;11291:58;11383:17;11378:2;11370:6;11366:15;11359:42;11174:234;:::o;11414:366::-;11556:3;11577:67;11641:2;11636:3;11577:67;:::i;:::-;11570:74;;11653:93;11742:3;11653:93;:::i;:::-;11771:2;11766:3;11762:12;11755:19;;11414:366;;;:::o;11786:419::-;11952:4;11990:2;11979:9;11975:18;11967:26;;12039:9;12033:4;12029:20;12025:1;12014:9;12010:17;12003:47;12067:131;12193:4;12067:131;:::i;:::-;12059:139;;11786:419;;;:::o;12211:191::-;12251:3;12270:20;12288:1;12270:20;:::i;:::-;12265:25;;12304:20;12322:1;12304:20;:::i;:::-;12299:25;;12347:1;12344;12340:9;12333:16;;12368:3;12365:1;12362:10;12359:36;;;12375:18;;:::i;:::-;12359:36;12211:191;;;;:::o;12408:231::-;12548:34;12544:1;12536:6;12532:14;12525:58;12617:14;12612:2;12604:6;12600:15;12593:39;12408:231;:::o;12645:366::-;12787:3;12808:67;12872:2;12867:3;12808:67;:::i;:::-;12801:74;;12884:93;12973:3;12884:93;:::i;:::-;13002:2;12997:3;12993:12;12986:19;;12645:366;;;:::o;13017:419::-;13183:4;13221:2;13210:9;13206:18;13198:26;;13270:9;13264:4;13260:20;13256:1;13245:9;13241:17;13234:47;13298:131;13424:4;13298:131;:::i;:::-;13290:139;;13017:419;;;:::o;13442:230::-;13582:34;13578:1;13570:6;13566:14;13559:58;13651:13;13646:2;13638:6;13634:15;13627:38;13442:230;:::o;13678:366::-;13820:3;13841:67;13905:2;13900:3;13841:67;:::i;:::-;13834:74;;13917:93;14006:3;13917:93;:::i;:::-;14035:2;14030:3;14026:12;14019:19;;13678:366;;;:::o;14050:419::-;14216:4;14254:2;14243:9;14239:18;14231:26;;14303:9;14297:4;14293:20;14289:1;14278:9;14274:17;14267:47;14331:131;14457:4;14331:131;:::i;:::-;14323:139;;14050:419;;;:::o;14475:233::-;14615:34;14611:1;14603:6;14599:14;14592:58;14684:16;14679:2;14671:6;14667:15;14660:41;14475:233;:::o;14714:366::-;14856:3;14877:67;14941:2;14936:3;14877:67;:::i;:::-;14870:74;;14953:93;15042:3;14953:93;:::i;:::-;15071:2;15066:3;15062:12;15055:19;;14714:366;;;:::o;15086:419::-;15252:4;15290:2;15279:9;15275:18;15267:26;;15339:9;15333:4;15329:20;15325:1;15314:9;15310:17;15303:47;15367:131;15493:4;15367:131;:::i;:::-;15359:139;;15086:419;;;:::o;15511:85::-;15556:7;15585:5;15574:16;;15511:85;;;:::o;15602:60::-;15630:3;15651:5;15644:12;;15602:60;;;:::o;15668:154::-;15724:9;15757:59;15773:42;15782:32;15808:5;15782:32;:::i;:::-;15773:42;:::i;:::-;15757:59;:::i;:::-;15744:72;;15668:154;;;:::o;15828:143::-;15921:43;15958:5;15921:43;:::i;:::-;15916:3;15909:56;15828:143;;:::o;15977:234::-;16076:4;16114:2;16103:9;16099:18;16091:26;;16127:77;16201:1;16190:9;16186:17;16177:6;16127:77;:::i;:::-;15977:234;;;;:::o;16217:224::-;16357:34;16353:1;16345:6;16341:14;16334:58;16426:7;16421:2;16413:6;16409:15;16402:32;16217:224;:::o;16447:366::-;16589:3;16610:67;16674:2;16669:3;16610:67;:::i;:::-;16603:74;;16686:93;16775:3;16686:93;:::i;:::-;16804:2;16799:3;16795:12;16788:19;;16447:366;;;:::o;16819:419::-;16985:4;17023:2;17012:9;17008:18;17000:26;;17072:9;17066:4;17062:20;17058:1;17047:9;17043:17;17036:47;17100:131;17226:4;17100:131;:::i;:::-;17092:139;;16819:419;;;:::o;17244:179::-;17384:31;17380:1;17372:6;17368:14;17361:55;17244:179;:::o;17429:366::-;17571:3;17592:67;17656:2;17651:3;17592:67;:::i;:::-;17585:74;;17668:93;17757:3;17668:93;:::i;:::-;17786:2;17781:3;17777:12;17770:19;;17429:366;;;:::o;17801:419::-;17967:4;18005:2;17994:9;17990:18;17982:26;;18054:9;18048:4;18044:20;18040:1;18029:9;18025:17;18018:47;18082:131;18208:4;18082:131;:::i;:::-;18074:139;;17801:419;;;:::o;18226:775::-;18459:4;18497:3;18486:9;18482:19;18474:27;;18511:71;18579:1;18568:9;18564:17;18555:6;18511:71;:::i;:::-;18592:72;18660:2;18649:9;18645:18;18636:6;18592:72;:::i;:::-;18674;18742:2;18731:9;18727:18;18718:6;18674:72;:::i;:::-;18756;18824:2;18813:9;18809:18;18800:6;18756:72;:::i;:::-;18838:73;18906:3;18895:9;18891:19;18882:6;18838:73;:::i;:::-;18921;18989:3;18978:9;18974:19;18965:6;18921:73;:::i;:::-;18226:775;;;;;;;;;:::o;19007:180::-;19147:32;19143:1;19135:6;19131:14;19124:56;19007:180;:::o;19193:366::-;19335:3;19356:67;19420:2;19415:3;19356:67;:::i;:::-;19349:74;;19432:93;19521:3;19432:93;:::i;:::-;19550:2;19545:3;19541:12;19534:19;;19193:366;;;:::o;19565:419::-;19731:4;19769:2;19758:9;19754:18;19746:26;;19818:9;19812:4;19808:20;19804:1;19793:9;19789:17;19782:47;19846:131;19972:4;19846:131;:::i;:::-;19838:139;;19565:419;;;:::o;19990:233::-;20029:3;20052:24;20070:5;20052:24;:::i;:::-;20043:33;;20098:66;20091:5;20088:77;20085:103;;20168:18;;:::i;:::-;20085:103;20215:1;20208:5;20204:13;20197:20;;19990:233;;;:::o;20229:223::-;20369:34;20365:1;20357:6;20353:14;20346:58;20438:6;20433:2;20425:6;20421:15;20414:31;20229:223;:::o;20458:366::-;20600:3;20621:67;20685:2;20680:3;20621:67;:::i;:::-;20614:74;;20697:93;20786:3;20697:93;:::i;:::-;20815:2;20810:3;20806:12;20799:19;;20458:366;;;:::o;20830:419::-;20996:4;21034:2;21023:9;21019:18;21011:26;;21083:9;21077:4;21073:20;21069:1;21058:9;21054:17;21047:47;21111:131;21237:4;21111:131;:::i;:::-;21103:139;;20830:419;;;:::o;21255:221::-;21395:34;21391:1;21383:6;21379:14;21372:58;21464:4;21459:2;21451:6;21447:15;21440:29;21255:221;:::o;21482:366::-;21624:3;21645:67;21709:2;21704:3;21645:67;:::i;:::-;21638:74;;21721:93;21810:3;21721:93;:::i;:::-;21839:2;21834:3;21830:12;21823:19;;21482:366;;;:::o;21854:419::-;22020:4;22058:2;22047:9;22043:18;22035:26;;22107:9;22101:4;22097:20;22093:1;22082:9;22078:17;22071:47;22135:131;22261:4;22135:131;:::i;:::-;22127:139;;21854:419;;;:::o;22279:179::-;22419:31;22415:1;22407:6;22403:14;22396:55;22279:179;:::o;22464:366::-;22606:3;22627:67;22691:2;22686:3;22627:67;:::i;:::-;22620:74;;22703:93;22792:3;22703:93;:::i;:::-;22821:2;22816:3;22812:12;22805:19;;22464:366;;;:::o;22836:419::-;23002:4;23040:2;23029:9;23025:18;23017:26;;23089:9;23083:4;23079:20;23075:1;23064:9;23060:17;23053:47;23117:131;23243:4;23117:131;:::i;:::-;23109:139;;22836:419;;;:::o;23261:224::-;23401:34;23397:1;23389:6;23385:14;23378:58;23470:7;23465:2;23457:6;23453:15;23446:32;23261:224;:::o;23491:366::-;23633:3;23654:67;23718:2;23713:3;23654:67;:::i;:::-;23647:74;;23730:93;23819:3;23730:93;:::i;:::-;23848:2;23843:3;23839:12;23832:19;;23491:366;;;:::o;23863:419::-;24029:4;24067:2;24056:9;24052:18;24044:26;;24116:9;24110:4;24106:20;24102:1;24091:9;24087:17;24080:47;24144:131;24270:4;24144:131;:::i;:::-;24136:139;;23863:419;;;:::o;24288:222::-;24428:34;24424:1;24416:6;24412:14;24405:58;24497:5;24492:2;24484:6;24480:15;24473:30;24288:222;:::o;24516:366::-;24658:3;24679:67;24743:2;24738:3;24679:67;:::i;:::-;24672:74;;24755:93;24844:3;24755:93;:::i;:::-;24873:2;24868:3;24864:12;24857:19;;24516:366;;;:::o;24888:419::-;25054:4;25092:2;25081:9;25077:18;25069:26;;25141:9;25135:4;25131:20;25127:1;25116:9;25112:17;25105:47;25169:131;25295:4;25169:131;:::i;:::-;25161:139;;24888:419;;;:::o;25313:225::-;25453:34;25449:1;25441:6;25437:14;25430:58;25522:8;25517:2;25509:6;25505:15;25498:33;25313:225;:::o;25544:366::-;25686:3;25707:67;25771:2;25766:3;25707:67;:::i;:::-;25700:74;;25783:93;25872:3;25783:93;:::i;:::-;25901:2;25896:3;25892:12;25885:19;;25544:366;;;:::o;25916:419::-;26082:4;26120:2;26109:9;26105:18;26097:26;;26169:9;26163:4;26159:20;26155:1;26144:9;26140:17;26133:47;26197:131;26323:4;26197:131;:::i;:::-;26189:139;;25916:419;;;:::o;26341:181::-;26481:33;26477:1;26469:6;26465:14;26458:57;26341:181;:::o;26528:366::-;26670:3;26691:67;26755:2;26750:3;26691:67;:::i;:::-;26684:74;;26767:93;26856:3;26767:93;:::i;:::-;26885:2;26880:3;26876:12;26869:19;;26528:366;;;:::o;26900:419::-;27066:4;27104:2;27093:9;27089:18;27081:26;;27153:9;27147:4;27143:20;27139:1;27128:9;27124:17;27117:47;27181:131;27307:4;27181:131;:::i;:::-;27173:139;;26900:419;;;:::o;27325:220::-;27465:34;27461:1;27453:6;27449:14;27442:58;27534:3;27529:2;27521:6;27517:15;27510:28;27325:220;:::o;27551:366::-;27693:3;27714:67;27778:2;27773:3;27714:67;:::i;:::-;27707:74;;27790:93;27879:3;27790:93;:::i;:::-;27908:2;27903:3;27899:12;27892:19;;27551:366;;;:::o;27923:419::-;28089:4;28127:2;28116:9;28112:18;28104:26;;28176:9;28170:4;28166:20;28162:1;28151:9;28147:17;28140:47;28204:131;28330:4;28204:131;:::i;:::-;28196:139;;27923:419;;;:::o;28348:221::-;28488:34;28484:1;28476:6;28472:14;28465:58;28557:4;28552:2;28544:6;28540:15;28533:29;28348:221;:::o;28575:366::-;28717:3;28738:67;28802:2;28797:3;28738:67;:::i;:::-;28731:74;;28814:93;28903:3;28814:93;:::i;:::-;28932:2;28927:3;28923:12;28916:19;;28575:366;;;:::o;28947:419::-;29113:4;29151:2;29140:9;29136:18;29128:26;;29200:9;29194:4;29190:20;29186:1;29175:9;29171:17;29164:47;29228:131;29354:4;29228:131;:::i;:::-;29220:139;;28947:419;;;:::o;29372:148::-;29474:11;29511:3;29496:18;;29372:148;;;;:::o;29526:173::-;29666:25;29662:1;29654:6;29650:14;29643:49;29526:173;:::o;29705:402::-;29865:3;29886:85;29968:2;29963:3;29886:85;:::i;:::-;29879:92;;29980:93;30069:3;29980:93;:::i;:::-;30098:2;30093:3;30089:12;30082:19;;29705:402;;;:::o;30113:390::-;30219:3;30247:39;30280:5;30247:39;:::i;:::-;30302:89;30384:6;30379:3;30302:89;:::i;:::-;30295:96;;30400:65;30458:6;30453:3;30446:4;30439:5;30435:16;30400:65;:::i;:::-;30490:6;30485:3;30481:16;30474:23;;30223:280;30113:390;;;;:::o;30509:167::-;30649:19;30645:1;30637:6;30633:14;30626:43;30509:167;:::o;30682:402::-;30842:3;30863:85;30945:2;30940:3;30863:85;:::i;:::-;30856:92;;30957:93;31046:3;30957:93;:::i;:::-;31075:2;31070:3;31066:12;31059:19;;30682:402;;;:::o;31090:967::-;31472:3;31494:148;31638:3;31494:148;:::i;:::-;31487:155;;31659:95;31750:3;31741:6;31659:95;:::i;:::-;31652:102;;31771:148;31915:3;31771:148;:::i;:::-;31764:155;;31936:95;32027:3;32018:6;31936:95;:::i;:::-;31929:102;;32048:3;32041:10;;31090:967;;;;;:::o;32063:664::-;32268:4;32306:3;32295:9;32291:19;32283:27;;32320:71;32388:1;32377:9;32373:17;32364:6;32320:71;:::i;:::-;32401:72;32469:2;32458:9;32454:18;32445:6;32401:72;:::i;:::-;32483;32551:2;32540:9;32536:18;32527:6;32483:72;:::i;:::-;32565;32633:2;32622:9;32618:18;32609:6;32565:72;:::i;:::-;32647:73;32715:3;32704:9;32700:19;32691:6;32647:73;:::i;:::-;32063:664;;;;;;;;:::o;32733:170::-;32873:22;32869:1;32861:6;32857:14;32850:46;32733:170;:::o;32909:366::-;33051:3;33072:67;33136:2;33131:3;33072:67;:::i;:::-;33065:74;;33148:93;33237:3;33148:93;:::i;:::-;33266:2;33261:3;33257:12;33250:19;;32909:366;;;:::o;33281:419::-;33447:4;33485:2;33474:9;33470:18;33462:26;;33534:9;33528:4;33524:20;33520:1;33509:9;33505:17;33498:47;33562:131;33688:4;33562:131;:::i;:::-;33554:139;;33281:419;;;:::o;33706:180::-;33754:77;33751:1;33744:88;33851:4;33848:1;33841:15;33875:4;33872:1;33865:15;33892:141;33941:4;33964:3;33956:11;;33987:3;33984:1;33977:14;34021:4;34018:1;34008:18;34000:26;;33892:141;;;:::o;34039:93::-;34076:6;34123:2;34118;34111:5;34107:14;34103:23;34093:33;;34039:93;;;:::o;34138:107::-;34182:8;34232:5;34226:4;34222:16;34201:37;;34138:107;;;;:::o;34251:393::-;34320:6;34370:1;34358:10;34354:18;34393:97;34423:66;34412:9;34393:97;:::i;:::-;34511:39;34541:8;34530:9;34511:39;:::i;:::-;34499:51;;34583:4;34579:9;34572:5;34568:21;34559:30;;34632:4;34622:8;34618:19;34611:5;34608:30;34598:40;;34327:317;;34251:393;;;;;:::o;34650:142::-;34700:9;34733:53;34751:34;34760:24;34778:5;34760:24;:::i;:::-;34751:34;:::i;:::-;34733:53;:::i;:::-;34720:66;;34650:142;;;:::o;34798:75::-;34841:3;34862:5;34855:12;;34798:75;;;:::o;34879:269::-;34989:39;35020:7;34989:39;:::i;:::-;35050:91;35099:41;35123:16;35099:41;:::i;:::-;35091:6;35084:4;35078:11;35050:91;:::i;:::-;35044:4;35037:105;34955:193;34879:269;;;:::o;35154:73::-;35199:3;35154:73;:::o;35233:189::-;35310:32;;:::i;:::-;35351:65;35409:6;35401;35395:4;35351:65;:::i;:::-;35286:136;35233:189;;:::o;35428:186::-;35488:120;35505:3;35498:5;35495:14;35488:120;;;35559:39;35596:1;35589:5;35559:39;:::i;:::-;35532:1;35525:5;35521:13;35512:22;;35488:120;;;35428:186;;:::o;35620:543::-;35721:2;35716:3;35713:11;35710:446;;;35755:38;35787:5;35755:38;:::i;:::-;35839:29;35857:10;35839:29;:::i;:::-;35829:8;35825:44;36022:2;36010:10;36007:18;36004:49;;;36043:8;36028:23;;36004:49;36066:80;36122:22;36140:3;36122:22;:::i;:::-;36112:8;36108:37;36095:11;36066:80;:::i;:::-;35725:431;;35710:446;35620:543;;;:::o;36169:117::-;36223:8;36273:5;36267:4;36263:16;36242:37;;36169:117;;;;:::o;36292:169::-;36336:6;36369:51;36417:1;36413:6;36405:5;36402:1;36398:13;36369:51;:::i;:::-;36365:56;36450:4;36444;36440:15;36430:25;;36343:118;36292:169;;;;:::o;36466:295::-;36542:4;36688:29;36713:3;36707:4;36688:29;:::i;:::-;36680:37;;36750:3;36747:1;36743:11;36737:4;36734:21;36726:29;;36466:295;;;;:::o;36766:1395::-;36883:37;36916:3;36883:37;:::i;:::-;36985:18;36977:6;36974:30;36971:56;;;37007:18;;:::i;:::-;36971:56;37051:38;37083:4;37077:11;37051:38;:::i;:::-;37136:67;37196:6;37188;37182:4;37136:67;:::i;:::-;37230:1;37254:4;37241:17;;37286:2;37278:6;37275:14;37303:1;37298:618;;;;37960:1;37977:6;37974:77;;;38026:9;38021:3;38017:19;38011:26;38002:35;;37974:77;38077:67;38137:6;38130:5;38077:67;:::i;:::-;38071:4;38064:81;37933:222;37268:887;;37298:618;37350:4;37346:9;37338:6;37334:22;37384:37;37416:4;37384:37;:::i;:::-;37443:1;37457:208;37471:7;37468:1;37465:14;37457:208;;;37550:9;37545:3;37541:19;37535:26;37527:6;37520:42;37601:1;37593:6;37589:14;37579:24;;37648:2;37637:9;37633:18;37620:31;;37494:4;37491:1;37487:12;37482:17;;37457:208;;;37693:6;37684:7;37681:19;37678:179;;;37751:9;37746:3;37742:19;37736:26;37794:48;37836:4;37828:6;37824:17;37813:9;37794:48;:::i;:::-;37786:6;37779:64;37701:156;37678:179;37903:1;37899;37891:6;37887:14;37883:22;37877:4;37870:36;37305:611;;;37268:887;;36858:1303;;;36766:1395;;:::o;38167:166::-;38307:18;38303:1;38295:6;38291:14;38284:42;38167:166;:::o;38339:366::-;38481:3;38502:67;38566:2;38561:3;38502:67;:::i;:::-;38495:74;;38578:93;38667:3;38578:93;:::i;:::-;38696:2;38691:3;38687:12;38680:19;;38339:366;;;:::o;38711:419::-;38877:4;38915:2;38904:9;38900:18;38892:26;;38964:9;38958:4;38954:20;38950:1;38939:9;38935:17;38928:47;38992:131;39118:4;38992:131;:::i;:::-;38984:139;;38711:419;;;:::o;39136:214::-;39276:66;39272:1;39264:6;39260:14;39253:90;39136:214;:::o;39356:400::-;39516:3;39537:84;39619:1;39614:3;39537:84;:::i;:::-;39530:91;;39630:93;39719:3;39630:93;:::i;:::-;39748:1;39743:3;39739:11;39732:18;;39356:400;;;:::o;39762:79::-;39801:7;39830:5;39819:16;;39762:79;;;:::o;39847:157::-;39952:45;39972:24;39990:5;39972:24;:::i;:::-;39952:45;:::i;:::-;39947:3;39940:58;39847:157;;:::o;40010:663::-;40251:3;40273:148;40417:3;40273:148;:::i;:::-;40266:155;;40431:75;40502:3;40493:6;40431:75;:::i;:::-;40531:2;40526:3;40522:12;40515:19;;40544:75;40615:3;40606:6;40544:75;:::i;:::-;40644:2;40639:3;40635:12;40628:19;;40664:3;40657:10;;40010:663;;;;;:::o;40679:545::-;40852:4;40890:3;40879:9;40875:19;40867:27;;40904:71;40972:1;40961:9;40957:17;40948:6;40904:71;:::i;:::-;40985:68;41049:2;41038:9;41034:18;41025:6;40985:68;:::i;:::-;41063:72;41131:2;41120:9;41116:18;41107:6;41063:72;:::i;:::-;41145;41213:2;41202:9;41198:18;41189:6;41145:72;:::i;:::-;40679:545;;;;;;;:::o;41230:180::-;41278:77;41275:1;41268:88;41375:4;41372:1;41365:15;41399:4;41396:1;41389:15;41416:174;41556:26;41552:1;41544:6;41540:14;41533:50;41416:174;:::o;41596:366::-;41738:3;41759:67;41823:2;41818:3;41759:67;:::i;:::-;41752:74;;41835:93;41924:3;41835:93;:::i;:::-;41953:2;41948:3;41944:12;41937:19;;41596:366;;;:::o;41968:419::-;42134:4;42172:2;42161:9;42157:18;42149:26;;42221:9;42215:4;42211:20;42207:1;42196:9;42192:17;42185:47;42249:131;42375:4;42249:131;:::i;:::-;42241:139;;41968:419;;;:::o;42393:181::-;42533:33;42529:1;42521:6;42517:14;42510:57;42393:181;:::o;42580:366::-;42722:3;42743:67;42807:2;42802:3;42743:67;:::i;:::-;42736:74;;42819:93;42908:3;42819:93;:::i;:::-;42937:2;42932:3;42928:12;42921:19;;42580:366;;;:::o;42952:419::-;43118:4;43156:2;43145:9;43141:18;43133:26;;43205:9;43199:4;43195:20;43191:1;43180:9;43176:17;43169:47;43233:131;43359:4;43233:131;:::i;:::-;43225:139;;42952:419;;;:::o;43377:221::-;43517:34;43513:1;43505:6;43501:14;43494:58;43586:4;43581:2;43573:6;43569:15;43562:29;43377:221;:::o;43604:366::-;43746:3;43767:67;43831:2;43826:3;43767:67;:::i;:::-;43760:74;;43843:93;43932:3;43843:93;:::i;:::-;43961:2;43956:3;43952:12;43945:19;;43604:366;;;:::o;43976:419::-;44142:4;44180:2;44169:9;44165:18;44157:26;;44229:9;44223:4;44219:20;44215:1;44204:9;44200:17;44193:47;44257:131;44383:4;44257:131;:::i;:::-;44249:139;;43976:419;;;:::o;44401:348::-;44441:7;44464:20;44482:1;44464:20;:::i;:::-;44459:25;;44498:20;44516:1;44498:20;:::i;:::-;44493:25;;44686:1;44618:66;44614:74;44611:1;44608:81;44603:1;44596:9;44589:17;44585:105;44582:131;;;44693:18;;:::i;:::-;44582:131;44741:1;44738;44734:9;44723:20;;44401:348;;;;:::o;44755:180::-;44803:77;44800:1;44793:88;44900:4;44897:1;44890:15;44924:4;44921:1;44914:15;44941:171;44980:3;45003:24;45021:5;45003:24;:::i;:::-;44994:33;;45049:4;45042:5;45039:15;45036:41;;45057:18;;:::i;:::-;45036:41;45104:1;45097:5;45093:13;45086:20;;44941:171;;;:::o;45118:182::-;45258:34;45254:1;45246:6;45242:14;45235:58;45118:182;:::o;45306:366::-;45448:3;45469:67;45533:2;45528:3;45469:67;:::i;:::-;45462:74;;45545:93;45634:3;45545:93;:::i;:::-;45663:2;45658:3;45654:12;45647:19;;45306:366;;;:::o;45678:419::-;45844:4;45882:2;45871:9;45867:18;45859:26;;45931:9;45925:4;45921:20;45917:1;45906:9;45902:17;45895:47;45959:131;46085:4;45959:131;:::i;:::-;45951:139;;45678:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"3527200","executionCost":"3958","totalCost":"3531158"},"external":{"DEFAULT_ADMIN_ROLE()":"380","DOMAIN_SEPARATOR()":"infinite","__BaseUpgradeablePausable_init(address)":"infinite","allowance(address,address)":"infinite","approve(address,uint256)":"infinite","balanceOf(address)":"2909","burnFrom(address,uint256)":"infinite","decimals()":"411","decreaseAllowance(address,uint256)":"infinite","getRoleAdmin(bytes32)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"3229","increaseAllowance(address,uint256)":"infinite","init(address,address)":"infinite","initialize()":"infinite","isAdmin()":"2881","mint(address,uint256)":"infinite","name()":"infinite","nonces(address)":"3002","pause()":"infinite","paused()":"2590","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","renounceRole(bytes32,address)":"infinite","revokeRole(bytes32,address)":"infinite","supportsInterface(bytes4)":"774","swapContractDAI()":"2626","symbol()":"infinite","totalSupply()":"2483","transfer(address,uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","unpause()":"infinite"}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","DOMAIN_SEPARATOR()":"3644e515","__BaseUpgradeablePausable_init(address)":"6e810b1a","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burnFrom(address,uint256)":"79cc6790","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","increaseAllowance(address,uint256)":"39509351","init(address,address)":"f09a4016","initialize()":"8129fc1c","isAdmin()":"b6db75a0","mint(address,uint256)":"40c10f19","name()":"06fdde03","nonces(address)":"7ecebe00","pause()":"8456cb59","paused()":"5c975abb","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7","swapContractDAI()":"276ec86a","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","unpause()":"3f4ba83a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BaseUpgradeablePausable__ZeroAddressError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20__ImmutableChangesError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20__InsufficientBalanceError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20__SameAdressTransferError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressSwapDAI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressCFA\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapContractDAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"anshik@safezen.finance\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ERC20__ImmutableChangesError()\":[{\"notice\":\"Custom Error Codes\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"Report any bug or issues at:\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/token/SZTDAIERC20.sol\":\"SZTDAI\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfe1053f3a6ee4527cde96c8152b8b1dbb98774639a64e819087bc80e618d7f7f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3017aded62c4a2b9707f5f06f92934e592c1c9b6f384b91b51340a6d5f841931\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"contracts/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./Constants.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nerror BaseUpgradeablePausable__ZeroAddressError();\\n\\ncontract BaseUpgradeablePausable is \\n    Initializable, \\n    PausableUpgradeable, \\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable \\n{\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin(), \\\"Must have admin role to perform this action.\\\");\\n        _;\\n    }\\n\\n    function __BaseUpgradeablePausable_init(address owner) public onlyInitializing() {\\n        if(owner == address(0)) {\\n            revert BaseUpgradeablePausable__ZeroAddressError();\\n        }\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        _grantRole(Constants.getAdminRole(), owner);\\n        _grantRole(Constants.getPauserRole(), owner);\\n\\n        _setRoleAdmin(Constants.getPauserRole(), Constants.getAdminRole());\\n        _setRoleAdmin(Constants.getAdminRole(), Constants.getAdminRole());\\n    }\\n\\n    function isAdmin() public view returns (bool) {\\n        return hasRole(Constants.getAdminRole(), _msgSender());\\n    }\\n\\n  \\n}\",\"keccak256\":\"0x29b172c9fffe9bc60c702a071bae35f301b1b5c3824f0ca44b3d2dcabbda5af9\",\"license\":\"MIT\"},\"contracts/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nlibrary Constants {\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    function getAdminRole() internal pure returns (bytes32) {\\n        return ADMIN_ROLE;\\n    }\\n\\n    function getPauserRole() internal pure returns (bytes32) {\\n        return PAUSER_ROLE;\\n    }\\n}\",\"keccak256\":\"0xeae9d870bc2ace9284ae575eb6c534c177ff6f4a60b98f10a0a8156f19f760cf\",\"license\":\"BUSL-1.1\"},\"contracts/core/token/SZTDAIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/// @title: sztDAI ERC20 Token Contract\\n/// @author: Anshik Bansal <anshik@safezen.finance>\\n\\n/// Importing required interfaces\\nimport \\\"./../../interfaces/ICFA.sol\\\";\\nimport \\\"./../../interfaces/IERC20Extended.sol\\\";\\n\\n/// Importing required contracts\\nimport \\\"./../../BaseUpgradeablePausable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\\\";\\n\\n/// Custom Error Codes\\nerror ERC20__ImmutableChangesError();\\nerror ERC20__SameAdressTransferError();\\nerror ERC20__InsufficientBalanceError();\\n\\n/// Report any bug or issues at:\\n/// @custom:security-contact anshik@safezen.finance\\n\\ncontract SZTDAI is ERC20Upgradeable, IERC20Extended, ERC20PermitUpgradeable, BaseUpgradeablePausable {\\n    uint256 private _initVersion;\\n    address public swapContractDAI;\\n    ICFA private _contractFlowAgreement;\\n\\n    modifier onlyPermissioned() {\\n        require(\\n            (_msgSender() == swapContractDAI) || \\n            (_msgSender() == address(_contractFlowAgreement))\\n        );\\n        _;\\n    }\\n\\n    function initialize() external initializer {\\n        __ERC20_init(\\\"SZT DAI Stream Token\\\", \\\"SZTDAI\\\");\\n        __ERC20Permit_init(\\\"SZTDAI\\\");\\n        __BaseUpgradeablePausable_init(_msgSender());\\n    }\\n\\n    function init(\\n        address _addressSwapDAI,\\n        address _addressCFA\\n    ) external onlyAdmin {\\n        if (_initVersion > 0) {\\n            revert ERC20__ImmutableChangesError();\\n        }\\n        ++_initVersion;\\n        swapContractDAI = _addressSwapDAI;\\n        _contractFlowAgreement = ICFA(_addressCFA);\\n    }\\n\\n    function pause() external onlyAdmin {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyAdmin {\\n        _unpause();\\n    }\\n    \\n    //// check onlyPermissioned if needed or not\\n    function mint(address to, uint256 amount) external onlyPermissioned override returns(bool) {\\n        _mint(to, amount);\\n        return true;\\n    }\\n\\n    function burnFrom(address account, uint256 amount) external override returns(bool) {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n        return true;\\n    }\\n\\n    function transfer(\\n        address to, \\n        uint256 amount\\n    ) public override(ERC20Upgradeable, IERC20Upgradeable) returns(bool) {\\n        address owner = _msgSender();\\n        uint256 userCurrentBalance = balanceOf(_msgSender());\\n        uint256 userPremiumCost = _contractFlowAgreement.getGlobalUserInsurancePremiumCost(_msgSender());\\n        if ((userCurrentBalance - userPremiumCost) < amount) {\\n            revert ERC20__InsufficientBalanceError();\\n        }\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from, \\n        address to, \\n        uint256 amount\\n    ) public override(ERC20Upgradeable, IERC20Upgradeable) returns(bool) {\\n        if (to == from) {\\n            revert ERC20__SameAdressTransferError();\\n        }\\n        uint256 userCurrentBalance = balanceOf(from);\\n        uint256 userPremiumCost = _contractFlowAgreement.getGlobalUserInsurancePremiumCost(from);\\n        if ((userCurrentBalance - userPremiumCost) < amount) {\\n            revert ERC20__InsufficientBalanceError();\\n        }\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n}\",\"keccak256\":\"0x6ff77615af5eb575a57e7c4d2143c6a3d975bc789b3a046b38ee3a028eb93216\",\"license\":\"MIT\"},\"contracts/interfaces/ICFA.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n\\ninterface ICFA {\\n    // CFA Events\\n    event UpdatedMaxInsuredDays();\\n    event UpdatedStartWaitingTime();\\n    event UpdatedMinimumInsurancePeriod();\\n\\n    // CFA Custom Error Code\\n    error CFA__ImmutableChangesError();\\n    error CFA__TransactionFailedError();\\n    error CFA__InactiveInsuranceError();\\n    error CFA__SubCategoryNotActiveError();\\n    error CFA__ActiveInsuranceExistError();\\n    error CFA__InsuranceCoverNotAvailableError();\\n    error CFA__NotEvenMinimumInsurancePeriodAmount();\\n\\n    function addInsuranceAmount(\\n        uint256 insuredAmount, \\n        uint256 categoryID, \\n        uint256 subCategoryID,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) external returns(bool);\\n\\n    function minusInsuranceAmount(\\n        uint256 insuredAmount, \\n        uint256 categoryID, \\n        uint256 subCategoryID,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s,\\n        bool closeStream\\n    ) external returns(bool);\\n\\n    function findActivePremiumCost(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 insuranceCount\\n    ) external view returns(uint256[] memory);\\n\\n    function calculateTotalFlowMade(\\n        address userAddress, \\n        uint256 categoryID\\n    ) external view returns(uint256);  \\n\\n    function calculateTotalFlowMade(\\n        address userAddress\\n    ) external view returns(uint256); \\n\\n    function getUserInsuranceValidTillInfo(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) external view returns(uint256);\\n\\n    function getUserInsuranceStatus(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) external view returns(bool);\\n\\n    function getUserInsuranceInfo(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) external view returns(uint256, uint256, uint256, uint256, uint256, bool);\\n    \\n    function getGlobalUserInsuranceInfo(\\n        address _userAddress\\n    ) external view returns (uint256, uint256);\\n\\n    function getGlobalUserInsurancePremiumCost(\\n        address userAddress\\n    ) external view returns(uint256);\\n}\",\"keccak256\":\"0x104c6cb8a06b415043bc44feaca5daac335a908da1cbabcda5435a26ddda0476\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional mint and burnFrom functions from the ERC20 standard.\\n */\\ninterface IERC20Extended is IERC20Upgradeable {\\n    \\n    function mint(address to, uint256 amount) external returns(bool);\\n\\n    function burnFrom(address account, uint256 amount) external returns(bool);\\n    \\n}\",\"keccak256\":\"0x77d287ad89310c9c5b7acef41830a116628435e9f209b78088282a3e9d683213\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":415,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":418,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2325,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":796,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"_balances","offset":0,"slot":"51","type":"t_mapping(t_address,t_uint256)"},{"astId":802,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"_allowances","offset":0,"slot":"52","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":804,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"_totalSupply","offset":0,"slot":"53","type":"t_uint256"},{"astId":806,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"_name","offset":0,"slot":"54","type":"t_string_storage"},{"astId":808,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"_symbol","offset":0,"slot":"55","type":"t_string_storage"},{"astId":1388,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"__gap","offset":0,"slot":"56","type":"t_array(t_uint256)45_storage"},{"astId":2945,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"_HASHED_NAME","offset":0,"slot":"101","type":"t_bytes32"},{"astId":2947,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"_HASHED_VERSION","offset":0,"slot":"102","type":"t_bytes32"},{"astId":3085,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"__gap","offset":0,"slot":"103","type":"t_array(t_uint256)50_storage"},{"astId":1518,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"_nonces","offset":0,"slot":"153","type":"t_mapping(t_address,t_struct(Counter)2332_storage)"},{"astId":1526,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"_PERMIT_TYPEHASH_DEPRECATED_SLOT","offset":0,"slot":"154","type":"t_bytes32"},{"astId":1682,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"__gap","offset":0,"slot":"155","type":"t_array(t_uint256)49_storage"},{"astId":598,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"_paused","offset":0,"slot":"204","type":"t_bool"},{"astId":703,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"__gap","offset":0,"slot":"205","type":"t_array(t_uint256)49_storage"},{"astId":3129,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"__gap","offset":0,"slot":"254","type":"t_array(t_uint256)50_storage"},{"astId":39,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"_roles","offset":0,"slot":"304","type":"t_mapping(t_bytes32,t_struct(RoleData)34_storage)"},{"astId":334,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"__gap","offset":0,"slot":"305","type":"t_array(t_uint256)49_storage"},{"astId":718,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"_status","offset":0,"slot":"354","type":"t_uint256"},{"astId":776,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"__gap","offset":0,"slot":"355","type":"t_array(t_uint256)49_storage"},{"astId":5730,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"_initVersion","offset":0,"slot":"404","type":"t_uint256"},{"astId":5732,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"swapContractDAI","offset":0,"slot":"405","type":"t_address"},{"astId":5735,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"_contractFlowAgreement","offset":0,"slot":"406","type":"t_contract(ICFA)6135"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)45_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[45]","numberOfBytes":"1440"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(ICFA)6135":{"encoding":"inplace","label":"contract ICFA","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_struct(Counter)2332_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct CountersUpgradeable.Counter)","numberOfBytes":"32","value":"t_struct(Counter)2332_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_struct(RoleData)34_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)34_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Counter)2332_storage":{"encoding":"inplace","label":"struct CountersUpgradeable.Counter","members":[{"astId":2331,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_struct(RoleData)34_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":31,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":33,"contract":"contracts/core/token/SZTDAIERC20.sol:SZTDAI","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"errors":{"ERC20__ImmutableChangesError()":[{"notice":"Custom Error Codes"}]},"kind":"user","methods":{},"notice":"Report any bug or issues at:","version":1}}},"contracts/interfaces/ICFA.sol":{"ICFA":{"abi":[{"inputs":[],"name":"CFA__ActiveInsuranceExistError","type":"error"},{"inputs":[],"name":"CFA__ImmutableChangesError","type":"error"},{"inputs":[],"name":"CFA__InactiveInsuranceError","type":"error"},{"inputs":[],"name":"CFA__InsuranceCoverNotAvailableError","type":"error"},{"inputs":[],"name":"CFA__NotEvenMinimumInsurancePeriodAmount","type":"error"},{"inputs":[],"name":"CFA__SubCategoryNotActiveError","type":"error"},{"inputs":[],"name":"CFA__TransactionFailedError","type":"error"},{"anonymous":false,"inputs":[],"name":"UpdatedMaxInsuredDays","type":"event"},{"anonymous":false,"inputs":[],"name":"UpdatedMinimumInsurancePeriod","type":"event"},{"anonymous":false,"inputs":[],"name":"UpdatedStartWaitingTime","type":"event"},{"inputs":[{"internalType":"uint256","name":"insuredAmount","type":"uint256"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"addInsuranceAmount","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"}],"name":"calculateTotalFlowMade","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"calculateTotalFlowMade","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"insuranceCount","type":"uint256"}],"name":"findActivePremiumCost","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"}],"name":"getGlobalUserInsuranceInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getGlobalUserInsurancePremiumCost","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"}],"name":"getUserInsuranceInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"}],"name":"getUserInsuranceStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"}],"name":"getUserInsuranceValidTillInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"insuredAmount","type":"uint256"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"},{"internalType":"bool","name":"closeStream","type":"bool"}],"name":"minusInsuranceAmount","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addInsuranceAmount(uint256,uint256,uint256,uint8,bytes32,bytes32)":"6e8847bd","calculateTotalFlowMade(address)":"cff5eede","calculateTotalFlowMade(address,uint256)":"4e94c048","findActivePremiumCost(address,uint256,uint256)":"1a5c8f28","getGlobalUserInsuranceInfo(address)":"ec249164","getGlobalUserInsurancePremiumCost(address)":"42f6b8a7","getUserInsuranceInfo(address,uint256,uint256)":"88295fb2","getUserInsuranceStatus(address,uint256,uint256)":"81280d2b","getUserInsuranceValidTillInfo(address,uint256,uint256)":"c392e850","minusInsuranceAmount(uint256,uint256,uint256,uint8,bytes32,bytes32,bool)":"642adc28"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CFA__ActiveInsuranceExistError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__ImmutableChangesError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__InactiveInsuranceError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__InsuranceCoverNotAvailableError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__NotEvenMinimumInsurancePeriodAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__SubCategoryNotActiveError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA__TransactionFailedError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdatedMaxInsuredDays\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdatedMinimumInsurancePeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdatedStartWaitingTime\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"insuredAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"addInsuranceAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"}],\"name\":\"calculateTotalFlowMade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"calculateTotalFlowMade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"insuranceCount\",\"type\":\"uint256\"}],\"name\":\"findActivePremiumCost\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getGlobalUserInsuranceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getGlobalUserInsurancePremiumCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"}],\"name\":\"getUserInsuranceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"}],\"name\":\"getUserInsuranceStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"}],\"name\":\"getUserInsuranceValidTillInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"insuredAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"closeStream\",\"type\":\"bool\"}],\"name\":\"minusInsuranceAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ICFA.sol\":\"ICFA\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ICFA.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n\\ninterface ICFA {\\n    // CFA Events\\n    event UpdatedMaxInsuredDays();\\n    event UpdatedStartWaitingTime();\\n    event UpdatedMinimumInsurancePeriod();\\n\\n    // CFA Custom Error Code\\n    error CFA__ImmutableChangesError();\\n    error CFA__TransactionFailedError();\\n    error CFA__InactiveInsuranceError();\\n    error CFA__SubCategoryNotActiveError();\\n    error CFA__ActiveInsuranceExistError();\\n    error CFA__InsuranceCoverNotAvailableError();\\n    error CFA__NotEvenMinimumInsurancePeriodAmount();\\n\\n    function addInsuranceAmount(\\n        uint256 insuredAmount, \\n        uint256 categoryID, \\n        uint256 subCategoryID,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) external returns(bool);\\n\\n    function minusInsuranceAmount(\\n        uint256 insuredAmount, \\n        uint256 categoryID, \\n        uint256 subCategoryID,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s,\\n        bool closeStream\\n    ) external returns(bool);\\n\\n    function findActivePremiumCost(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 insuranceCount\\n    ) external view returns(uint256[] memory);\\n\\n    function calculateTotalFlowMade(\\n        address userAddress, \\n        uint256 categoryID\\n    ) external view returns(uint256);  \\n\\n    function calculateTotalFlowMade(\\n        address userAddress\\n    ) external view returns(uint256); \\n\\n    function getUserInsuranceValidTillInfo(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) external view returns(uint256);\\n\\n    function getUserInsuranceStatus(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) external view returns(bool);\\n\\n    function getUserInsuranceInfo(\\n        address userAddress, \\n        uint256 categoryID, \\n        uint256 subCategoryID\\n    ) external view returns(uint256, uint256, uint256, uint256, uint256, bool);\\n    \\n    function getGlobalUserInsuranceInfo(\\n        address _userAddress\\n    ) external view returns (uint256, uint256);\\n\\n    function getGlobalUserInsurancePremiumCost(\\n        address userAddress\\n    ) external view returns(uint256);\\n}\",\"keccak256\":\"0x104c6cb8a06b415043bc44feaca5daac335a908da1cbabcda5435a26ddda0476\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IERC20Extended.sol":{"IERC20Extended":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional mint and burnFrom functions from the ERC20 standard.","kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burnFrom(address,uint256)":"79cc6790","mint(address,uint256)":"40c10f19","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional mint and burnFrom functions from the ERC20 standard.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IERC20Extended.sol\":\"IERC20Extended\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional mint and burnFrom functions from the ERC20 standard.\\n */\\ninterface IERC20Extended is IERC20Upgradeable {\\n    \\n    function mint(address to, uint256 amount) external returns(bool);\\n\\n    function burnFrom(address account, uint256 amount) external returns(bool);\\n    \\n}\",\"keccak256\":\"0x77d287ad89310c9c5b7acef41830a116628435e9f209b78088282a3e9d683213\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IInsuranceRegistry.sol":{"IInsuranceRegistry":{"abi":[{"inputs":[],"name":"InsuranceRegistry__ImmutableChangesError","type":"error"},{"inputs":[],"name":"InsuranceRegistry__NotEnoughLiquidityError","type":"error"},{"inputs":[],"name":"InsuranceRegistry__TransactionFailedError","type":"error"},{"anonymous":false,"inputs":[],"name":"UpdatedClaimStakedValue","type":"event"},{"inputs":[{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID_","type":"uint256"},{"internalType":"uint256","name":"coverageAmount","type":"uint256"},{"internalType":"uint256","name":"incomingFlowRate","type":"uint256"}],"name":"addCoverageOffered","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID_","type":"uint256"},{"internalType":"uint256","name":"liquiditySupplied","type":"uint256"}],"name":"addInsuranceLiquidity","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID_","type":"uint256"}],"name":"calculateUnderwriterBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"stakedTokenID","type":"uint256"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID_","type":"uint256"}],"name":"claimAdded","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getLatestCategoryID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"categoryID","type":"uint256"}],"name":"getLatestSubCategoryID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID_","type":"uint256"}],"name":"getStreamFlowRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"categoryID","type":"uint256"}],"name":"getVersionID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"insuredAmount","type":"uint256"},{"internalType":"uint256","name":"subCategoryID_","type":"uint256"}],"name":"ifEnoughLiquidity","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID_","type":"uint256"},{"internalType":"uint256","name":"coverageAmount","type":"uint256"},{"internalType":"uint256","name":"incomingFlowRate","type":"uint256"}],"name":"removeCoverageOffered","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID_","type":"uint256"},{"internalType":"uint256","name":"liquiditySupplied","type":"uint256"}],"name":"removeInsuranceLiquidity","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"custom:security-contact":"anshik@safezen.finance","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addCoverageOffered(uint256,uint256,uint256,uint256)":"d9895c70","addInsuranceLiquidity(uint256,uint256,uint256)":"6ad08f05","calculateUnderwriterBalance(uint256,uint256)":"cf3f0fc0","claimAdded(uint256,uint256,uint256)":"b9e19fe1","getLatestCategoryID()":"e1d01098","getLatestSubCategoryID(uint256)":"3bf4c082","getStreamFlowRate(uint256,uint256)":"5952a8c6","getVersionID(uint256)":"6c12b868","ifEnoughLiquidity(uint256,uint256,uint256)":"5657f79d","removeCoverageOffered(uint256,uint256,uint256,uint256)":"26a6e9eb","removeInsuranceLiquidity(uint256,uint256,uint256)":"c296d870"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InsuranceRegistry__ImmutableChangesError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsuranceRegistry__NotEnoughLiquidityError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsuranceRegistry__TransactionFailedError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdatedClaimStakedValue\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coverageAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incomingFlowRate\",\"type\":\"uint256\"}],\"name\":\"addCoverageOffered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquiditySupplied\",\"type\":\"uint256\"}],\"name\":\"addInsuranceLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID_\",\"type\":\"uint256\"}],\"name\":\"calculateUnderwriterBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID_\",\"type\":\"uint256\"}],\"name\":\"claimAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestCategoryID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"}],\"name\":\"getLatestSubCategoryID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID_\",\"type\":\"uint256\"}],\"name\":\"getStreamFlowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"}],\"name\":\"getVersionID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"insuredAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID_\",\"type\":\"uint256\"}],\"name\":\"ifEnoughLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coverageAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incomingFlowRate\",\"type\":\"uint256\"}],\"name\":\"removeCoverageOffered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquiditySupplied\",\"type\":\"uint256\"}],\"name\":\"removeInsuranceLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"anshik@safezen.finance\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Report any bug or issues at:\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IInsuranceRegistry.sol\":\"IInsuranceRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IInsuranceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// Report any bug or issues at:\\n/// @custom:security-contact anshik@safezen.finance\\ninterface IInsuranceRegistry {\\n\\n    error InsuranceRegistry__ImmutableChangesError();\\n    error InsuranceRegistry__TransactionFailedError();\\n    error InsuranceRegistry__NotEnoughLiquidityError();\\n\\n    event UpdatedClaimStakedValue();\\n\\n    function addInsuranceLiquidity(\\n        uint256 categoryID,\\n        uint256 subCategoryID_,\\n        uint256 liquiditySupplied\\n    ) external returns(bool);\\n\\n    function removeInsuranceLiquidity(\\n        uint256 categoryID,\\n        uint256 subCategoryID_, \\n        uint256 liquiditySupplied\\n    ) external returns(bool);\\n\\n    function addCoverageOffered(\\n        uint256 categoryID,\\n        uint256 subCategoryID_, \\n        uint256 coverageAmount,\\n        uint256 incomingFlowRate\\n    ) external returns(bool);\\n\\n    function removeCoverageOffered(\\n        uint256 categoryID,\\n        uint256 subCategoryID_, \\n        uint256 coverageAmount, \\n        uint256 incomingFlowRate\\n    ) external returns(bool);\\n\\n    function claimAdded(\\n        uint256 stakedTokenID, \\n        uint256 categoryID, \\n        uint256 subCategoryID_\\n    ) external returns(bool);\\n\\n    function getVersionID(uint256 categoryID) external view returns(uint256);\\n\\n    function calculateUnderwriterBalance(\\n        uint256 categoryID,\\n        uint256 subCategoryID_\\n    ) external view returns(uint256);\\n\\n    function getLatestCategoryID() external view returns(uint256);\\n\\n    function getLatestSubCategoryID(uint256 categoryID) external view returns(uint256);\\n\\n    function ifEnoughLiquidity(uint256 categoryID, uint256 insuredAmount, uint256 subCategoryID_) external view returns(bool);\\n\\n    function getStreamFlowRate(uint256 categoryID, uint256 subCategoryID_) external view returns(uint256);\\n}\",\"keccak256\":\"0xf9afae03190ba6aa377519032f994fc5670704353cf2818a416f4db9c2b14b9e\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Report any bug or issues at:","version":1}}}}}}